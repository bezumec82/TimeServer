
TimeServer_H757_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca28  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ec  0800ccc8  0800ccc8  0001ccc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d0b4  0800d0b4  0001d0b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d0bc  0800d0bc  0001d0bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d0c0  0800d0c0  0001d0c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000150  20000000  0800d0c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  20000150  0800d214  00020150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  200001b0  0800d274  000201b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005dc0  20000210  0800d2d4  00020210  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005fd0  0800d2d4  00025fd0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005f5ed  00000000  00000000  0002023e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000869b  00000000  00000000  0007f82b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002ab8  00000000  00000000  00087ec8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002aa8  00000000  00000000  0008a980  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0004c785  00000000  00000000  0008d428  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002d1d2  00000000  00000000  000d9bad  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001c9535  00000000  00000000  00106d7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  002d02b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008150  00000000  00000000  002d0330  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    000249a1  00000000  00000000  002d8480  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000210 	.word	0x20000210
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800ccb0 	.word	0x0800ccb0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	20000214 	.word	0x20000214
 80002dc:	0800ccb0 	.word	0x0800ccb0

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b972 	b.w	800068c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	4688      	mov	r8, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14b      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4615      	mov	r5, r2
 80003d2:	d967      	bls.n	80004a4 <__udivmoddi4+0xe4>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0720 	rsb	r7, r2, #32
 80003de:	fa01 f302 	lsl.w	r3, r1, r2
 80003e2:	fa20 f707 	lsr.w	r7, r0, r7
 80003e6:	4095      	lsls	r5, r2
 80003e8:	ea47 0803 	orr.w	r8, r7, r3
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003f8:	fa1f fc85 	uxth.w	ip, r5
 80003fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000400:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000404:	fb07 f10c 	mul.w	r1, r7, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000412:	f080 811b 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8118 	bls.w	800064c <__udivmoddi4+0x28c>
 800041c:	3f02      	subs	r7, #2
 800041e:	442b      	add	r3, r5
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fc0c 	mul.w	ip, r0, ip
 8000434:	45a4      	cmp	ip, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	192c      	adds	r4, r5, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800043e:	f080 8107 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000442:	45a4      	cmp	ip, r4
 8000444:	f240 8104 	bls.w	8000650 <__udivmoddi4+0x290>
 8000448:	3802      	subs	r0, #2
 800044a:	442c      	add	r4, r5
 800044c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000450:	eba4 040c 	sub.w	r4, r4, ip
 8000454:	2700      	movs	r7, #0
 8000456:	b11e      	cbz	r6, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c6 4300 	strd	r4, r3, [r6]
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0xbe>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80eb 	beq.w	8000646 <__udivmoddi4+0x286>
 8000470:	2700      	movs	r7, #0
 8000472:	e9c6 0100 	strd	r0, r1, [r6]
 8000476:	4638      	mov	r0, r7
 8000478:	4639      	mov	r1, r7
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f783 	clz	r7, r3
 8000482:	2f00      	cmp	r7, #0
 8000484:	d147      	bne.n	8000516 <__udivmoddi4+0x156>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0xd0>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80fa 	bhi.w	8000684 <__udivmoddi4+0x2c4>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0303 	sbc.w	r3, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	4698      	mov	r8, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d0e0      	beq.n	8000460 <__udivmoddi4+0xa0>
 800049e:	e9c6 4800 	strd	r4, r8, [r6]
 80004a2:	e7dd      	b.n	8000460 <__udivmoddi4+0xa0>
 80004a4:	b902      	cbnz	r2, 80004a8 <__udivmoddi4+0xe8>
 80004a6:	deff      	udf	#255	; 0xff
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 808f 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b2:	1b49      	subs	r1, r1, r5
 80004b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b8:	fa1f f885 	uxth.w	r8, r5
 80004bc:	2701      	movs	r7, #1
 80004be:	fbb1 fcfe 	udiv	ip, r1, lr
 80004c2:	0c23      	lsrs	r3, r4, #16
 80004c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb08 f10c 	mul.w	r1, r8, ip
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d4:	18eb      	adds	r3, r5, r3
 80004d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4299      	cmp	r1, r3
 80004de:	f200 80cd 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004e2:	4684      	mov	ip, r0
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	b2a3      	uxth	r3, r4
 80004e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80004f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004f4:	fb08 f800 	mul.w	r8, r8, r0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x14c>
 80004fc:	192c      	adds	r4, r5, r4
 80004fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x14a>
 8000504:	45a0      	cmp	r8, r4
 8000506:	f200 80b6 	bhi.w	8000676 <__udivmoddi4+0x2b6>
 800050a:	4618      	mov	r0, r3
 800050c:	eba4 0408 	sub.w	r4, r4, r8
 8000510:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000514:	e79f      	b.n	8000456 <__udivmoddi4+0x96>
 8000516:	f1c7 0c20 	rsb	ip, r7, #32
 800051a:	40bb      	lsls	r3, r7
 800051c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000520:	ea4e 0e03 	orr.w	lr, lr, r3
 8000524:	fa01 f407 	lsl.w	r4, r1, r7
 8000528:	fa20 f50c 	lsr.w	r5, r0, ip
 800052c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000530:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000534:	4325      	orrs	r5, r4
 8000536:	fbb3 f9f8 	udiv	r9, r3, r8
 800053a:	0c2c      	lsrs	r4, r5, #16
 800053c:	fb08 3319 	mls	r3, r8, r9, r3
 8000540:	fa1f fa8e 	uxth.w	sl, lr
 8000544:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000548:	fb09 f40a 	mul.w	r4, r9, sl
 800054c:	429c      	cmp	r4, r3
 800054e:	fa02 f207 	lsl.w	r2, r2, r7
 8000552:	fa00 f107 	lsl.w	r1, r0, r7
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1e 0303 	adds.w	r3, lr, r3
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000560:	f080 8087 	bcs.w	8000672 <__udivmoddi4+0x2b2>
 8000564:	429c      	cmp	r4, r3
 8000566:	f240 8084 	bls.w	8000672 <__udivmoddi4+0x2b2>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4473      	add	r3, lr
 8000570:	1b1b      	subs	r3, r3, r4
 8000572:	b2ad      	uxth	r5, r5
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3310 	mls	r3, r8, r0, r3
 800057c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000580:	fb00 fa0a 	mul.w	sl, r0, sl
 8000584:	45a2      	cmp	sl, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1e 0404 	adds.w	r4, lr, r4
 800058c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000590:	d26b      	bcs.n	800066a <__udivmoddi4+0x2aa>
 8000592:	45a2      	cmp	sl, r4
 8000594:	d969      	bls.n	800066a <__udivmoddi4+0x2aa>
 8000596:	3802      	subs	r0, #2
 8000598:	4474      	add	r4, lr
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	eba4 040a 	sub.w	r4, r4, sl
 80005a6:	454c      	cmp	r4, r9
 80005a8:	46c2      	mov	sl, r8
 80005aa:	464b      	mov	r3, r9
 80005ac:	d354      	bcc.n	8000658 <__udivmoddi4+0x298>
 80005ae:	d051      	beq.n	8000654 <__udivmoddi4+0x294>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d069      	beq.n	8000688 <__udivmoddi4+0x2c8>
 80005b4:	ebb1 050a 	subs.w	r5, r1, sl
 80005b8:	eb64 0403 	sbc.w	r4, r4, r3
 80005bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005c0:	40fd      	lsrs	r5, r7
 80005c2:	40fc      	lsrs	r4, r7
 80005c4:	ea4c 0505 	orr.w	r5, ip, r5
 80005c8:	e9c6 5400 	strd	r5, r4, [r6]
 80005cc:	2700      	movs	r7, #0
 80005ce:	e747      	b.n	8000460 <__udivmoddi4+0xa0>
 80005d0:	f1c2 0320 	rsb	r3, r2, #32
 80005d4:	fa20 f703 	lsr.w	r7, r0, r3
 80005d8:	4095      	lsls	r5, r2
 80005da:	fa01 f002 	lsl.w	r0, r1, r2
 80005de:	fa21 f303 	lsr.w	r3, r1, r3
 80005e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e6:	4338      	orrs	r0, r7
 80005e8:	0c01      	lsrs	r1, r0, #16
 80005ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80005ee:	fa1f f885 	uxth.w	r8, r5
 80005f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fa:	fb07 f308 	mul.w	r3, r7, r8
 80005fe:	428b      	cmp	r3, r1
 8000600:	fa04 f402 	lsl.w	r4, r4, r2
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0x256>
 8000606:	1869      	adds	r1, r5, r1
 8000608:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800060c:	d22f      	bcs.n	800066e <__udivmoddi4+0x2ae>
 800060e:	428b      	cmp	r3, r1
 8000610:	d92d      	bls.n	800066e <__udivmoddi4+0x2ae>
 8000612:	3f02      	subs	r7, #2
 8000614:	4429      	add	r1, r5
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	b281      	uxth	r1, r0
 800061a:	fbb3 f0fe 	udiv	r0, r3, lr
 800061e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000622:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000626:	fb00 f308 	mul.w	r3, r0, r8
 800062a:	428b      	cmp	r3, r1
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x27e>
 800062e:	1869      	adds	r1, r5, r1
 8000630:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000634:	d217      	bcs.n	8000666 <__udivmoddi4+0x2a6>
 8000636:	428b      	cmp	r3, r1
 8000638:	d915      	bls.n	8000666 <__udivmoddi4+0x2a6>
 800063a:	3802      	subs	r0, #2
 800063c:	4429      	add	r1, r5
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000644:	e73b      	b.n	80004be <__udivmoddi4+0xfe>
 8000646:	4637      	mov	r7, r6
 8000648:	4630      	mov	r0, r6
 800064a:	e709      	b.n	8000460 <__udivmoddi4+0xa0>
 800064c:	4607      	mov	r7, r0
 800064e:	e6e7      	b.n	8000420 <__udivmoddi4+0x60>
 8000650:	4618      	mov	r0, r3
 8000652:	e6fb      	b.n	800044c <__udivmoddi4+0x8c>
 8000654:	4541      	cmp	r1, r8
 8000656:	d2ab      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 8000658:	ebb8 0a02 	subs.w	sl, r8, r2
 800065c:	eb69 020e 	sbc.w	r2, r9, lr
 8000660:	3801      	subs	r0, #1
 8000662:	4613      	mov	r3, r2
 8000664:	e7a4      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000666:	4660      	mov	r0, ip
 8000668:	e7e9      	b.n	800063e <__udivmoddi4+0x27e>
 800066a:	4618      	mov	r0, r3
 800066c:	e795      	b.n	800059a <__udivmoddi4+0x1da>
 800066e:	4667      	mov	r7, ip
 8000670:	e7d1      	b.n	8000616 <__udivmoddi4+0x256>
 8000672:	4681      	mov	r9, r0
 8000674:	e77c      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000676:	3802      	subs	r0, #2
 8000678:	442c      	add	r4, r5
 800067a:	e747      	b.n	800050c <__udivmoddi4+0x14c>
 800067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000680:	442b      	add	r3, r5
 8000682:	e72f      	b.n	80004e4 <__udivmoddi4+0x124>
 8000684:	4638      	mov	r0, r7
 8000686:	e708      	b.n	800049a <__udivmoddi4+0xda>
 8000688:	4637      	mov	r7, r6
 800068a:	e6e9      	b.n	8000460 <__udivmoddi4+0xa0>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <_main>:
 * This function should be run after 'osKernelInitialize'.
 * Best place is right before call to the 'osKernelStart'.
 * @return
 */
int _main(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
	if(pcNmeaRecv.initialize(&huart8) == EXIT_FAILURE)
 8000694:	4910      	ldr	r1, [pc, #64]	; (80006d8 <_main+0x48>)
 8000696:	4811      	ldr	r0, [pc, #68]	; (80006dc <_main+0x4c>)
 8000698:	f000 f908 	bl	80008ac <_ZN12NmeaReceiver10initializeEP20__UART_HandleTypeDef>
 800069c:	4603      	mov	r3, r0
 800069e:	2b01      	cmp	r3, #1
 80006a0:	bf0c      	ite	eq
 80006a2:	2301      	moveq	r3, #1
 80006a4:	2300      	movne	r3, #0
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <_main+0x20>
	{
		return EXIT_FAILURE;
 80006ac:	2301      	movs	r3, #1
 80006ae:	e011      	b.n	80006d4 <_main+0x44>
	}

	if(gpsNmeaRecv.initialize(&huart6) == EXIT_FAILURE)
 80006b0:	490b      	ldr	r1, [pc, #44]	; (80006e0 <_main+0x50>)
 80006b2:	480c      	ldr	r0, [pc, #48]	; (80006e4 <_main+0x54>)
 80006b4:	f000 f8fa 	bl	80008ac <_ZN12NmeaReceiver10initializeEP20__UART_HandleTypeDef>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b01      	cmp	r3, #1
 80006bc:	bf0c      	ite	eq
 80006be:	2301      	moveq	r3, #1
 80006c0:	2300      	movne	r3, #0
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <_main+0x3c>
	{
		return EXIT_FAILURE;
 80006c8:	2301      	movs	r3, #1
 80006ca:	e003      	b.n	80006d4 <_main+0x44>
	}
	printf("Custom part successfully initialized.\r\n");
 80006cc:	4806      	ldr	r0, [pc, #24]	; (80006e8 <_main+0x58>)
 80006ce:	f00b ff3f 	bl	800c550 <puts>
  	return EXIT_SUCCESS;
 80006d2:	2300      	movs	r3, #0
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	20005b64 	.word	0x20005b64
 80006dc:	20000004 	.word	0x20000004
 80006e0:	20005bf0 	.word	0x20005bf0
 80006e4:	20000048 	.word	0x20000048
 80006e8:	0800cce8 	.word	0x0800cce8

080006ec <vApplicationMallocFailedHook>:
extern "C" {
#endif


void vApplicationMallocFailedHook( void )
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
    printf( "Allocation failed.\r\n" );
 80006f0:	4802      	ldr	r0, [pc, #8]	; (80006fc <vApplicationMallocFailedHook+0x10>)
 80006f2:	f00b ff2d 	bl	800c550 <puts>
}
 80006f6:	bf00      	nop
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	0800cd10 	.word	0x0800cd10

08000700 <_write>:

/**
  * @brief  Retargets the C library printf function to the USART.
  */
int _write(int fd, char * ptr, int len)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0
 8000706:	60f8      	str	r0, [r7, #12]
 8000708:	60b9      	str	r1, [r7, #8]
 800070a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(debugUart, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 800070c:	4b06      	ldr	r3, [pc, #24]	; (8000728 <_write+0x28>)
 800070e:	6818      	ldr	r0, [r3, #0]
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	b29a      	uxth	r2, r3
 8000714:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000718:	68b9      	ldr	r1, [r7, #8]
 800071a:	f008 fc1b 	bl	8008f54 <HAL_UART_Transmit>
	return len;
 800071e:	687b      	ldr	r3, [r7, #4]
}
 8000720:	4618      	mov	r0, r3
 8000722:	3710      	adds	r7, #16
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	20000000 	.word	0x20000000

0800072c <initList>:
#include "DLList.h"

struct Node * initList(size_t bufSize)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
	struct Node * head = NULL;
 8000734:	2300      	movs	r3, #0
 8000736:	60fb      	str	r3, [r7, #12]
	head = (struct Node *)MALLOC(sizeof(struct Node));
 8000738:	2018      	movs	r0, #24
 800073a:	f009 fab9 	bl	8009cb0 <pvPortMalloc>
 800073e:	60f8      	str	r0, [r7, #12]
	if(!head)
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d104      	bne.n	8000750 <initList+0x24>
	{
		printf("Out of memory.\r\n");
 8000746:	4819      	ldr	r0, [pc, #100]	; (80007ac <initList+0x80>)
 8000748:	f00b ff02 	bl	800c550 <puts>
		return head;
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	e029      	b.n	80007a4 <initList+0x78>
	}

	//Initialize fields
	head->buf = (char *)MALLOC(bufSize + 1/* protection byte */);
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	3301      	adds	r3, #1
 8000754:	4618      	mov	r0, r3
 8000756:	f009 faab 	bl	8009cb0 <pvPortMalloc>
 800075a:	4602      	mov	r2, r0
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	601a      	str	r2, [r3, #0]
	if(!head->buf)
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d109      	bne.n	800077c <initList+0x50>
	{
		printf("Out of memory.\r\n");
 8000768:	4810      	ldr	r0, [pc, #64]	; (80007ac <initList+0x80>)
 800076a:	f00b fef1 	bl	800c550 <puts>
		free(head);
 800076e:	68f8      	ldr	r0, [r7, #12]
 8000770:	f00b fb06 	bl	800bd80 <free>
		head = NULL;
 8000774:	2300      	movs	r3, #0
 8000776:	60fb      	str	r3, [r7, #12]
		return head;
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	e013      	b.n	80007a4 <initList+0x78>
	}
	head->bufNum = 0;
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	2200      	movs	r2, #0
 8000780:	605a      	str	r2, [r3, #4]
	head->bufSize = bufSize;
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	687a      	ldr	r2, [r7, #4]
 8000786:	609a      	str	r2, [r3, #8]
	head->buf[head->bufSize] = MEM_PROT_SYMBOL;
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	681a      	ldr	r2, [r3, #0]
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	689b      	ldr	r3, [r3, #8]
 8000790:	4413      	add	r3, r2
 8000792:	22aa      	movs	r2, #170	; 0xaa
 8000794:	701a      	strb	r2, [r3, #0]

	head->next = head;
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	68fa      	ldr	r2, [r7, #12]
 800079a:	611a      	str	r2, [r3, #16]
	head->prev = head;
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	68fa      	ldr	r2, [r7, #12]
 80007a0:	615a      	str	r2, [r3, #20]
	return head;
 80007a2:	68fb      	ldr	r3, [r7, #12]
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	3710      	adds	r7, #16
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	0800cd24 	.word	0x0800cd24

080007b0 <addNode>:

struct Node * addNode(struct Node * head)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b084      	sub	sp, #16
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
	struct Node * last = head;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	60fb      	str	r3, [r7, #12]

	//find last member
	for( ; last->next != head; last = last->next) {}
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	691b      	ldr	r3, [r3, #16]
 80007c0:	687a      	ldr	r2, [r7, #4]
 80007c2:	429a      	cmp	r2, r3
 80007c4:	d003      	beq.n	80007ce <addNode+0x1e>
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	691b      	ldr	r3, [r3, #16]
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	e7f6      	b.n	80007bc <addNode+0xc>

	struct Node * newNode = (struct Node *)MALLOC(sizeof(struct Node));
 80007ce:	2018      	movs	r0, #24
 80007d0:	f009 fa6e 	bl	8009cb0 <pvPortMalloc>
 80007d4:	60b8      	str	r0, [r7, #8]
	if(!newNode)
 80007d6:	68bb      	ldr	r3, [r7, #8]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d104      	bne.n	80007e6 <addNode+0x36>
	{
		printf("Out of memory.\r\n");
 80007dc:	481e      	ldr	r0, [pc, #120]	; (8000858 <addNode+0xa8>)
 80007de:	f00b feb7 	bl	800c550 <puts>
		return newNode;
 80007e2:	68bb      	ldr	r3, [r7, #8]
 80007e4:	e033      	b.n	800084e <addNode+0x9e>
	}

	newNode->buf = (char *)MALLOC(head->bufSize + 1);
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	689b      	ldr	r3, [r3, #8]
 80007ea:	3301      	adds	r3, #1
 80007ec:	4618      	mov	r0, r3
 80007ee:	f009 fa5f 	bl	8009cb0 <pvPortMalloc>
 80007f2:	4602      	mov	r2, r0
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	601a      	str	r2, [r3, #0]
	if(!head->buf)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d109      	bne.n	8000814 <addNode+0x64>
	{
		printf("Out of memory.\r\n");
 8000800:	4815      	ldr	r0, [pc, #84]	; (8000858 <addNode+0xa8>)
 8000802:	f00b fea5 	bl	800c550 <puts>
		free(newNode);
 8000806:	68b8      	ldr	r0, [r7, #8]
 8000808:	f00b faba 	bl	800bd80 <free>
		newNode = NULL;
 800080c:	2300      	movs	r3, #0
 800080e:	60bb      	str	r3, [r7, #8]
		return newNode;
 8000810:	68bb      	ldr	r3, [r7, #8]
 8000812:	e01c      	b.n	800084e <addNode+0x9e>
	}
	newNode->bufNum = last->bufNum + 1;
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	685b      	ldr	r3, [r3, #4]
 8000818:	1c5a      	adds	r2, r3, #1
 800081a:	68bb      	ldr	r3, [r7, #8]
 800081c:	605a      	str	r2, [r3, #4]
	newNode->bufSize = head->bufSize;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	689a      	ldr	r2, [r3, #8]
 8000822:	68bb      	ldr	r3, [r7, #8]
 8000824:	609a      	str	r2, [r3, #8]
	newNode->buf[newNode->bufSize] = MEM_PROT_SYMBOL;
 8000826:	68bb      	ldr	r3, [r7, #8]
 8000828:	681a      	ldr	r2, [r3, #0]
 800082a:	68bb      	ldr	r3, [r7, #8]
 800082c:	689b      	ldr	r3, [r3, #8]
 800082e:	4413      	add	r3, r2
 8000830:	22aa      	movs	r2, #170	; 0xaa
 8000832:	701a      	strb	r2, [r3, #0]

	newNode->next = head;
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	687a      	ldr	r2, [r7, #4]
 8000838:	611a      	str	r2, [r3, #16]
	head->prev = newNode;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	68ba      	ldr	r2, [r7, #8]
 800083e:	615a      	str	r2, [r3, #20]
	newNode->prev = last;
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	68fa      	ldr	r2, [r7, #12]
 8000844:	615a      	str	r2, [r3, #20]
	last->next = newNode;
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	68ba      	ldr	r2, [r7, #8]
 800084a:	611a      	str	r2, [r3, #16]
	return newNode;
 800084c:	68bb      	ldr	r3, [r7, #8]
}
 800084e:	4618      	mov	r0, r3
 8000850:	3710      	adds	r7, #16
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	0800cd24 	.word	0x0800cd24

0800085c <checkProtection>:

void checkProtection(struct Node * head)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b084      	sub	sp, #16
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
	struct Node * curr = head;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	60fb      	str	r3, [r7, #12]
	for( ; curr->next != head; curr = curr->next)
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	691b      	ldr	r3, [r3, #16]
 800086c:	687a      	ldr	r2, [r7, #4]
 800086e:	429a      	cmp	r2, r3
 8000870:	d011      	beq.n	8000896 <checkProtection+0x3a>
	{
		assert( (curr->buf[curr->bufSize] == MEM_PROT_SYMBOL) && \
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	681a      	ldr	r2, [r3, #0]
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	689b      	ldr	r3, [r3, #8]
 800087a:	4413      	add	r3, r2
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	2baa      	cmp	r3, #170	; 0xaa
 8000880:	d005      	beq.n	800088e <checkProtection+0x32>
 8000882:	4b07      	ldr	r3, [pc, #28]	; (80008a0 <checkProtection+0x44>)
 8000884:	4a07      	ldr	r2, [pc, #28]	; (80008a4 <checkProtection+0x48>)
 8000886:	2146      	movs	r1, #70	; 0x46
 8000888:	4807      	ldr	r0, [pc, #28]	; (80008a8 <checkProtection+0x4c>)
 800088a:	f00b fa1f 	bl	800bccc <__assert_func>
	for( ; curr->next != head; curr = curr->next)
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	691b      	ldr	r3, [r3, #16]
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	e7e8      	b.n	8000868 <checkProtection+0xc>
				"Buffer overflow");
	}
}
 8000896:	bf00      	nop
 8000898:	3710      	adds	r7, #16
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	0800cd34 	.word	0x0800cd34
 80008a4:	0800cf38 	.word	0x0800cf38
 80008a8:	0800cd78 	.word	0x0800cd78

080008ac <_ZN12NmeaReceiver10initializeEP20__UART_HandleTypeDef>:
#include "NmeaReceiver.h"

int NmeaReceiver::initialize(UART_HandleTypeDef * uart_handle)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
 80008b4:	6039      	str	r1, [r7, #0]
	uartHandle = uart_handle;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	683a      	ldr	r2, [r7, #0]
 80008ba:	601a      	str	r2, [r3, #0]

	msgList = initList(NMEA_MSG_MAX_SIZE);
 80008bc:	2080      	movs	r0, #128	; 0x80
 80008be:	f7ff ff35 	bl	800072c <initList>
 80008c2:	4602      	mov	r2, r0
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	605a      	str	r2, [r3, #4]
	if(!msgList) return EXIT_FAILURE;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	685b      	ldr	r3, [r3, #4]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d101      	bne.n	80008d4 <_ZN12NmeaReceiver10initializeEP20__UART_HandleTypeDef+0x28>
 80008d0:	2301      	movs	r3, #1
 80008d2:	e022      	b.n	800091a <_ZN12NmeaReceiver10initializeEP20__UART_HandleTypeDef+0x6e>
	for(int bufNum = 1 /*exclude head node*/; \
 80008d4:	2301      	movs	r3, #1
 80008d6:	60fb      	str	r3, [r7, #12]
		bufNum < NMEA_MSG_LIST_LEN; bufNum++)
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	2b07      	cmp	r3, #7
 80008dc:	dc08      	bgt.n	80008f0 <_ZN12NmeaReceiver10initializeEP20__UART_HandleTypeDef+0x44>
	{
		addNode(msgList);
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	685b      	ldr	r3, [r3, #4]
 80008e2:	4618      	mov	r0, r3
 80008e4:	f7ff ff64 	bl	80007b0 <addNode>
	for(int bufNum = 1 /*exclude head node*/; \
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	3301      	adds	r3, #1
 80008ec:	60fb      	str	r3, [r7, #12]
 80008ee:	e7f3      	b.n	80008d8 <_ZN12NmeaReceiver10initializeEP20__UART_HandleTypeDef+0x2c>
	}

	rxSema = osSemaphoreNew(1, 0, &semaAttr);
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	3334      	adds	r3, #52	; 0x34
 80008f4:	461a      	mov	r2, r3
 80008f6:	2100      	movs	r1, #0
 80008f8:	2001      	movs	r0, #1
 80008fa:	f009 f81d 	bl	8009938 <osSemaphoreNew>
 80008fe:	4602      	mov	r2, r0
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	631a      	str	r2, [r3, #48]	; 0x30
	thrdId = osThreadNew(
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	330c      	adds	r3, #12
 8000908:	461a      	mov	r2, r3
 800090a:	6879      	ldr	r1, [r7, #4]
 800090c:	4805      	ldr	r0, [pc, #20]	; (8000924 <_ZN12NmeaReceiver10initializeEP20__UART_HandleTypeDef+0x78>)
 800090e:	f008 ff8b 	bl	8009828 <osThreadNew>
 8000912:	4602      	mov	r2, r0
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	609a      	str	r2, [r3, #8]
			&NmeaReceiver::threadFunc, this, &thrdAttr);
	return EXIT_SUCCESS;
 8000918:	2300      	movs	r3, #0
};
 800091a:	4618      	mov	r0, r3
 800091c:	3710      	adds	r7, #16
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	08000929 	.word	0x08000929

08000928 <_ZN12NmeaReceiver10threadFuncEPv>:
	osSemaphoreDelete(rxSema);
};
#endif

void NmeaReceiver::threadFunc(void * argument)
{
 8000928:	b590      	push	{r4, r7, lr}
 800092a:	b08d      	sub	sp, #52	; 0x34
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
	/* All local variables will end in the stack of function.
	 * Each thread has its own stack. */
	uint32_t semaAcqAtmptCnt = 0;
 8000930:	2300      	movs	r3, #0
 8000932:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Initialization */
	uint32_t rxBufIdx = 0;
 8000934:	2300      	movs	r3, #0
 8000936:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t rxBufSize = UART_RX_BUF_SIZE;
 8000938:	2340      	movs	r3, #64	; 0x40
 800093a:	623b      	str	r3, [r7, #32]
	uint8_t rxBuf[rxBufSize + 1]; //1 protection byte
 800093c:	6a38      	ldr	r0, [r7, #32]
 800093e:	61f8      	str	r0, [r7, #28]
 8000940:	4603      	mov	r3, r0
 8000942:	3301      	adds	r3, #1
 8000944:	4619      	mov	r1, r3
 8000946:	f04f 0200 	mov.w	r2, #0
 800094a:	f04f 0300 	mov.w	r3, #0
 800094e:	f04f 0400 	mov.w	r4, #0
 8000952:	00d4      	lsls	r4, r2, #3
 8000954:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000958:	00cb      	lsls	r3, r1, #3
 800095a:	4603      	mov	r3, r0
 800095c:	3301      	adds	r3, #1
 800095e:	4619      	mov	r1, r3
 8000960:	f04f 0200 	mov.w	r2, #0
 8000964:	f04f 0300 	mov.w	r3, #0
 8000968:	f04f 0400 	mov.w	r4, #0
 800096c:	00d4      	lsls	r4, r2, #3
 800096e:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000972:	00cb      	lsls	r3, r1, #3
 8000974:	4603      	mov	r3, r0
 8000976:	3301      	adds	r3, #1
 8000978:	3307      	adds	r3, #7
 800097a:	08db      	lsrs	r3, r3, #3
 800097c:	00db      	lsls	r3, r3, #3
 800097e:	ebad 0d03 	sub.w	sp, sp, r3
 8000982:	466b      	mov	r3, sp
 8000984:	3300      	adds	r3, #0
 8000986:	61bb      	str	r3, [r7, #24]
	rxBuf[rxBufSize] = MEM_PROT_SYMBOL;
 8000988:	69ba      	ldr	r2, [r7, #24]
 800098a:	6a3b      	ldr	r3, [r7, #32]
 800098c:	4413      	add	r3, r2
 800098e:	22aa      	movs	r2, #170	; 0xaa
 8000990:	701a      	strb	r2, [r3, #0]

	struct ExtrrState extrrState =
 8000992:	2300      	movs	r3, #0
 8000994:	723b      	strb	r3, [r7, #8]
 8000996:	2300      	movs	r3, #0
 8000998:	727b      	strb	r3, [r7, #9]
	{
		.startFound = false,
		.lastSrcSymbol = 0x00
	};

	if(argument == nullptr)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d104      	bne.n	80009aa <_ZN12NmeaReceiver10threadFuncEPv+0x82>
	{
		printf("Null passed as the parameter.\r\n");
 80009a0:	4844      	ldr	r0, [pc, #272]	; (8000ab4 <_ZN12NmeaReceiver10threadFuncEPv+0x18c>)
 80009a2:	f00b fdd5 	bl	800c550 <puts>
		HAL_NVIC_SystemReset();
 80009a6:	f001 ff51 	bl	800284c <HAL_NVIC_SystemReset>
	}
	NmeaReceiver * instance = static_cast<NmeaReceiver*>(argument);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	617b      	str	r3, [r7, #20]

	/* Ignite transmission cycle */
reignite:
	debug("Ignition.\r\n");
 80009ae:	4842      	ldr	r0, [pc, #264]	; (8000ab8 <_ZN12NmeaReceiver10threadFuncEPv+0x190>)
 80009b0:	f000 f8b0 	bl	8000b14 <debug>
	semaAcqAtmptCnt = 0;
 80009b4:	2300      	movs	r3, #0
 80009b6:	62bb      	str	r3, [r7, #40]	; 0x28
	rxBufIdx = 0;
 80009b8:	2300      	movs	r3, #0
 80009ba:	62fb      	str	r3, [r7, #44]	; 0x2c
	memset(rxBuf, 0x00, UART_RX_BUF_SIZE); //clear
 80009bc:	69bb      	ldr	r3, [r7, #24]
 80009be:	2240      	movs	r2, #64	; 0x40
 80009c0:	2100      	movs	r1, #0
 80009c2:	4618      	mov	r0, r3
 80009c4:	f00b f9ef 	bl	800bda6 <memset>
	HAL_UART_Receive_DMA(instance->uartHandle,
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	69b9      	ldr	r1, [r7, #24]
 80009ce:	6a3a      	ldr	r2, [r7, #32]
 80009d0:	b292      	uxth	r2, r2
 80009d2:	4618      	mov	r0, r3
 80009d4:	f006 fcb8 	bl	8007348 <HAL_UART_Receive_DMA>

	/* Infinite loop */
	for(;;)
	{
		/* Try to obtain the RX semaphore from DMA IRQ */
		osStatus_t semaStatus = osSemaphoreAcquire(instance->rxSema,
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				UART_RX_TIMEOUT_MS/portTICK_PERIOD_MS);
 80009dc:	2114      	movs	r1, #20
 80009de:	4618      	mov	r0, r3
 80009e0:	f009 f81a 	bl	8009a18 <osSemaphoreAcquire>
 80009e4:	6138      	str	r0, [r7, #16]
		switch(semaStatus)
 80009e6:	693b      	ldr	r3, [r7, #16]
 80009e8:	f113 0f02 	cmn.w	r3, #2
 80009ec:	d002      	beq.n	80009f4 <_ZN12NmeaReceiver10threadFuncEPv+0xcc>
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d02a      	beq.n	8000a48 <_ZN12NmeaReceiver10threadFuncEPv+0x120>
 80009f2:	e048      	b.n	8000a86 <_ZN12NmeaReceiver10threadFuncEPv+0x15e>
		{
			case osErrorTimeout : //get what you can at the moment
			{
				semaAcqAtmptCnt++;
 80009f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009f6:	3301      	adds	r3, #1
 80009f8:	62bb      	str	r3, [r7, #40]	; 0x28
				if(semaAcqAtmptCnt ==
 80009fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009fc:	2b32      	cmp	r3, #50	; 0x32
 80009fe:	d100      	bne.n	8000a02 <_ZN12NmeaReceiver10threadFuncEPv+0xda>
					UART_MAX_DELAY_MS/UART_RX_TIMEOUT_MS)
				{
					goto reignite;
 8000a00:	e7d5      	b.n	80009ae <_ZN12NmeaReceiver10threadFuncEPv+0x86>
				}

				uint32_t avlblData = 0;
 8000a02:	2300      	movs	r3, #0
 8000a04:	627b      	str	r3, [r7, #36]	; 0x24
				uint32_t prevIdx = rxBufIdx;
 8000a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a08:	60fb      	str	r3, [r7, #12]
				//define how much can be read from buffer
				for( ; (rxBuf[rxBufIdx] != 0x00) && \
 8000a0a:	69ba      	ldr	r2, [r7, #24]
 8000a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a0e:	4413      	add	r3, r2
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d00a      	beq.n	8000a2c <_ZN12NmeaReceiver10threadFuncEPv+0x104>
 8000a16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000a18:	6a3b      	ldr	r3, [r7, #32]
 8000a1a:	429a      	cmp	r2, r3
 8000a1c:	d206      	bcs.n	8000a2c <_ZN12NmeaReceiver10threadFuncEPv+0x104>
					(rxBufIdx < rxBufSize);
						rxBufIdx++) //replace 'rxBufIdx' to the new terminator
				{
					avlblData++;
 8000a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a20:	3301      	adds	r3, #1
 8000a22:	627b      	str	r3, [r7, #36]	; 0x24
				for( ; (rxBuf[rxBufIdx] != 0x00) && \
 8000a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a26:	3301      	adds	r3, #1
 8000a28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a2a:	e7ee      	b.n	8000a0a <_ZN12NmeaReceiver10threadFuncEPv+0xe2>
				}
				if(avlblData) //if data is in buffer, pass it to the parser
 8000a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d02d      	beq.n	8000a8e <_ZN12NmeaReceiver10threadFuncEPv+0x166>
				{
					nmeaMsgExtractor(&rxBuf[prevIdx], avlblData /* from idx to amnt */,
 8000a32:	69ba      	ldr	r2, [r7, #24]
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	18d0      	adds	r0, r2, r3
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	1d1a      	adds	r2, r3, #4
 8000a3c:	f107 0308 	add.w	r3, r7, #8
 8000a40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000a42:	f000 f8e7 	bl	8000c14 <nmeaMsgExtractor>
						&instance->msgList, &extrrState);
				}
				break;
 8000a46:	e022      	b.n	8000a8e <_ZN12NmeaReceiver10threadFuncEPv+0x166>
			} //end case timeout
			case osOK : //semaphore acquired
			{
				nmeaMsgExtractor(&rxBuf[rxBufIdx],
 8000a48:	69ba      	ldr	r2, [r7, #24]
 8000a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a4c:	18d0      	adds	r0, r2, r3
						rxBufSize - rxBufIdx,
 8000a4e:	6a3a      	ldr	r2, [r7, #32]
 8000a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a52:	1ad1      	subs	r1, r2, r3
				nmeaMsgExtractor(&rxBuf[rxBufIdx],
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	1d1a      	adds	r2, r3, #4
 8000a58:	f107 0308 	add.w	r3, r7, #8
 8000a5c:	f000 f8da 	bl	8000c14 <nmeaMsgExtractor>
							&instance->msgList, &extrrState);
				//next cycle
				rxBufIdx = 0;
 8000a60:	2300      	movs	r3, #0
 8000a62:	62fb      	str	r3, [r7, #44]	; 0x2c
				memset(rxBuf, 0x00, rxBufSize); //clear
 8000a64:	69bb      	ldr	r3, [r7, #24]
 8000a66:	6a3a      	ldr	r2, [r7, #32]
 8000a68:	2100      	movs	r1, #0
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f00b f99b 	bl	800bda6 <memset>
				semaAcqAtmptCnt = 0;
 8000a70:	2300      	movs	r3, #0
 8000a72:	62bb      	str	r3, [r7, #40]	; 0x28
				HAL_UART_Receive_DMA(instance->uartHandle,
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	69b9      	ldr	r1, [r7, #24]
 8000a7a:	6a3a      	ldr	r2, [r7, #32]
 8000a7c:	b292      	uxth	r2, r2
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f006 fc62 	bl	8007348 <HAL_UART_Receive_DMA>
					rxBuf, rxBufSize);
				break;
 8000a84:	e004      	b.n	8000a90 <_ZN12NmeaReceiver10threadFuncEPv+0x168>
			} //end case ok
			default :
			{
				debug("Unhandled error.\r\n");
 8000a86:	480d      	ldr	r0, [pc, #52]	; (8000abc <_ZN12NmeaReceiver10threadFuncEPv+0x194>)
 8000a88:	f000 f844 	bl	8000b14 <debug>
				break;
 8000a8c:	e000      	b.n	8000a90 <_ZN12NmeaReceiver10threadFuncEPv+0x168>
				break;
 8000a8e:	bf00      	nop
			}
		} //end switch sema status
		checkProtection(instance->msgList);
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff fee1 	bl	800085c <checkProtection>
		assert( (rxBuf[rxBufSize] == MEM_PROT_SYMBOL) && \
 8000a9a:	69ba      	ldr	r2, [r7, #24]
 8000a9c:	6a3b      	ldr	r3, [r7, #32]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	2baa      	cmp	r3, #170	; 0xaa
 8000aa4:	d098      	beq.n	80009d8 <_ZN12NmeaReceiver10threadFuncEPv+0xb0>
 8000aa6:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <_ZN12NmeaReceiver10threadFuncEPv+0x198>)
 8000aa8:	4a06      	ldr	r2, [pc, #24]	; (8000ac4 <_ZN12NmeaReceiver10threadFuncEPv+0x19c>)
 8000aaa:	2176      	movs	r1, #118	; 0x76
 8000aac:	4806      	ldr	r0, [pc, #24]	; (8000ac8 <_ZN12NmeaReceiver10threadFuncEPv+0x1a0>)
 8000aae:	f00b f90d 	bl	800bccc <__assert_func>
 8000ab2:	bf00      	nop
 8000ab4:	0800cdbc 	.word	0x0800cdbc
 8000ab8:	0800cddc 	.word	0x0800cddc
 8000abc:	0800cde8 	.word	0x0800cde8
 8000ac0:	0800cdfc 	.word	0x0800cdfc
 8000ac4:	0800cf54 	.word	0x0800cf54
 8000ac8:	0800ce3c 	.word	0x0800ce3c

08000acc <_ZN12StateMachine11getInstanceEv>:
#include "StateMachine.h"

StateMachine& StateMachine::getInstance()
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
	static StateMachine singleton;
	return singleton;
 8000ad0:	4b02      	ldr	r3, [pc, #8]	; (8000adc <_ZN12StateMachine11getInstanceEv+0x10>)
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr
 8000adc:	2000008c 	.word	0x2000008c

08000ae0 <_ZN12StateMachine4postEPKNS_7MessageE>:

void StateMachine::post(const Message * message)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
 8000ae8:	6039      	str	r1, [r7, #0]
	osStatus_t postStatus = osMessageQueuePut(queue,
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	6818      	ldr	r0, [r3, #0]
			static_cast<const void*>(message),
				0/* Message priority is ignored */,
				0/* Don't block if queue is full */);
 8000aee:	2300      	movs	r3, #0
 8000af0:	2200      	movs	r2, #0
 8000af2:	6839      	ldr	r1, [r7, #0]
 8000af4:	f009 f812 	bl	8009b1c <osMessageQueuePut>
 8000af8:	60f8      	str	r0, [r7, #12]
	if(postStatus != osOK)
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d002      	beq.n	8000b06 <_ZN12StateMachine4postEPKNS_7MessageE+0x26>
	{
		debug("Can't post message.\r\n");
 8000b00:	4803      	ldr	r0, [pc, #12]	; (8000b10 <_ZN12StateMachine4postEPKNS_7MessageE+0x30>)
 8000b02:	f000 f807 	bl	8000b14 <debug>
	}
}
 8000b06:	bf00      	nop
 8000b08:	3710      	adds	r7, #16
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	0800ceb4 	.word	0x0800ceb4

08000b14 <debug>:

extern bool debugUart_isSending;
extern UART_HandleTypeDef * debugUart;

void debug(const char * msg)
{
 8000b14:	b590      	push	{r4, r7, lr}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]

	if(debugUart_isSending) return; //just drop the message
 8000b1c:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <debug+0x38>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d10f      	bne.n	8000b44 <debug+0x30>
	debugUart_isSending = true;
 8000b24:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <debug+0x38>)
 8000b26:	2201      	movs	r2, #1
 8000b28:	701a      	strb	r2, [r3, #0]

	HAL_UART_Transmit_DMA(debugUart, (uint8_t *)msg, strlen(msg));
 8000b2a:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <debug+0x3c>)
 8000b2c:	681c      	ldr	r4, [r3, #0]
 8000b2e:	6878      	ldr	r0, [r7, #4]
 8000b30:	f7ff fbd6 	bl	80002e0 <strlen>
 8000b34:	4603      	mov	r3, r0
 8000b36:	b29b      	uxth	r3, r3
 8000b38:	461a      	mov	r2, r3
 8000b3a:	6879      	ldr	r1, [r7, #4]
 8000b3c:	4620      	mov	r0, r4
 8000b3e:	f006 fbab 	bl	8007298 <HAL_UART_Transmit_DMA>
 8000b42:	e000      	b.n	8000b46 <debug+0x32>
	if(debugUart_isSending) return; //just drop the message
 8000b44:	bf00      	nop

}
 8000b46:	370c      	adds	r7, #12
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd90      	pop	{r4, r7, pc}
 8000b4c:	2000022c 	.word	0x2000022c
 8000b50:	20000000 	.word	0x20000000

08000b54 <_ZN12NmeaReceiver7getSemaEv>:
	NmeaReceiver() = default;
	int initialize(UART_HandleTypeDef * uart_handle);
	~NmeaReceiver() = default;

public : /*--- Getters, setters ---*/
	osSemaphoreId_t getSema()
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
	{
		return rxSema;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
	}
 8000b60:	4618      	mov	r0, r3
 8000b62:	370c      	adds	r7, #12
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr

08000b6c <_ZN12NmeaReceiver7getUartEv>:
	UART_HandleTypeDef * getUart()
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
	{
		return uartHandle;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
	}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <HAL_UART_RxCpltCallback>:

extern NmeaReceiver pcNmeaRecv;
extern NmeaReceiver gpsNmeaRecv;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
	if(huart == pcNmeaRecv.getUart())
 8000b8c:	4814      	ldr	r0, [pc, #80]	; (8000be0 <HAL_UART_RxCpltCallback+0x5c>)
 8000b8e:	f7ff ffed 	bl	8000b6c <_ZN12NmeaReceiver7getUartEv>
 8000b92:	4602      	mov	r2, r0
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	4293      	cmp	r3, r2
 8000b98:	bf0c      	ite	eq
 8000b9a:	2301      	moveq	r3, #1
 8000b9c:	2300      	movne	r3, #0
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d006      	beq.n	8000bb2 <HAL_UART_RxCpltCallback+0x2e>
	{
		osSemaphoreRelease(pcNmeaRecv.getSema());
 8000ba4:	480e      	ldr	r0, [pc, #56]	; (8000be0 <HAL_UART_RxCpltCallback+0x5c>)
 8000ba6:	f7ff ffd5 	bl	8000b54 <_ZN12NmeaReceiver7getSemaEv>
 8000baa:	4603      	mov	r3, r0
 8000bac:	4618      	mov	r0, r3
 8000bae:	f008 ff77 	bl	8009aa0 <osSemaphoreRelease>
	}
	if(huart == gpsNmeaRecv.getUart())
 8000bb2:	480c      	ldr	r0, [pc, #48]	; (8000be4 <HAL_UART_RxCpltCallback+0x60>)
 8000bb4:	f7ff ffda 	bl	8000b6c <_ZN12NmeaReceiver7getUartEv>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	bf0c      	ite	eq
 8000bc0:	2301      	moveq	r3, #1
 8000bc2:	2300      	movne	r3, #0
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d006      	beq.n	8000bd8 <HAL_UART_RxCpltCallback+0x54>
	{
		osSemaphoreRelease(gpsNmeaRecv.getSema());
 8000bca:	4806      	ldr	r0, [pc, #24]	; (8000be4 <HAL_UART_RxCpltCallback+0x60>)
 8000bcc:	f7ff ffc2 	bl	8000b54 <_ZN12NmeaReceiver7getSemaEv>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f008 ff64 	bl	8009aa0 <osSemaphoreRelease>
	}

}
 8000bd8:	bf00      	nop
 8000bda:	3708      	adds	r7, #8
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	20000004 	.word	0x20000004
 8000be4:	20000048 	.word	0x20000048

08000be8 <HAL_UART_TxCpltCallback>:

extern bool debugUart_isSending;
extern UART_HandleTypeDef * debugUart;

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
	if(huart == debugUart)
 8000bf0:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <HAL_UART_TxCpltCallback+0x24>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	687a      	ldr	r2, [r7, #4]
 8000bf6:	429a      	cmp	r2, r3
 8000bf8:	d102      	bne.n	8000c00 <HAL_UART_TxCpltCallback+0x18>
	{
		debugUart_isSending = false;
 8000bfa:	4b05      	ldr	r3, [pc, #20]	; (8000c10 <HAL_UART_TxCpltCallback+0x28>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	701a      	strb	r2, [r3, #0]
	}
}
 8000c00:	bf00      	nop
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	20000000 	.word	0x20000000
 8000c10:	2000022c 	.word	0x2000022c

08000c14 <nmeaMsgExtractor>:
 * @param state State of extractor.
 */
void nmeaMsgExtractor(uint8_t * src, size_t srcSize,
						struct Node ** dst_ptr,
						struct ExtrrState * state)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b088      	sub	sp, #32
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	60f8      	str	r0, [r7, #12]
 8000c1c:	60b9      	str	r1, [r7, #8]
 8000c1e:	607a      	str	r2, [r7, #4]
 8000c20:	603b      	str	r3, [r7, #0]
	uint32_t srcIdx = 0;
 8000c22:	2300      	movs	r3, #0
 8000c24:	61fb      	str	r3, [r7, #28]
	struct Node * dst = *dst_ptr;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	61bb      	str	r3, [r7, #24]
#if DEBUG_EXTRACTOR
#endif
	for( ;srcIdx < srcSize; srcIdx++)
 8000c2c:	69fa      	ldr	r2, [r7, #28]
 8000c2e:	68bb      	ldr	r3, [r7, #8]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	d278      	bcs.n	8000d26 <nmeaMsgExtractor+0x112>
	{
		if( (state->startFound) && (src[srcIdx]
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d00b      	beq.n	8000c54 <nmeaMsgExtractor+0x40>
 8000c3c:	68fa      	ldr	r2, [r7, #12]
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	4413      	add	r3, r2
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	2b24      	cmp	r3, #36	; 0x24
 8000c46:	d105      	bne.n	8000c54 <nmeaMsgExtractor+0x40>
			== NMEA_START_CHAR) )
		{
			debug("Broken message. Second start.\r\n");
 8000c48:	4839      	ldr	r0, [pc, #228]	; (8000d30 <nmeaMsgExtractor+0x11c>)
 8000c4a:	f7ff ff63 	bl	8000b14 <debug>
#if DEBUG_EXTRACTOR //Gives clear riding of buffer
			memset((void *)&dst->buf[0], 0x00, dst->bufSize);
#endif
			dst->bufIdx = 0;
 8000c4e:	69bb      	ldr	r3, [r7, #24]
 8000c50:	2200      	movs	r2, #0
 8000c52:	60da      	str	r2, [r3, #12]
		}

		if( (!state->startFound) && (src[srcIdx]
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	f083 0301 	eor.w	r3, r3, #1
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d008      	beq.n	8000c74 <nmeaMsgExtractor+0x60>
 8000c62:	68fa      	ldr	r2, [r7, #12]
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	4413      	add	r3, r2
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	2b24      	cmp	r3, #36	; 0x24
 8000c6c:	d102      	bne.n	8000c74 <nmeaMsgExtractor+0x60>
			== NMEA_START_CHAR) )
		{
			state->startFound = true;
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	2201      	movs	r2, #1
 8000c72:	701a      	strb	r2, [r3, #0]
		}

		if(state->startFound)
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d050      	beq.n	8000d1e <nmeaMsgExtractor+0x10a>
		{
			dst->buf[dst->bufIdx] = src[srcIdx];
 8000c7c:	68fa      	ldr	r2, [r7, #12]
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	441a      	add	r2, r3
 8000c82:	69bb      	ldr	r3, [r7, #24]
 8000c84:	6819      	ldr	r1, [r3, #0]
 8000c86:	69bb      	ldr	r3, [r7, #24]
 8000c88:	68db      	ldr	r3, [r3, #12]
 8000c8a:	440b      	add	r3, r1
 8000c8c:	7812      	ldrb	r2, [r2, #0]
 8000c8e:	701a      	strb	r2, [r3, #0]
			dst->bufIdx++; //post increment -> index becomes size
 8000c90:	69bb      	ldr	r3, [r7, #24]
 8000c92:	68db      	ldr	r3, [r3, #12]
 8000c94:	1c5a      	adds	r2, r3, #1
 8000c96:	69bb      	ldr	r3, [r7, #24]
 8000c98:	60da      	str	r2, [r3, #12]
			if(dst->bufIdx == dst->bufSize)
 8000c9a:	69bb      	ldr	r3, [r7, #24]
 8000c9c:	68da      	ldr	r2, [r3, #12]
 8000c9e:	69bb      	ldr	r3, [r7, #24]
 8000ca0:	689b      	ldr	r3, [r3, #8]
 8000ca2:	429a      	cmp	r2, r3
 8000ca4:	d108      	bne.n	8000cb8 <nmeaMsgExtractor+0xa4>
			{
				debug("Broken message. Too big.\r\n");
 8000ca6:	4823      	ldr	r0, [pc, #140]	; (8000d34 <nmeaMsgExtractor+0x120>)
 8000ca8:	f7ff ff34 	bl	8000b14 <debug>
				dst->bufIdx = 0;
 8000cac:	69bb      	ldr	r3, [r7, #24]
 8000cae:	2200      	movs	r2, #0
 8000cb0:	60da      	str	r2, [r3, #12]
				state->startFound = false;
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	701a      	strb	r2, [r3, #0]
			}
			//look for message end
			if( (src[srcIdx] == NMEA_MSG_END_1) && \
 8000cb8:	68fa      	ldr	r2, [r7, #12]
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	2b0a      	cmp	r3, #10
 8000cc2:	d126      	bne.n	8000d12 <nmeaMsgExtractor+0xfe>
					(state->lastSrcSymbol == NMEA_MSG_END_0) )
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	785b      	ldrb	r3, [r3, #1]
			if( (src[srcIdx] == NMEA_MSG_END_1) && \
 8000cc8:	2b0d      	cmp	r3, #13
 8000cca:	d122      	bne.n	8000d12 <nmeaMsgExtractor+0xfe>
				/*------------------------*/
				/* Post to 'StateMachine' */
				/*------------------------*/
				/* Message created out of blue */
				StateMachine::Message * message =
						(StateMachine::Message *)MALLOC(sizeof(StateMachine::Message));
 8000ccc:	200c      	movs	r0, #12
 8000cce:	f008 ffef 	bl	8009cb0 <pvPortMalloc>
 8000cd2:	6178      	str	r0, [r7, #20]
				message->message = &dst->buf[0];
 8000cd4:	69bb      	ldr	r3, [r7, #24]
 8000cd6:	681a      	ldr	r2, [r3, #0]
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	601a      	str	r2, [r3, #0]
				message->msgSize = dst->bufIdx;
 8000cdc:	69bb      	ldr	r3, [r7, #24]
 8000cde:	68da      	ldr	r2, [r3, #12]
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	605a      	str	r2, [r3, #4]
				message->senderId = StateMachine::SenderId::GPS_UART;
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	2203      	movs	r2, #3
 8000ce8:	721a      	strb	r2, [r3, #8]
				StateMachine::getInstance().post(message);
 8000cea:	f7ff feef 	bl	8000acc <_ZN12StateMachine11getInstanceEv>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	6979      	ldr	r1, [r7, #20]
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f7ff fef4 	bl	8000ae0 <_ZN12StateMachine4postEPKNS_7MessageE>

				state->startFound = false; //full message found
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	701a      	strb	r2, [r3, #0]
				* dst_ptr = dst->next; //move to the next buffer
 8000cfe:	69bb      	ldr	r3, [r7, #24]
 8000d00:	691a      	ldr	r2, [r3, #16]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	601a      	str	r2, [r3, #0]
				dst = * dst_ptr;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	61bb      	str	r3, [r7, #24]
				dst->bufIdx = 0;
 8000d0c:	69bb      	ldr	r3, [r7, #24]
 8000d0e:	2200      	movs	r2, #0
 8000d10:	60da      	str	r2, [r3, #12]
#if DEBUG_EXTRACTOR
				memset(&dst->buf[0], 0x00, dst->bufSize);
#endif
			}
			state->lastSrcSymbol = src[srcIdx];
 8000d12:	68fa      	ldr	r2, [r7, #12]
 8000d14:	69fb      	ldr	r3, [r7, #28]
 8000d16:	4413      	add	r3, r2
 8000d18:	781a      	ldrb	r2, [r3, #0]
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	705a      	strb	r2, [r3, #1]
	for( ;srcIdx < srcSize; srcIdx++)
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	3301      	adds	r3, #1
 8000d22:	61fb      	str	r3, [r7, #28]
 8000d24:	e782      	b.n	8000c2c <nmeaMsgExtractor+0x18>
		}
	} //end for
}
 8000d26:	bf00      	nop
 8000d28:	3720      	adds	r7, #32
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	0800ceec 	.word	0x0800ceec
 8000d34:	0800cf0c 	.word	0x0800cf0c

08000d38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d70 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000d3c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000d3e:	e003      	b.n	8000d48 <LoopCopyDataInit>

08000d40 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000d40:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000d42:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000d44:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000d46:	3104      	adds	r1, #4

08000d48 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000d48:	480b      	ldr	r0, [pc, #44]	; (8000d78 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000d4c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000d4e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000d50:	d3f6      	bcc.n	8000d40 <CopyDataInit>
  ldr  r2, =_sbss
 8000d52:	4a0b      	ldr	r2, [pc, #44]	; (8000d80 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000d54:	e002      	b.n	8000d5c <LoopFillZerobss>

08000d56 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000d56:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000d58:	f842 3b04 	str.w	r3, [r2], #4

08000d5c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000d5c:	4b09      	ldr	r3, [pc, #36]	; (8000d84 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000d5e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000d60:	d3f9      	bcc.n	8000d56 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d62:	f001 fc75 	bl	8002650 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d66:	f00a ffe7 	bl	800bd38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d6a:	f000 fd11 	bl	8001790 <main>
  bx  lr    
 8000d6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d70:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000d74:	0800d0c4 	.word	0x0800d0c4
  ldr  r0, =_sdata
 8000d78:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000d7c:	20000150 	.word	0x20000150
  ldr  r2, =_sbss
 8000d80:	20000210 	.word	0x20000210
  ldr  r3, = _ebss
 8000d84:	20005fd0 	.word	0x20005fd0

08000d88 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d88:	e7fe      	b.n	8000d88 <ADC3_IRQHandler>
	...

08000d8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d90:	b090      	sub	sp, #64	; 0x40
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d92:	2400      	movs	r4, #0
 8000d94:	940b      	str	r4, [sp, #44]	; 0x2c
 8000d96:	940c      	str	r4, [sp, #48]	; 0x30
 8000d98:	940d      	str	r4, [sp, #52]	; 0x34
 8000d9a:	940e      	str	r4, [sp, #56]	; 0x38
 8000d9c:	940f      	str	r4, [sp, #60]	; 0x3c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000d9e:	4b67      	ldr	r3, [pc, #412]	; (8000f3c <MX_GPIO_Init+0x1b0>)
 8000da0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000da4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000da8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000dac:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000db0:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8000db4:	9200      	str	r2, [sp, #0]
 8000db6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000dbc:	f042 0202 	orr.w	r2, r2, #2
 8000dc0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000dc4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000dc8:	f002 0202 	and.w	r2, r2, #2
 8000dcc:	9201      	str	r2, [sp, #4]
 8000dce:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000dd0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000dd4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000dd8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000ddc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000de0:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8000de4:	9202      	str	r2, [sp, #8]
 8000de6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000de8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000dec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000df0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000df4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000df8:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8000dfc:	9203      	str	r2, [sp, #12]
 8000dfe:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e00:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000e04:	f042 0208 	orr.w	r2, r2, #8
 8000e08:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000e0c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000e10:	f002 0208 	and.w	r2, r2, #8
 8000e14:	9204      	str	r2, [sp, #16]
 8000e16:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e18:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000e1c:	f042 0204 	orr.w	r2, r2, #4
 8000e20:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000e24:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000e28:	f002 0204 	and.w	r2, r2, #4
 8000e2c:	9205      	str	r2, [sp, #20]
 8000e2e:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e30:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000e34:	f042 0201 	orr.w	r2, r2, #1
 8000e38:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000e3c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000e40:	f002 0201 	and.w	r2, r2, #1
 8000e44:	9206      	str	r2, [sp, #24]
 8000e46:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e48:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000e4c:	f042 0210 	orr.w	r2, r2, #16
 8000e50:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000e54:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000e58:	f002 0210 	and.w	r2, r2, #16
 8000e5c:	9207      	str	r2, [sp, #28]
 8000e5e:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e60:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000e64:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000e68:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000e6c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000e70:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000e74:	9208      	str	r2, [sp, #32]
 8000e76:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e78:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000e7c:	f042 0220 	orr.w	r2, r2, #32
 8000e80:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000e84:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000e88:	f002 0220 	and.w	r2, r2, #32
 8000e8c:	9209      	str	r2, [sp, #36]	; 0x24
 8000e8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000e90:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000e94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000e98:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000e9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ea0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ea4:	930a      	str	r3, [sp, #40]	; 0x28
 8000ea6:	9b0a      	ldr	r3, [sp, #40]	; 0x28

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOK, LD3_Pin|LD2_Pin|LD4_Pin|LD1_Pin 
 8000ea8:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8000f4c <MX_GPIO_Init+0x1c0>
 8000eac:	4622      	mov	r2, r4
 8000eae:	217c      	movs	r1, #124	; 0x7c
 8000eb0:	4640      	mov	r0, r8
 8000eb2:	f003 fdfb 	bl	8004aac <HAL_GPIO_WritePin>
                          |eINC_DAT_CMD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(eINK_RST_GPIO_Port, eINK_RST_Pin, GPIO_PIN_RESET);
 8000eb6:	4e22      	ldr	r6, [pc, #136]	; (8000f40 <MX_GPIO_Init+0x1b4>)
 8000eb8:	4622      	mov	r2, r4
 8000eba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ebe:	4630      	mov	r0, r6
 8000ec0:	f003 fdf4 	bl	8004aac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(eINK_BUSY_GPIO_Port, eINK_BUSY_Pin, GPIO_PIN_RESET);
 8000ec4:	4f1f      	ldr	r7, [pc, #124]	; (8000f44 <MX_GPIO_Init+0x1b8>)
 8000ec6:	4622      	mov	r2, r4
 8000ec8:	2180      	movs	r1, #128	; 0x80
 8000eca:	4638      	mov	r0, r7
 8000ecc:	f003 fdee 	bl	8004aac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD3_Pin LD2_Pin LD4_Pin LD1_Pin 
                           eINC_DAT_CMD_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin|LD4_Pin|LD1_Pin 
 8000ed0:	237c      	movs	r3, #124	; 0x7c
 8000ed2:	930b      	str	r3, [sp, #44]	; 0x2c
                          |eINC_DAT_CMD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed4:	2501      	movs	r5, #1
 8000ed6:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed8:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eda:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000edc:	a90b      	add	r1, sp, #44	; 0x2c
 8000ede:	4640      	mov	r0, r8
 8000ee0:	f003 fcf4 	bl	80048cc <HAL_GPIO_Init>

  /*Configure GPIO pin : eINK_RST_Pin */
  GPIO_InitStruct.Pin = eINK_RST_Pin;
 8000ee4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ee8:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eea:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eee:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(eINK_RST_GPIO_Port, &GPIO_InitStruct);
 8000ef0:	a90b      	add	r1, sp, #44	; 0x2c
 8000ef2:	4630      	mov	r0, r6
 8000ef4:	f003 fcea 	bl	80048cc <HAL_GPIO_Init>

  /*Configure GPIO pin : B3_Pin */
  GPIO_InitStruct.Pin = B3_Pin;
 8000ef8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000efc:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000efe:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 8000f02:	a90b      	add	r1, sp, #44	; 0x2c
 8000f04:	4810      	ldr	r0, [pc, #64]	; (8000f48 <MX_GPIO_Init+0x1bc>)
 8000f06:	f003 fce1 	bl	80048cc <HAL_GPIO_Init>

  /*Configure GPIO pin : MCO1_Pin */
  GPIO_InitStruct.Pin = MCO1_Pin;
 8000f0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f0e:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f10:	2302      	movs	r3, #2
 8000f12:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f14:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f16:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000f18:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(MCO1_GPIO_Port, &GPIO_InitStruct);
 8000f1a:	a90b      	add	r1, sp, #44	; 0x2c
 8000f1c:	4630      	mov	r0, r6
 8000f1e:	f003 fcd5 	bl	80048cc <HAL_GPIO_Init>

  /*Configure GPIO pin : eINK_BUSY_Pin */
  GPIO_InitStruct.Pin = eINK_BUSY_Pin;
 8000f22:	2380      	movs	r3, #128	; 0x80
 8000f24:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f26:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2a:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(eINK_BUSY_GPIO_Port, &GPIO_InitStruct);
 8000f2c:	a90b      	add	r1, sp, #44	; 0x2c
 8000f2e:	4638      	mov	r0, r7
 8000f30:	f003 fccc 	bl	80048cc <HAL_GPIO_Init>

}
 8000f34:	b010      	add	sp, #64	; 0x40
 8000f36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f3a:	bf00      	nop
 8000f3c:	58024400 	.word	0x58024400
 8000f40:	58020000 	.word	0x58020000
 8000f44:	58021800 	.word	0x58021800
 8000f48:	58020800 	.word	0x58020800
 8000f4c:	58022800 	.word	0x58022800

08000f50 <MX_DMA_Init>:
{
 8000f50:	b500      	push	{lr}
 8000f52:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f54:	4b3d      	ldr	r3, [pc, #244]	; (800104c <MX_DMA_Init+0xfc>)
 8000f56:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8000f5a:	f042 0201 	orr.w	r2, r2, #1
 8000f5e:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8000f62:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8000f66:	f002 0201 	and.w	r2, r2, #1
 8000f6a:	9200      	str	r2, [sp, #0]
 8000f6c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f6e:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8000f72:	f042 0202 	orr.w	r2, r2, #2
 8000f76:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8000f7a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f7e:	f003 0302 	and.w	r3, r3, #2
 8000f82:	9301      	str	r3, [sp, #4]
 8000f84:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000f86:	2200      	movs	r2, #0
 8000f88:	4611      	mov	r1, r2
 8000f8a:	200b      	movs	r0, #11
 8000f8c:	f001 fc1e 	bl	80027cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000f90:	200b      	movs	r0, #11
 8000f92:	f001 fc4d 	bl	8002830 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000f96:	2200      	movs	r2, #0
 8000f98:	4611      	mov	r1, r2
 8000f9a:	200c      	movs	r0, #12
 8000f9c:	f001 fc16 	bl	80027cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000fa0:	200c      	movs	r0, #12
 8000fa2:	f001 fc45 	bl	8002830 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	4611      	mov	r1, r2
 8000faa:	200d      	movs	r0, #13
 8000fac:	f001 fc0e 	bl	80027cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000fb0:	200d      	movs	r0, #13
 8000fb2:	f001 fc3d 	bl	8002830 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	4611      	mov	r1, r2
 8000fba:	200e      	movs	r0, #14
 8000fbc:	f001 fc06 	bl	80027cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000fc0:	200e      	movs	r0, #14
 8000fc2:	f001 fc35 	bl	8002830 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	4611      	mov	r1, r2
 8000fca:	200f      	movs	r0, #15
 8000fcc:	f001 fbfe 	bl	80027cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000fd0:	200f      	movs	r0, #15
 8000fd2:	f001 fc2d 	bl	8002830 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	4611      	mov	r1, r2
 8000fda:	2010      	movs	r0, #16
 8000fdc:	f001 fbf6 	bl	80027cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000fe0:	2010      	movs	r0, #16
 8000fe2:	f001 fc25 	bl	8002830 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	4611      	mov	r1, r2
 8000fea:	2011      	movs	r0, #17
 8000fec:	f001 fbee 	bl	80027cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000ff0:	2011      	movs	r0, #17
 8000ff2:	f001 fc1d 	bl	8002830 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	4611      	mov	r1, r2
 8000ffa:	202f      	movs	r0, #47	; 0x2f
 8000ffc:	f001 fbe6 	bl	80027cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001000:	202f      	movs	r0, #47	; 0x2f
 8001002:	f001 fc15 	bl	8002830 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001006:	2200      	movs	r2, #0
 8001008:	4611      	mov	r1, r2
 800100a:	2038      	movs	r0, #56	; 0x38
 800100c:	f001 fbde 	bl	80027cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001010:	2038      	movs	r0, #56	; 0x38
 8001012:	f001 fc0d 	bl	8002830 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001016:	2200      	movs	r2, #0
 8001018:	4611      	mov	r1, r2
 800101a:	2039      	movs	r0, #57	; 0x39
 800101c:	f001 fbd6 	bl	80027cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001020:	2039      	movs	r0, #57	; 0x39
 8001022:	f001 fc05 	bl	8002830 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001026:	2200      	movs	r2, #0
 8001028:	4611      	mov	r1, r2
 800102a:	203a      	movs	r0, #58	; 0x3a
 800102c:	f001 fbce 	bl	80027cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001030:	203a      	movs	r0, #58	; 0x3a
 8001032:	f001 fbfd 	bl	8002830 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001036:	2200      	movs	r2, #0
 8001038:	4611      	mov	r1, r2
 800103a:	203b      	movs	r0, #59	; 0x3b
 800103c:	f001 fbc6 	bl	80027cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001040:	203b      	movs	r0, #59	; 0x3b
 8001042:	f001 fbf5 	bl	8002830 <HAL_NVIC_EnableIRQ>
}
 8001046:	b003      	add	sp, #12
 8001048:	f85d fb04 	ldr.w	pc, [sp], #4
 800104c:	58024400 	.word	0x58024400

08001050 <MX_DSIHOST_DSI_Init>:
{
 8001050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001054:	b0aa      	sub	sp, #168	; 0xa8
  DSI_PLLInitTypeDef PLLInit = {0};
 8001056:	2400      	movs	r4, #0
 8001058:	9429      	str	r4, [sp, #164]	; 0xa4
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 800105a:	2224      	movs	r2, #36	; 0x24
 800105c:	4621      	mov	r1, r4
 800105e:	a81e      	add	r0, sp, #120	; 0x78
 8001060:	f00a fea1 	bl	800bda6 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8001064:	9418      	str	r4, [sp, #96]	; 0x60
 8001066:	9419      	str	r4, [sp, #100]	; 0x64
 8001068:	941a      	str	r4, [sp, #104]	; 0x68
 800106a:	941b      	str	r4, [sp, #108]	; 0x6c
 800106c:	941c      	str	r4, [sp, #112]	; 0x70
 800106e:	941d      	str	r4, [sp, #116]	; 0x74
  DSI_LPCmdTypeDef LPCmd = {0};
 8001070:	2234      	movs	r2, #52	; 0x34
 8001072:	4621      	mov	r1, r4
 8001074:	a80b      	add	r0, sp, #44	; 0x2c
 8001076:	f00a fe96 	bl	800bda6 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 800107a:	222c      	movs	r2, #44	; 0x2c
 800107c:	4621      	mov	r1, r4
 800107e:	4668      	mov	r0, sp
 8001080:	f00a fe91 	bl	800bda6 <memset>
  hdsi.Instance = DSI;
 8001084:	4d33      	ldr	r5, [pc, #204]	; (8001154 <MX_DSIHOST_DSI_Init+0x104>)
 8001086:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800108a:	602b      	str	r3, [r5, #0]
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 800108c:	606c      	str	r4, [r5, #4]
  hdsi.Init.TXEscapeCkdiv = 2;
 800108e:	2602      	movs	r6, #2
 8001090:	60ae      	str	r6, [r5, #8]
  hdsi.Init.NumberOfLanes = DSI_ONE_DATA_LANE;
 8001092:	60ec      	str	r4, [r5, #12]
  PLLInit.PLLNDIV = 10;
 8001094:	270a      	movs	r7, #10
 8001096:	9727      	str	r7, [sp, #156]	; 0x9c
  PLLInit.PLLIDF = DSI_PLL_IN_DIV1;
 8001098:	f04f 0801 	mov.w	r8, #1
 800109c:	f8cd 80a0 	str.w	r8, [sp, #160]	; 0xa0
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 80010a0:	a927      	add	r1, sp, #156	; 0x9c
 80010a2:	4628      	mov	r0, r5
 80010a4:	f002 fece 	bl	8003e44 <HAL_DSI_Init>
  HostTimeouts.TimeoutCkdiv = 1;
 80010a8:	f8cd 8078 	str.w	r8, [sp, #120]	; 0x78
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 80010ac:	941f      	str	r4, [sp, #124]	; 0x7c
  HostTimeouts.LowPowerReceptionTimeout = 0;
 80010ae:	9420      	str	r4, [sp, #128]	; 0x80
  HostTimeouts.HighSpeedReadTimeout = 0;
 80010b0:	9421      	str	r4, [sp, #132]	; 0x84
  HostTimeouts.LowPowerReadTimeout = 0;
 80010b2:	9422      	str	r4, [sp, #136]	; 0x88
  HostTimeouts.HighSpeedWriteTimeout = 0;
 80010b4:	9423      	str	r4, [sp, #140]	; 0x8c
  HostTimeouts.HighSpeedWritePrespMode = DSI_HS_PM_DISABLE;
 80010b6:	9424      	str	r4, [sp, #144]	; 0x90
  HostTimeouts.LowPowerWriteTimeout = 0;
 80010b8:	9425      	str	r4, [sp, #148]	; 0x94
  HostTimeouts.BTATimeout = 0;
 80010ba:	9426      	str	r4, [sp, #152]	; 0x98
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 80010bc:	a91e      	add	r1, sp, #120	; 0x78
 80010be:	4628      	mov	r0, r5
 80010c0:	f003 f8b4 	bl	800422c <HAL_DSI_ConfigHostTimeouts>
  PhyTimings.ClockLaneHS2LPTime = 20;
 80010c4:	2314      	movs	r3, #20
 80010c6:	9318      	str	r3, [sp, #96]	; 0x60
  PhyTimings.ClockLaneLP2HSTime = 18;
 80010c8:	2312      	movs	r3, #18
 80010ca:	9319      	str	r3, [sp, #100]	; 0x64
  PhyTimings.DataLaneHS2LPTime = 10;
 80010cc:	971a      	str	r7, [sp, #104]	; 0x68
  PhyTimings.DataLaneLP2HSTime = 13;
 80010ce:	230d      	movs	r3, #13
 80010d0:	931b      	str	r3, [sp, #108]	; 0x6c
  PhyTimings.DataLaneMaxReadTime = 0;
 80010d2:	941c      	str	r4, [sp, #112]	; 0x70
  PhyTimings.StopWaitTime = 0;
 80010d4:	941d      	str	r4, [sp, #116]	; 0x74
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 80010d6:	a918      	add	r1, sp, #96	; 0x60
 80010d8:	4628      	mov	r0, r5
 80010da:	f003 f863 	bl	80041a4 <HAL_DSI_ConfigPhyTimer>
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 80010de:	2104      	movs	r1, #4
 80010e0:	4628      	mov	r0, r5
 80010e2:	f003 f84b 	bl	800417c <HAL_DSI_ConfigFlowControl>
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 80010e6:	f242 7110 	movw	r1, #10000	; 0x2710
 80010ea:	4628      	mov	r0, r5
 80010ec:	f003 f918 	bl	8004320 <HAL_DSI_SetLowPowerRXFilter>
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 80010f0:	4621      	mov	r1, r4
 80010f2:	4628      	mov	r0, r5
 80010f4:	f002 fdcc 	bl	8003c90 <HAL_DSI_ConfigErrorMonitor>
  LPCmd.LPGenShortWriteNoP = DSI_LP_GSW0P_DISABLE;
 80010f8:	940b      	str	r4, [sp, #44]	; 0x2c
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 80010fa:	940c      	str	r4, [sp, #48]	; 0x30
  LPCmd.LPGenShortWriteTwoP = DSI_LP_GSW2P_DISABLE;
 80010fc:	940d      	str	r4, [sp, #52]	; 0x34
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 80010fe:	940e      	str	r4, [sp, #56]	; 0x38
  LPCmd.LPGenShortReadOneP = DSI_LP_GSR1P_DISABLE;
 8001100:	940f      	str	r4, [sp, #60]	; 0x3c
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 8001102:	9410      	str	r4, [sp, #64]	; 0x40
  LPCmd.LPGenLongWrite = DSI_LP_GLW_DISABLE;
 8001104:	9411      	str	r4, [sp, #68]	; 0x44
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 8001106:	9412      	str	r4, [sp, #72]	; 0x48
  LPCmd.LPDcsShortWriteOneP = DSI_LP_DSW1P_DISABLE;
 8001108:	9413      	str	r4, [sp, #76]	; 0x4c
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 800110a:	9414      	str	r4, [sp, #80]	; 0x50
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 800110c:	9415      	str	r4, [sp, #84]	; 0x54
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_DISABLE;
 800110e:	9416      	str	r4, [sp, #88]	; 0x58
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_DISABLE;
 8001110:	9417      	str	r4, [sp, #92]	; 0x5c
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8001112:	a90b      	add	r1, sp, #44	; 0x2c
 8001114:	4628      	mov	r0, r5
 8001116:	f002 fff7 	bl	8004108 <HAL_DSI_ConfigCommand>
  CmdCfg.VirtualChannelID = 0;
 800111a:	9400      	str	r4, [sp, #0]
  CmdCfg.ColorCoding = DSI_RGB888;
 800111c:	2305      	movs	r3, #5
 800111e:	9301      	str	r3, [sp, #4]
  CmdCfg.CommandSize = 640;
 8001120:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001124:	9302      	str	r3, [sp, #8]
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8001126:	2310      	movs	r3, #16
 8001128:	9303      	str	r3, [sp, #12]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 800112a:	9404      	str	r4, [sp, #16]
  CmdCfg.HSPolarity = DSI_HSYNC_ACTIVE_LOW;
 800112c:	2304      	movs	r3, #4
 800112e:	9305      	str	r3, [sp, #20]
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_LOW;
 8001130:	9606      	str	r6, [sp, #24]
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8001132:	9407      	str	r4, [sp, #28]
  CmdCfg.VSyncPol = DSI_VSYNC_FALLING;
 8001134:	9408      	str	r4, [sp, #32]
  CmdCfg.AutomaticRefresh = DSI_AR_ENABLE;
 8001136:	2340      	movs	r3, #64	; 0x40
 8001138:	9309      	str	r3, [sp, #36]	; 0x24
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_DISABLE;
 800113a:	940a      	str	r4, [sp, #40]	; 0x28
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 800113c:	4669      	mov	r1, sp
 800113e:	4628      	mov	r0, r5
 8001140:	f002 ff58 	bl	8003ff4 <HAL_DSI_ConfigAdaptedCommandMode>
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8001144:	4621      	mov	r1, r4
 8001146:	4628      	mov	r0, r5
 8001148:	f002 ff40 	bl	8003fcc <HAL_DSI_SetGenericVCID>
}
 800114c:	b02a      	add	sp, #168	; 0xa8
 800114e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001152:	bf00      	nop
 8001154:	20005624 	.word	0x20005624

08001158 <MX_ETH_Init>:
{
 8001158:	b538      	push	{r3, r4, r5, lr}
  heth.Instance = ETH;
 800115a:	4815      	ldr	r0, [pc, #84]	; (80011b0 <MX_ETH_Init+0x58>)
 800115c:	4b15      	ldr	r3, [pc, #84]	; (80011b4 <MX_ETH_Init+0x5c>)
 800115e:	6003      	str	r3, [r0, #0]
  heth.Init.MACAddr[0] =   0x00;
 8001160:	6843      	ldr	r3, [r0, #4]
 8001162:	2400      	movs	r4, #0
 8001164:	701c      	strb	r4, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 8001166:	6843      	ldr	r3, [r0, #4]
 8001168:	2280      	movs	r2, #128	; 0x80
 800116a:	705a      	strb	r2, [r3, #1]
  heth.Init.MACAddr[2] =   0xE1;
 800116c:	6843      	ldr	r3, [r0, #4]
 800116e:	22e1      	movs	r2, #225	; 0xe1
 8001170:	709a      	strb	r2, [r3, #2]
  heth.Init.MACAddr[3] =   0x00;
 8001172:	6843      	ldr	r3, [r0, #4]
 8001174:	70dc      	strb	r4, [r3, #3]
  heth.Init.MACAddr[4] =   0x00;
 8001176:	6843      	ldr	r3, [r0, #4]
 8001178:	711c      	strb	r4, [r3, #4]
  heth.Init.MACAddr[5] =   0x00;
 800117a:	6843      	ldr	r3, [r0, #4]
 800117c:	715c      	strb	r4, [r3, #5]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800117e:	2301      	movs	r3, #1
 8001180:	7203      	strb	r3, [r0, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001182:	4b0d      	ldr	r3, [pc, #52]	; (80011b8 <MX_ETH_Init+0x60>)
 8001184:	60c3      	str	r3, [r0, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001186:	4b0d      	ldr	r3, [pc, #52]	; (80011bc <MX_ETH_Init+0x64>)
 8001188:	6103      	str	r3, [r0, #16]
  heth.Init.RxBuffLen = 1524;
 800118a:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800118e:	6143      	str	r3, [r0, #20]
  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001190:	f003 fb04 	bl	800479c <HAL_ETH_Init>
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001194:	4d0a      	ldr	r5, [pc, #40]	; (80011c0 <MX_ETH_Init+0x68>)
 8001196:	2230      	movs	r2, #48	; 0x30
 8001198:	4621      	mov	r1, r4
 800119a:	4628      	mov	r0, r5
 800119c:	f00a fe03 	bl	800bda6 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80011a0:	2321      	movs	r3, #33	; 0x21
 80011a2:	f845 3c04 	str.w	r3, [r5, #-4]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80011a6:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80011aa:	612b      	str	r3, [r5, #16]
}
 80011ac:	bd38      	pop	{r3, r4, r5, pc}
 80011ae:	bf00      	nop
 80011b0:	20005db4 	.word	0x20005db4
 80011b4:	40028000 	.word	0x40028000
 80011b8:	200001b0 	.word	0x200001b0
 80011bc:	20000150 	.word	0x20000150
 80011c0:	20005e28 	.word	0x20005e28

080011c4 <MX_FMC_Init>:
{
 80011c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80011c8:	b08f      	sub	sp, #60	; 0x3c
  FMC_NORSRAM_TimingTypeDef Timing = {0};
 80011ca:	2400      	movs	r4, #0
 80011cc:	940d      	str	r4, [sp, #52]	; 0x34
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80011ce:	9400      	str	r4, [sp, #0]
 80011d0:	9401      	str	r4, [sp, #4]
 80011d2:	9402      	str	r4, [sp, #8]
 80011d4:	9403      	str	r4, [sp, #12]
 80011d6:	9404      	str	r4, [sp, #16]
 80011d8:	9405      	str	r4, [sp, #20]
 80011da:	9406      	str	r4, [sp, #24]
  hnor1.Instance = FMC_NORSRAM_DEVICE;
 80011dc:	4835      	ldr	r0, [pc, #212]	; (80012b4 <MX_FMC_Init+0xf0>)
 80011de:	f8df b0e4 	ldr.w	fp, [pc, #228]	; 80012c4 <MX_FMC_Init+0x100>
 80011e2:	f8c0 b000 	str.w	fp, [r0]
  hnor1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 80011e6:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 80012c8 <MX_FMC_Init+0x104>
 80011ea:	f8c0 a004 	str.w	sl, [r0, #4]
  hnor1.Init.NSBank = FMC_NORSRAM_BANK1;
 80011ee:	6084      	str	r4, [r0, #8]
  hnor1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 80011f0:	60c4      	str	r4, [r0, #12]
  hnor1.Init.MemoryType = FMC_MEMORY_TYPE_NOR;
 80011f2:	2308      	movs	r3, #8
 80011f4:	6103      	str	r3, [r0, #16]
  hnor1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 80011f6:	2510      	movs	r5, #16
 80011f8:	6145      	str	r5, [r0, #20]
  hnor1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 80011fa:	6184      	str	r4, [r0, #24]
  hnor1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 80011fc:	61c4      	str	r4, [r0, #28]
  hnor1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 80011fe:	6204      	str	r4, [r0, #32]
  hnor1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 8001200:	6244      	str	r4, [r0, #36]	; 0x24
  hnor1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8001202:	6284      	str	r4, [r0, #40]	; 0x28
  hnor1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8001204:	62c4      	str	r4, [r0, #44]	; 0x2c
  hnor1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_ENABLE;
 8001206:	f44f 4900 	mov.w	r9, #32768	; 0x8000
 800120a:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
  hnor1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 800120e:	6344      	str	r4, [r0, #52]	; 0x34
  hnor1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8001210:	6384      	str	r4, [r0, #56]	; 0x38
  hnor1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8001212:	63c4      	str	r4, [r0, #60]	; 0x3c
  hnor1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8001214:	6404      	str	r4, [r0, #64]	; 0x40
  Timing.AddressSetupTime = 15;
 8001216:	260f      	movs	r6, #15
 8001218:	9607      	str	r6, [sp, #28]
  Timing.AddressHoldTime = 15;
 800121a:	9608      	str	r6, [sp, #32]
  Timing.DataSetupTime = 255;
 800121c:	f04f 08ff 	mov.w	r8, #255	; 0xff
 8001220:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  Timing.BusTurnAroundDuration = 15;
 8001224:	960a      	str	r6, [sp, #40]	; 0x28
  Timing.CLKDivision = 16;
 8001226:	950b      	str	r5, [sp, #44]	; 0x2c
  Timing.DataLatency = 17;
 8001228:	2711      	movs	r7, #17
 800122a:	970c      	str	r7, [sp, #48]	; 0x30
  if (HAL_NOR_Init(&hnor1, &Timing, NULL) != HAL_OK)
 800122c:	4622      	mov	r2, r4
 800122e:	a907      	add	r1, sp, #28
 8001230:	f003 fe84 	bl	8004f3c <HAL_NOR_Init>
  hsram2.Instance = FMC_NORSRAM_DEVICE;
 8001234:	4820      	ldr	r0, [pc, #128]	; (80012b8 <MX_FMC_Init+0xf4>)
 8001236:	f8c0 b000 	str.w	fp, [r0]
  hsram2.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 800123a:	f8c0 a004 	str.w	sl, [r0, #4]
  hsram2.Init.NSBank = FMC_NORSRAM_BANK3;
 800123e:	2304      	movs	r3, #4
 8001240:	6083      	str	r3, [r0, #8]
  hsram2.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8001242:	60c4      	str	r4, [r0, #12]
  hsram2.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8001244:	6104      	str	r4, [r0, #16]
  hsram2.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001246:	6145      	str	r5, [r0, #20]
  hsram2.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8001248:	6184      	str	r4, [r0, #24]
  hsram2.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 800124a:	61c4      	str	r4, [r0, #28]
  hsram2.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 800124c:	6204      	str	r4, [r0, #32]
  hsram2.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 800124e:	6244      	str	r4, [r0, #36]	; 0x24
  hsram2.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8001250:	6284      	str	r4, [r0, #40]	; 0x28
  hsram2.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8001252:	62c4      	str	r4, [r0, #44]	; 0x2c
  hsram2.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_ENABLE;
 8001254:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
  hsram2.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8001258:	6344      	str	r4, [r0, #52]	; 0x34
  hsram2.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 800125a:	6384      	str	r4, [r0, #56]	; 0x38
  hsram2.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 800125c:	63c4      	str	r4, [r0, #60]	; 0x3c
  hsram2.Init.PageSize = FMC_PAGE_SIZE_NONE;
 800125e:	6404      	str	r4, [r0, #64]	; 0x40
  Timing.AddressSetupTime = 15;
 8001260:	9607      	str	r6, [sp, #28]
  Timing.AddressHoldTime = 15;
 8001262:	9608      	str	r6, [sp, #32]
  Timing.DataSetupTime = 255;
 8001264:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  Timing.BusTurnAroundDuration = 15;
 8001268:	960a      	str	r6, [sp, #40]	; 0x28
  Timing.CLKDivision = 16;
 800126a:	950b      	str	r5, [sp, #44]	; 0x2c
  Timing.DataLatency = 17;
 800126c:	970c      	str	r7, [sp, #48]	; 0x30
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 800126e:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 8001270:	4622      	mov	r2, r4
 8001272:	a907      	add	r1, sp, #28
 8001274:	f005 fe36 	bl	8006ee4 <HAL_SRAM_Init>
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001278:	4810      	ldr	r0, [pc, #64]	; (80012bc <MX_FMC_Init+0xf8>)
 800127a:	4b11      	ldr	r3, [pc, #68]	; (80012c0 <MX_FMC_Init+0xfc>)
 800127c:	6003      	str	r3, [r0, #0]
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 800127e:	2301      	movs	r3, #1
 8001280:	6043      	str	r3, [r0, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001282:	6084      	str	r4, [r0, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
 8001284:	60c4      	str	r4, [r0, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8001286:	2320      	movs	r3, #32
 8001288:	6103      	str	r3, [r0, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800128a:	2340      	movs	r3, #64	; 0x40
 800128c:	6143      	str	r3, [r0, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 800128e:	2380      	movs	r3, #128	; 0x80
 8001290:	6183      	str	r3, [r0, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001292:	61c4      	str	r4, [r0, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8001294:	6204      	str	r4, [r0, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8001296:	6244      	str	r4, [r0, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001298:	6284      	str	r4, [r0, #40]	; 0x28
  SdramTiming.LoadToActiveDelay = 16;
 800129a:	9500      	str	r5, [sp, #0]
  SdramTiming.ExitSelfRefreshDelay = 16;
 800129c:	9501      	str	r5, [sp, #4]
  SdramTiming.SelfRefreshTime = 16;
 800129e:	9502      	str	r5, [sp, #8]
  SdramTiming.RowCycleDelay = 16;
 80012a0:	9503      	str	r5, [sp, #12]
  SdramTiming.WriteRecoveryTime = 16;
 80012a2:	9504      	str	r5, [sp, #16]
  SdramTiming.RPDelay = 16;
 80012a4:	9505      	str	r5, [sp, #20]
  SdramTiming.RCDDelay = 16;
 80012a6:	9506      	str	r5, [sp, #24]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80012a8:	4669      	mov	r1, sp
 80012aa:	f005 fd43 	bl	8006d34 <HAL_SDRAM_Init>
}
 80012ae:	b00f      	add	sp, #60	; 0x3c
 80012b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80012b4:	20005a58 	.word	0x20005a58
 80012b8:	20005b18 	.word	0x20005b18
 80012bc:	20005d80 	.word	0x20005d80
 80012c0:	52004140 	.word	0x52004140
 80012c4:	52004000 	.word	0x52004000
 80012c8:	52004104 	.word	0x52004104

080012cc <MX_I2C1_Init>:
{
 80012cc:	b538      	push	{r3, r4, r5, lr}
  hi2c1.Instance = I2C1;
 80012ce:	4c0f      	ldr	r4, [pc, #60]	; (800130c <MX_I2C1_Init+0x40>)
 80012d0:	4b0f      	ldr	r3, [pc, #60]	; (8001310 <MX_I2C1_Init+0x44>)
 80012d2:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x307075B1;
 80012d4:	f1a3 6378 	sub.w	r3, r3, #260046848	; 0xf800000
 80012d8:	f5a3 237d 	sub.w	r3, r3, #1036288	; 0xfd000
 80012dc:	f6a3 634f 	subw	r3, r3, #3663	; 0xe4f
 80012e0:	6063      	str	r3, [r4, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80012e2:	2500      	movs	r5, #0
 80012e4:	60a5      	str	r5, [r4, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012e6:	2301      	movs	r3, #1
 80012e8:	60e3      	str	r3, [r4, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012ea:	6125      	str	r5, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80012ec:	6165      	str	r5, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012ee:	61a5      	str	r5, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012f0:	61e5      	str	r5, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012f2:	6225      	str	r5, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012f4:	4620      	mov	r0, r4
 80012f6:	f003 fbf7 	bl	8004ae8 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012fa:	4629      	mov	r1, r5
 80012fc:	4620      	mov	r0, r4
 80012fe:	f003 fc51 	bl	8004ba4 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001302:	4629      	mov	r1, r5
 8001304:	4620      	mov	r0, r4
 8001306:	f003 fc7b 	bl	8004c00 <HAL_I2CEx_ConfigDigitalFilter>
}
 800130a:	bd38      	pop	{r3, r4, r5, pc}
 800130c:	200051d0 	.word	0x200051d0
 8001310:	40005400 	.word	0x40005400

08001314 <MX_LTDC_Init>:
{
 8001314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001316:	b09b      	sub	sp, #108	; 0x6c
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001318:	2434      	movs	r4, #52	; 0x34
 800131a:	4622      	mov	r2, r4
 800131c:	2100      	movs	r1, #0
 800131e:	eb0d 0004 	add.w	r0, sp, r4
 8001322:	f00a fd40 	bl	800bda6 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8001326:	4622      	mov	r2, r4
 8001328:	2100      	movs	r1, #0
 800132a:	4668      	mov	r0, sp
 800132c:	f00a fd3b 	bl	800bda6 <memset>
  hltdc.Instance = LTDC;
 8001330:	4d2b      	ldr	r5, [pc, #172]	; (80013e0 <MX_LTDC_Init+0xcc>)
 8001332:	4b2c      	ldr	r3, [pc, #176]	; (80013e4 <MX_LTDC_Init+0xd0>)
 8001334:	602b      	str	r3, [r5, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001336:	2400      	movs	r4, #0
 8001338:	606c      	str	r4, [r5, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800133a:	60ac      	str	r4, [r5, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800133c:	60ec      	str	r4, [r5, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800133e:	612c      	str	r4, [r5, #16]
  hltdc.Init.HorizontalSync = 7;
 8001340:	2307      	movs	r3, #7
 8001342:	616b      	str	r3, [r5, #20]
  hltdc.Init.VerticalSync = 3;
 8001344:	2303      	movs	r3, #3
 8001346:	61ab      	str	r3, [r5, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8001348:	230e      	movs	r3, #14
 800134a:	61eb      	str	r3, [r5, #28]
  hltdc.Init.AccumulatedVBP = 5;
 800134c:	2605      	movs	r6, #5
 800134e:	622e      	str	r6, [r5, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8001350:	f240 238e 	movw	r3, #654	; 0x28e
 8001354:	626b      	str	r3, [r5, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8001356:	f240 13e5 	movw	r3, #485	; 0x1e5
 800135a:	62ab      	str	r3, [r5, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 800135c:	f44f 7325 	mov.w	r3, #660	; 0x294
 8001360:	62eb      	str	r3, [r5, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 8001362:	f240 13e7 	movw	r3, #487	; 0x1e7
 8001366:	632b      	str	r3, [r5, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001368:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800136c:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001370:	f885 4036 	strb.w	r4, [r5, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001374:	4628      	mov	r0, r5
 8001376:	f003 fd39 	bl	8004dec <HAL_LTDC_Init>
  pLayerCfg.WindowX0 = 0;
 800137a:	940d      	str	r4, [sp, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 800137c:	940e      	str	r4, [sp, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 800137e:	940f      	str	r4, [sp, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8001380:	9410      	str	r4, [sp, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001382:	9411      	str	r4, [sp, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8001384:	9412      	str	r4, [sp, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8001386:	9413      	str	r4, [sp, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001388:	f44f 6780 	mov.w	r7, #1024	; 0x400
 800138c:	9714      	str	r7, [sp, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800138e:	9615      	str	r6, [sp, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8001390:	9416      	str	r4, [sp, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8001392:	9417      	str	r4, [sp, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8001394:	9418      	str	r4, [sp, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8001396:	f88d 4064 	strb.w	r4, [sp, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 800139a:	f88d 4065 	strb.w	r4, [sp, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 800139e:	f88d 4066 	strb.w	r4, [sp, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80013a2:	4622      	mov	r2, r4
 80013a4:	a90d      	add	r1, sp, #52	; 0x34
 80013a6:	4628      	mov	r0, r5
 80013a8:	f003 fd9a 	bl	8004ee0 <HAL_LTDC_ConfigLayer>
  pLayerCfg1.WindowX0 = 0;
 80013ac:	9400      	str	r4, [sp, #0]
  pLayerCfg1.WindowX1 = 0;
 80013ae:	9401      	str	r4, [sp, #4]
  pLayerCfg1.WindowY0 = 0;
 80013b0:	9402      	str	r4, [sp, #8]
  pLayerCfg1.WindowY1 = 0;
 80013b2:	9403      	str	r4, [sp, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80013b4:	9404      	str	r4, [sp, #16]
  pLayerCfg1.Alpha = 0;
 80013b6:	9405      	str	r4, [sp, #20]
  pLayerCfg1.Alpha0 = 0;
 80013b8:	9406      	str	r4, [sp, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80013ba:	9707      	str	r7, [sp, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80013bc:	9608      	str	r6, [sp, #32]
  pLayerCfg1.FBStartAdress = 0;
 80013be:	9409      	str	r4, [sp, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 80013c0:	940a      	str	r4, [sp, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 80013c2:	940b      	str	r4, [sp, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 80013c4:	f88d 4030 	strb.w	r4, [sp, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 80013c8:	f88d 4031 	strb.w	r4, [sp, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 80013cc:	f88d 4032 	strb.w	r4, [sp, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80013d0:	2201      	movs	r2, #1
 80013d2:	4669      	mov	r1, sp
 80013d4:	4628      	mov	r0, r5
 80013d6:	f003 fd83 	bl	8004ee0 <HAL_LTDC_ConfigLayer>
}
 80013da:	b01b      	add	sp, #108	; 0x6c
 80013dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013de:	bf00      	nop
 80013e0:	200056b8 	.word	0x200056b8
 80013e4:	50001000 	.word	0x50001000

080013e8 <MX_SPI5_Init>:
{
 80013e8:	b508      	push	{r3, lr}
  hspi5.Instance = SPI5;
 80013ea:	4811      	ldr	r0, [pc, #68]	; (8001430 <MX_SPI5_Init+0x48>)
 80013ec:	4b11      	ldr	r3, [pc, #68]	; (8001434 <MX_SPI5_Init+0x4c>)
 80013ee:	6003      	str	r3, [r0, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80013f0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013f4:	6043      	str	r3, [r0, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80013f6:	2300      	movs	r3, #0
 80013f8:	6083      	str	r3, [r0, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_4BIT;
 80013fa:	2203      	movs	r2, #3
 80013fc:	60c2      	str	r2, [r0, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013fe:	6103      	str	r3, [r0, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001400:	6143      	str	r3, [r0, #20]
  hspi5.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001402:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001406:	6182      	str	r2, [r0, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001408:	61c3      	str	r3, [r0, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800140a:	6203      	str	r3, [r0, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800140c:	6243      	str	r3, [r0, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800140e:	6283      	str	r3, [r0, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 8001410:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001412:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001416:	6342      	str	r2, [r0, #52]	; 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001418:	6383      	str	r3, [r0, #56]	; 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800141a:	63c3      	str	r3, [r0, #60]	; 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800141c:	6403      	str	r3, [r0, #64]	; 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800141e:	6443      	str	r3, [r0, #68]	; 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001420:	6483      	str	r3, [r0, #72]	; 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001422:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001424:	6503      	str	r3, [r0, #80]	; 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001426:	6543      	str	r3, [r0, #84]	; 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001428:	6583      	str	r3, [r0, #88]	; 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800142a:	f005 fcb3 	bl	8006d94 <HAL_SPI_Init>
}
 800142e:	bd08      	pop	{r3, pc}
 8001430:	20004c3c 	.word	0x20004c3c
 8001434:	40015000 	.word	0x40015000

08001438 <MX_USART1_UART_Init>:
{
 8001438:	b538      	push	{r3, r4, r5, lr}
  huart1.Instance = USART1;
 800143a:	4c10      	ldr	r4, [pc, #64]	; (800147c <MX_USART1_UART_Init+0x44>)
 800143c:	4b10      	ldr	r3, [pc, #64]	; (8001480 <MX_USART1_UART_Init+0x48>)
 800143e:	6023      	str	r3, [r4, #0]
  huart1.Init.BaudRate = 115200;
 8001440:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001444:	6063      	str	r3, [r4, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001446:	2500      	movs	r5, #0
 8001448:	60a5      	str	r5, [r4, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800144a:	60e5      	str	r5, [r4, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800144c:	6125      	str	r5, [r4, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800144e:	230c      	movs	r3, #12
 8001450:	6163      	str	r3, [r4, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001452:	61a5      	str	r5, [r4, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001454:	61e5      	str	r5, [r4, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001456:	6225      	str	r5, [r4, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001458:	6265      	str	r5, [r4, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800145a:	62a5      	str	r5, [r4, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800145c:	4620      	mov	r0, r4
 800145e:	f007 fe24 	bl	80090aa <HAL_UART_Init>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001462:	4629      	mov	r1, r5
 8001464:	4620      	mov	r0, r4
 8001466:	f007 feaf 	bl	80091c8 <HAL_UARTEx_SetTxFifoThreshold>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800146a:	4629      	mov	r1, r5
 800146c:	4620      	mov	r0, r4
 800146e:	f007 fed0 	bl	8009212 <HAL_UARTEx_SetRxFifoThreshold>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001472:	4620      	mov	r0, r4
 8001474:	f007 fe89 	bl	800918a <HAL_UARTEx_DisableFifoMode>
}
 8001478:	bd38      	pop	{r3, r4, r5, pc}
 800147a:	bf00      	nop
 800147c:	200059cc 	.word	0x200059cc
 8001480:	40011000 	.word	0x40011000

08001484 <MX_UART4_Init>:
{
 8001484:	b538      	push	{r3, r4, r5, lr}
  huart4.Instance = UART4;
 8001486:	4c10      	ldr	r4, [pc, #64]	; (80014c8 <MX_UART4_Init+0x44>)
 8001488:	4b10      	ldr	r3, [pc, #64]	; (80014cc <MX_UART4_Init+0x48>)
 800148a:	6023      	str	r3, [r4, #0]
  huart4.Init.BaudRate = 115200;
 800148c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001490:	6063      	str	r3, [r4, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001492:	2500      	movs	r5, #0
 8001494:	60a5      	str	r5, [r4, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001496:	60e5      	str	r5, [r4, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001498:	6125      	str	r5, [r4, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800149a:	230c      	movs	r3, #12
 800149c:	6163      	str	r3, [r4, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800149e:	61a5      	str	r5, [r4, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80014a0:	61e5      	str	r5, [r4, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014a2:	6225      	str	r5, [r4, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014a4:	6265      	str	r5, [r4, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014a6:	62a5      	str	r5, [r4, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80014a8:	4620      	mov	r0, r4
 80014aa:	f007 fdfe 	bl	80090aa <HAL_UART_Init>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014ae:	4629      	mov	r1, r5
 80014b0:	4620      	mov	r0, r4
 80014b2:	f007 fe89 	bl	80091c8 <HAL_UARTEx_SetTxFifoThreshold>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014b6:	4629      	mov	r1, r5
 80014b8:	4620      	mov	r0, r4
 80014ba:	f007 feaa 	bl	8009212 <HAL_UARTEx_SetRxFifoThreshold>
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80014be:	4620      	mov	r0, r4
 80014c0:	f007 fe63 	bl	800918a <HAL_UARTEx_DisableFifoMode>
}
 80014c4:	bd38      	pop	{r3, r4, r5, pc}
 80014c6:	bf00      	nop
 80014c8:	20005c7c 	.word	0x20005c7c
 80014cc:	40004c00 	.word	0x40004c00

080014d0 <MX_UART5_Init>:
{
 80014d0:	b538      	push	{r3, r4, r5, lr}
  huart5.Instance = UART5;
 80014d2:	4c10      	ldr	r4, [pc, #64]	; (8001514 <MX_UART5_Init+0x44>)
 80014d4:	4b10      	ldr	r3, [pc, #64]	; (8001518 <MX_UART5_Init+0x48>)
 80014d6:	6023      	str	r3, [r4, #0]
  huart5.Init.BaudRate = 115200;
 80014d8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80014dc:	6063      	str	r3, [r4, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80014de:	2500      	movs	r5, #0
 80014e0:	60a5      	str	r5, [r4, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80014e2:	60e5      	str	r5, [r4, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80014e4:	6125      	str	r5, [r4, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80014e6:	230c      	movs	r3, #12
 80014e8:	6163      	str	r3, [r4, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ea:	61a5      	str	r5, [r4, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80014ec:	61e5      	str	r5, [r4, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014ee:	6225      	str	r5, [r4, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014f0:	6265      	str	r5, [r4, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014f2:	62a5      	str	r5, [r4, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80014f4:	4620      	mov	r0, r4
 80014f6:	f007 fdd8 	bl	80090aa <HAL_UART_Init>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014fa:	4629      	mov	r1, r5
 80014fc:	4620      	mov	r0, r4
 80014fe:	f007 fe63 	bl	80091c8 <HAL_UARTEx_SetTxFifoThreshold>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001502:	4629      	mov	r1, r5
 8001504:	4620      	mov	r0, r4
 8001506:	f007 fe84 	bl	8009212 <HAL_UARTEx_SetRxFifoThreshold>
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 800150a:	4620      	mov	r0, r4
 800150c:	f007 fe3d 	bl	800918a <HAL_UARTEx_DisableFifoMode>
}
 8001510:	bd38      	pop	{r3, r4, r5, pc}
 8001512:	bf00      	nop
 8001514:	200057d8 	.word	0x200057d8
 8001518:	40005000 	.word	0x40005000

0800151c <MX_UART8_Init>:
{
 800151c:	b538      	push	{r3, r4, r5, lr}
  huart8.Instance = UART8;
 800151e:	4c10      	ldr	r4, [pc, #64]	; (8001560 <MX_UART8_Init+0x44>)
 8001520:	4b10      	ldr	r3, [pc, #64]	; (8001564 <MX_UART8_Init+0x48>)
 8001522:	6023      	str	r3, [r4, #0]
  huart8.Init.BaudRate = 115200;
 8001524:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001528:	6063      	str	r3, [r4, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800152a:	2500      	movs	r5, #0
 800152c:	60a5      	str	r5, [r4, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 800152e:	60e5      	str	r5, [r4, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8001530:	6125      	str	r5, [r4, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8001532:	230c      	movs	r3, #12
 8001534:	6163      	str	r3, [r4, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001536:	61a5      	str	r5, [r4, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8001538:	61e5      	str	r5, [r4, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800153a:	6225      	str	r5, [r4, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800153c:	6265      	str	r5, [r4, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800153e:	62a5      	str	r5, [r4, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8001540:	4620      	mov	r0, r4
 8001542:	f007 fdb2 	bl	80090aa <HAL_UART_Init>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001546:	4629      	mov	r1, r5
 8001548:	4620      	mov	r0, r4
 800154a:	f007 fe3d 	bl	80091c8 <HAL_UARTEx_SetTxFifoThreshold>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800154e:	4629      	mov	r1, r5
 8001550:	4620      	mov	r0, r4
 8001552:	f007 fe5e 	bl	8009212 <HAL_UARTEx_SetRxFifoThreshold>
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8001556:	4620      	mov	r0, r4
 8001558:	f007 fe17 	bl	800918a <HAL_UARTEx_DisableFifoMode>
}
 800155c:	bd38      	pop	{r3, r4, r5, pc}
 800155e:	bf00      	nop
 8001560:	20005b64 	.word	0x20005b64
 8001564:	40007c00 	.word	0x40007c00

08001568 <MX_USART3_UART_Init>:
{
 8001568:	b538      	push	{r3, r4, r5, lr}
  huart3.Instance = USART3;
 800156a:	4c10      	ldr	r4, [pc, #64]	; (80015ac <MX_USART3_UART_Init+0x44>)
 800156c:	4b10      	ldr	r3, [pc, #64]	; (80015b0 <MX_USART3_UART_Init+0x48>)
 800156e:	6023      	str	r3, [r4, #0]
  huart3.Init.BaudRate = 115200;
 8001570:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001574:	6063      	str	r3, [r4, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001576:	2500      	movs	r5, #0
 8001578:	60a5      	str	r5, [r4, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800157a:	60e5      	str	r5, [r4, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800157c:	6125      	str	r5, [r4, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800157e:	230c      	movs	r3, #12
 8001580:	6163      	str	r3, [r4, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001582:	61a5      	str	r5, [r4, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001584:	61e5      	str	r5, [r4, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001586:	6225      	str	r5, [r4, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001588:	6265      	str	r5, [r4, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800158a:	62a5      	str	r5, [r4, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800158c:	4620      	mov	r0, r4
 800158e:	f007 fd8c 	bl	80090aa <HAL_UART_Init>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001592:	4629      	mov	r1, r5
 8001594:	4620      	mov	r0, r4
 8001596:	f007 fe17 	bl	80091c8 <HAL_UARTEx_SetTxFifoThreshold>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800159a:	4629      	mov	r1, r5
 800159c:	4620      	mov	r0, r4
 800159e:	f007 fe38 	bl	8009212 <HAL_UARTEx_SetRxFifoThreshold>
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80015a2:	4620      	mov	r0, r4
 80015a4:	f007 fdf1 	bl	800918a <HAL_UARTEx_DisableFifoMode>
}
 80015a8:	bd38      	pop	{r3, r4, r5, pc}
 80015aa:	bf00      	nop
 80015ac:	20004d3c 	.word	0x20004d3c
 80015b0:	40004800 	.word	0x40004800

080015b4 <MX_USART6_UART_Init>:
{
 80015b4:	b538      	push	{r3, r4, r5, lr}
  huart6.Instance = USART6;
 80015b6:	4c10      	ldr	r4, [pc, #64]	; (80015f8 <MX_USART6_UART_Init+0x44>)
 80015b8:	4b10      	ldr	r3, [pc, #64]	; (80015fc <MX_USART6_UART_Init+0x48>)
 80015ba:	6023      	str	r3, [r4, #0]
  huart6.Init.BaudRate = 115200;
 80015bc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80015c0:	6063      	str	r3, [r4, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80015c2:	2500      	movs	r5, #0
 80015c4:	60a5      	str	r5, [r4, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80015c6:	60e5      	str	r5, [r4, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80015c8:	6125      	str	r5, [r4, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80015ca:	230c      	movs	r3, #12
 80015cc:	6163      	str	r3, [r4, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ce:	61a5      	str	r5, [r4, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80015d0:	61e5      	str	r5, [r4, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015d2:	6225      	str	r5, [r4, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015d4:	6265      	str	r5, [r4, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015d6:	62a5      	str	r5, [r4, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80015d8:	4620      	mov	r0, r4
 80015da:	f007 fd66 	bl	80090aa <HAL_UART_Init>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015de:	4629      	mov	r1, r5
 80015e0:	4620      	mov	r0, r4
 80015e2:	f007 fdf1 	bl	80091c8 <HAL_UARTEx_SetTxFifoThreshold>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015e6:	4629      	mov	r1, r5
 80015e8:	4620      	mov	r0, r4
 80015ea:	f007 fe12 	bl	8009212 <HAL_UARTEx_SetRxFifoThreshold>
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 80015ee:	4620      	mov	r0, r4
 80015f0:	f007 fdcb 	bl	800918a <HAL_UARTEx_DisableFifoMode>
}
 80015f4:	bd38      	pop	{r3, r4, r5, pc}
 80015f6:	bf00      	nop
 80015f8:	20005bf0 	.word	0x20005bf0
 80015fc:	40011400 	.word	0x40011400

08001600 <MX_USB_OTG_FS_PCD_Init>:
{
 8001600:	b508      	push	{r3, lr}
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001602:	480a      	ldr	r0, [pc, #40]	; (800162c <MX_USB_OTG_FS_PCD_Init+0x2c>)
 8001604:	4b0a      	ldr	r3, [pc, #40]	; (8001630 <MX_USB_OTG_FS_PCD_Init+0x30>)
 8001606:	6003      	str	r3, [r0, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001608:	2309      	movs	r3, #9
 800160a:	6043      	str	r3, [r0, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800160c:	2202      	movs	r2, #2
 800160e:	60c2      	str	r2, [r0, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001610:	2300      	movs	r3, #0
 8001612:	6103      	str	r3, [r0, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001614:	6182      	str	r2, [r0, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001616:	61c3      	str	r3, [r0, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001618:	6203      	str	r3, [r0, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800161a:	6243      	str	r3, [r0, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800161c:	2201      	movs	r2, #1
 800161e:	6282      	str	r2, [r0, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001620:	62c2      	str	r2, [r0, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001622:	6303      	str	r3, [r0, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001624:	f003 fcca 	bl	8004fbc <HAL_PCD_Init>
}
 8001628:	bd08      	pop	{r3, pc}
 800162a:	bf00      	nop
 800162c:	2000521c 	.word	0x2000521c
 8001630:	40080000 	.word	0x40080000

08001634 <MX_USB_OTG_HS_PCD_Init>:
{
 8001634:	b508      	push	{r3, lr}
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8001636:	480a      	ldr	r0, [pc, #40]	; (8001660 <MX_USB_OTG_HS_PCD_Init+0x2c>)
 8001638:	4b0a      	ldr	r3, [pc, #40]	; (8001664 <MX_USB_OTG_HS_PCD_Init+0x30>)
 800163a:	6003      	str	r3, [r0, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 800163c:	2309      	movs	r3, #9
 800163e:	6043      	str	r3, [r0, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 8001640:	2300      	movs	r3, #0
 8001642:	60c3      	str	r3, [r0, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8001644:	6103      	str	r3, [r0, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 8001646:	2201      	movs	r2, #1
 8001648:	6182      	str	r2, [r0, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800164a:	61c3      	str	r3, [r0, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800164c:	6203      	str	r3, [r0, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800164e:	6243      	str	r3, [r0, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.battery_charging_enable = ENABLE;
 8001650:	6282      	str	r2, [r0, #40]	; 0x28
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8001652:	62c3      	str	r3, [r0, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8001654:	6303      	str	r3, [r0, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8001656:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8001658:	f003 fcb0 	bl	8004fbc <HAL_PCD_Init>
}
 800165c:	bd08      	pop	{r3, pc}
 800165e:	bf00      	nop
 8001660:	20004dc8 	.word	0x20004dc8
 8001664:	40040000 	.word	0x40040000

08001668 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001668:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800166a:	2001      	movs	r0, #1
 800166c:	f008 f946 	bl	80098fc <osDelay>
 8001670:	e7fb      	b.n	800166a <StartDefaultTask+0x2>
	...

08001674 <SystemClock_Config>:
{
 8001674:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001676:	b0cd      	sub	sp, #308	; 0x134
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001678:	224c      	movs	r2, #76	; 0x4c
 800167a:	2100      	movs	r1, #0
 800167c:	a839      	add	r0, sp, #228	; 0xe4
 800167e:	f00a fb92 	bl	800bda6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001682:	2220      	movs	r2, #32
 8001684:	2100      	movs	r1, #0
 8001686:	a831      	add	r0, sp, #196	; 0xc4
 8001688:	f00a fb8d 	bl	800bda6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800168c:	22c0      	movs	r2, #192	; 0xc0
 800168e:	2100      	movs	r1, #0
 8001690:	a801      	add	r0, sp, #4
 8001692:	f00a fb88 	bl	800bda6 <memset>
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001696:	2004      	movs	r0, #4
 8001698:	f003 fd3c 	bl	8005114 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800169c:	2300      	movs	r3, #0
 800169e:	9300      	str	r3, [sp, #0]
 80016a0:	4b37      	ldr	r3, [pc, #220]	; (8001780 <SystemClock_Config+0x10c>)
 80016a2:	699a      	ldr	r2, [r3, #24]
 80016a4:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80016a8:	619a      	str	r2, [r3, #24]
 80016aa:	699b      	ldr	r3, [r3, #24]
 80016ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016b0:	9300      	str	r3, [sp, #0]
 80016b2:	4b34      	ldr	r3, [pc, #208]	; (8001784 <SystemClock_Config+0x110>)
 80016b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016b6:	f042 0201 	orr.w	r2, r2, #1
 80016ba:	62da      	str	r2, [r3, #44]	; 0x2c
 80016bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	9300      	str	r3, [sp, #0]
 80016c4:	9b00      	ldr	r3, [sp, #0]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80016c6:	4b2e      	ldr	r3, [pc, #184]	; (8001780 <SystemClock_Config+0x10c>)
 80016c8:	699b      	ldr	r3, [r3, #24]
 80016ca:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80016ce:	d0fa      	beq.n	80016c6 <SystemClock_Config+0x52>
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80016d0:	4a2d      	ldr	r2, [pc, #180]	; (8001788 <SystemClock_Config+0x114>)
 80016d2:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80016d4:	f023 0303 	bic.w	r3, r3, #3
 80016d8:	f043 0302 	orr.w	r3, r3, #2
 80016dc:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 80016de:	2323      	movs	r3, #35	; 0x23
 80016e0:	9339      	str	r3, [sp, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016e6:	933a      	str	r3, [sp, #232]	; 0xe8
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80016e8:	2301      	movs	r3, #1
 80016ea:	933c      	str	r3, [sp, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016ec:	2640      	movs	r6, #64	; 0x40
 80016ee:	963d      	str	r6, [sp, #244]	; 0xf4
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80016f0:	933f      	str	r3, [sp, #252]	; 0xfc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016f2:	2502      	movs	r5, #2
 80016f4:	9542      	str	r5, [sp, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016f6:	9543      	str	r5, [sp, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80016f8:	2305      	movs	r3, #5
 80016fa:	9344      	str	r3, [sp, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 192;
 80016fc:	23c0      	movs	r3, #192	; 0xc0
 80016fe:	9345      	str	r3, [sp, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001700:	9546      	str	r5, [sp, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001702:	9547      	str	r5, [sp, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001704:	9548      	str	r5, [sp, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001706:	2708      	movs	r7, #8
 8001708:	9749      	str	r7, [sp, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800170a:	2400      	movs	r4, #0
 800170c:	944a      	str	r4, [sp, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800170e:	944b      	str	r4, [sp, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001710:	a839      	add	r0, sp, #228	; 0xe4
 8001712:	f003 fd51 	bl	80051b8 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001716:	233f      	movs	r3, #63	; 0x3f
 8001718:	9331      	str	r3, [sp, #196]	; 0xc4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800171a:	2303      	movs	r3, #3
 800171c:	9332      	str	r3, [sp, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800171e:	9433      	str	r4, [sp, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001720:	9734      	str	r7, [sp, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001722:	9635      	str	r6, [sp, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001724:	9636      	str	r6, [sp, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV4;
 8001726:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800172a:	9337      	str	r3, [sp, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800172c:	9638      	str	r6, [sp, #224]	; 0xe0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800172e:	2104      	movs	r1, #4
 8001730:	a831      	add	r0, sp, #196	; 0xc4
 8001732:	f004 f981 	bl	8005a38 <HAL_RCC_ClockConfig>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DSI|RCC_PERIPHCLK_LTDC
 8001736:	4b15      	ldr	r3, [pc, #84]	; (800178c <SystemClock_Config+0x118>)
 8001738:	9301      	str	r3, [sp, #4]
  PeriphClkInitStruct.PLL3.PLL3M = 32;
 800173a:	2320      	movs	r3, #32
 800173c:	930a      	str	r3, [sp, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 129;
 800173e:	2381      	movs	r3, #129	; 0x81
 8001740:	930b      	str	r3, [sp, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001742:	950c      	str	r5, [sp, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001744:	950d      	str	r5, [sp, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001746:	950e      	str	r5, [sp, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001748:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800174c:	930f      	str	r3, [sp, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 800174e:	9410      	str	r4, [sp, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001750:	9411      	str	r4, [sp, #68]	; 0x44
  PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8001752:	9412      	str	r4, [sp, #72]	; 0x48
  PeriphClkInitStruct.DsiClockSelection = RCC_DSICLKSOURCE_PHY;
 8001754:	9414      	str	r4, [sp, #80]	; 0x50
  PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8001756:	941a      	str	r4, [sp, #104]	; 0x68
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001758:	941f      	str	r4, [sp, #124]	; 0x7c
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 800175a:	9420      	str	r4, [sp, #128]	; 0x80
  PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800175c:	9422      	str	r4, [sp, #136]	; 0x88
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800175e:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8001762:	9323      	str	r3, [sp, #140]	; 0x8c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001764:	a801      	add	r0, sp, #4
 8001766:	f004 fc2d 	bl	8005fc4 <HAL_RCCEx_PeriphCLKConfig>
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 800176a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800176e:	4621      	mov	r1, r4
 8001770:	4620      	mov	r0, r4
 8001772:	f004 f819 	bl	80057a8 <HAL_RCC_MCOConfig>
  HAL_PWREx_EnableUSBVoltageDetector();
 8001776:	f003 fd17 	bl	80051a8 <HAL_PWREx_EnableUSBVoltageDetector>
}
 800177a:	b04d      	add	sp, #308	; 0x134
 800177c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800177e:	bf00      	nop
 8001780:	58024800 	.word	0x58024800
 8001784:	58000400 	.word	0x58000400
 8001788:	58024400 	.word	0x58024400
 800178c:	2504200b 	.word	0x2504200b

08001790 <main>:
{
 8001790:	b500      	push	{lr}
 8001792:	b083      	sub	sp, #12
  timeout = 0xFFFF;
 8001794:	f64f 73ff 	movw	r3, #65535	; 0xffff
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8001798:	e000      	b.n	800179c <main+0xc>
 800179a:	4613      	mov	r3, r2
 800179c:	4a2c      	ldr	r2, [pc, #176]	; (8001850 <main+0xc0>)
 800179e:	6812      	ldr	r2, [r2, #0]
 80017a0:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 80017a4:	d002      	beq.n	80017ac <main+0x1c>
 80017a6:	1e5a      	subs	r2, r3, #1
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	dcf6      	bgt.n	800179a <main+0xa>
  HAL_Init();
 80017ac:	f000 ff98 	bl	80026e0 <HAL_Init>
  SystemClock_Config();
 80017b0:	f7ff ff60 	bl	8001674 <SystemClock_Config>
__HAL_RCC_HSEM_CLK_ENABLE();
 80017b4:	4b26      	ldr	r3, [pc, #152]	; (8001850 <main+0xc0>)
 80017b6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80017ba:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80017be:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80017c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ca:	9301      	str	r3, [sp, #4]
 80017cc:	9b01      	ldr	r3, [sp, #4]
HAL_HSEM_FastTake(HSEM_ID_0);
 80017ce:	2000      	movs	r0, #0
 80017d0:	f003 f972 	bl	8004ab8 <HAL_HSEM_FastTake>
HAL_HSEM_Release(HSEM_ID_0,0);
 80017d4:	2100      	movs	r1, #0
 80017d6:	4608      	mov	r0, r1
 80017d8:	f003 f97e 	bl	8004ad8 <HAL_HSEM_Release>
timeout = 0xFFFF;
 80017dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80017e0:	e000      	b.n	80017e4 <main+0x54>
 80017e2:	4613      	mov	r3, r2
 80017e4:	4a1a      	ldr	r2, [pc, #104]	; (8001850 <main+0xc0>)
 80017e6:	6812      	ldr	r2, [r2, #0]
 80017e8:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 80017ec:	d102      	bne.n	80017f4 <main+0x64>
 80017ee:	1e5a      	subs	r2, r3, #1
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	dcf6      	bgt.n	80017e2 <main+0x52>
  MX_GPIO_Init();
 80017f4:	f7ff faca 	bl	8000d8c <MX_GPIO_Init>
  MX_DMA_Init();
 80017f8:	f7ff fbaa 	bl	8000f50 <MX_DMA_Init>
  MX_DSIHOST_DSI_Init();
 80017fc:	f7ff fc28 	bl	8001050 <MX_DSIHOST_DSI_Init>
  MX_ETH_Init();
 8001800:	f7ff fcaa 	bl	8001158 <MX_ETH_Init>
  MX_FMC_Init();
 8001804:	f7ff fcde 	bl	80011c4 <MX_FMC_Init>
  MX_I2C1_Init();
 8001808:	f7ff fd60 	bl	80012cc <MX_I2C1_Init>
  MX_LTDC_Init();
 800180c:	f7ff fd82 	bl	8001314 <MX_LTDC_Init>
  MX_SPI5_Init();
 8001810:	f7ff fdea 	bl	80013e8 <MX_SPI5_Init>
  MX_USART1_UART_Init();
 8001814:	f7ff fe10 	bl	8001438 <MX_USART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001818:	f7ff fef2 	bl	8001600 <MX_USB_OTG_FS_PCD_Init>
  MX_USB_OTG_HS_PCD_Init();
 800181c:	f7ff ff0a 	bl	8001634 <MX_USB_OTG_HS_PCD_Init>
  MX_UART4_Init();
 8001820:	f7ff fe30 	bl	8001484 <MX_UART4_Init>
  MX_UART5_Init();
 8001824:	f7ff fe54 	bl	80014d0 <MX_UART5_Init>
  MX_UART8_Init();
 8001828:	f7ff fe78 	bl	800151c <MX_UART8_Init>
  MX_USART3_UART_Init();
 800182c:	f7ff fe9c 	bl	8001568 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8001830:	f7ff fec0 	bl	80015b4 <MX_USART6_UART_Init>
  osKernelInitialize();
 8001834:	f007 ffb4 	bl	80097a0 <osKernelInitialize>
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001838:	4a06      	ldr	r2, [pc, #24]	; (8001854 <main+0xc4>)
 800183a:	2100      	movs	r1, #0
 800183c:	4806      	ldr	r0, [pc, #24]	; (8001858 <main+0xc8>)
 800183e:	f007 fff3 	bl	8009828 <osThreadNew>
 8001842:	4b06      	ldr	r3, [pc, #24]	; (800185c <main+0xcc>)
 8001844:	6018      	str	r0, [r3, #0]
  _main();
 8001846:	f7fe ff23 	bl	8000690 <_main>
  osKernelStart();
 800184a:	f007 ffc9 	bl	80097e0 <osKernelStart>
 800184e:	e7fe      	b.n	800184e <main+0xbe>
 8001850:	58024400 	.word	0x58024400
 8001854:	0800cf80 	.word	0x0800cf80
 8001858:	08001669 	.word	0x08001669
 800185c:	20004bc0 	.word	0x20004bc0

08001860 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001860:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001862:	6802      	ldr	r2, [r0, #0]
 8001864:	4b03      	ldr	r3, [pc, #12]	; (8001874 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8001866:	429a      	cmp	r2, r3
 8001868:	d000      	beq.n	800186c <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800186a:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 800186c:	f000 ff66 	bl	800273c <HAL_IncTick>
}
 8001870:	e7fb      	b.n	800186a <HAL_TIM_PeriodElapsedCallback+0xa>
 8001872:	bf00      	nop
 8001874:	40010000 	.word	0x40010000

08001878 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001878:	4770      	bx	lr
	...

0800187c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800187c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800187e:	b087      	sub	sp, #28
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001880:	2300      	movs	r3, #0
 8001882:	9301      	str	r3, [sp, #4]
 8001884:	9302      	str	r3, [sp, #8]
 8001886:	9303      	str	r3, [sp, #12]
 8001888:	9304      	str	r3, [sp, #16]
 800188a:	9305      	str	r3, [sp, #20]
  if (FMC_Initialized) {
 800188c:	4b2d      	ldr	r3, [pc, #180]	; (8001944 <HAL_FMC_MspInit+0xc8>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	b10b      	cbz	r3, 8001896 <HAL_FMC_MspInit+0x1a>
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001892:	b007      	add	sp, #28
 8001894:	bdf0      	pop	{r4, r5, r6, r7, pc}
  FMC_Initialized = 1;
 8001896:	4b2b      	ldr	r3, [pc, #172]	; (8001944 <HAL_FMC_MspInit+0xc8>)
 8001898:	2201      	movs	r2, #1
 800189a:	601a      	str	r2, [r3, #0]
  __HAL_RCC_FMC_CLK_ENABLE();
 800189c:	4b2a      	ldr	r3, [pc, #168]	; (8001948 <HAL_FMC_MspInit+0xcc>)
 800189e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80018a2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80018a6:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 80018aa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80018ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018b2:	9300      	str	r3, [sp, #0]
 80018b4:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = D28_Pin|FMC_NBL3_Pin|FMC_NBL2_Pin|D25_Pin 
 80018b6:	f240 63ff 	movw	r3, #1791	; 0x6ff
 80018ba:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018bc:	2602      	movs	r6, #2
 80018be:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c0:	2503      	movs	r5, #3
 80018c2:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80018c4:	240c      	movs	r4, #12
 80018c6:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80018c8:	a901      	add	r1, sp, #4
 80018ca:	4820      	ldr	r0, [pc, #128]	; (800194c <HAL_FMC_MspInit+0xd0>)
 80018cc:	f002 fffe 	bl	80048cc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_NE3_Pin|SDNCAS_Pin|SDCLK_Pin|GPIO_PIN_5 
 80018d0:	f248 533f 	movw	r3, #34111	; 0x853f
 80018d4:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d6:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d8:	2700      	movs	r7, #0
 80018da:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018dc:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80018de:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018e0:	a901      	add	r1, sp, #4
 80018e2:	481b      	ldr	r0, [pc, #108]	; (8001950 <HAL_FMC_MspInit+0xd4>)
 80018e4:	f002 fff2 	bl	80048cc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_NWE_Pin|FMC_NOE_Pin|FMC_NWAIT_Pin|FMC_NE1_Pin 
 80018e8:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 80018ec:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ee:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f0:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f2:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80018f4:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018f6:	a901      	add	r1, sp, #4
 80018f8:	4816      	ldr	r0, [pc, #88]	; (8001954 <HAL_FMC_MspInit+0xd8>)
 80018fa:	f002 ffe7 	bl	80048cc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|D7_Pin|D6_Pin 
 80018fe:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001902:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001904:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001906:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001908:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800190a:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800190c:	a901      	add	r1, sp, #4
 800190e:	4812      	ldr	r0, [pc, #72]	; (8001958 <HAL_FMC_MspInit+0xdc>)
 8001910:	f002 ffdc 	bl	80048cc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = D23_Pin|D22_Pin|D21_Pin|SDNWE_Pin 
 8001914:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001918:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191a:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191c:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800191e:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001920:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001922:	a901      	add	r1, sp, #4
 8001924:	480d      	ldr	r0, [pc, #52]	; (800195c <HAL_FMC_MspInit+0xe0>)
 8001926:	f002 ffd1 	bl	80048cc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = A2_Pin|A1_Pin|A0_Pin|A3_Pin 
 800192a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800192e:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001930:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001932:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001934:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001936:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001938:	a901      	add	r1, sp, #4
 800193a:	4809      	ldr	r0, [pc, #36]	; (8001960 <HAL_FMC_MspInit+0xe4>)
 800193c:	f002 ffc6 	bl	80048cc <HAL_GPIO_Init>
 8001940:	e7a7      	b.n	8001892 <HAL_FMC_MspInit+0x16>
 8001942:	bf00      	nop
 8001944:	20000230 	.word	0x20000230
 8001948:	58024400 	.word	0x58024400
 800194c:	58022000 	.word	0x58022000
 8001950:	58021800 	.word	0x58021800
 8001954:	58020c00 	.word	0x58020c00
 8001958:	58021000 	.word	0x58021000
 800195c:	58021c00 	.word	0x58021c00
 8001960:	58021400 	.word	0x58021400

08001964 <HAL_MspInit>:
{
 8001964:	b500      	push	{lr}
 8001966:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001968:	4b0a      	ldr	r3, [pc, #40]	; (8001994 <HAL_MspInit+0x30>)
 800196a:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 800196e:	f042 0202 	orr.w	r2, r2, #2
 8001972:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8001976:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800197a:	f003 0302 	and.w	r3, r3, #2
 800197e:	9301      	str	r3, [sp, #4]
 8001980:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001982:	2200      	movs	r2, #0
 8001984:	210f      	movs	r1, #15
 8001986:	f06f 0001 	mvn.w	r0, #1
 800198a:	f000 ff1f 	bl	80027cc <HAL_NVIC_SetPriority>
}
 800198e:	b003      	add	sp, #12
 8001990:	f85d fb04 	ldr.w	pc, [sp], #4
 8001994:	58024400 	.word	0x58024400

08001998 <HAL_DSI_MspInit>:
{
 8001998:	b500      	push	{lr}
 800199a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800199c:	2300      	movs	r3, #0
 800199e:	9303      	str	r3, [sp, #12]
 80019a0:	9304      	str	r3, [sp, #16]
 80019a2:	9305      	str	r3, [sp, #20]
 80019a4:	9306      	str	r3, [sp, #24]
 80019a6:	9307      	str	r3, [sp, #28]
  if(hdsi->Instance==DSI)
 80019a8:	6803      	ldr	r3, [r0, #0]
 80019aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019ae:	d002      	beq.n	80019b6 <HAL_DSI_MspInit+0x1e>
}
 80019b0:	b009      	add	sp, #36	; 0x24
 80019b2:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_DSI_CLK_ENABLE();
 80019b6:	4b12      	ldr	r3, [pc, #72]	; (8001a00 <HAL_DSI_MspInit+0x68>)
 80019b8:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 80019bc:	f042 0210 	orr.w	r2, r2, #16
 80019c0:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 80019c4:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 80019c8:	f002 0210 	and.w	r2, r2, #16
 80019cc:	9201      	str	r2, [sp, #4]
 80019ce:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80019d4:	f042 0201 	orr.w	r2, r2, #1
 80019d8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80019dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019e0:	f003 0301 	and.w	r3, r3, #1
 80019e4:	9302      	str	r3, [sp, #8]
 80019e6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80019e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80019ec:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ee:	2302      	movs	r3, #2
 80019f0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 80019f2:	230d      	movs	r3, #13
 80019f4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f6:	a903      	add	r1, sp, #12
 80019f8:	4802      	ldr	r0, [pc, #8]	; (8001a04 <HAL_DSI_MspInit+0x6c>)
 80019fa:	f002 ff67 	bl	80048cc <HAL_GPIO_Init>
}
 80019fe:	e7d7      	b.n	80019b0 <HAL_DSI_MspInit+0x18>
 8001a00:	58024400 	.word	0x58024400
 8001a04:	58020000 	.word	0x58020000

08001a08 <HAL_ETH_MspInit>:
{
 8001a08:	b570      	push	{r4, r5, r6, lr}
 8001a0a:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	9307      	str	r3, [sp, #28]
 8001a10:	9308      	str	r3, [sp, #32]
 8001a12:	9309      	str	r3, [sp, #36]	; 0x24
 8001a14:	930a      	str	r3, [sp, #40]	; 0x28
 8001a16:	930b      	str	r3, [sp, #44]	; 0x2c
  if(heth->Instance==ETH)
 8001a18:	6802      	ldr	r2, [r0, #0]
 8001a1a:	4b37      	ldr	r3, [pc, #220]	; (8001af8 <HAL_ETH_MspInit+0xf0>)
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d001      	beq.n	8001a24 <HAL_ETH_MspInit+0x1c>
}
 8001a20:	b00c      	add	sp, #48	; 0x30
 8001a22:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001a24:	4b35      	ldr	r3, [pc, #212]	; (8001afc <HAL_ETH_MspInit+0xf4>)
 8001a26:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8001a2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a2e:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8001a32:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8001a36:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8001a3a:	9201      	str	r2, [sp, #4]
 8001a3c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001a3e:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8001a42:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001a46:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8001a4a:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8001a4e:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 8001a52:	9202      	str	r2, [sp, #8]
 8001a54:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001a56:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8001a5a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001a5e:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 8001a62:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8001a66:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001a6a:	9203      	str	r2, [sp, #12]
 8001a6c:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a6e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001a72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a76:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001a7a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001a7e:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8001a82:	9204      	str	r2, [sp, #16]
 8001a84:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a86:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001a8a:	f042 0204 	orr.w	r2, r2, #4
 8001a8e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001a92:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001a96:	f002 0204 	and.w	r2, r2, #4
 8001a9a:	9205      	str	r2, [sp, #20]
 8001a9c:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a9e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001aa2:	f042 0201 	orr.w	r2, r2, #1
 8001aa6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001aaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	9306      	str	r3, [sp, #24]
 8001ab4:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD1_Pin|RMII_TXD0_Pin;
 8001ab6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001aba:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001abc:	2602      	movs	r6, #2
 8001abe:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ac0:	250b      	movs	r5, #11
 8001ac2:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ac4:	a907      	add	r1, sp, #28
 8001ac6:	480e      	ldr	r0, [pc, #56]	; (8001b00 <HAL_ETH_MspInit+0xf8>)
 8001ac8:	f002 ff00 	bl	80048cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001acc:	2332      	movs	r3, #50	; 0x32
 8001ace:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad0:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad2:	2400      	movs	r4, #0
 8001ad4:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad6:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ad8:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ada:	a907      	add	r1, sp, #28
 8001adc:	4809      	ldr	r0, [pc, #36]	; (8001b04 <HAL_ETH_MspInit+0xfc>)
 8001ade:	f002 fef5 	bl	80048cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_MDIO_Pin|RMII_REF_CLK_Pin|RMII_CRS_DV_Pin;
 8001ae2:	2386      	movs	r3, #134	; 0x86
 8001ae4:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae6:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae8:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aea:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001aec:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aee:	a907      	add	r1, sp, #28
 8001af0:	4805      	ldr	r0, [pc, #20]	; (8001b08 <HAL_ETH_MspInit+0x100>)
 8001af2:	f002 feeb 	bl	80048cc <HAL_GPIO_Init>
}
 8001af6:	e793      	b.n	8001a20 <HAL_ETH_MspInit+0x18>
 8001af8:	40028000 	.word	0x40028000
 8001afc:	58024400 	.word	0x58024400
 8001b00:	58021800 	.word	0x58021800
 8001b04:	58020800 	.word	0x58020800
 8001b08:	58020000 	.word	0x58020000

08001b0c <HAL_I2C_MspInit>:
{
 8001b0c:	b510      	push	{r4, lr}
 8001b0e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b10:	2300      	movs	r3, #0
 8001b12:	9303      	str	r3, [sp, #12]
 8001b14:	9304      	str	r3, [sp, #16]
 8001b16:	9305      	str	r3, [sp, #20]
 8001b18:	9306      	str	r3, [sp, #24]
 8001b1a:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C1)
 8001b1c:	6802      	ldr	r2, [r0, #0]
 8001b1e:	4b14      	ldr	r3, [pc, #80]	; (8001b70 <HAL_I2C_MspInit+0x64>)
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d001      	beq.n	8001b28 <HAL_I2C_MspInit+0x1c>
}
 8001b24:	b008      	add	sp, #32
 8001b26:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b28:	4c12      	ldr	r4, [pc, #72]	; (8001b74 <HAL_I2C_MspInit+0x68>)
 8001b2a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8001b2e:	f043 0302 	orr.w	r3, r3, #2
 8001b32:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8001b36:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	9301      	str	r3, [sp, #4]
 8001b40:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001b42:	23c0      	movs	r3, #192	; 0xc0
 8001b44:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b46:	2312      	movs	r3, #18
 8001b48:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b4a:	2304      	movs	r3, #4
 8001b4c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b4e:	a903      	add	r1, sp, #12
 8001b50:	4809      	ldr	r0, [pc, #36]	; (8001b78 <HAL_I2C_MspInit+0x6c>)
 8001b52:	f002 febb 	bl	80048cc <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b56:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8001b5a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b5e:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
 8001b62:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8001b66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b6a:	9302      	str	r3, [sp, #8]
 8001b6c:	9b02      	ldr	r3, [sp, #8]
}
 8001b6e:	e7d9      	b.n	8001b24 <HAL_I2C_MspInit+0x18>
 8001b70:	40005400 	.word	0x40005400
 8001b74:	58024400 	.word	0x58024400
 8001b78:	58020400 	.word	0x58020400

08001b7c <HAL_LTDC_MspInit>:
  if(hltdc->Instance==LTDC)
 8001b7c:	6802      	ldr	r2, [r0, #0]
 8001b7e:	4b0a      	ldr	r3, [pc, #40]	; (8001ba8 <HAL_LTDC_MspInit+0x2c>)
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d000      	beq.n	8001b86 <HAL_LTDC_MspInit+0xa>
 8001b84:	4770      	bx	lr
{
 8001b86:	b082      	sub	sp, #8
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001b88:	4b08      	ldr	r3, [pc, #32]	; (8001bac <HAL_LTDC_MspInit+0x30>)
 8001b8a:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
 8001b8e:	f042 0208 	orr.w	r2, r2, #8
 8001b92:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8001b96:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8001b9a:	f003 0308 	and.w	r3, r3, #8
 8001b9e:	9301      	str	r3, [sp, #4]
 8001ba0:	9b01      	ldr	r3, [sp, #4]
}
 8001ba2:	b002      	add	sp, #8
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	50001000 	.word	0x50001000
 8001bac:	58024400 	.word	0x58024400

08001bb0 <HAL_SPI_MspInit>:
{
 8001bb0:	b530      	push	{r4, r5, lr}
 8001bb2:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	9303      	str	r3, [sp, #12]
 8001bb8:	9304      	str	r3, [sp, #16]
 8001bba:	9305      	str	r3, [sp, #20]
 8001bbc:	9306      	str	r3, [sp, #24]
 8001bbe:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI5)
 8001bc0:	6802      	ldr	r2, [r0, #0]
 8001bc2:	4b20      	ldr	r3, [pc, #128]	; (8001c44 <HAL_SPI_MspInit+0x94>)
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d001      	beq.n	8001bcc <HAL_SPI_MspInit+0x1c>
}
 8001bc8:	b009      	add	sp, #36	; 0x24
 8001bca:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001bcc:	4b1e      	ldr	r3, [pc, #120]	; (8001c48 <HAL_SPI_MspInit+0x98>)
 8001bce:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8001bd2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001bd6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8001bda:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8001bde:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001be2:	9200      	str	r2, [sp, #0]
 8001be4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001be6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001bea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001bee:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001bf2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001bf6:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8001bfa:	9201      	str	r2, [sp, #4]
 8001bfc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001bfe:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001c02:	f042 0220 	orr.w	r2, r2, #32
 8001c06:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001c0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c0e:	f003 0320 	and.w	r3, r3, #32
 8001c12:	9302      	str	r3, [sp, #8]
 8001c14:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c16:	2303      	movs	r3, #3
 8001c18:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1a:	2502      	movs	r5, #2
 8001c1c:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001c1e:	2405      	movs	r4, #5
 8001c20:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001c22:	a903      	add	r1, sp, #12
 8001c24:	4809      	ldr	r0, [pc, #36]	; (8001c4c <HAL_SPI_MspInit+0x9c>)
 8001c26:	f002 fe51 	bl	80048cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c2a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c2e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c30:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c32:	2300      	movs	r3, #0
 8001c34:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c36:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001c38:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c3a:	a903      	add	r1, sp, #12
 8001c3c:	4804      	ldr	r0, [pc, #16]	; (8001c50 <HAL_SPI_MspInit+0xa0>)
 8001c3e:	f002 fe45 	bl	80048cc <HAL_GPIO_Init>
}
 8001c42:	e7c1      	b.n	8001bc8 <HAL_SPI_MspInit+0x18>
 8001c44:	40015000 	.word	0x40015000
 8001c48:	58024400 	.word	0x58024400
 8001c4c:	58022800 	.word	0x58022800
 8001c50:	58021400 	.word	0x58021400

08001c54 <HAL_UART_MspInit>:
{
 8001c54:	b570      	push	{r4, r5, r6, lr}
 8001c56:	b094      	sub	sp, #80	; 0x50
 8001c58:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	930f      	str	r3, [sp, #60]	; 0x3c
 8001c5e:	9310      	str	r3, [sp, #64]	; 0x40
 8001c60:	9311      	str	r3, [sp, #68]	; 0x44
 8001c62:	9312      	str	r3, [sp, #72]	; 0x48
 8001c64:	9313      	str	r3, [sp, #76]	; 0x4c
  if(huart->Instance==UART4)
 8001c66:	6803      	ldr	r3, [r0, #0]
 8001c68:	4a81      	ldr	r2, [pc, #516]	; (8001e70 <HAL_UART_MspInit+0x21c>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d015      	beq.n	8001c9a <HAL_UART_MspInit+0x46>
  else if(huart->Instance==UART5)
 8001c6e:	4a81      	ldr	r2, [pc, #516]	; (8001e74 <HAL_UART_MspInit+0x220>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	f000 8087 	beq.w	8001d84 <HAL_UART_MspInit+0x130>
  else if(huart->Instance==UART8)
 8001c76:	4a80      	ldr	r2, [pc, #512]	; (8001e78 <HAL_UART_MspInit+0x224>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	f000 811f 	beq.w	8001ebc <HAL_UART_MspInit+0x268>
  else if(huart->Instance==USART1)
 8001c7e:	4a7f      	ldr	r2, [pc, #508]	; (8001e7c <HAL_UART_MspInit+0x228>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	f000 8180 	beq.w	8001f86 <HAL_UART_MspInit+0x332>
  else if(huart->Instance==USART3)
 8001c86:	4a7e      	ldr	r2, [pc, #504]	; (8001e80 <HAL_UART_MspInit+0x22c>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	f000 81dc 	beq.w	8002046 <HAL_UART_MspInit+0x3f2>
  else if(huart->Instance==USART6)
 8001c8e:	4a7d      	ldr	r2, [pc, #500]	; (8001e84 <HAL_UART_MspInit+0x230>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	f000 8259 	beq.w	8002148 <HAL_UART_MspInit+0x4f4>
}
 8001c96:	b014      	add	sp, #80	; 0x50
 8001c98:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_UART4_CLK_ENABLE();
 8001c9a:	4b7b      	ldr	r3, [pc, #492]	; (8001e88 <HAL_UART_MspInit+0x234>)
 8001c9c:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001ca0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001ca4:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8001ca8:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001cac:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8001cb0:	9201      	str	r2, [sp, #4]
 8001cb2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cb4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001cb8:	f042 0202 	orr.w	r2, r2, #2
 8001cbc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001cc0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001cc4:	f002 0202 	and.w	r2, r2, #2
 8001cc8:	9202      	str	r2, [sp, #8]
 8001cca:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ccc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001cd0:	f042 0201 	orr.w	r2, r2, #1
 8001cd4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001cd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cdc:	f003 0301 	and.w	r3, r3, #1
 8001ce0:	9303      	str	r3, [sp, #12]
 8001ce2:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001ce4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ce8:	930f      	str	r3, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cea:	2502      	movs	r5, #2
 8001cec:	9510      	str	r5, [sp, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001cee:	2608      	movs	r6, #8
 8001cf0:	9613      	str	r6, [sp, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cf2:	a90f      	add	r1, sp, #60	; 0x3c
 8001cf4:	4865      	ldr	r0, [pc, #404]	; (8001e8c <HAL_UART_MspInit+0x238>)
 8001cf6:	f002 fde9 	bl	80048cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	930f      	str	r3, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfe:	9510      	str	r5, [sp, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d00:	2500      	movs	r5, #0
 8001d02:	9511      	str	r5, [sp, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d04:	9512      	str	r5, [sp, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001d06:	9613      	str	r6, [sp, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d08:	a90f      	add	r1, sp, #60	; 0x3c
 8001d0a:	4861      	ldr	r0, [pc, #388]	; (8001e90 <HAL_UART_MspInit+0x23c>)
 8001d0c:	f002 fdde 	bl	80048cc <HAL_GPIO_Init>
    hdma_uart4_rx.Instance = DMA1_Stream0;
 8001d10:	4860      	ldr	r0, [pc, #384]	; (8001e94 <HAL_UART_MspInit+0x240>)
 8001d12:	4b61      	ldr	r3, [pc, #388]	; (8001e98 <HAL_UART_MspInit+0x244>)
 8001d14:	6003      	str	r3, [r0, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8001d16:	233f      	movs	r3, #63	; 0x3f
 8001d18:	6043      	str	r3, [r0, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d1a:	6085      	str	r5, [r0, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d1c:	60c5      	str	r5, [r0, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d22:	6103      	str	r3, [r0, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d24:	6145      	str	r5, [r0, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d26:	6185      	str	r5, [r0, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8001d28:	61c5      	str	r5, [r0, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d2a:	6205      	str	r5, [r0, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d2c:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001d2e:	f000 ffb3 	bl	8002c98 <HAL_DMA_Init>
 8001d32:	bb08      	cbnz	r0, 8001d78 <HAL_UART_MspInit+0x124>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8001d34:	4b57      	ldr	r3, [pc, #348]	; (8001e94 <HAL_UART_MspInit+0x240>)
 8001d36:	67a3      	str	r3, [r4, #120]	; 0x78
 8001d38:	639c      	str	r4, [r3, #56]	; 0x38
    hdma_uart4_tx.Instance = DMA1_Stream1;
 8001d3a:	4858      	ldr	r0, [pc, #352]	; (8001e9c <HAL_UART_MspInit+0x248>)
 8001d3c:	4b58      	ldr	r3, [pc, #352]	; (8001ea0 <HAL_UART_MspInit+0x24c>)
 8001d3e:	6003      	str	r3, [r0, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8001d40:	2340      	movs	r3, #64	; 0x40
 8001d42:	6043      	str	r3, [r0, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d44:	6083      	str	r3, [r0, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d46:	2300      	movs	r3, #0
 8001d48:	60c3      	str	r3, [r0, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d4e:	6102      	str	r2, [r0, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d50:	6143      	str	r3, [r0, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d52:	6183      	str	r3, [r0, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8001d54:	61c3      	str	r3, [r0, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d56:	6203      	str	r3, [r0, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d58:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8001d5a:	f000 ff9d 	bl	8002c98 <HAL_DMA_Init>
 8001d5e:	b970      	cbnz	r0, 8001d7e <HAL_UART_MspInit+0x12a>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8001d60:	4b4e      	ldr	r3, [pc, #312]	; (8001e9c <HAL_UART_MspInit+0x248>)
 8001d62:	6763      	str	r3, [r4, #116]	; 0x74
 8001d64:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001d66:	2200      	movs	r2, #0
 8001d68:	4611      	mov	r1, r2
 8001d6a:	2034      	movs	r0, #52	; 0x34
 8001d6c:	f000 fd2e 	bl	80027cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001d70:	2034      	movs	r0, #52	; 0x34
 8001d72:	f000 fd5d 	bl	8002830 <HAL_NVIC_EnableIRQ>
 8001d76:	e78e      	b.n	8001c96 <HAL_UART_MspInit+0x42>
      Error_Handler();
 8001d78:	f7ff fd7e 	bl	8001878 <Error_Handler>
 8001d7c:	e7da      	b.n	8001d34 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8001d7e:	f7ff fd7b 	bl	8001878 <Error_Handler>
 8001d82:	e7ed      	b.n	8001d60 <HAL_UART_MspInit+0x10c>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001d84:	4b40      	ldr	r3, [pc, #256]	; (8001e88 <HAL_UART_MspInit+0x234>)
 8001d86:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001d8a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001d8e:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8001d92:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001d96:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001d9a:	9204      	str	r2, [sp, #16]
 8001d9c:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d9e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001da2:	f042 0204 	orr.w	r2, r2, #4
 8001da6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001daa:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001dae:	f002 0204 	and.w	r2, r2, #4
 8001db2:	9205      	str	r2, [sp, #20]
 8001db4:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001db6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001dba:	f042 0208 	orr.w	r2, r2, #8
 8001dbe:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001dc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dc6:	f003 0308 	and.w	r3, r3, #8
 8001dca:	9306      	str	r3, [sp, #24]
 8001dcc:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001dce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dd2:	930f      	str	r3, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd4:	2502      	movs	r5, #2
 8001dd6:	9510      	str	r5, [sp, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001dd8:	2608      	movs	r6, #8
 8001dda:	9613      	str	r6, [sp, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ddc:	a90f      	add	r1, sp, #60	; 0x3c
 8001dde:	4831      	ldr	r0, [pc, #196]	; (8001ea4 <HAL_UART_MspInit+0x250>)
 8001de0:	f002 fd74 	bl	80048cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001de4:	2304      	movs	r3, #4
 8001de6:	930f      	str	r3, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de8:	9510      	str	r5, [sp, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dea:	2500      	movs	r5, #0
 8001dec:	9511      	str	r5, [sp, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dee:	9512      	str	r5, [sp, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001df0:	9613      	str	r6, [sp, #76]	; 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001df2:	a90f      	add	r1, sp, #60	; 0x3c
 8001df4:	482c      	ldr	r0, [pc, #176]	; (8001ea8 <HAL_UART_MspInit+0x254>)
 8001df6:	f002 fd69 	bl	80048cc <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream2;
 8001dfa:	482c      	ldr	r0, [pc, #176]	; (8001eac <HAL_UART_MspInit+0x258>)
 8001dfc:	4b2c      	ldr	r3, [pc, #176]	; (8001eb0 <HAL_UART_MspInit+0x25c>)
 8001dfe:	6003      	str	r3, [r0, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 8001e00:	2341      	movs	r3, #65	; 0x41
 8001e02:	6043      	str	r3, [r0, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e04:	6085      	str	r5, [r0, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e06:	60c5      	str	r5, [r0, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e0c:	6103      	str	r3, [r0, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e0e:	6145      	str	r5, [r0, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e10:	6185      	str	r5, [r0, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8001e12:	61c5      	str	r5, [r0, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e14:	6205      	str	r5, [r0, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e16:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8001e18:	f000 ff3e 	bl	8002c98 <HAL_DMA_Init>
 8001e1c:	bb10      	cbnz	r0, 8001e64 <HAL_UART_MspInit+0x210>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8001e1e:	4b23      	ldr	r3, [pc, #140]	; (8001eac <HAL_UART_MspInit+0x258>)
 8001e20:	67a3      	str	r3, [r4, #120]	; 0x78
 8001e22:	639c      	str	r4, [r3, #56]	; 0x38
    hdma_uart5_tx.Instance = DMA1_Stream3;
 8001e24:	4823      	ldr	r0, [pc, #140]	; (8001eb4 <HAL_UART_MspInit+0x260>)
 8001e26:	4b24      	ldr	r3, [pc, #144]	; (8001eb8 <HAL_UART_MspInit+0x264>)
 8001e28:	6003      	str	r3, [r0, #0]
    hdma_uart5_tx.Init.Request = DMA_REQUEST_UART5_TX;
 8001e2a:	2342      	movs	r3, #66	; 0x42
 8001e2c:	6043      	str	r3, [r0, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e2e:	2340      	movs	r3, #64	; 0x40
 8001e30:	6083      	str	r3, [r0, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e32:	2300      	movs	r3, #0
 8001e34:	60c3      	str	r3, [r0, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e36:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e3a:	6102      	str	r2, [r0, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e3c:	6143      	str	r3, [r0, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e3e:	6183      	str	r3, [r0, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8001e40:	61c3      	str	r3, [r0, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e42:	6203      	str	r3, [r0, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e44:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8001e46:	f000 ff27 	bl	8002c98 <HAL_DMA_Init>
 8001e4a:	b970      	cbnz	r0, 8001e6a <HAL_UART_MspInit+0x216>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart5_tx);
 8001e4c:	4b19      	ldr	r3, [pc, #100]	; (8001eb4 <HAL_UART_MspInit+0x260>)
 8001e4e:	6763      	str	r3, [r4, #116]	; 0x74
 8001e50:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001e52:	2200      	movs	r2, #0
 8001e54:	4611      	mov	r1, r2
 8001e56:	2035      	movs	r0, #53	; 0x35
 8001e58:	f000 fcb8 	bl	80027cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001e5c:	2035      	movs	r0, #53	; 0x35
 8001e5e:	f000 fce7 	bl	8002830 <HAL_NVIC_EnableIRQ>
 8001e62:	e718      	b.n	8001c96 <HAL_UART_MspInit+0x42>
      Error_Handler();
 8001e64:	f7ff fd08 	bl	8001878 <Error_Handler>
 8001e68:	e7d9      	b.n	8001e1e <HAL_UART_MspInit+0x1ca>
      Error_Handler();
 8001e6a:	f7ff fd05 	bl	8001878 <Error_Handler>
 8001e6e:	e7ed      	b.n	8001e4c <HAL_UART_MspInit+0x1f8>
 8001e70:	40004c00 	.word	0x40004c00
 8001e74:	40005000 	.word	0x40005000
 8001e78:	40007c00 	.word	0x40007c00
 8001e7c:	40011000 	.word	0x40011000
 8001e80:	40004800 	.word	0x40004800
 8001e84:	40011400 	.word	0x40011400
 8001e88:	58024400 	.word	0x58024400
 8001e8c:	58020400 	.word	0x58020400
 8001e90:	58020000 	.word	0x58020000
 8001e94:	20004b48 	.word	0x20004b48
 8001e98:	40020010 	.word	0x40020010
 8001e9c:	20005e58 	.word	0x20005e58
 8001ea0:	40020028 	.word	0x40020028
 8001ea4:	58020800 	.word	0x58020800
 8001ea8:	58020c00 	.word	0x58020c00
 8001eac:	20005d08 	.word	0x20005d08
 8001eb0:	40020040 	.word	0x40020040
 8001eb4:	20005ed0 	.word	0x20005ed0
 8001eb8:	40020058 	.word	0x40020058
    __HAL_RCC_UART8_CLK_ENABLE();
 8001ebc:	4b92      	ldr	r3, [pc, #584]	; (8002108 <HAL_UART_MspInit+0x4b4>)
 8001ebe:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001ec2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001ec6:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8001eca:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001ece:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001ed2:	9207      	str	r2, [sp, #28]
 8001ed4:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001ed6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001eda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ede:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001ee2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ee6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001eea:	9308      	str	r3, [sp, #32]
 8001eec:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8001eee:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ef2:	930f      	str	r3, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	9310      	str	r3, [sp, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8001ef8:	2308      	movs	r3, #8
 8001efa:	9313      	str	r3, [sp, #76]	; 0x4c
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001efc:	a90f      	add	r1, sp, #60	; 0x3c
 8001efe:	4883      	ldr	r0, [pc, #524]	; (800210c <HAL_UART_MspInit+0x4b8>)
 8001f00:	f002 fce4 	bl	80048cc <HAL_GPIO_Init>
    hdma_uart8_rx.Instance = DMA1_Stream4;
 8001f04:	4882      	ldr	r0, [pc, #520]	; (8002110 <HAL_UART_MspInit+0x4bc>)
 8001f06:	4b83      	ldr	r3, [pc, #524]	; (8002114 <HAL_UART_MspInit+0x4c0>)
 8001f08:	6003      	str	r3, [r0, #0]
    hdma_uart8_rx.Init.Request = DMA_REQUEST_UART8_RX;
 8001f0a:	2351      	movs	r3, #81	; 0x51
 8001f0c:	6043      	str	r3, [r0, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	6083      	str	r3, [r0, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f12:	60c3      	str	r3, [r0, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f18:	6102      	str	r2, [r0, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f1a:	6143      	str	r3, [r0, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f1c:	6183      	str	r3, [r0, #24]
    hdma_uart8_rx.Init.Mode = DMA_NORMAL;
 8001f1e:	61c3      	str	r3, [r0, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f20:	6203      	str	r3, [r0, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001f22:	2204      	movs	r2, #4
 8001f24:	6242      	str	r2, [r0, #36]	; 0x24
    hdma_uart8_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001f26:	2203      	movs	r2, #3
 8001f28:	6282      	str	r2, [r0, #40]	; 0x28
    hdma_uart8_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001f2a:	62c3      	str	r3, [r0, #44]	; 0x2c
    hdma_uart8_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001f2c:	6303      	str	r3, [r0, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 8001f2e:	f000 feb3 	bl	8002c98 <HAL_DMA_Init>
 8001f32:	bb10      	cbnz	r0, 8001f7a <HAL_UART_MspInit+0x326>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart8_rx);
 8001f34:	4b76      	ldr	r3, [pc, #472]	; (8002110 <HAL_UART_MspInit+0x4bc>)
 8001f36:	67a3      	str	r3, [r4, #120]	; 0x78
 8001f38:	639c      	str	r4, [r3, #56]	; 0x38
    hdma_uart8_tx.Instance = DMA1_Stream5;
 8001f3a:	4877      	ldr	r0, [pc, #476]	; (8002118 <HAL_UART_MspInit+0x4c4>)
 8001f3c:	4b77      	ldr	r3, [pc, #476]	; (800211c <HAL_UART_MspInit+0x4c8>)
 8001f3e:	6003      	str	r3, [r0, #0]
    hdma_uart8_tx.Init.Request = DMA_REQUEST_UART8_TX;
 8001f40:	2352      	movs	r3, #82	; 0x52
 8001f42:	6043      	str	r3, [r0, #4]
    hdma_uart8_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f44:	2340      	movs	r3, #64	; 0x40
 8001f46:	6083      	str	r3, [r0, #8]
    hdma_uart8_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	60c3      	str	r3, [r0, #12]
    hdma_uart8_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f50:	6102      	str	r2, [r0, #16]
    hdma_uart8_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f52:	6143      	str	r3, [r0, #20]
    hdma_uart8_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f54:	6183      	str	r3, [r0, #24]
    hdma_uart8_tx.Init.Mode = DMA_NORMAL;
 8001f56:	61c3      	str	r3, [r0, #28]
    hdma_uart8_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001f58:	6203      	str	r3, [r0, #32]
    hdma_uart8_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f5a:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_tx) != HAL_OK)
 8001f5c:	f000 fe9c 	bl	8002c98 <HAL_DMA_Init>
 8001f60:	b970      	cbnz	r0, 8001f80 <HAL_UART_MspInit+0x32c>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart8_tx);
 8001f62:	4b6d      	ldr	r3, [pc, #436]	; (8002118 <HAL_UART_MspInit+0x4c4>)
 8001f64:	6763      	str	r3, [r4, #116]	; 0x74
 8001f66:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 8001f68:	2200      	movs	r2, #0
 8001f6a:	4611      	mov	r1, r2
 8001f6c:	2053      	movs	r0, #83	; 0x53
 8001f6e:	f000 fc2d 	bl	80027cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8001f72:	2053      	movs	r0, #83	; 0x53
 8001f74:	f000 fc5c 	bl	8002830 <HAL_NVIC_EnableIRQ>
 8001f78:	e68d      	b.n	8001c96 <HAL_UART_MspInit+0x42>
      Error_Handler();
 8001f7a:	f7ff fc7d 	bl	8001878 <Error_Handler>
 8001f7e:	e7d9      	b.n	8001f34 <HAL_UART_MspInit+0x2e0>
      Error_Handler();
 8001f80:	f7ff fc7a 	bl	8001878 <Error_Handler>
 8001f84:	e7ed      	b.n	8001f62 <HAL_UART_MspInit+0x30e>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f86:	4b60      	ldr	r3, [pc, #384]	; (8002108 <HAL_UART_MspInit+0x4b4>)
 8001f88:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8001f8c:	f042 0210 	orr.w	r2, r2, #16
 8001f90:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8001f94:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8001f98:	f002 0210 	and.w	r2, r2, #16
 8001f9c:	9209      	str	r2, [sp, #36]	; 0x24
 8001f9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fa0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001fa4:	f042 0202 	orr.w	r2, r2, #2
 8001fa8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001fac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fb0:	f003 0302 	and.w	r3, r3, #2
 8001fb4:	930a      	str	r3, [sp, #40]	; 0x28
 8001fb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = RS_232RX_Pin|RS232_TX_Pin;
 8001fb8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001fbc:	930f      	str	r3, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	9310      	str	r3, [sp, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001fc2:	2304      	movs	r3, #4
 8001fc4:	9313      	str	r3, [sp, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fc6:	a90f      	add	r1, sp, #60	; 0x3c
 8001fc8:	4855      	ldr	r0, [pc, #340]	; (8002120 <HAL_UART_MspInit+0x4cc>)
 8001fca:	f002 fc7f 	bl	80048cc <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Stream6;
 8001fce:	4855      	ldr	r0, [pc, #340]	; (8002124 <HAL_UART_MspInit+0x4d0>)
 8001fd0:	4b55      	ldr	r3, [pc, #340]	; (8002128 <HAL_UART_MspInit+0x4d4>)
 8001fd2:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001fd4:	2329      	movs	r3, #41	; 0x29
 8001fd6:	6043      	str	r3, [r0, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	6083      	str	r3, [r0, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fdc:	60c3      	str	r3, [r0, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001fde:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fe2:	6102      	str	r2, [r0, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fe4:	6143      	str	r3, [r0, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fe6:	6183      	str	r3, [r0, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001fe8:	61c3      	str	r3, [r0, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001fea:	6203      	str	r3, [r0, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fec:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001fee:	f000 fe53 	bl	8002c98 <HAL_DMA_Init>
 8001ff2:	bb10      	cbnz	r0, 800203a <HAL_UART_MspInit+0x3e6>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001ff4:	4b4b      	ldr	r3, [pc, #300]	; (8002124 <HAL_UART_MspInit+0x4d0>)
 8001ff6:	67a3      	str	r3, [r4, #120]	; 0x78
 8001ff8:	639c      	str	r4, [r3, #56]	; 0x38
    hdma_usart1_tx.Instance = DMA1_Stream7;
 8001ffa:	484c      	ldr	r0, [pc, #304]	; (800212c <HAL_UART_MspInit+0x4d8>)
 8001ffc:	4b4c      	ldr	r3, [pc, #304]	; (8002130 <HAL_UART_MspInit+0x4dc>)
 8001ffe:	6003      	str	r3, [r0, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002000:	232a      	movs	r3, #42	; 0x2a
 8002002:	6043      	str	r3, [r0, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002004:	2340      	movs	r3, #64	; 0x40
 8002006:	6083      	str	r3, [r0, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002008:	2300      	movs	r3, #0
 800200a:	60c3      	str	r3, [r0, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800200c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002010:	6102      	str	r2, [r0, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002012:	6143      	str	r3, [r0, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002014:	6183      	str	r3, [r0, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002016:	61c3      	str	r3, [r0, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002018:	6203      	str	r3, [r0, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800201a:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800201c:	f000 fe3c 	bl	8002c98 <HAL_DMA_Init>
 8002020:	b970      	cbnz	r0, 8002040 <HAL_UART_MspInit+0x3ec>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002022:	4b42      	ldr	r3, [pc, #264]	; (800212c <HAL_UART_MspInit+0x4d8>)
 8002024:	6763      	str	r3, [r4, #116]	; 0x74
 8002026:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002028:	2200      	movs	r2, #0
 800202a:	4611      	mov	r1, r2
 800202c:	2025      	movs	r0, #37	; 0x25
 800202e:	f000 fbcd 	bl	80027cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002032:	2025      	movs	r0, #37	; 0x25
 8002034:	f000 fbfc 	bl	8002830 <HAL_NVIC_EnableIRQ>
 8002038:	e62d      	b.n	8001c96 <HAL_UART_MspInit+0x42>
      Error_Handler();
 800203a:	f7ff fc1d 	bl	8001878 <Error_Handler>
 800203e:	e7d9      	b.n	8001ff4 <HAL_UART_MspInit+0x3a0>
      Error_Handler();
 8002040:	f7ff fc1a 	bl	8001878 <Error_Handler>
 8002044:	e7ed      	b.n	8002022 <HAL_UART_MspInit+0x3ce>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002046:	4b30      	ldr	r3, [pc, #192]	; (8002108 <HAL_UART_MspInit+0x4b4>)
 8002048:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800204c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002050:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8002054:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8002058:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800205c:	920b      	str	r2, [sp, #44]	; 0x2c
 800205e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002060:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002064:	f042 0204 	orr.w	r2, r2, #4
 8002068:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800206c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002070:	f003 0304 	and.w	r3, r3, #4
 8002074:	930c      	str	r3, [sp, #48]	; 0x30
 8002076:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002078:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800207c:	930f      	str	r3, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800207e:	2302      	movs	r3, #2
 8002080:	9310      	str	r3, [sp, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002082:	2307      	movs	r3, #7
 8002084:	9313      	str	r3, [sp, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002086:	a90f      	add	r1, sp, #60	; 0x3c
 8002088:	482a      	ldr	r0, [pc, #168]	; (8002134 <HAL_UART_MspInit+0x4e0>)
 800208a:	f002 fc1f 	bl	80048cc <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA2_Stream0;
 800208e:	482a      	ldr	r0, [pc, #168]	; (8002138 <HAL_UART_MspInit+0x4e4>)
 8002090:	4b2a      	ldr	r3, [pc, #168]	; (800213c <HAL_UART_MspInit+0x4e8>)
 8002092:	6003      	str	r3, [r0, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8002094:	232d      	movs	r3, #45	; 0x2d
 8002096:	6043      	str	r3, [r0, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002098:	2300      	movs	r3, #0
 800209a:	6083      	str	r3, [r0, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800209c:	60c3      	str	r3, [r0, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800209e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020a2:	6102      	str	r2, [r0, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020a4:	6143      	str	r3, [r0, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020a6:	6183      	str	r3, [r0, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80020a8:	61c3      	str	r3, [r0, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80020aa:	6203      	str	r3, [r0, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020ac:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80020ae:	f000 fdf3 	bl	8002c98 <HAL_DMA_Init>
 80020b2:	bb10      	cbnz	r0, 80020fa <HAL_UART_MspInit+0x4a6>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80020b4:	4b20      	ldr	r3, [pc, #128]	; (8002138 <HAL_UART_MspInit+0x4e4>)
 80020b6:	67a3      	str	r3, [r4, #120]	; 0x78
 80020b8:	639c      	str	r4, [r3, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA2_Stream1;
 80020ba:	4821      	ldr	r0, [pc, #132]	; (8002140 <HAL_UART_MspInit+0x4ec>)
 80020bc:	4b21      	ldr	r3, [pc, #132]	; (8002144 <HAL_UART_MspInit+0x4f0>)
 80020be:	6003      	str	r3, [r0, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80020c0:	232e      	movs	r3, #46	; 0x2e
 80020c2:	6043      	str	r3, [r0, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80020c4:	2340      	movs	r3, #64	; 0x40
 80020c6:	6083      	str	r3, [r0, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020c8:	2300      	movs	r3, #0
 80020ca:	60c3      	str	r3, [r0, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80020cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020d0:	6102      	str	r2, [r0, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020d2:	6143      	str	r3, [r0, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020d4:	6183      	str	r3, [r0, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80020d6:	61c3      	str	r3, [r0, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80020d8:	6203      	str	r3, [r0, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020da:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80020dc:	f000 fddc 	bl	8002c98 <HAL_DMA_Init>
 80020e0:	b970      	cbnz	r0, 8002100 <HAL_UART_MspInit+0x4ac>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80020e2:	4b17      	ldr	r3, [pc, #92]	; (8002140 <HAL_UART_MspInit+0x4ec>)
 80020e4:	6763      	str	r3, [r4, #116]	; 0x74
 80020e6:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80020e8:	2200      	movs	r2, #0
 80020ea:	4611      	mov	r1, r2
 80020ec:	2027      	movs	r0, #39	; 0x27
 80020ee:	f000 fb6d 	bl	80027cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80020f2:	2027      	movs	r0, #39	; 0x27
 80020f4:	f000 fb9c 	bl	8002830 <HAL_NVIC_EnableIRQ>
 80020f8:	e5cd      	b.n	8001c96 <HAL_UART_MspInit+0x42>
      Error_Handler();
 80020fa:	f7ff fbbd 	bl	8001878 <Error_Handler>
 80020fe:	e7d9      	b.n	80020b4 <HAL_UART_MspInit+0x460>
      Error_Handler();
 8002100:	f7ff fbba 	bl	8001878 <Error_Handler>
 8002104:	e7ed      	b.n	80020e2 <HAL_UART_MspInit+0x48e>
 8002106:	bf00      	nop
 8002108:	58024400 	.word	0x58024400
 800210c:	58022400 	.word	0x58022400
 8002110:	20005954 	.word	0x20005954
 8002114:	40020070 	.word	0x40020070
 8002118:	20005aa0 	.word	0x20005aa0
 800211c:	40020088 	.word	0x40020088
 8002120:	58020400 	.word	0x58020400
 8002124:	200058dc 	.word	0x200058dc
 8002128:	400200a0 	.word	0x400200a0
 800212c:	20005760 	.word	0x20005760
 8002130:	400200b8 	.word	0x400200b8
 8002134:	58020800 	.word	0x58020800
 8002138:	20004cc4 	.word	0x20004cc4
 800213c:	40020410 	.word	0x40020410
 8002140:	20005640 	.word	0x20005640
 8002144:	40020428 	.word	0x40020428
    __HAL_RCC_USART6_CLK_ENABLE();
 8002148:	4b32      	ldr	r3, [pc, #200]	; (8002214 <HAL_UART_MspInit+0x5c0>)
 800214a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800214e:	f042 0220 	orr.w	r2, r2, #32
 8002152:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8002156:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800215a:	f002 0220 	and.w	r2, r2, #32
 800215e:	920d      	str	r2, [sp, #52]	; 0x34
 8002160:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002162:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002166:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800216a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800216e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002176:	930e      	str	r3, [sp, #56]	; 0x38
 8002178:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 800217a:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 800217e:	930f      	str	r3, [sp, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002180:	2302      	movs	r3, #2
 8002182:	9310      	str	r3, [sp, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8002184:	2307      	movs	r3, #7
 8002186:	9313      	str	r3, [sp, #76]	; 0x4c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002188:	a90f      	add	r1, sp, #60	; 0x3c
 800218a:	4823      	ldr	r0, [pc, #140]	; (8002218 <HAL_UART_MspInit+0x5c4>)
 800218c:	f002 fb9e 	bl	80048cc <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream2;
 8002190:	4822      	ldr	r0, [pc, #136]	; (800221c <HAL_UART_MspInit+0x5c8>)
 8002192:	4b23      	ldr	r3, [pc, #140]	; (8002220 <HAL_UART_MspInit+0x5cc>)
 8002194:	6003      	str	r3, [r0, #0]
    hdma_usart6_rx.Init.Request = DMA_REQUEST_USART6_RX;
 8002196:	2347      	movs	r3, #71	; 0x47
 8002198:	6043      	str	r3, [r0, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800219a:	2300      	movs	r3, #0
 800219c:	6083      	str	r3, [r0, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800219e:	60c3      	str	r3, [r0, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80021a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021a4:	6102      	str	r2, [r0, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021a6:	6143      	str	r3, [r0, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021a8:	6183      	str	r3, [r0, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 80021aa:	61c3      	str	r3, [r0, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80021ac:	6203      	str	r3, [r0, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80021ae:	2204      	movs	r2, #4
 80021b0:	6242      	str	r2, [r0, #36]	; 0x24
    hdma_usart6_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80021b2:	2203      	movs	r2, #3
 80021b4:	6282      	str	r2, [r0, #40]	; 0x28
    hdma_usart6_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 80021b6:	62c3      	str	r3, [r0, #44]	; 0x2c
    hdma_usart6_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80021b8:	6303      	str	r3, [r0, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80021ba:	f000 fd6d 	bl	8002c98 <HAL_DMA_Init>
 80021be:	bb10      	cbnz	r0, 8002206 <HAL_UART_MspInit+0x5b2>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 80021c0:	4b16      	ldr	r3, [pc, #88]	; (800221c <HAL_UART_MspInit+0x5c8>)
 80021c2:	67a3      	str	r3, [r4, #120]	; 0x78
 80021c4:	639c      	str	r4, [r3, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream3;
 80021c6:	4817      	ldr	r0, [pc, #92]	; (8002224 <HAL_UART_MspInit+0x5d0>)
 80021c8:	4b17      	ldr	r3, [pc, #92]	; (8002228 <HAL_UART_MspInit+0x5d4>)
 80021ca:	6003      	str	r3, [r0, #0]
    hdma_usart6_tx.Init.Request = DMA_REQUEST_USART6_TX;
 80021cc:	2348      	movs	r3, #72	; 0x48
 80021ce:	6043      	str	r3, [r0, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021d0:	2340      	movs	r3, #64	; 0x40
 80021d2:	6083      	str	r3, [r0, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021d4:	2300      	movs	r3, #0
 80021d6:	60c3      	str	r3, [r0, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 80021d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021dc:	6102      	str	r2, [r0, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021de:	6143      	str	r3, [r0, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021e0:	6183      	str	r3, [r0, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 80021e2:	61c3      	str	r3, [r0, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 80021e4:	6203      	str	r3, [r0, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021e6:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 80021e8:	f000 fd56 	bl	8002c98 <HAL_DMA_Init>
 80021ec:	b970      	cbnz	r0, 800220c <HAL_UART_MspInit+0x5b8>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 80021ee:	4b0d      	ldr	r3, [pc, #52]	; (8002224 <HAL_UART_MspInit+0x5d0>)
 80021f0:	6763      	str	r3, [r4, #116]	; 0x74
 80021f2:	639c      	str	r4, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80021f4:	2200      	movs	r2, #0
 80021f6:	4611      	mov	r1, r2
 80021f8:	2047      	movs	r0, #71	; 0x47
 80021fa:	f000 fae7 	bl	80027cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80021fe:	2047      	movs	r0, #71	; 0x47
 8002200:	f000 fb16 	bl	8002830 <HAL_NVIC_EnableIRQ>
}
 8002204:	e547      	b.n	8001c96 <HAL_UART_MspInit+0x42>
      Error_Handler();
 8002206:	f7ff fb37 	bl	8001878 <Error_Handler>
 800220a:	e7d9      	b.n	80021c0 <HAL_UART_MspInit+0x56c>
      Error_Handler();
 800220c:	f7ff fb34 	bl	8001878 <Error_Handler>
 8002210:	e7ed      	b.n	80021ee <HAL_UART_MspInit+0x59a>
 8002212:	bf00      	nop
 8002214:	58024400 	.word	0x58024400
 8002218:	58021800 	.word	0x58021800
 800221c:	20004bc4 	.word	0x20004bc4
 8002220:	40020440 	.word	0x40020440
 8002224:	20005864 	.word	0x20005864
 8002228:	40020458 	.word	0x40020458

0800222c <HAL_PCD_MspInit>:
{
 800222c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800222e:	b08f      	sub	sp, #60	; 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002230:	2300      	movs	r3, #0
 8002232:	9309      	str	r3, [sp, #36]	; 0x24
 8002234:	930a      	str	r3, [sp, #40]	; 0x28
 8002236:	930b      	str	r3, [sp, #44]	; 0x2c
 8002238:	930c      	str	r3, [sp, #48]	; 0x30
 800223a:	930d      	str	r3, [sp, #52]	; 0x34
  if(hpcd->Instance==USB_OTG_FS)
 800223c:	6803      	ldr	r3, [r0, #0]
 800223e:	4a63      	ldr	r2, [pc, #396]	; (80023cc <HAL_PCD_MspInit+0x1a0>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d004      	beq.n	800224e <HAL_PCD_MspInit+0x22>
  else if(hpcd->Instance==USB_OTG_HS)
 8002244:	4a62      	ldr	r2, [pc, #392]	; (80023d0 <HAL_PCD_MspInit+0x1a4>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d033      	beq.n	80022b2 <HAL_PCD_MspInit+0x86>
}
 800224a:	b00f      	add	sp, #60	; 0x3c
 800224c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800224e:	4c61      	ldr	r4, [pc, #388]	; (80023d4 <HAL_PCD_MspInit+0x1a8>)
 8002250:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8002254:	f043 0301 	orr.w	r3, r3, #1
 8002258:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800225c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8002260:	f003 0301 	and.w	r3, r3, #1
 8002264:	9300      	str	r3, [sp, #0]
 8002266:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = USB_FS1_VBUS_Pin;
 8002268:	ad0e      	add	r5, sp, #56	; 0x38
 800226a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800226e:	f845 3d14 	str.w	r3, [r5, #-20]!
    HAL_GPIO_Init(USB_FS1_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002272:	4e59      	ldr	r6, [pc, #356]	; (80023d8 <HAL_PCD_MspInit+0x1ac>)
 8002274:	4629      	mov	r1, r5
 8002276:	4630      	mov	r0, r6
 8002278:	f002 fb28 	bl	80048cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USB_FS1_DP_Pin|USB_FS1_DM_Pin;
 800227c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002280:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002282:	2302      	movs	r3, #2
 8002284:	930a      	str	r3, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002286:	2300      	movs	r3, #0
 8002288:	930b      	str	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800228a:	930c      	str	r3, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800228c:	230a      	movs	r3, #10
 800228e:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002290:	4629      	mov	r1, r5
 8002292:	4630      	mov	r0, r6
 8002294:	f002 fb1a 	bl	80048cc <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002298:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 800229c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80022a0:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 80022a4:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 80022a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80022ac:	9301      	str	r3, [sp, #4]
 80022ae:	9b01      	ldr	r3, [sp, #4]
 80022b0:	e7cb      	b.n	800224a <HAL_PCD_MspInit+0x1e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022b2:	4c48      	ldr	r4, [pc, #288]	; (80023d4 <HAL_PCD_MspInit+0x1a8>)
 80022b4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80022b8:	f043 0302 	orr.w	r3, r3, #2
 80022bc:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80022c0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	9302      	str	r3, [sp, #8]
 80022ca:	9b02      	ldr	r3, [sp, #8]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80022cc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80022d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022d4:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80022d8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80022dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022e0:	9303      	str	r3, [sp, #12]
 80022e2:	9b03      	ldr	r3, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022e4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80022e8:	f043 0304 	orr.w	r3, r3, #4
 80022ec:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80022f0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80022f4:	f003 0304 	and.w	r3, r3, #4
 80022f8:	9304      	str	r3, [sp, #16]
 80022fa:	9b04      	ldr	r3, [sp, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80022fc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8002300:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002304:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8002308:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800230c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002310:	9305      	str	r3, [sp, #20]
 8002312:	9b05      	ldr	r3, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002314:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8002318:	f043 0301 	orr.w	r3, r3, #1
 800231c:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8002320:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8002324:	f003 0301 	and.w	r3, r3, #1
 8002328:	9306      	str	r3, [sp, #24]
 800232a:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D3_Pin|ULPI_D4_Pin|ULPI_D2_Pin 
 800232c:	f643 4323 	movw	r3, #15395	; 0x3c23
 8002330:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002332:	2502      	movs	r5, #2
 8002334:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002336:	950c      	str	r5, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8002338:	260a      	movs	r6, #10
 800233a:	960d      	str	r6, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800233c:	a909      	add	r1, sp, #36	; 0x24
 800233e:	4827      	ldr	r0, [pc, #156]	; (80023dc <HAL_PCD_MspInit+0x1b0>)
 8002340:	f002 fac4 	bl	80048cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ULPI_DIR_Pin;
 8002344:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002348:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800234a:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234c:	2700      	movs	r7, #0
 800234e:	970b      	str	r7, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002350:	950c      	str	r5, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8002352:	960d      	str	r6, [sp, #52]	; 0x34
    HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 8002354:	a909      	add	r1, sp, #36	; 0x24
 8002356:	4822      	ldr	r0, [pc, #136]	; (80023e0 <HAL_PCD_MspInit+0x1b4>)
 8002358:	f002 fab8 	bl	80048cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ULPI_STP_Pin;
 800235c:	2301      	movs	r3, #1
 800235e:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002360:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002362:	970b      	str	r7, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002364:	950c      	str	r5, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8002366:	960d      	str	r6, [sp, #52]	; 0x34
    HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 8002368:	a909      	add	r1, sp, #36	; 0x24
 800236a:	481e      	ldr	r0, [pc, #120]	; (80023e4 <HAL_PCD_MspInit+0x1b8>)
 800236c:	f002 faae 	bl	80048cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8002370:	2310      	movs	r3, #16
 8002372:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002374:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002376:	970b      	str	r7, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002378:	950c      	str	r5, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 800237a:	960d      	str	r6, [sp, #52]	; 0x34
    HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800237c:	a909      	add	r1, sp, #36	; 0x24
 800237e:	481a      	ldr	r0, [pc, #104]	; (80023e8 <HAL_PCD_MspInit+0x1bc>)
 8002380:	f002 faa4 	bl	80048cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ULPI_CK_Pin|ULPI_D0_Pin;
 8002384:	2328      	movs	r3, #40	; 0x28
 8002386:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002388:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238a:	970b      	str	r7, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800238c:	950c      	str	r5, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 800238e:	960d      	str	r6, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002390:	a909      	add	r1, sp, #36	; 0x24
 8002392:	4811      	ldr	r0, [pc, #68]	; (80023d8 <HAL_PCD_MspInit+0x1ac>)
 8002394:	f002 fa9a 	bl	80048cc <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8002398:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 800239c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80023a0:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 80023a4:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 80023a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ac:	9307      	str	r3, [sp, #28]
 80023ae:	9b07      	ldr	r3, [sp, #28]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 80023b0:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 80023b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80023b8:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 80023bc:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 80023c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80023c4:	9308      	str	r3, [sp, #32]
 80023c6:	9b08      	ldr	r3, [sp, #32]
}
 80023c8:	e73f      	b.n	800224a <HAL_PCD_MspInit+0x1e>
 80023ca:	bf00      	nop
 80023cc:	40080000 	.word	0x40080000
 80023d0:	40040000 	.word	0x40040000
 80023d4:	58024400 	.word	0x58024400
 80023d8:	58020000 	.word	0x58020000
 80023dc:	58020400 	.word	0x58020400
 80023e0:	58022000 	.word	0x58022000
 80023e4:	58020800 	.word	0x58020800
 80023e8:	58021c00 	.word	0x58021c00

080023ec <HAL_NOR_MspInit>:

void HAL_NOR_MspInit(NOR_HandleTypeDef* hnor){
 80023ec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN NOR_MspInit 0 */

  /* USER CODE END NOR_MspInit 0 */
  HAL_FMC_MspInit();
 80023ee:	f7ff fa45 	bl	800187c <HAL_FMC_MspInit>
  /* USER CODE BEGIN NOR_MspInit 1 */

  /* USER CODE END NOR_MspInit 1 */
}
 80023f2:	bd08      	pop	{r3, pc}

080023f4 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80023f4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80023f6:	f7ff fa41 	bl	800187c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80023fa:	bd08      	pop	{r3, pc}

080023fc <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80023fc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80023fe:	f7ff fa3d 	bl	800187c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002402:	bd08      	pop	{r3, pc}

08002404 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002404:	b500      	push	{lr}
 8002406:	b08b      	sub	sp, #44	; 0x2c
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 8002408:	2200      	movs	r2, #0
 800240a:	4601      	mov	r1, r0
 800240c:	2019      	movs	r0, #25
 800240e:	f000 f9dd 	bl	80027cc <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn); 
 8002412:	2019      	movs	r0, #25
 8002414:	f000 fa0c 	bl	8002830 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002418:	4b16      	ldr	r3, [pc, #88]	; (8002474 <HAL_InitTick+0x70>)
 800241a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800241e:	f042 0201 	orr.w	r2, r2, #1
 8002422:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8002426:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	9300      	str	r3, [sp, #0]
 8002430:	9b00      	ldr	r3, [sp, #0]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002432:	a901      	add	r1, sp, #4
 8002434:	a802      	add	r0, sp, #8
 8002436:	f003 fc8f 	bl	8005d58 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800243a:	f003 fc7b 	bl	8005d34 <HAL_RCC_GetPCLK2Freq>
 800243e:	0043      	lsls	r3, r0, #1
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002440:	480d      	ldr	r0, [pc, #52]	; (8002478 <HAL_InitTick+0x74>)
 8002442:	fba0 2303 	umull	r2, r3, r0, r3
 8002446:	0c9b      	lsrs	r3, r3, #18
 8002448:	3b01      	subs	r3, #1
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800244a:	480c      	ldr	r0, [pc, #48]	; (800247c <HAL_InitTick+0x78>)
 800244c:	4a0c      	ldr	r2, [pc, #48]	; (8002480 <HAL_InitTick+0x7c>)
 800244e:	6002      	str	r2, [r0, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8002450:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002454:	60c2      	str	r2, [r0, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002456:	6043      	str	r3, [r0, #4]
  htim1.Init.ClockDivision = 0;
 8002458:	2300      	movs	r3, #0
 800245a:	6103      	str	r3, [r0, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800245c:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800245e:	f004 fedf 	bl	8007220 <HAL_TIM_Base_Init>
 8002462:	b118      	cbz	r0, 800246c <HAL_InitTick+0x68>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
  }
  
  /* Return function status */
  return HAL_ERROR;
 8002464:	2001      	movs	r0, #1
}
 8002466:	b00b      	add	sp, #44	; 0x2c
 8002468:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_TIM_Base_Start_IT(&htim1);
 800246c:	4803      	ldr	r0, [pc, #12]	; (800247c <HAL_InitTick+0x78>)
 800246e:	f004 fd6f 	bl	8006f50 <HAL_TIM_Base_Start_IT>
 8002472:	e7f8      	b.n	8002466 <HAL_InitTick+0x62>
 8002474:	58024400 	.word	0x58024400
 8002478:	431bde83 	.word	0x431bde83
 800247c:	20005f48 	.word	0x20005f48
 8002480:	40010000 	.word	0x40010000

08002484 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002484:	4770      	bx	lr

08002486 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002486:	e7fe      	b.n	8002486 <HardFault_Handler>

08002488 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002488:	e7fe      	b.n	8002488 <MemManage_Handler>

0800248a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800248a:	e7fe      	b.n	800248a <BusFault_Handler>

0800248c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800248c:	e7fe      	b.n	800248c <UsageFault_Handler>

0800248e <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800248e:	4770      	bx	lr

08002490 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002490:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8002492:	4802      	ldr	r0, [pc, #8]	; (800249c <DMA1_Stream0_IRQHandler+0xc>)
 8002494:	f001 f860 	bl	8003558 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002498:	bd08      	pop	{r3, pc}
 800249a:	bf00      	nop
 800249c:	20004b48 	.word	0x20004b48

080024a0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80024a0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 80024a2:	4802      	ldr	r0, [pc, #8]	; (80024ac <DMA1_Stream1_IRQHandler+0xc>)
 80024a4:	f001 f858 	bl	8003558 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80024a8:	bd08      	pop	{r3, pc}
 80024aa:	bf00      	nop
 80024ac:	20005e58 	.word	0x20005e58

080024b0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80024b0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 80024b2:	4802      	ldr	r0, [pc, #8]	; (80024bc <DMA1_Stream2_IRQHandler+0xc>)
 80024b4:	f001 f850 	bl	8003558 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80024b8:	bd08      	pop	{r3, pc}
 80024ba:	bf00      	nop
 80024bc:	20005d08 	.word	0x20005d08

080024c0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80024c0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 80024c2:	4802      	ldr	r0, [pc, #8]	; (80024cc <DMA1_Stream3_IRQHandler+0xc>)
 80024c4:	f001 f848 	bl	8003558 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80024c8:	bd08      	pop	{r3, pc}
 80024ca:	bf00      	nop
 80024cc:	20005ed0 	.word	0x20005ed0

080024d0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80024d0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 80024d2:	4802      	ldr	r0, [pc, #8]	; (80024dc <DMA1_Stream4_IRQHandler+0xc>)
 80024d4:	f001 f840 	bl	8003558 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80024d8:	bd08      	pop	{r3, pc}
 80024da:	bf00      	nop
 80024dc:	20005954 	.word	0x20005954

080024e0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80024e0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_tx);
 80024e2:	4802      	ldr	r0, [pc, #8]	; (80024ec <DMA1_Stream5_IRQHandler+0xc>)
 80024e4:	f001 f838 	bl	8003558 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80024e8:	bd08      	pop	{r3, pc}
 80024ea:	bf00      	nop
 80024ec:	20005aa0 	.word	0x20005aa0

080024f0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80024f0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80024f2:	4802      	ldr	r0, [pc, #8]	; (80024fc <DMA1_Stream6_IRQHandler+0xc>)
 80024f4:	f001 f830 	bl	8003558 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80024f8:	bd08      	pop	{r3, pc}
 80024fa:	bf00      	nop
 80024fc:	200058dc 	.word	0x200058dc

08002500 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002500:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002502:	4802      	ldr	r0, [pc, #8]	; (800250c <TIM1_UP_IRQHandler+0xc>)
 8002504:	f004 fd3e 	bl	8006f84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002508:	bd08      	pop	{r3, pc}
 800250a:	bf00      	nop
 800250c:	20005f48 	.word	0x20005f48

08002510 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002510:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002512:	4802      	ldr	r0, [pc, #8]	; (800251c <USART1_IRQHandler+0xc>)
 8002514:	f004 fff4 	bl	8007500 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002518:	bd08      	pop	{r3, pc}
 800251a:	bf00      	nop
 800251c:	200059cc 	.word	0x200059cc

08002520 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002520:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002522:	4802      	ldr	r0, [pc, #8]	; (800252c <USART3_IRQHandler+0xc>)
 8002524:	f004 ffec 	bl	8007500 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002528:	bd08      	pop	{r3, pc}
 800252a:	bf00      	nop
 800252c:	20004d3c 	.word	0x20004d3c

08002530 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8002530:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002532:	4802      	ldr	r0, [pc, #8]	; (800253c <DMA1_Stream7_IRQHandler+0xc>)
 8002534:	f001 f810 	bl	8003558 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8002538:	bd08      	pop	{r3, pc}
 800253a:	bf00      	nop
 800253c:	20005760 	.word	0x20005760

08002540 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002540:	b508      	push	{r3, lr}
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002542:	4802      	ldr	r0, [pc, #8]	; (800254c <UART4_IRQHandler+0xc>)
 8002544:	f004 ffdc 	bl	8007500 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002548:	bd08      	pop	{r3, pc}
 800254a:	bf00      	nop
 800254c:	20005c7c 	.word	0x20005c7c

08002550 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8002550:	b508      	push	{r3, lr}
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002552:	4802      	ldr	r0, [pc, #8]	; (800255c <UART5_IRQHandler+0xc>)
 8002554:	f004 ffd4 	bl	8007500 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8002558:	bd08      	pop	{r3, pc}
 800255a:	bf00      	nop
 800255c:	200057d8 	.word	0x200057d8

08002560 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002560:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002562:	4802      	ldr	r0, [pc, #8]	; (800256c <DMA2_Stream0_IRQHandler+0xc>)
 8002564:	f000 fff8 	bl	8003558 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002568:	bd08      	pop	{r3, pc}
 800256a:	bf00      	nop
 800256c:	20004cc4 	.word	0x20004cc4

08002570 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002570:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002572:	4802      	ldr	r0, [pc, #8]	; (800257c <DMA2_Stream1_IRQHandler+0xc>)
 8002574:	f000 fff0 	bl	8003558 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002578:	bd08      	pop	{r3, pc}
 800257a:	bf00      	nop
 800257c:	20005640 	.word	0x20005640

08002580 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002580:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8002582:	4802      	ldr	r0, [pc, #8]	; (800258c <DMA2_Stream2_IRQHandler+0xc>)
 8002584:	f000 ffe8 	bl	8003558 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002588:	bd08      	pop	{r3, pc}
 800258a:	bf00      	nop
 800258c:	20004bc4 	.word	0x20004bc4

08002590 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002590:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8002592:	4802      	ldr	r0, [pc, #8]	; (800259c <DMA2_Stream3_IRQHandler+0xc>)
 8002594:	f000 ffe0 	bl	8003558 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002598:	bd08      	pop	{r3, pc}
 800259a:	bf00      	nop
 800259c:	20005864 	.word	0x20005864

080025a0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80025a0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80025a2:	4802      	ldr	r0, [pc, #8]	; (80025ac <USART6_IRQHandler+0xc>)
 80025a4:	f004 ffac 	bl	8007500 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80025a8:	bd08      	pop	{r3, pc}
 80025aa:	bf00      	nop
 80025ac:	20005bf0 	.word	0x20005bf0

080025b0 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 80025b0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 80025b2:	4802      	ldr	r0, [pc, #8]	; (80025bc <UART8_IRQHandler+0xc>)
 80025b4:	f004 ffa4 	bl	8007500 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 80025b8:	bd08      	pop	{r3, pc}
 80025ba:	bf00      	nop
 80025bc:	20005b64 	.word	0x20005b64

080025c0 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80025c0:	2001      	movs	r0, #1
 80025c2:	4770      	bx	lr

080025c4 <_kill>:

int _kill(int pid, int sig)
{
 80025c4:	b508      	push	{r3, lr}
	errno = EINVAL;
 80025c6:	f009 fb9f 	bl	800bd08 <__errno>
 80025ca:	2316      	movs	r3, #22
 80025cc:	6003      	str	r3, [r0, #0]
	return -1;
}
 80025ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025d2:	bd08      	pop	{r3, pc}

080025d4 <_exit>:

void _exit (int status)
{
 80025d4:	b508      	push	{r3, lr}
	_kill(status, -1);
 80025d6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80025da:	f7ff fff3 	bl	80025c4 <_kill>
 80025de:	e7fe      	b.n	80025de <_exit+0xa>

080025e0 <_read>:
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025e0:	b570      	push	{r4, r5, r6, lr}
 80025e2:	460d      	mov	r5, r1
 80025e4:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025e6:	2400      	movs	r4, #0
 80025e8:	e004      	b.n	80025f4 <_read+0x14>
	{
		*ptr++ = __io_getchar();
 80025ea:	f3af 8000 	nop.w
 80025ee:	7028      	strb	r0, [r5, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025f0:	3401      	adds	r4, #1
		*ptr++ = __io_getchar();
 80025f2:	3501      	adds	r5, #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025f4:	42b4      	cmp	r4, r6
 80025f6:	dbf8      	blt.n	80025ea <_read+0xa>
	}

return len;
}
 80025f8:	4630      	mov	r0, r6
 80025fa:	bd70      	pop	{r4, r5, r6, pc}

080025fc <_close>:
}

int _close(int file)
{
	return -1;
}
 80025fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002600:	4770      	bx	lr

08002602 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8002602:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002606:	604b      	str	r3, [r1, #4]
	return 0;
}
 8002608:	2000      	movs	r0, #0
 800260a:	4770      	bx	lr

0800260c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800260c:	2001      	movs	r0, #1
 800260e:	4770      	bx	lr

08002610 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8002610:	2000      	movs	r0, #0
 8002612:	4770      	bx	lr

08002614 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002614:	b508      	push	{r3, lr}
 8002616:	4603      	mov	r3, r0
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002618:	4a0b      	ldr	r2, [pc, #44]	; (8002648 <_sbrk+0x34>)
 800261a:	6812      	ldr	r2, [r2, #0]
 800261c:	b142      	cbz	r2, 8002630 <_sbrk+0x1c>
		heap_end = &end;

	prev_heap_end = heap_end;
 800261e:	4a0a      	ldr	r2, [pc, #40]	; (8002648 <_sbrk+0x34>)
 8002620:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8002622:	4403      	add	r3, r0
 8002624:	466a      	mov	r2, sp
 8002626:	4293      	cmp	r3, r2
 8002628:	d806      	bhi.n	8002638 <_sbrk+0x24>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 800262a:	4a07      	ldr	r2, [pc, #28]	; (8002648 <_sbrk+0x34>)
 800262c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 800262e:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8002630:	4a05      	ldr	r2, [pc, #20]	; (8002648 <_sbrk+0x34>)
 8002632:	4906      	ldr	r1, [pc, #24]	; (800264c <_sbrk+0x38>)
 8002634:	6011      	str	r1, [r2, #0]
 8002636:	e7f2      	b.n	800261e <_sbrk+0xa>
		errno = ENOMEM;
 8002638:	f009 fb66 	bl	800bd08 <__errno>
 800263c:	230c      	movs	r3, #12
 800263e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8002640:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002644:	e7f3      	b.n	800262e <_sbrk+0x1a>
 8002646:	bf00      	nop
 8002648:	20000234 	.word	0x20000234
 800264c:	20005fd0 	.word	0x20005fd0

08002650 <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002650:	4b1c      	ldr	r3, [pc, #112]	; (80026c4 <SystemInit+0x74>)
 8002652:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002656:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800265a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Pos;
 800265e:	691a      	ldr	r2, [r3, #16]
 8002660:	f042 0204 	orr.w	r2, r2, #4
 8002664:	611a      	str	r2, [r3, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002666:	4b18      	ldr	r3, [pc, #96]	; (80026c8 <SystemInit+0x78>)
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	f042 0201 	orr.w	r2, r2, #1
 800266e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002670:	2200      	movs	r2, #0
 8002672:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002674:	6818      	ldr	r0, [r3, #0]
 8002676:	4915      	ldr	r1, [pc, #84]	; (80026cc <SystemInit+0x7c>)
 8002678:	4001      	ands	r1, r0
 800267a:	6019      	str	r1, [r3, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800267c:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800267e:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002680:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8002682:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8002684:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8002686:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002688:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 800268a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800268c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 800268e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002690:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002692:	6819      	ldr	r1, [r3, #0]
 8002694:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8002698:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800269a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800269c:	4a0c      	ldr	r2, [pc, #48]	; (80026d0 <SystemInit+0x80>)
 800269e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80026a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026a4:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80026a6:	4b0b      	ldr	r3, [pc, #44]	; (80026d4 <SystemInit+0x84>)
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	4b0b      	ldr	r3, [pc, #44]	; (80026d8 <SystemInit+0x88>)
 80026ac:	4013      	ands	r3, r2
 80026ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026b2:	d202      	bcs.n	80026ba <SystemInit+0x6a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80026b4:	4b09      	ldr	r3, [pc, #36]	; (80026dc <SystemInit+0x8c>)
 80026b6:	2201      	movs	r2, #1
 80026b8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80026ba:	4b02      	ldr	r3, [pc, #8]	; (80026c4 <SystemInit+0x74>)
 80026bc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80026c0:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80026c2:	4770      	bx	lr
 80026c4:	e000ed00 	.word	0xe000ed00
 80026c8:	58024400 	.word	0x58024400
 80026cc:	eaf6ed7f 	.word	0xeaf6ed7f
 80026d0:	580000c0 	.word	0x580000c0
 80026d4:	5c001000 	.word	0x5c001000
 80026d8:	ffff0000 	.word	0xffff0000
 80026dc:	51008108 	.word	0x51008108

080026e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026e0:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026e2:	2003      	movs	r0, #3
 80026e4:	f000 f860 	bl	80027a8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80026e8:	f003 f8b0 	bl	800584c <HAL_RCC_GetSysClockFreq>
 80026ec:	490f      	ldr	r1, [pc, #60]	; (800272c <HAL_Init+0x4c>)
 80026ee:	698b      	ldr	r3, [r1, #24]
 80026f0:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80026f4:	4a0e      	ldr	r2, [pc, #56]	; (8002730 <HAL_Init+0x50>)
 80026f6:	5cd3      	ldrb	r3, [r2, r3]
 80026f8:	f003 031f 	and.w	r3, r3, #31
 80026fc:	40d8      	lsrs	r0, r3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80026fe:	698b      	ldr	r3, [r1, #24]
 8002700:	f003 030f 	and.w	r3, r3, #15
 8002704:	5cd3      	ldrb	r3, [r2, r3]
 8002706:	f003 031f 	and.w	r3, r3, #31
 800270a:	fa20 f303 	lsr.w	r3, r0, r3
 800270e:	4a09      	ldr	r2, [pc, #36]	; (8002734 <HAL_Init+0x54>)
 8002710:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002712:	4b09      	ldr	r3, [pc, #36]	; (8002738 <HAL_Init+0x58>)
 8002714:	6018      	str	r0, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002716:	2000      	movs	r0, #0
 8002718:	f7ff fe74 	bl	8002404 <HAL_InitTick>
 800271c:	b110      	cbz	r0, 8002724 <HAL_Init+0x44>
  {
    return HAL_ERROR;
 800271e:	2401      	movs	r4, #1
  /* Init the low level hardware */
  HAL_MspInit();

  /* Return function status */
  return HAL_OK;
}
 8002720:	4620      	mov	r0, r4
 8002722:	bd10      	pop	{r4, pc}
 8002724:	4604      	mov	r4, r0
  HAL_MspInit();
 8002726:	f7ff f91d 	bl	8001964 <HAL_MspInit>
  return HAL_OK;
 800272a:	e7f9      	b.n	8002720 <HAL_Init+0x40>
 800272c:	58024400 	.word	0x58024400
 8002730:	0800cfb0 	.word	0x0800cfb0
 8002734:	200000dc 	.word	0x200000dc
 8002738:	200000d8 	.word	0x200000d8

0800273c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800273c:	4b03      	ldr	r3, [pc, #12]	; (800274c <HAL_IncTick+0x10>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	4a03      	ldr	r2, [pc, #12]	; (8002750 <HAL_IncTick+0x14>)
 8002742:	6811      	ldr	r1, [r2, #0]
 8002744:	440b      	add	r3, r1
 8002746:	6013      	str	r3, [r2, #0]
}
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	200000e0 	.word	0x200000e0
 8002750:	20005f88 	.word	0x20005f88

08002754 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002754:	4b01      	ldr	r3, [pc, #4]	; (800275c <HAL_GetTick+0x8>)
 8002756:	6818      	ldr	r0, [r3, #0]
}
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	20005f88 	.word	0x20005f88

08002760 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002760:	b538      	push	{r3, r4, r5, lr}
 8002762:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002764:	f7ff fff6 	bl	8002754 <HAL_GetTick>
 8002768:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800276a:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800276e:	d002      	beq.n	8002776 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8002770:	4b04      	ldr	r3, [pc, #16]	; (8002784 <HAL_Delay+0x24>)
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002776:	f7ff ffed 	bl	8002754 <HAL_GetTick>
 800277a:	1b40      	subs	r0, r0, r5
 800277c:	42a0      	cmp	r0, r4
 800277e:	d3fa      	bcc.n	8002776 <HAL_Delay+0x16>
  {
  }
}
 8002780:	bd38      	pop	{r3, r4, r5, pc}
 8002782:	bf00      	nop
 8002784:	200000e0 	.word	0x200000e0

08002788 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8002788:	4b01      	ldr	r3, [pc, #4]	; (8002790 <HAL_GetREVID+0x8>)
 800278a:	6818      	ldr	r0, [r3, #0]
}
 800278c:	0c00      	lsrs	r0, r0, #16
 800278e:	4770      	bx	lr
 8002790:	5c001000 	.word	0x5c001000

08002794 <HAL_SYSCFG_ETHInterfaceSelect>:
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002794:	4a03      	ldr	r2, [pc, #12]	; (80027a4 <HAL_SYSCFG_ETHInterfaceSelect+0x10>)
 8002796:	6853      	ldr	r3, [r2, #4]
 8002798:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 800279c:	4318      	orrs	r0, r3
 800279e:	6050      	str	r0, [r2, #4]
}
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	58000400 	.word	0x58000400

080027a8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027a8:	4906      	ldr	r1, [pc, #24]	; (80027c4 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 80027aa:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027ac:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80027b0:	041b      	lsls	r3, r3, #16
 80027b2:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027b4:	0200      	lsls	r0, r0, #8
 80027b6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027ba:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80027bc:	4a02      	ldr	r2, [pc, #8]	; (80027c8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80027be:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 80027c0:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80027c2:	4770      	bx	lr
 80027c4:	e000ed00 	.word	0xe000ed00
 80027c8:	05fa0000 	.word	0x05fa0000

080027cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027cc:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027ce:	4b15      	ldr	r3, [pc, #84]	; (8002824 <HAL_NVIC_SetPriority+0x58>)
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027d6:	f1c3 0407 	rsb	r4, r3, #7
 80027da:	2c04      	cmp	r4, #4
 80027dc:	bf28      	it	cs
 80027de:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027e0:	1d1d      	adds	r5, r3, #4
 80027e2:	2d06      	cmp	r5, #6
 80027e4:	d914      	bls.n	8002810 <HAL_NVIC_SetPriority+0x44>
 80027e6:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027e8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80027ec:	fa05 f404 	lsl.w	r4, r5, r4
 80027f0:	ea21 0104 	bic.w	r1, r1, r4
 80027f4:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027f6:	fa05 f303 	lsl.w	r3, r5, r3
 80027fa:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027fe:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8002800:	2800      	cmp	r0, #0
 8002802:	db07      	blt.n	8002814 <HAL_NVIC_SetPriority+0x48>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002804:	0109      	lsls	r1, r1, #4
 8002806:	b2c9      	uxtb	r1, r1
 8002808:	4b07      	ldr	r3, [pc, #28]	; (8002828 <HAL_NVIC_SetPriority+0x5c>)
 800280a:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800280c:	bc30      	pop	{r4, r5}
 800280e:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002810:	2300      	movs	r3, #0
 8002812:	e7e9      	b.n	80027e8 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002814:	f000 000f 	and.w	r0, r0, #15
 8002818:	0109      	lsls	r1, r1, #4
 800281a:	b2c9      	uxtb	r1, r1
 800281c:	4b03      	ldr	r3, [pc, #12]	; (800282c <HAL_NVIC_SetPriority+0x60>)
 800281e:	5419      	strb	r1, [r3, r0]
 8002820:	e7f4      	b.n	800280c <HAL_NVIC_SetPriority+0x40>
 8002822:	bf00      	nop
 8002824:	e000ed00 	.word	0xe000ed00
 8002828:	e000e400 	.word	0xe000e400
 800282c:	e000ed14 	.word	0xe000ed14

08002830 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002830:	2800      	cmp	r0, #0
 8002832:	db07      	blt.n	8002844 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002834:	f000 021f 	and.w	r2, r0, #31
 8002838:	0940      	lsrs	r0, r0, #5
 800283a:	2301      	movs	r3, #1
 800283c:	4093      	lsls	r3, r2
 800283e:	4a02      	ldr	r2, [pc, #8]	; (8002848 <HAL_NVIC_EnableIRQ+0x18>)
 8002840:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	e000e100 	.word	0xe000e100

0800284c <HAL_NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800284c:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002850:	4905      	ldr	r1, [pc, #20]	; (8002868 <HAL_NVIC_SystemReset+0x1c>)
 8002852:	68ca      	ldr	r2, [r1, #12]
 8002854:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002858:	4b04      	ldr	r3, [pc, #16]	; (800286c <HAL_NVIC_SystemReset+0x20>)
 800285a:	4313      	orrs	r3, r2
 800285c:	60cb      	str	r3, [r1, #12]
 800285e:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002862:	bf00      	nop
 8002864:	e7fd      	b.n	8002862 <HAL_NVIC_SystemReset+0x16>
 8002866:	bf00      	nop
 8002868:	e000ed00 	.word	0xe000ed00
 800286c:	05fa0004 	.word	0x05fa0004

08002870 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002870:	b4f0      	push	{r4, r5, r6, r7}
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002872:	6d87      	ldr	r7, [r0, #88]	; 0x58
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002874:	6804      	ldr	r4, [r0, #0]
 8002876:	4e65      	ldr	r6, [pc, #404]	; (8002a0c <DMA_SetConfig+0x19c>)
 8002878:	4d65      	ldr	r5, [pc, #404]	; (8002a10 <DMA_SetConfig+0x1a0>)
 800287a:	42ac      	cmp	r4, r5
 800287c:	bf18      	it	ne
 800287e:	42b4      	cmpne	r4, r6
 8002880:	d042      	beq.n	8002908 <DMA_SetConfig+0x98>
 8002882:	3518      	adds	r5, #24
 8002884:	42ac      	cmp	r4, r5
 8002886:	d03f      	beq.n	8002908 <DMA_SetConfig+0x98>
 8002888:	3518      	adds	r5, #24
 800288a:	42ac      	cmp	r4, r5
 800288c:	d03c      	beq.n	8002908 <DMA_SetConfig+0x98>
 800288e:	3518      	adds	r5, #24
 8002890:	42ac      	cmp	r4, r5
 8002892:	d039      	beq.n	8002908 <DMA_SetConfig+0x98>
 8002894:	3518      	adds	r5, #24
 8002896:	42ac      	cmp	r4, r5
 8002898:	d036      	beq.n	8002908 <DMA_SetConfig+0x98>
 800289a:	3518      	adds	r5, #24
 800289c:	42ac      	cmp	r4, r5
 800289e:	d033      	beq.n	8002908 <DMA_SetConfig+0x98>
 80028a0:	3518      	adds	r5, #24
 80028a2:	42ac      	cmp	r4, r5
 80028a4:	d030      	beq.n	8002908 <DMA_SetConfig+0x98>
 80028a6:	f505 7556 	add.w	r5, r5, #856	; 0x358
 80028aa:	42ac      	cmp	r4, r5
 80028ac:	d02c      	beq.n	8002908 <DMA_SetConfig+0x98>
 80028ae:	3518      	adds	r5, #24
 80028b0:	42ac      	cmp	r4, r5
 80028b2:	d029      	beq.n	8002908 <DMA_SetConfig+0x98>
 80028b4:	3518      	adds	r5, #24
 80028b6:	42ac      	cmp	r4, r5
 80028b8:	d026      	beq.n	8002908 <DMA_SetConfig+0x98>
 80028ba:	3518      	adds	r5, #24
 80028bc:	42ac      	cmp	r4, r5
 80028be:	d023      	beq.n	8002908 <DMA_SetConfig+0x98>
 80028c0:	3518      	adds	r5, #24
 80028c2:	42ac      	cmp	r4, r5
 80028c4:	d020      	beq.n	8002908 <DMA_SetConfig+0x98>
 80028c6:	3518      	adds	r5, #24
 80028c8:	42ac      	cmp	r4, r5
 80028ca:	d01d      	beq.n	8002908 <DMA_SetConfig+0x98>
 80028cc:	3518      	adds	r5, #24
 80028ce:	42ac      	cmp	r4, r5
 80028d0:	d01a      	beq.n	8002908 <DMA_SetConfig+0x98>
 80028d2:	3518      	adds	r5, #24
 80028d4:	42ac      	cmp	r4, r5
 80028d6:	d017      	beq.n	8002908 <DMA_SetConfig+0x98>
 80028d8:	4d4e      	ldr	r5, [pc, #312]	; (8002a14 <DMA_SetConfig+0x1a4>)
 80028da:	42ac      	cmp	r4, r5
 80028dc:	d014      	beq.n	8002908 <DMA_SetConfig+0x98>
 80028de:	3514      	adds	r5, #20
 80028e0:	42ac      	cmp	r4, r5
 80028e2:	d011      	beq.n	8002908 <DMA_SetConfig+0x98>
 80028e4:	3514      	adds	r5, #20
 80028e6:	42ac      	cmp	r4, r5
 80028e8:	d00e      	beq.n	8002908 <DMA_SetConfig+0x98>
 80028ea:	3514      	adds	r5, #20
 80028ec:	42ac      	cmp	r4, r5
 80028ee:	d00b      	beq.n	8002908 <DMA_SetConfig+0x98>
 80028f0:	3514      	adds	r5, #20
 80028f2:	42ac      	cmp	r4, r5
 80028f4:	d008      	beq.n	8002908 <DMA_SetConfig+0x98>
 80028f6:	3514      	adds	r5, #20
 80028f8:	42ac      	cmp	r4, r5
 80028fa:	d005      	beq.n	8002908 <DMA_SetConfig+0x98>
 80028fc:	3514      	adds	r5, #20
 80028fe:	42ac      	cmp	r4, r5
 8002900:	d002      	beq.n	8002908 <DMA_SetConfig+0x98>
 8002902:	3514      	adds	r5, #20
 8002904:	42ac      	cmp	r4, r5
 8002906:	d107      	bne.n	8002918 <DMA_SetConfig+0xa8>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002908:	6e44      	ldr	r4, [r0, #100]	; 0x64
 800290a:	6e85      	ldr	r5, [r0, #104]	; 0x68
 800290c:	6065      	str	r5, [r4, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800290e:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
 8002910:	b114      	cbz	r4, 8002918 <DMA_SetConfig+0xa8>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002912:	6f04      	ldr	r4, [r0, #112]	; 0x70
 8002914:	6f45      	ldr	r5, [r0, #116]	; 0x74
 8002916:	6065      	str	r5, [r4, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002918:	6804      	ldr	r4, [r0, #0]
 800291a:	4e3c      	ldr	r6, [pc, #240]	; (8002a0c <DMA_SetConfig+0x19c>)
 800291c:	4d3c      	ldr	r5, [pc, #240]	; (8002a10 <DMA_SetConfig+0x1a0>)
 800291e:	42ac      	cmp	r4, r5
 8002920:	bf18      	it	ne
 8002922:	42b4      	cmpne	r4, r6
 8002924:	d052      	beq.n	80029cc <DMA_SetConfig+0x15c>
 8002926:	3518      	adds	r5, #24
 8002928:	42ac      	cmp	r4, r5
 800292a:	d04f      	beq.n	80029cc <DMA_SetConfig+0x15c>
 800292c:	3518      	adds	r5, #24
 800292e:	42ac      	cmp	r4, r5
 8002930:	d04c      	beq.n	80029cc <DMA_SetConfig+0x15c>
 8002932:	3518      	adds	r5, #24
 8002934:	42ac      	cmp	r4, r5
 8002936:	d049      	beq.n	80029cc <DMA_SetConfig+0x15c>
 8002938:	3518      	adds	r5, #24
 800293a:	42ac      	cmp	r4, r5
 800293c:	d046      	beq.n	80029cc <DMA_SetConfig+0x15c>
 800293e:	3518      	adds	r5, #24
 8002940:	42ac      	cmp	r4, r5
 8002942:	d043      	beq.n	80029cc <DMA_SetConfig+0x15c>
 8002944:	3518      	adds	r5, #24
 8002946:	42ac      	cmp	r4, r5
 8002948:	d040      	beq.n	80029cc <DMA_SetConfig+0x15c>
 800294a:	f505 7556 	add.w	r5, r5, #856	; 0x358
 800294e:	42ac      	cmp	r4, r5
 8002950:	d03c      	beq.n	80029cc <DMA_SetConfig+0x15c>
 8002952:	3518      	adds	r5, #24
 8002954:	42ac      	cmp	r4, r5
 8002956:	d039      	beq.n	80029cc <DMA_SetConfig+0x15c>
 8002958:	3518      	adds	r5, #24
 800295a:	42ac      	cmp	r4, r5
 800295c:	d036      	beq.n	80029cc <DMA_SetConfig+0x15c>
 800295e:	3518      	adds	r5, #24
 8002960:	42ac      	cmp	r4, r5
 8002962:	d033      	beq.n	80029cc <DMA_SetConfig+0x15c>
 8002964:	3518      	adds	r5, #24
 8002966:	42ac      	cmp	r4, r5
 8002968:	d030      	beq.n	80029cc <DMA_SetConfig+0x15c>
 800296a:	3518      	adds	r5, #24
 800296c:	42ac      	cmp	r4, r5
 800296e:	d02d      	beq.n	80029cc <DMA_SetConfig+0x15c>
 8002970:	3518      	adds	r5, #24
 8002972:	42ac      	cmp	r4, r5
 8002974:	d02a      	beq.n	80029cc <DMA_SetConfig+0x15c>
 8002976:	3518      	adds	r5, #24
 8002978:	42ac      	cmp	r4, r5
 800297a:	d027      	beq.n	80029cc <DMA_SetConfig+0x15c>

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800297c:	4e25      	ldr	r6, [pc, #148]	; (8002a14 <DMA_SetConfig+0x1a4>)
 800297e:	4d26      	ldr	r5, [pc, #152]	; (8002a18 <DMA_SetConfig+0x1a8>)
 8002980:	42ac      	cmp	r4, r5
 8002982:	bf18      	it	ne
 8002984:	42b4      	cmpne	r4, r6
 8002986:	d011      	beq.n	80029ac <DMA_SetConfig+0x13c>
 8002988:	4d24      	ldr	r5, [pc, #144]	; (8002a1c <DMA_SetConfig+0x1ac>)
 800298a:	42ac      	cmp	r4, r5
 800298c:	d00e      	beq.n	80029ac <DMA_SetConfig+0x13c>
 800298e:	3514      	adds	r5, #20
 8002990:	42ac      	cmp	r4, r5
 8002992:	d00b      	beq.n	80029ac <DMA_SetConfig+0x13c>
 8002994:	3514      	adds	r5, #20
 8002996:	42ac      	cmp	r4, r5
 8002998:	d008      	beq.n	80029ac <DMA_SetConfig+0x13c>
 800299a:	3514      	adds	r5, #20
 800299c:	42ac      	cmp	r4, r5
 800299e:	d005      	beq.n	80029ac <DMA_SetConfig+0x13c>
 80029a0:	3514      	adds	r5, #20
 80029a2:	42ac      	cmp	r4, r5
 80029a4:	d002      	beq.n	80029ac <DMA_SetConfig+0x13c>
 80029a6:	3514      	adds	r5, #20
 80029a8:	42ac      	cmp	r4, r5
 80029aa:	d123      	bne.n	80029f4 <DMA_SetConfig+0x184>
  {
    /* Clear all flags */
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80029ac:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 80029ae:	f004 051f 	and.w	r5, r4, #31
 80029b2:	2401      	movs	r4, #1
 80029b4:	40ac      	lsls	r4, r5
 80029b6:	607c      	str	r4, [r7, #4]

    /* Configure DMA Channel data length */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80029b8:	6804      	ldr	r4, [r0, #0]
 80029ba:	6063      	str	r3, [r4, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029bc:	6883      	ldr	r3, [r0, #8]
 80029be:	2b40      	cmp	r3, #64	; 0x40
 80029c0:	d01f      	beq.n	8002a02 <DMA_SetConfig+0x192>
    }
    /* Memory to Peripheral */
    else
    {
      /* Configure DMA Channel source address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80029c2:	6803      	ldr	r3, [r0, #0]
 80029c4:	6099      	str	r1, [r3, #8]

      /* Configure DMA Channel destination address */
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80029c6:	6803      	ldr	r3, [r0, #0]
 80029c8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80029ca:	e013      	b.n	80029f4 <DMA_SetConfig+0x184>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80029cc:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 80029ce:	f004 051f 	and.w	r5, r4, #31
 80029d2:	243f      	movs	r4, #63	; 0x3f
 80029d4:	40ac      	lsls	r4, r5
 80029d6:	60bc      	str	r4, [r7, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80029d8:	6805      	ldr	r5, [r0, #0]
 80029da:	682c      	ldr	r4, [r5, #0]
 80029dc:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 80029e0:	602c      	str	r4, [r5, #0]
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80029e2:	6804      	ldr	r4, [r0, #0]
 80029e4:	6063      	str	r3, [r4, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029e6:	6883      	ldr	r3, [r0, #8]
 80029e8:	2b40      	cmp	r3, #64	; 0x40
 80029ea:	d005      	beq.n	80029f8 <DMA_SetConfig+0x188>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80029ec:	6803      	ldr	r3, [r0, #0]
 80029ee:	6099      	str	r1, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80029f0:	6803      	ldr	r3, [r0, #0]
 80029f2:	60da      	str	r2, [r3, #12]
}
 80029f4:	bcf0      	pop	{r4, r5, r6, r7}
 80029f6:	4770      	bx	lr
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80029f8:	6803      	ldr	r3, [r0, #0]
 80029fa:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80029fc:	6803      	ldr	r3, [r0, #0]
 80029fe:	60d9      	str	r1, [r3, #12]
 8002a00:	e7f8      	b.n	80029f4 <DMA_SetConfig+0x184>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8002a02:	6803      	ldr	r3, [r0, #0]
 8002a04:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8002a06:	6803      	ldr	r3, [r0, #0]
 8002a08:	60d9      	str	r1, [r3, #12]
 8002a0a:	e7f3      	b.n	80029f4 <DMA_SetConfig+0x184>
 8002a0c:	40020010 	.word	0x40020010
 8002a10:	40020028 	.word	0x40020028
 8002a14:	58025408 	.word	0x58025408
 8002a18:	5802541c 	.word	0x5802541c
 8002a1c:	58025430 	.word	0x58025430

08002a20 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002a20:	6802      	ldr	r2, [r0, #0]
 8002a22:	4928      	ldr	r1, [pc, #160]	; (8002ac4 <DMA_CalcBaseAndBitshift+0xa4>)
 8002a24:	4b28      	ldr	r3, [pc, #160]	; (8002ac8 <DMA_CalcBaseAndBitshift+0xa8>)
 8002a26:	429a      	cmp	r2, r3
 8002a28:	bf18      	it	ne
 8002a2a:	428a      	cmpne	r2, r1
 8002a2c:	d02f      	beq.n	8002a8e <DMA_CalcBaseAndBitshift+0x6e>
 8002a2e:	3318      	adds	r3, #24
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d02c      	beq.n	8002a8e <DMA_CalcBaseAndBitshift+0x6e>
 8002a34:	3318      	adds	r3, #24
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d029      	beq.n	8002a8e <DMA_CalcBaseAndBitshift+0x6e>
 8002a3a:	3318      	adds	r3, #24
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d026      	beq.n	8002a8e <DMA_CalcBaseAndBitshift+0x6e>
 8002a40:	3318      	adds	r3, #24
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d023      	beq.n	8002a8e <DMA_CalcBaseAndBitshift+0x6e>
 8002a46:	3318      	adds	r3, #24
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d020      	beq.n	8002a8e <DMA_CalcBaseAndBitshift+0x6e>
 8002a4c:	3318      	adds	r3, #24
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d01d      	beq.n	8002a8e <DMA_CalcBaseAndBitshift+0x6e>
 8002a52:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d019      	beq.n	8002a8e <DMA_CalcBaseAndBitshift+0x6e>
 8002a5a:	3318      	adds	r3, #24
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d016      	beq.n	8002a8e <DMA_CalcBaseAndBitshift+0x6e>
 8002a60:	3318      	adds	r3, #24
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d013      	beq.n	8002a8e <DMA_CalcBaseAndBitshift+0x6e>
 8002a66:	3318      	adds	r3, #24
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d010      	beq.n	8002a8e <DMA_CalcBaseAndBitshift+0x6e>
 8002a6c:	3318      	adds	r3, #24
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d00d      	beq.n	8002a8e <DMA_CalcBaseAndBitshift+0x6e>
 8002a72:	3318      	adds	r3, #24
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d00a      	beq.n	8002a8e <DMA_CalcBaseAndBitshift+0x6e>
 8002a78:	3318      	adds	r3, #24
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d007      	beq.n	8002a8e <DMA_CalcBaseAndBitshift+0x6e>
 8002a7e:	3318      	adds	r3, #24
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d004      	beq.n	8002a8e <DMA_CalcBaseAndBitshift+0x6e>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8002a84:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a88:	6582      	str	r2, [r0, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
}
 8002a8a:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8002a8c:	4770      	bx	lr
{
 8002a8e:	b410      	push	{r4}
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002a90:	b2d3      	uxtb	r3, r2
 8002a92:	3b10      	subs	r3, #16
 8002a94:	490d      	ldr	r1, [pc, #52]	; (8002acc <DMA_CalcBaseAndBitshift+0xac>)
 8002a96:	fba1 1303 	umull	r1, r3, r1, r3
 8002a9a:	091b      	lsrs	r3, r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002a9c:	f003 0107 	and.w	r1, r3, #7
 8002aa0:	4c0b      	ldr	r4, [pc, #44]	; (8002ad0 <DMA_CalcBaseAndBitshift+0xb0>)
 8002aa2:	5c61      	ldrb	r1, [r4, r1]
 8002aa4:	65c1      	str	r1, [r0, #92]	; 0x5c
    if (stream_number > 3U)
 8002aa6:	2b03      	cmp	r3, #3
 8002aa8:	d806      	bhi.n	8002ab8 <DMA_CalcBaseAndBitshift+0x98>
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8002aaa:	4b0a      	ldr	r3, [pc, #40]	; (8002ad4 <DMA_CalcBaseAndBitshift+0xb4>)
 8002aac:	4013      	ands	r3, r2
 8002aae:	6583      	str	r3, [r0, #88]	; 0x58
}
 8002ab0:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8002ab2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002ab6:	4770      	bx	lr
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8002ab8:	4b06      	ldr	r3, [pc, #24]	; (8002ad4 <DMA_CalcBaseAndBitshift+0xb4>)
 8002aba:	4013      	ands	r3, r2
 8002abc:	3304      	adds	r3, #4
 8002abe:	6583      	str	r3, [r0, #88]	; 0x58
 8002ac0:	e7f6      	b.n	8002ab0 <DMA_CalcBaseAndBitshift+0x90>
 8002ac2:	bf00      	nop
 8002ac4:	40020010 	.word	0x40020010
 8002ac8:	40020028 	.word	0x40020028
 8002acc:	aaaaaaab 	.word	0xaaaaaaab
 8002ad0:	0800cfc0 	.word	0x0800cfc0
 8002ad4:	fffffc00 	.word	0xfffffc00

08002ad8 <DMA_CheckFifoParam>:
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002ad8:	6983      	ldr	r3, [r0, #24]
 8002ada:	b99b      	cbnz	r3, 8002b04 <DMA_CheckFifoParam+0x2c>
  {
    switch (hdma->Init.FIFOThreshold)
 8002adc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d00a      	beq.n	8002af8 <DMA_CheckFifoParam+0x20>
 8002ae2:	b11b      	cbz	r3, 8002aec <DMA_CheckFifoParam+0x14>
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d001      	beq.n	8002aec <DMA_CheckFifoParam+0x14>
  HAL_StatusTypeDef status = HAL_OK;
 8002ae8:	2000      	movs	r0, #0
 8002aea:	4770      	bx	lr
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002aec:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002aee:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8002af2:	d12e      	bne.n	8002b52 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8002af4:	2000      	movs	r0, #0
 8002af6:	4770      	bx	lr
          status = HAL_ERROR;
        }
        break;

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002af8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002afa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002afe:	d02a      	beq.n	8002b56 <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 8002b00:	2000      	movs	r0, #0
 8002b02:	4770      	bx	lr
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b08:	d006      	beq.n	8002b18 <DMA_CheckFifoParam+0x40>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8002b0a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d92a      	bls.n	8002b66 <DMA_CheckFifoParam+0x8e>
 8002b10:	2b03      	cmp	r3, #3
 8002b12:	d016      	beq.n	8002b42 <DMA_CheckFifoParam+0x6a>
  HAL_StatusTypeDef status = HAL_OK;
 8002b14:	2000      	movs	r0, #0
 8002b16:	4770      	bx	lr
    switch (hdma->Init.FIFOThreshold)
 8002b18:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002b1a:	2b03      	cmp	r3, #3
 8002b1c:	d803      	bhi.n	8002b26 <DMA_CheckFifoParam+0x4e>
 8002b1e:	e8df f003 	tbb	[pc, r3]
 8002b22:	041c      	.short	0x041c
 8002b24:	0a1c      	.short	0x0a1c
  HAL_StatusTypeDef status = HAL_OK;
 8002b26:	2000      	movs	r0, #0
 8002b28:	4770      	bx	lr
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b2a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002b2c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8002b30:	d115      	bne.n	8002b5e <DMA_CheckFifoParam+0x86>
  HAL_StatusTypeDef status = HAL_OK;
 8002b32:	2000      	movs	r0, #0
 8002b34:	4770      	bx	lr
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b36:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002b38:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b3c:	d011      	beq.n	8002b62 <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 8002b3e:	2000      	movs	r0, #0
 8002b40:	4770      	bx	lr
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
        break;

      case DMA_FIFO_THRESHOLD_FULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b42:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002b44:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8002b48:	d001      	beq.n	8002b4e <DMA_CheckFifoParam+0x76>
        {
          status = HAL_ERROR;
 8002b4a:	2001      	movs	r0, #1
        break;
    }
  }

  return status;
}
 8002b4c:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 8002b4e:	2000      	movs	r0, #0
 8002b50:	4770      	bx	lr
          status = HAL_ERROR;
 8002b52:	2001      	movs	r0, #1
 8002b54:	4770      	bx	lr
          status = HAL_ERROR;
 8002b56:	2001      	movs	r0, #1
 8002b58:	4770      	bx	lr
        status = HAL_ERROR;
 8002b5a:	2001      	movs	r0, #1
 8002b5c:	4770      	bx	lr
          status = HAL_ERROR;
 8002b5e:	2001      	movs	r0, #1
 8002b60:	4770      	bx	lr
          status = HAL_ERROR;
 8002b62:	2001      	movs	r0, #1
 8002b64:	4770      	bx	lr
        status = HAL_ERROR;
 8002b66:	2001      	movs	r0, #1
 8002b68:	4770      	bx	lr
	...

08002b6c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8002b6c:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002b6e:	4922      	ldr	r1, [pc, #136]	; (8002bf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8002b70:	4a22      	ldr	r2, [pc, #136]	; (8002bfc <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	bf18      	it	ne
 8002b76:	428b      	cmpne	r3, r1
 8002b78:	d028      	beq.n	8002bcc <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
 8002b7a:	3214      	adds	r2, #20
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d025      	beq.n	8002bcc <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
 8002b80:	3214      	adds	r2, #20
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d022      	beq.n	8002bcc <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
 8002b86:	3214      	adds	r2, #20
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d01f      	beq.n	8002bcc <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
 8002b8c:	3214      	adds	r2, #20
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d01c      	beq.n	8002bcc <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
 8002b92:	3214      	adds	r2, #20
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d019      	beq.n	8002bcc <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
 8002b98:	3214      	adds	r2, #20
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d016      	beq.n	8002bcc <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
  else
  {
    /* DMA1/DMA2 Streams are connected to DMAMUX1 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002b9e:	b2da      	uxtb	r2, r3
 8002ba0:	3a10      	subs	r2, #16
 8002ba2:	4917      	ldr	r1, [pc, #92]	; (8002c00 <DMA_CalcDMAMUXChannelBaseAndMask+0x94>)
 8002ba4:	fba1 1202 	umull	r1, r2, r1, r2
 8002ba8:	0912      	lsrs	r2, r2, #4

    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002baa:	4916      	ldr	r1, [pc, #88]	; (8002c04 <DMA_CalcDMAMUXChannelBaseAndMask+0x98>)
 8002bac:	4419      	add	r1, r3
 8002bae:	29a8      	cmp	r1, #168	; 0xa8
 8002bb0:	d91f      	bls.n	8002bf2 <DMA_CalcDMAMUXChannelBaseAndMask+0x86>
       (stream_baseaddress >= ((uint32_t)DMA2_Stream0)))
    {
      stream_number += 8U;
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8002bb2:	4b15      	ldr	r3, [pc, #84]	; (8002c08 <DMA_CalcDMAMUXChannelBaseAndMask+0x9c>)
 8002bb4:	4413      	add	r3, r2
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	6603      	str	r3, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002bba:	4b14      	ldr	r3, [pc, #80]	; (8002c0c <DMA_CalcDMAMUXChannelBaseAndMask+0xa0>)
 8002bbc:	6643      	str	r3, [r0, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002bbe:	f002 021f 	and.w	r2, r2, #31
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	fa03 f202 	lsl.w	r2, r3, r2
 8002bc8:	6682      	str	r2, [r0, #104]	; 0x68
  }
}
 8002bca:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	3b08      	subs	r3, #8
 8002bd0:	4a0f      	ldr	r2, [pc, #60]	; (8002c10 <DMA_CalcDMAMUXChannelBaseAndMask+0xa4>)
 8002bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd6:	091b      	lsrs	r3, r3, #4
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8002bd8:	4a0e      	ldr	r2, [pc, #56]	; (8002c14 <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 8002bda:	441a      	add	r2, r3
 8002bdc:	0092      	lsls	r2, r2, #2
 8002bde:	6602      	str	r2, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8002be0:	4a0d      	ldr	r2, [pc, #52]	; (8002c18 <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
 8002be2:	6642      	str	r2, [r0, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002be4:	f003 031f 	and.w	r3, r3, #31
 8002be8:	2201      	movs	r2, #1
 8002bea:	fa02 f303 	lsl.w	r3, r2, r3
 8002bee:	6683      	str	r3, [r0, #104]	; 0x68
 8002bf0:	4770      	bx	lr
      stream_number += 8U;
 8002bf2:	3208      	adds	r2, #8
 8002bf4:	e7dd      	b.n	8002bb2 <DMA_CalcDMAMUXChannelBaseAndMask+0x46>
 8002bf6:	bf00      	nop
 8002bf8:	58025408 	.word	0x58025408
 8002bfc:	5802541c 	.word	0x5802541c
 8002c00:	aaaaaaab 	.word	0xaaaaaaab
 8002c04:	bffdfbf0 	.word	0xbffdfbf0
 8002c08:	10008200 	.word	0x10008200
 8002c0c:	40020880 	.word	0x40020880
 8002c10:	cccccccd 	.word	0xcccccccd
 8002c14:	16009600 	.word	0x16009600
 8002c18:	58025880 	.word	0x58025880

08002c1c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002c1c:	7901      	ldrb	r1, [r0, #4]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8002c1e:	1e4a      	subs	r2, r1, #1
 8002c20:	2a07      	cmp	r2, #7
 8002c22:	d82c      	bhi.n	8002c7e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x62>
{
 8002c24:	b430      	push	{r4, r5}
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002c26:	6803      	ldr	r3, [r0, #0]
 8002c28:	4d15      	ldr	r5, [pc, #84]	; (8002c80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x64>)
 8002c2a:	4c16      	ldr	r4, [pc, #88]	; (8002c84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x68>)
 8002c2c:	42a3      	cmp	r3, r4
 8002c2e:	bf18      	it	ne
 8002c30:	42ab      	cmpne	r3, r5
 8002c32:	d018      	beq.n	8002c66 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 8002c34:	3414      	adds	r4, #20
 8002c36:	42a3      	cmp	r3, r4
 8002c38:	d015      	beq.n	8002c66 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 8002c3a:	3414      	adds	r4, #20
 8002c3c:	42a3      	cmp	r3, r4
 8002c3e:	d012      	beq.n	8002c66 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 8002c40:	3414      	adds	r4, #20
 8002c42:	42a3      	cmp	r3, r4
 8002c44:	d00f      	beq.n	8002c66 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 8002c46:	3414      	adds	r4, #20
 8002c48:	42a3      	cmp	r3, r4
 8002c4a:	d00c      	beq.n	8002c66 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 8002c4c:	3414      	adds	r4, #20
 8002c4e:	42a3      	cmp	r3, r4
 8002c50:	d009      	beq.n	8002c66 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
 8002c52:	3414      	adds	r4, #20
 8002c54:	42a3      	cmp	r3, r4
 8002c56:	d006      	beq.n	8002c66 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x4a>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002c58:	4b0b      	ldr	r3, [pc, #44]	; (8002c88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>)
 8002c5a:	440b      	add	r3, r1
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	66c3      	str	r3, [r0, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002c60:	4b0a      	ldr	r3, [pc, #40]	; (8002c8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>)
 8002c62:	6703      	str	r3, [r0, #112]	; 0x70
 8002c64:	e005      	b.n	8002c72 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x56>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8002c66:	4b0a      	ldr	r3, [pc, #40]	; (8002c90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x74>)
 8002c68:	440b      	add	r3, r1
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	66c3      	str	r3, [r0, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8002c6e:	4b09      	ldr	r3, [pc, #36]	; (8002c94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x78>)
 8002c70:	6703      	str	r3, [r0, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8002c72:	2301      	movs	r3, #1
 8002c74:	fa03 f202 	lsl.w	r2, r3, r2
 8002c78:	6742      	str	r2, [r0, #116]	; 0x74
  }
}
 8002c7a:	bc30      	pop	{r4, r5}
 8002c7c:	4770      	bx	lr
 8002c7e:	4770      	bx	lr
 8002c80:	58025408 	.word	0x58025408
 8002c84:	5802541c 	.word	0x5802541c
 8002c88:	1000823f 	.word	0x1000823f
 8002c8c:	40020940 	.word	0x40020940
 8002c90:	1600963f 	.word	0x1600963f
 8002c94:	58025940 	.word	0x58025940

08002c98 <HAL_DMA_Init>:
{
 8002c98:	b570      	push	{r4, r5, r6, lr}
 8002c9a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002c9c:	f7ff fd5a 	bl	8002754 <HAL_GetTick>
  if(hdma == NULL)
 8002ca0:	2c00      	cmp	r4, #0
 8002ca2:	f000 81bd 	beq.w	8003020 <HAL_DMA_Init+0x388>
 8002ca6:	4605      	mov	r5, r0
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ca8:	6823      	ldr	r3, [r4, #0]
 8002caa:	49b7      	ldr	r1, [pc, #732]	; (8002f88 <HAL_DMA_Init+0x2f0>)
 8002cac:	4ab7      	ldr	r2, [pc, #732]	; (8002f8c <HAL_DMA_Init+0x2f4>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	bf18      	it	ne
 8002cb2:	428b      	cmpne	r3, r1
 8002cb4:	bf0c      	ite	eq
 8002cb6:	2201      	moveq	r2, #1
 8002cb8:	2200      	movne	r2, #0
 8002cba:	d050      	beq.n	8002d5e <HAL_DMA_Init+0xc6>
 8002cbc:	3130      	adds	r1, #48	; 0x30
 8002cbe:	428b      	cmp	r3, r1
 8002cc0:	d04d      	beq.n	8002d5e <HAL_DMA_Init+0xc6>
 8002cc2:	3118      	adds	r1, #24
 8002cc4:	428b      	cmp	r3, r1
 8002cc6:	d04a      	beq.n	8002d5e <HAL_DMA_Init+0xc6>
 8002cc8:	3118      	adds	r1, #24
 8002cca:	428b      	cmp	r3, r1
 8002ccc:	d047      	beq.n	8002d5e <HAL_DMA_Init+0xc6>
 8002cce:	3118      	adds	r1, #24
 8002cd0:	428b      	cmp	r3, r1
 8002cd2:	d044      	beq.n	8002d5e <HAL_DMA_Init+0xc6>
 8002cd4:	3118      	adds	r1, #24
 8002cd6:	428b      	cmp	r3, r1
 8002cd8:	d041      	beq.n	8002d5e <HAL_DMA_Init+0xc6>
 8002cda:	3118      	adds	r1, #24
 8002cdc:	428b      	cmp	r3, r1
 8002cde:	d03e      	beq.n	8002d5e <HAL_DMA_Init+0xc6>
 8002ce0:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8002ce4:	428b      	cmp	r3, r1
 8002ce6:	d03a      	beq.n	8002d5e <HAL_DMA_Init+0xc6>
 8002ce8:	3118      	adds	r1, #24
 8002cea:	428b      	cmp	r3, r1
 8002cec:	d037      	beq.n	8002d5e <HAL_DMA_Init+0xc6>
 8002cee:	3118      	adds	r1, #24
 8002cf0:	428b      	cmp	r3, r1
 8002cf2:	d034      	beq.n	8002d5e <HAL_DMA_Init+0xc6>
 8002cf4:	3118      	adds	r1, #24
 8002cf6:	428b      	cmp	r3, r1
 8002cf8:	d031      	beq.n	8002d5e <HAL_DMA_Init+0xc6>
 8002cfa:	3118      	adds	r1, #24
 8002cfc:	428b      	cmp	r3, r1
 8002cfe:	d02e      	beq.n	8002d5e <HAL_DMA_Init+0xc6>
 8002d00:	3118      	adds	r1, #24
 8002d02:	428b      	cmp	r3, r1
 8002d04:	d02b      	beq.n	8002d5e <HAL_DMA_Init+0xc6>
 8002d06:	3118      	adds	r1, #24
 8002d08:	428b      	cmp	r3, r1
 8002d0a:	d028      	beq.n	8002d5e <HAL_DMA_Init+0xc6>
 8002d0c:	3118      	adds	r1, #24
 8002d0e:	428b      	cmp	r3, r1
 8002d10:	d025      	beq.n	8002d5e <HAL_DMA_Init+0xc6>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002d12:	499f      	ldr	r1, [pc, #636]	; (8002f90 <HAL_DMA_Init+0x2f8>)
 8002d14:	4a9f      	ldr	r2, [pc, #636]	; (8002f94 <HAL_DMA_Init+0x2fc>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	bf18      	it	ne
 8002d1a:	428b      	cmpne	r3, r1
 8002d1c:	f000 8124 	beq.w	8002f68 <HAL_DMA_Init+0x2d0>
 8002d20:	4a9d      	ldr	r2, [pc, #628]	; (8002f98 <HAL_DMA_Init+0x300>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	f000 8120 	beq.w	8002f68 <HAL_DMA_Init+0x2d0>
 8002d28:	3214      	adds	r2, #20
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	f000 811c 	beq.w	8002f68 <HAL_DMA_Init+0x2d0>
 8002d30:	3214      	adds	r2, #20
 8002d32:	4293      	cmp	r3, r2
 8002d34:	f000 8118 	beq.w	8002f68 <HAL_DMA_Init+0x2d0>
 8002d38:	3214      	adds	r2, #20
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	f000 8114 	beq.w	8002f68 <HAL_DMA_Init+0x2d0>
 8002d40:	3214      	adds	r2, #20
 8002d42:	4293      	cmp	r3, r2
 8002d44:	f000 8110 	beq.w	8002f68 <HAL_DMA_Init+0x2d0>
 8002d48:	3214      	adds	r2, #20
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	f000 810c 	beq.w	8002f68 <HAL_DMA_Init+0x2d0>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d50:	2340      	movs	r3, #64	; 0x40
 8002d52:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002d54:	2303      	movs	r3, #3
 8002d56:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    return HAL_ERROR;
 8002d5a:	2001      	movs	r0, #1
 8002d5c:	e04a      	b.n	8002df4 <HAL_DMA_Init+0x15c>
    __HAL_UNLOCK(hdma);
 8002d5e:	2100      	movs	r1, #0
 8002d60:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d64:	2102      	movs	r1, #2
 8002d66:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8002d6a:	bb7a      	cbnz	r2, 8002dcc <HAL_DMA_Init+0x134>
 8002d6c:	4a8b      	ldr	r2, [pc, #556]	; (8002f9c <HAL_DMA_Init+0x304>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d02c      	beq.n	8002dcc <HAL_DMA_Init+0x134>
 8002d72:	3218      	adds	r2, #24
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d029      	beq.n	8002dcc <HAL_DMA_Init+0x134>
 8002d78:	3218      	adds	r2, #24
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d026      	beq.n	8002dcc <HAL_DMA_Init+0x134>
 8002d7e:	3218      	adds	r2, #24
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d023      	beq.n	8002dcc <HAL_DMA_Init+0x134>
 8002d84:	3218      	adds	r2, #24
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d020      	beq.n	8002dcc <HAL_DMA_Init+0x134>
 8002d8a:	3218      	adds	r2, #24
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d01d      	beq.n	8002dcc <HAL_DMA_Init+0x134>
 8002d90:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d019      	beq.n	8002dcc <HAL_DMA_Init+0x134>
 8002d98:	3218      	adds	r2, #24
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d016      	beq.n	8002dcc <HAL_DMA_Init+0x134>
 8002d9e:	3218      	adds	r2, #24
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d013      	beq.n	8002dcc <HAL_DMA_Init+0x134>
 8002da4:	3218      	adds	r2, #24
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d010      	beq.n	8002dcc <HAL_DMA_Init+0x134>
 8002daa:	3218      	adds	r2, #24
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d00d      	beq.n	8002dcc <HAL_DMA_Init+0x134>
 8002db0:	3218      	adds	r2, #24
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d00a      	beq.n	8002dcc <HAL_DMA_Init+0x134>
 8002db6:	3218      	adds	r2, #24
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d007      	beq.n	8002dcc <HAL_DMA_Init+0x134>
 8002dbc:	3218      	adds	r2, #24
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d004      	beq.n	8002dcc <HAL_DMA_Init+0x134>
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	f022 0201 	bic.w	r2, r2, #1
 8002dc8:	601a      	str	r2, [r3, #0]
 8002dca:	e003      	b.n	8002dd4 <HAL_DMA_Init+0x13c>
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	f022 0201 	bic.w	r2, r2, #1
 8002dd2:	601a      	str	r2, [r3, #0]
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002dd4:	6823      	ldr	r3, [r4, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	f012 0f01 	tst.w	r2, #1
 8002ddc:	d00b      	beq.n	8002df6 <HAL_DMA_Init+0x15e>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002dde:	f7ff fcb9 	bl	8002754 <HAL_GetTick>
 8002de2:	1b40      	subs	r0, r0, r5
 8002de4:	2805      	cmp	r0, #5
 8002de6:	d9f5      	bls.n	8002dd4 <HAL_DMA_Init+0x13c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002de8:	2320      	movs	r3, #32
 8002dea:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8002dec:	2303      	movs	r3, #3
 8002dee:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        return HAL_ERROR;
 8002df2:	2001      	movs	r0, #1
}
 8002df4:	bd70      	pop	{r4, r5, r6, pc}
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002df6:	681a      	ldr	r2, [r3, #0]
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002df8:	4869      	ldr	r0, [pc, #420]	; (8002fa0 <HAL_DMA_Init+0x308>)
 8002dfa:	4010      	ands	r0, r2
    registerValue |=  hdma->Init.Direction           |
 8002dfc:	68a1      	ldr	r1, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dfe:	68e2      	ldr	r2, [r4, #12]
    registerValue |=  hdma->Init.Direction           |
 8002e00:	430a      	orrs	r2, r1
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e02:	6921      	ldr	r1, [r4, #16]
 8002e04:	430a      	orrs	r2, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e06:	6961      	ldr	r1, [r4, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e08:	430a      	orrs	r2, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e0a:	69a1      	ldr	r1, [r4, #24]
 8002e0c:	430a      	orrs	r2, r1
            hdma->Init.Mode                | hdma->Init.Priority;
 8002e0e:	69e1      	ldr	r1, [r4, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e10:	430a      	orrs	r2, r1
            hdma->Init.Mode                | hdma->Init.Priority;
 8002e12:	6a21      	ldr	r1, [r4, #32]
 8002e14:	430a      	orrs	r2, r1
    registerValue |=  hdma->Init.Direction           |
 8002e16:	4302      	orrs	r2, r0
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e18:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002e1a:	2904      	cmp	r1, #4
 8002e1c:	f000 8099 	beq.w	8002f52 <HAL_DMA_Init+0x2ba>
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002e20:	4960      	ldr	r1, [pc, #384]	; (8002fa4 <HAL_DMA_Init+0x30c>)
 8002e22:	6808      	ldr	r0, [r1, #0]
 8002e24:	4960      	ldr	r1, [pc, #384]	; (8002fa8 <HAL_DMA_Init+0x310>)
 8002e26:	4001      	ands	r1, r0
 8002e28:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8002e2c:	d311      	bcc.n	8002e52 <HAL_DMA_Init+0x1ba>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002e2e:	6861      	ldr	r1, [r4, #4]
 8002e30:	f1a1 0529 	sub.w	r5, r1, #41	; 0x29
 8002e34:	f1a1 003f 	sub.w	r0, r1, #63	; 0x3f
 8002e38:	2803      	cmp	r0, #3
 8002e3a:	bf88      	it	hi
 8002e3c:	2d05      	cmphi	r5, #5
 8002e3e:	d906      	bls.n	8002e4e <HAL_DMA_Init+0x1b6>
 8002e40:	f1a1 0047 	sub.w	r0, r1, #71	; 0x47
 8002e44:	2801      	cmp	r0, #1
 8002e46:	d902      	bls.n	8002e4e <HAL_DMA_Init+0x1b6>
 8002e48:	394f      	subs	r1, #79	; 0x4f
 8002e4a:	2903      	cmp	r1, #3
 8002e4c:	d801      	bhi.n	8002e52 <HAL_DMA_Init+0x1ba>
        registerValue |= DMA_SxCR_TRBUFF;
 8002e4e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002e52:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002e54:	6826      	ldr	r6, [r4, #0]
 8002e56:	6975      	ldr	r5, [r6, #20]
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e58:	f025 0507 	bic.w	r5, r5, #7
    registerValue |= hdma->Init.FIFOMode;
 8002e5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002e5e:	431d      	orrs	r5, r3
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e60:	2b04      	cmp	r3, #4
 8002e62:	d108      	bne.n	8002e76 <HAL_DMA_Init+0x1de>
      registerValue |= hdma->Init.FIFOThreshold;
 8002e64:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002e66:	431d      	orrs	r5, r3
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e68:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002e6a:	b123      	cbz	r3, 8002e76 <HAL_DMA_Init+0x1de>
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002e6c:	4620      	mov	r0, r4
 8002e6e:	f7ff fe33 	bl	8002ad8 <DMA_CheckFifoParam>
 8002e72:	2800      	cmp	r0, #0
 8002e74:	d172      	bne.n	8002f5c <HAL_DMA_Init+0x2c4>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002e76:	6175      	str	r5, [r6, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e78:	4620      	mov	r0, r4
 8002e7a:	f7ff fdd1 	bl	8002a20 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002e7e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002e80:	f003 021f 	and.w	r2, r3, #31
 8002e84:	233f      	movs	r3, #63	; 0x3f
 8002e86:	4093      	lsls	r3, r2
 8002e88:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002e8a:	6823      	ldr	r3, [r4, #0]
 8002e8c:	493e      	ldr	r1, [pc, #248]	; (8002f88 <HAL_DMA_Init+0x2f0>)
 8002e8e:	4a3f      	ldr	r2, [pc, #252]	; (8002f8c <HAL_DMA_Init+0x2f4>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	bf18      	it	ne
 8002e94:	428b      	cmpne	r3, r1
 8002e96:	d042      	beq.n	8002f1e <HAL_DMA_Init+0x286>
 8002e98:	3218      	adds	r2, #24
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d03f      	beq.n	8002f1e <HAL_DMA_Init+0x286>
 8002e9e:	3218      	adds	r2, #24
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d03c      	beq.n	8002f1e <HAL_DMA_Init+0x286>
 8002ea4:	3218      	adds	r2, #24
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d039      	beq.n	8002f1e <HAL_DMA_Init+0x286>
 8002eaa:	3218      	adds	r2, #24
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d036      	beq.n	8002f1e <HAL_DMA_Init+0x286>
 8002eb0:	3218      	adds	r2, #24
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d033      	beq.n	8002f1e <HAL_DMA_Init+0x286>
 8002eb6:	3218      	adds	r2, #24
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d030      	beq.n	8002f1e <HAL_DMA_Init+0x286>
 8002ebc:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d02c      	beq.n	8002f1e <HAL_DMA_Init+0x286>
 8002ec4:	3218      	adds	r2, #24
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d029      	beq.n	8002f1e <HAL_DMA_Init+0x286>
 8002eca:	3218      	adds	r2, #24
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d026      	beq.n	8002f1e <HAL_DMA_Init+0x286>
 8002ed0:	3218      	adds	r2, #24
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d023      	beq.n	8002f1e <HAL_DMA_Init+0x286>
 8002ed6:	3218      	adds	r2, #24
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d020      	beq.n	8002f1e <HAL_DMA_Init+0x286>
 8002edc:	3218      	adds	r2, #24
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d01d      	beq.n	8002f1e <HAL_DMA_Init+0x286>
 8002ee2:	3218      	adds	r2, #24
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d01a      	beq.n	8002f1e <HAL_DMA_Init+0x286>
 8002ee8:	3218      	adds	r2, #24
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d017      	beq.n	8002f1e <HAL_DMA_Init+0x286>
 8002eee:	4a28      	ldr	r2, [pc, #160]	; (8002f90 <HAL_DMA_Init+0x2f8>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d014      	beq.n	8002f1e <HAL_DMA_Init+0x286>
 8002ef4:	3214      	adds	r2, #20
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d011      	beq.n	8002f1e <HAL_DMA_Init+0x286>
 8002efa:	3214      	adds	r2, #20
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d00e      	beq.n	8002f1e <HAL_DMA_Init+0x286>
 8002f00:	3214      	adds	r2, #20
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d00b      	beq.n	8002f1e <HAL_DMA_Init+0x286>
 8002f06:	3214      	adds	r2, #20
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d008      	beq.n	8002f1e <HAL_DMA_Init+0x286>
 8002f0c:	3214      	adds	r2, #20
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d005      	beq.n	8002f1e <HAL_DMA_Init+0x286>
 8002f12:	3214      	adds	r2, #20
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d002      	beq.n	8002f1e <HAL_DMA_Init+0x286>
 8002f18:	3214      	adds	r2, #20
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d113      	bne.n	8002f46 <HAL_DMA_Init+0x2ae>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002f1e:	4620      	mov	r0, r4
 8002f20:	f7ff fe24 	bl	8002b6c <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002f24:	68a3      	ldr	r3, [r4, #8]
 8002f26:	2b80      	cmp	r3, #128	; 0x80
 8002f28:	d06d      	beq.n	8003006 <HAL_DMA_Init+0x36e>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002f2a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002f2c:	7922      	ldrb	r2, [r4, #4]
 8002f2e:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f30:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002f32:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8002f34:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002f36:	6863      	ldr	r3, [r4, #4]
 8002f38:	3b01      	subs	r3, #1
 8002f3a:	2b07      	cmp	r3, #7
 8002f3c:	d966      	bls.n	800300c <HAL_DMA_Init+0x374>
      hdma->DMAmuxRequestGen = 0U;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	66e3      	str	r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002f42:	6723      	str	r3, [r4, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002f44:	6763      	str	r3, [r4, #116]	; 0x74
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f46:	2000      	movs	r0, #0
 8002f48:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8002f50:	e750      	b.n	8002df4 <HAL_DMA_Init+0x15c>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f52:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002f54:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002f56:	4301      	orrs	r1, r0
 8002f58:	430a      	orrs	r2, r1
 8002f5a:	e761      	b.n	8002e20 <HAL_DMA_Init+0x188>
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f5c:	2340      	movs	r3, #64	; 0x40
 8002f5e:	6563      	str	r3, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 8002f60:	2001      	movs	r0, #1
 8002f62:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
          return HAL_ERROR;
 8002f66:	e745      	b.n	8002df4 <HAL_DMA_Init+0x15c>
    __HAL_UNLOCK(hdma);
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f6e:	2202      	movs	r2, #2
 8002f70:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002f74:	681a      	ldr	r2, [r3, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002f76:	490d      	ldr	r1, [pc, #52]	; (8002fac <HAL_DMA_Init+0x314>)
 8002f78:	4011      	ands	r1, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002f7a:	68a2      	ldr	r2, [r4, #8]
 8002f7c:	2a40      	cmp	r2, #64	; 0x40
 8002f7e:	d01a      	beq.n	8002fb6 <HAL_DMA_Init+0x31e>
 8002f80:	2a80      	cmp	r2, #128	; 0x80
 8002f82:	d015      	beq.n	8002fb0 <HAL_DMA_Init+0x318>
 8002f84:	2200      	movs	r2, #0
 8002f86:	e017      	b.n	8002fb8 <HAL_DMA_Init+0x320>
 8002f88:	40020010 	.word	0x40020010
 8002f8c:	40020028 	.word	0x40020028
 8002f90:	58025408 	.word	0x58025408
 8002f94:	5802541c 	.word	0x5802541c
 8002f98:	58025430 	.word	0x58025430
 8002f9c:	40020040 	.word	0x40020040
 8002fa0:	fe10803f 	.word	0xfe10803f
 8002fa4:	5c001000 	.word	0x5c001000
 8002fa8:	ffff0000 	.word	0xffff0000
 8002fac:	fffe000f 	.word	0xfffe000f
 8002fb0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002fb4:	e000      	b.n	8002fb8 <HAL_DMA_Init+0x320>
 8002fb6:	2210      	movs	r2, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002fb8:	68e0      	ldr	r0, [r4, #12]
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002fba:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002fbe:	6920      	ldr	r0, [r4, #16]
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002fc0:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002fc4:	6960      	ldr	r0, [r4, #20]
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002fc6:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002fca:	69a0      	ldr	r0, [r4, #24]
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002fcc:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002fd0:	69e0      	ldr	r0, [r4, #28]
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002fd2:	ea42 02d0 	orr.w	r2, r2, r0, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002fd6:	6a20      	ldr	r0, [r4, #32]
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002fd8:	ea42 1210 	orr.w	r2, r2, r0, lsr #4
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002fdc:	430a      	orrs	r2, r1
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002fde:	601a      	str	r2, [r3, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002fe0:	6822      	ldr	r2, [r4, #0]
 8002fe2:	4b10      	ldr	r3, [pc, #64]	; (8003024 <HAL_DMA_Init+0x38c>)
 8002fe4:	4413      	add	r3, r2
 8002fe6:	4a10      	ldr	r2, [pc, #64]	; (8003028 <HAL_DMA_Init+0x390>)
 8002fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fec:	091b      	lsrs	r3, r3, #4
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	65e3      	str	r3, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ff2:	4620      	mov	r0, r4
 8002ff4:	f7ff fd14 	bl	8002a20 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002ff8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002ffa:	f003 021f 	and.w	r2, r3, #31
 8002ffe:	2301      	movs	r3, #1
 8003000:	4093      	lsls	r3, r2
 8003002:	6043      	str	r3, [r0, #4]
 8003004:	e741      	b.n	8002e8a <HAL_DMA_Init+0x1f2>
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003006:	2300      	movs	r3, #0
 8003008:	6063      	str	r3, [r4, #4]
 800300a:	e78e      	b.n	8002f2a <HAL_DMA_Init+0x292>
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800300c:	4620      	mov	r0, r4
 800300e:	f7ff fe05 	bl	8002c1c <DMA_CalcDMAMUXRequestGenBaseAndMask>
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003012:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8003014:	2200      	movs	r2, #0
 8003016:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003018:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800301a:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800301c:	605a      	str	r2, [r3, #4]
 800301e:	e792      	b.n	8002f46 <HAL_DMA_Init+0x2ae>
    return HAL_ERROR;
 8003020:	2001      	movs	r0, #1
 8003022:	e6e7      	b.n	8002df4 <HAL_DMA_Init+0x15c>
 8003024:	a7fdabf8 	.word	0xa7fdabf8
 8003028:	cccccccd 	.word	0xcccccccd

0800302c <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 800302c:	2800      	cmp	r0, #0
 800302e:	f000 813e 	beq.w	80032ae <HAL_DMA_Start_IT+0x282>
{
 8003032:	b570      	push	{r4, r5, r6, lr}
 8003034:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8003036:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 800303a:	2801      	cmp	r0, #1
 800303c:	f000 8139 	beq.w	80032b2 <HAL_DMA_Start_IT+0x286>
 8003040:	2001      	movs	r0, #1
 8003042:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8003046:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
 800304a:	b2c0      	uxtb	r0, r0
 800304c:	2801      	cmp	r0, #1
 800304e:	d007      	beq.n	8003060 <HAL_DMA_Start_IT+0x34>
    __HAL_UNLOCK(hdma);
 8003050:	2300      	movs	r3, #0
 8003052:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003056:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800305a:	6563      	str	r3, [r4, #84]	; 0x54
    status = HAL_ERROR;
 800305c:	2001      	movs	r0, #1
}
 800305e:	bd70      	pop	{r4, r5, r6, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8003060:	2002      	movs	r0, #2
 8003062:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003066:	2000      	movs	r0, #0
 8003068:	6560      	str	r0, [r4, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 800306a:	6820      	ldr	r0, [r4, #0]
 800306c:	4e92      	ldr	r6, [pc, #584]	; (80032b8 <HAL_DMA_Start_IT+0x28c>)
 800306e:	4d93      	ldr	r5, [pc, #588]	; (80032bc <HAL_DMA_Start_IT+0x290>)
 8003070:	42a8      	cmp	r0, r5
 8003072:	bf18      	it	ne
 8003074:	42b0      	cmpne	r0, r6
 8003076:	d02f      	beq.n	80030d8 <HAL_DMA_Start_IT+0xac>
 8003078:	3518      	adds	r5, #24
 800307a:	42a8      	cmp	r0, r5
 800307c:	d02c      	beq.n	80030d8 <HAL_DMA_Start_IT+0xac>
 800307e:	3518      	adds	r5, #24
 8003080:	42a8      	cmp	r0, r5
 8003082:	d029      	beq.n	80030d8 <HAL_DMA_Start_IT+0xac>
 8003084:	3518      	adds	r5, #24
 8003086:	42a8      	cmp	r0, r5
 8003088:	d026      	beq.n	80030d8 <HAL_DMA_Start_IT+0xac>
 800308a:	3518      	adds	r5, #24
 800308c:	42a8      	cmp	r0, r5
 800308e:	d023      	beq.n	80030d8 <HAL_DMA_Start_IT+0xac>
 8003090:	3518      	adds	r5, #24
 8003092:	42a8      	cmp	r0, r5
 8003094:	d020      	beq.n	80030d8 <HAL_DMA_Start_IT+0xac>
 8003096:	3518      	adds	r5, #24
 8003098:	42a8      	cmp	r0, r5
 800309a:	d01d      	beq.n	80030d8 <HAL_DMA_Start_IT+0xac>
 800309c:	f505 7556 	add.w	r5, r5, #856	; 0x358
 80030a0:	42a8      	cmp	r0, r5
 80030a2:	d019      	beq.n	80030d8 <HAL_DMA_Start_IT+0xac>
 80030a4:	3518      	adds	r5, #24
 80030a6:	42a8      	cmp	r0, r5
 80030a8:	d016      	beq.n	80030d8 <HAL_DMA_Start_IT+0xac>
 80030aa:	3518      	adds	r5, #24
 80030ac:	42a8      	cmp	r0, r5
 80030ae:	d013      	beq.n	80030d8 <HAL_DMA_Start_IT+0xac>
 80030b0:	3518      	adds	r5, #24
 80030b2:	42a8      	cmp	r0, r5
 80030b4:	d010      	beq.n	80030d8 <HAL_DMA_Start_IT+0xac>
 80030b6:	3518      	adds	r5, #24
 80030b8:	42a8      	cmp	r0, r5
 80030ba:	d00d      	beq.n	80030d8 <HAL_DMA_Start_IT+0xac>
 80030bc:	3518      	adds	r5, #24
 80030be:	42a8      	cmp	r0, r5
 80030c0:	d00a      	beq.n	80030d8 <HAL_DMA_Start_IT+0xac>
 80030c2:	3518      	adds	r5, #24
 80030c4:	42a8      	cmp	r0, r5
 80030c6:	d007      	beq.n	80030d8 <HAL_DMA_Start_IT+0xac>
 80030c8:	3518      	adds	r5, #24
 80030ca:	42a8      	cmp	r0, r5
 80030cc:	d004      	beq.n	80030d8 <HAL_DMA_Start_IT+0xac>
 80030ce:	6805      	ldr	r5, [r0, #0]
 80030d0:	f025 0501 	bic.w	r5, r5, #1
 80030d4:	6005      	str	r5, [r0, #0]
 80030d6:	e003      	b.n	80030e0 <HAL_DMA_Start_IT+0xb4>
 80030d8:	6805      	ldr	r5, [r0, #0]
 80030da:	f025 0501 	bic.w	r5, r5, #1
 80030de:	6005      	str	r5, [r0, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80030e0:	4620      	mov	r0, r4
 80030e2:	f7ff fbc5 	bl	8002870 <DMA_SetConfig>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80030e6:	6823      	ldr	r3, [r4, #0]
 80030e8:	4973      	ldr	r1, [pc, #460]	; (80032b8 <HAL_DMA_Start_IT+0x28c>)
 80030ea:	4a74      	ldr	r2, [pc, #464]	; (80032bc <HAL_DMA_Start_IT+0x290>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	bf18      	it	ne
 80030f0:	428b      	cmpne	r3, r1
 80030f2:	d038      	beq.n	8003166 <HAL_DMA_Start_IT+0x13a>
 80030f4:	3218      	adds	r2, #24
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d035      	beq.n	8003166 <HAL_DMA_Start_IT+0x13a>
 80030fa:	3218      	adds	r2, #24
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d032      	beq.n	8003166 <HAL_DMA_Start_IT+0x13a>
 8003100:	3218      	adds	r2, #24
 8003102:	4293      	cmp	r3, r2
 8003104:	d02f      	beq.n	8003166 <HAL_DMA_Start_IT+0x13a>
 8003106:	3218      	adds	r2, #24
 8003108:	4293      	cmp	r3, r2
 800310a:	d02c      	beq.n	8003166 <HAL_DMA_Start_IT+0x13a>
 800310c:	3218      	adds	r2, #24
 800310e:	4293      	cmp	r3, r2
 8003110:	d029      	beq.n	8003166 <HAL_DMA_Start_IT+0x13a>
 8003112:	3218      	adds	r2, #24
 8003114:	4293      	cmp	r3, r2
 8003116:	d026      	beq.n	8003166 <HAL_DMA_Start_IT+0x13a>
 8003118:	f502 7256 	add.w	r2, r2, #856	; 0x358
 800311c:	4293      	cmp	r3, r2
 800311e:	d022      	beq.n	8003166 <HAL_DMA_Start_IT+0x13a>
 8003120:	3218      	adds	r2, #24
 8003122:	4293      	cmp	r3, r2
 8003124:	d01f      	beq.n	8003166 <HAL_DMA_Start_IT+0x13a>
 8003126:	3218      	adds	r2, #24
 8003128:	4293      	cmp	r3, r2
 800312a:	d01c      	beq.n	8003166 <HAL_DMA_Start_IT+0x13a>
 800312c:	3218      	adds	r2, #24
 800312e:	4293      	cmp	r3, r2
 8003130:	d019      	beq.n	8003166 <HAL_DMA_Start_IT+0x13a>
 8003132:	3218      	adds	r2, #24
 8003134:	4293      	cmp	r3, r2
 8003136:	d016      	beq.n	8003166 <HAL_DMA_Start_IT+0x13a>
 8003138:	3218      	adds	r2, #24
 800313a:	4293      	cmp	r3, r2
 800313c:	d013      	beq.n	8003166 <HAL_DMA_Start_IT+0x13a>
 800313e:	3218      	adds	r2, #24
 8003140:	4293      	cmp	r3, r2
 8003142:	d010      	beq.n	8003166 <HAL_DMA_Start_IT+0x13a>
 8003144:	3218      	adds	r2, #24
 8003146:	4293      	cmp	r3, r2
 8003148:	d00d      	beq.n	8003166 <HAL_DMA_Start_IT+0x13a>
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	f022 020e 	bic.w	r2, r2, #14
 8003150:	f042 020a 	orr.w	r2, r2, #10
 8003154:	601a      	str	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8003156:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003158:	b193      	cbz	r3, 8003180 <HAL_DMA_Start_IT+0x154>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800315a:	6822      	ldr	r2, [r4, #0]
 800315c:	6813      	ldr	r3, [r2, #0]
 800315e:	f043 0304 	orr.w	r3, r3, #4
 8003162:	6013      	str	r3, [r2, #0]
 8003164:	e00c      	b.n	8003180 <HAL_DMA_Start_IT+0x154>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	f022 021e 	bic.w	r2, r2, #30
 800316c:	f042 0216 	orr.w	r2, r2, #22
 8003170:	601a      	str	r2, [r3, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8003172:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003174:	b123      	cbz	r3, 8003180 <HAL_DMA_Start_IT+0x154>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003176:	6822      	ldr	r2, [r4, #0]
 8003178:	6813      	ldr	r3, [r2, #0]
 800317a:	f043 0308 	orr.w	r3, r3, #8
 800317e:	6013      	str	r3, [r2, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003180:	6823      	ldr	r3, [r4, #0]
 8003182:	494d      	ldr	r1, [pc, #308]	; (80032b8 <HAL_DMA_Start_IT+0x28c>)
 8003184:	4a4d      	ldr	r2, [pc, #308]	; (80032bc <HAL_DMA_Start_IT+0x290>)
 8003186:	4293      	cmp	r3, r2
 8003188:	bf18      	it	ne
 800318a:	428b      	cmpne	r3, r1
 800318c:	d042      	beq.n	8003214 <HAL_DMA_Start_IT+0x1e8>
 800318e:	3218      	adds	r2, #24
 8003190:	4293      	cmp	r3, r2
 8003192:	d03f      	beq.n	8003214 <HAL_DMA_Start_IT+0x1e8>
 8003194:	3218      	adds	r2, #24
 8003196:	4293      	cmp	r3, r2
 8003198:	d03c      	beq.n	8003214 <HAL_DMA_Start_IT+0x1e8>
 800319a:	3218      	adds	r2, #24
 800319c:	4293      	cmp	r3, r2
 800319e:	d039      	beq.n	8003214 <HAL_DMA_Start_IT+0x1e8>
 80031a0:	3218      	adds	r2, #24
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d036      	beq.n	8003214 <HAL_DMA_Start_IT+0x1e8>
 80031a6:	3218      	adds	r2, #24
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d033      	beq.n	8003214 <HAL_DMA_Start_IT+0x1e8>
 80031ac:	3218      	adds	r2, #24
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d030      	beq.n	8003214 <HAL_DMA_Start_IT+0x1e8>
 80031b2:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d02c      	beq.n	8003214 <HAL_DMA_Start_IT+0x1e8>
 80031ba:	3218      	adds	r2, #24
 80031bc:	4293      	cmp	r3, r2
 80031be:	d029      	beq.n	8003214 <HAL_DMA_Start_IT+0x1e8>
 80031c0:	3218      	adds	r2, #24
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d026      	beq.n	8003214 <HAL_DMA_Start_IT+0x1e8>
 80031c6:	3218      	adds	r2, #24
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d023      	beq.n	8003214 <HAL_DMA_Start_IT+0x1e8>
 80031cc:	3218      	adds	r2, #24
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d020      	beq.n	8003214 <HAL_DMA_Start_IT+0x1e8>
 80031d2:	3218      	adds	r2, #24
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d01d      	beq.n	8003214 <HAL_DMA_Start_IT+0x1e8>
 80031d8:	3218      	adds	r2, #24
 80031da:	4293      	cmp	r3, r2
 80031dc:	d01a      	beq.n	8003214 <HAL_DMA_Start_IT+0x1e8>
 80031de:	3218      	adds	r2, #24
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d017      	beq.n	8003214 <HAL_DMA_Start_IT+0x1e8>
 80031e4:	4a36      	ldr	r2, [pc, #216]	; (80032c0 <HAL_DMA_Start_IT+0x294>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d014      	beq.n	8003214 <HAL_DMA_Start_IT+0x1e8>
 80031ea:	3214      	adds	r2, #20
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d011      	beq.n	8003214 <HAL_DMA_Start_IT+0x1e8>
 80031f0:	3214      	adds	r2, #20
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d00e      	beq.n	8003214 <HAL_DMA_Start_IT+0x1e8>
 80031f6:	3214      	adds	r2, #20
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d00b      	beq.n	8003214 <HAL_DMA_Start_IT+0x1e8>
 80031fc:	3214      	adds	r2, #20
 80031fe:	4293      	cmp	r3, r2
 8003200:	d008      	beq.n	8003214 <HAL_DMA_Start_IT+0x1e8>
 8003202:	3214      	adds	r2, #20
 8003204:	4293      	cmp	r3, r2
 8003206:	d005      	beq.n	8003214 <HAL_DMA_Start_IT+0x1e8>
 8003208:	3214      	adds	r2, #20
 800320a:	4293      	cmp	r3, r2
 800320c:	d002      	beq.n	8003214 <HAL_DMA_Start_IT+0x1e8>
 800320e:	3214      	adds	r2, #20
 8003210:	4293      	cmp	r3, r2
 8003212:	d10e      	bne.n	8003232 <HAL_DMA_Start_IT+0x206>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003214:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 800321c:	d003      	beq.n	8003226 <HAL_DMA_Start_IT+0x1fa>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003224:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 8003226:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8003228:	b11b      	cbz	r3, 8003232 <HAL_DMA_Start_IT+0x206>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003230:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8003232:	6823      	ldr	r3, [r4, #0]
 8003234:	4920      	ldr	r1, [pc, #128]	; (80032b8 <HAL_DMA_Start_IT+0x28c>)
 8003236:	4a21      	ldr	r2, [pc, #132]	; (80032bc <HAL_DMA_Start_IT+0x290>)
 8003238:	4293      	cmp	r3, r2
 800323a:	bf18      	it	ne
 800323c:	428b      	cmpne	r3, r1
 800323e:	d030      	beq.n	80032a2 <HAL_DMA_Start_IT+0x276>
 8003240:	3218      	adds	r2, #24
 8003242:	4293      	cmp	r3, r2
 8003244:	d02d      	beq.n	80032a2 <HAL_DMA_Start_IT+0x276>
 8003246:	3218      	adds	r2, #24
 8003248:	4293      	cmp	r3, r2
 800324a:	d02a      	beq.n	80032a2 <HAL_DMA_Start_IT+0x276>
 800324c:	3218      	adds	r2, #24
 800324e:	4293      	cmp	r3, r2
 8003250:	d027      	beq.n	80032a2 <HAL_DMA_Start_IT+0x276>
 8003252:	3218      	adds	r2, #24
 8003254:	4293      	cmp	r3, r2
 8003256:	d024      	beq.n	80032a2 <HAL_DMA_Start_IT+0x276>
 8003258:	3218      	adds	r2, #24
 800325a:	4293      	cmp	r3, r2
 800325c:	d021      	beq.n	80032a2 <HAL_DMA_Start_IT+0x276>
 800325e:	3218      	adds	r2, #24
 8003260:	4293      	cmp	r3, r2
 8003262:	d01e      	beq.n	80032a2 <HAL_DMA_Start_IT+0x276>
 8003264:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8003268:	4293      	cmp	r3, r2
 800326a:	d01a      	beq.n	80032a2 <HAL_DMA_Start_IT+0x276>
 800326c:	3218      	adds	r2, #24
 800326e:	4293      	cmp	r3, r2
 8003270:	d017      	beq.n	80032a2 <HAL_DMA_Start_IT+0x276>
 8003272:	3218      	adds	r2, #24
 8003274:	4293      	cmp	r3, r2
 8003276:	d014      	beq.n	80032a2 <HAL_DMA_Start_IT+0x276>
 8003278:	3218      	adds	r2, #24
 800327a:	4293      	cmp	r3, r2
 800327c:	d011      	beq.n	80032a2 <HAL_DMA_Start_IT+0x276>
 800327e:	3218      	adds	r2, #24
 8003280:	4293      	cmp	r3, r2
 8003282:	d00e      	beq.n	80032a2 <HAL_DMA_Start_IT+0x276>
 8003284:	3218      	adds	r2, #24
 8003286:	4293      	cmp	r3, r2
 8003288:	d00b      	beq.n	80032a2 <HAL_DMA_Start_IT+0x276>
 800328a:	3218      	adds	r2, #24
 800328c:	4293      	cmp	r3, r2
 800328e:	d008      	beq.n	80032a2 <HAL_DMA_Start_IT+0x276>
 8003290:	3218      	adds	r2, #24
 8003292:	4293      	cmp	r3, r2
 8003294:	d005      	beq.n	80032a2 <HAL_DMA_Start_IT+0x276>
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	f042 0201 	orr.w	r2, r2, #1
 800329c:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800329e:	2000      	movs	r0, #0
 80032a0:	e6dd      	b.n	800305e <HAL_DMA_Start_IT+0x32>
    __HAL_DMA_ENABLE(hdma);
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	f042 0201 	orr.w	r2, r2, #1
 80032a8:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032aa:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80032ac:	e6d7      	b.n	800305e <HAL_DMA_Start_IT+0x32>
    return HAL_ERROR;
 80032ae:	2001      	movs	r0, #1
}
 80032b0:	4770      	bx	lr
  __HAL_LOCK(hdma);
 80032b2:	2002      	movs	r0, #2
 80032b4:	e6d3      	b.n	800305e <HAL_DMA_Start_IT+0x32>
 80032b6:	bf00      	nop
 80032b8:	40020010 	.word	0x40020010
 80032bc:	40020028 	.word	0x40020028
 80032c0:	58025408 	.word	0x58025408

080032c4 <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 80032c4:	2800      	cmp	r0, #0
 80032c6:	f000 813a 	beq.w	800353e <HAL_DMA_Abort_IT+0x27a>
{
 80032ca:	b508      	push	{r3, lr}
 80032cc:	4602      	mov	r2, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032ce:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d003      	beq.n	80032e0 <HAL_DMA_Abort_IT+0x1c>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032d8:	2380      	movs	r3, #128	; 0x80
 80032da:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80032dc:	2001      	movs	r0, #1
}
 80032de:	bd08      	pop	{r3, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80032e0:	6803      	ldr	r3, [r0, #0]
 80032e2:	4899      	ldr	r0, [pc, #612]	; (8003548 <HAL_DMA_Abort_IT+0x284>)
 80032e4:	4999      	ldr	r1, [pc, #612]	; (800354c <HAL_DMA_Abort_IT+0x288>)
 80032e6:	428b      	cmp	r3, r1
 80032e8:	bf18      	it	ne
 80032ea:	4283      	cmpne	r3, r0
 80032ec:	bf0c      	ite	eq
 80032ee:	2101      	moveq	r1, #1
 80032f0:	2100      	movne	r1, #0
 80032f2:	f000 80e4 	beq.w	80034be <HAL_DMA_Abort_IT+0x1fa>
 80032f6:	3030      	adds	r0, #48	; 0x30
 80032f8:	4283      	cmp	r3, r0
 80032fa:	f000 80e0 	beq.w	80034be <HAL_DMA_Abort_IT+0x1fa>
 80032fe:	3018      	adds	r0, #24
 8003300:	4283      	cmp	r3, r0
 8003302:	f000 80dc 	beq.w	80034be <HAL_DMA_Abort_IT+0x1fa>
 8003306:	3018      	adds	r0, #24
 8003308:	4283      	cmp	r3, r0
 800330a:	f000 80d8 	beq.w	80034be <HAL_DMA_Abort_IT+0x1fa>
 800330e:	3018      	adds	r0, #24
 8003310:	4283      	cmp	r3, r0
 8003312:	f000 80d4 	beq.w	80034be <HAL_DMA_Abort_IT+0x1fa>
 8003316:	3018      	adds	r0, #24
 8003318:	4283      	cmp	r3, r0
 800331a:	f000 80d0 	beq.w	80034be <HAL_DMA_Abort_IT+0x1fa>
 800331e:	3018      	adds	r0, #24
 8003320:	4283      	cmp	r3, r0
 8003322:	f000 80cc 	beq.w	80034be <HAL_DMA_Abort_IT+0x1fa>
 8003326:	f500 7056 	add.w	r0, r0, #856	; 0x358
 800332a:	4283      	cmp	r3, r0
 800332c:	f000 80c7 	beq.w	80034be <HAL_DMA_Abort_IT+0x1fa>
 8003330:	3018      	adds	r0, #24
 8003332:	4283      	cmp	r3, r0
 8003334:	f000 80c3 	beq.w	80034be <HAL_DMA_Abort_IT+0x1fa>
 8003338:	3018      	adds	r0, #24
 800333a:	4283      	cmp	r3, r0
 800333c:	f000 80bf 	beq.w	80034be <HAL_DMA_Abort_IT+0x1fa>
 8003340:	3018      	adds	r0, #24
 8003342:	4283      	cmp	r3, r0
 8003344:	f000 80bb 	beq.w	80034be <HAL_DMA_Abort_IT+0x1fa>
 8003348:	3018      	adds	r0, #24
 800334a:	4283      	cmp	r3, r0
 800334c:	f000 80b7 	beq.w	80034be <HAL_DMA_Abort_IT+0x1fa>
 8003350:	3018      	adds	r0, #24
 8003352:	4283      	cmp	r3, r0
 8003354:	f000 80b3 	beq.w	80034be <HAL_DMA_Abort_IT+0x1fa>
 8003358:	3018      	adds	r0, #24
 800335a:	4283      	cmp	r3, r0
 800335c:	f000 80af 	beq.w	80034be <HAL_DMA_Abort_IT+0x1fa>
 8003360:	3018      	adds	r0, #24
 8003362:	4283      	cmp	r3, r0
 8003364:	f000 80ab 	beq.w	80034be <HAL_DMA_Abort_IT+0x1fa>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003368:	6819      	ldr	r1, [r3, #0]
 800336a:	f021 010e 	bic.w	r1, r1, #14
 800336e:	6019      	str	r1, [r3, #0]
      __HAL_DMA_DISABLE(hdma);
 8003370:	6813      	ldr	r3, [r2, #0]
 8003372:	f5a0 6095 	sub.w	r0, r0, #1192	; 0x4a8
 8003376:	4975      	ldr	r1, [pc, #468]	; (800354c <HAL_DMA_Abort_IT+0x288>)
 8003378:	428b      	cmp	r3, r1
 800337a:	bf18      	it	ne
 800337c:	4283      	cmpne	r3, r0
 800337e:	d02b      	beq.n	80033d8 <HAL_DMA_Abort_IT+0x114>
 8003380:	4973      	ldr	r1, [pc, #460]	; (8003550 <HAL_DMA_Abort_IT+0x28c>)
 8003382:	428b      	cmp	r3, r1
 8003384:	d028      	beq.n	80033d8 <HAL_DMA_Abort_IT+0x114>
 8003386:	3118      	adds	r1, #24
 8003388:	428b      	cmp	r3, r1
 800338a:	d025      	beq.n	80033d8 <HAL_DMA_Abort_IT+0x114>
 800338c:	3118      	adds	r1, #24
 800338e:	428b      	cmp	r3, r1
 8003390:	d022      	beq.n	80033d8 <HAL_DMA_Abort_IT+0x114>
 8003392:	3118      	adds	r1, #24
 8003394:	428b      	cmp	r3, r1
 8003396:	d01f      	beq.n	80033d8 <HAL_DMA_Abort_IT+0x114>
 8003398:	3118      	adds	r1, #24
 800339a:	428b      	cmp	r3, r1
 800339c:	d01c      	beq.n	80033d8 <HAL_DMA_Abort_IT+0x114>
 800339e:	3118      	adds	r1, #24
 80033a0:	428b      	cmp	r3, r1
 80033a2:	d019      	beq.n	80033d8 <HAL_DMA_Abort_IT+0x114>
 80033a4:	f501 7156 	add.w	r1, r1, #856	; 0x358
 80033a8:	428b      	cmp	r3, r1
 80033aa:	d015      	beq.n	80033d8 <HAL_DMA_Abort_IT+0x114>
 80033ac:	3118      	adds	r1, #24
 80033ae:	428b      	cmp	r3, r1
 80033b0:	d012      	beq.n	80033d8 <HAL_DMA_Abort_IT+0x114>
 80033b2:	3118      	adds	r1, #24
 80033b4:	428b      	cmp	r3, r1
 80033b6:	d00f      	beq.n	80033d8 <HAL_DMA_Abort_IT+0x114>
 80033b8:	3118      	adds	r1, #24
 80033ba:	428b      	cmp	r3, r1
 80033bc:	d00c      	beq.n	80033d8 <HAL_DMA_Abort_IT+0x114>
 80033be:	3118      	adds	r1, #24
 80033c0:	428b      	cmp	r3, r1
 80033c2:	d009      	beq.n	80033d8 <HAL_DMA_Abort_IT+0x114>
 80033c4:	3118      	adds	r1, #24
 80033c6:	428b      	cmp	r3, r1
 80033c8:	d006      	beq.n	80033d8 <HAL_DMA_Abort_IT+0x114>
 80033ca:	3118      	adds	r1, #24
 80033cc:	428b      	cmp	r3, r1
 80033ce:	d003      	beq.n	80033d8 <HAL_DMA_Abort_IT+0x114>
 80033d0:	3118      	adds	r1, #24
 80033d2:	428b      	cmp	r3, r1
 80033d4:	f040 80ae 	bne.w	8003534 <HAL_DMA_Abort_IT+0x270>
 80033d8:	6819      	ldr	r1, [r3, #0]
 80033da:	f021 0101 	bic.w	r1, r1, #1
 80033de:	6019      	str	r1, [r3, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80033e0:	6813      	ldr	r3, [r2, #0]
 80033e2:	4859      	ldr	r0, [pc, #356]	; (8003548 <HAL_DMA_Abort_IT+0x284>)
 80033e4:	4959      	ldr	r1, [pc, #356]	; (800354c <HAL_DMA_Abort_IT+0x288>)
 80033e6:	428b      	cmp	r3, r1
 80033e8:	bf18      	it	ne
 80033ea:	4283      	cmpne	r3, r0
 80033ec:	d042      	beq.n	8003474 <HAL_DMA_Abort_IT+0x1b0>
 80033ee:	3118      	adds	r1, #24
 80033f0:	428b      	cmp	r3, r1
 80033f2:	d03f      	beq.n	8003474 <HAL_DMA_Abort_IT+0x1b0>
 80033f4:	3118      	adds	r1, #24
 80033f6:	428b      	cmp	r3, r1
 80033f8:	d03c      	beq.n	8003474 <HAL_DMA_Abort_IT+0x1b0>
 80033fa:	3118      	adds	r1, #24
 80033fc:	428b      	cmp	r3, r1
 80033fe:	d039      	beq.n	8003474 <HAL_DMA_Abort_IT+0x1b0>
 8003400:	3118      	adds	r1, #24
 8003402:	428b      	cmp	r3, r1
 8003404:	d036      	beq.n	8003474 <HAL_DMA_Abort_IT+0x1b0>
 8003406:	3118      	adds	r1, #24
 8003408:	428b      	cmp	r3, r1
 800340a:	d033      	beq.n	8003474 <HAL_DMA_Abort_IT+0x1b0>
 800340c:	3118      	adds	r1, #24
 800340e:	428b      	cmp	r3, r1
 8003410:	d030      	beq.n	8003474 <HAL_DMA_Abort_IT+0x1b0>
 8003412:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8003416:	428b      	cmp	r3, r1
 8003418:	d02c      	beq.n	8003474 <HAL_DMA_Abort_IT+0x1b0>
 800341a:	3118      	adds	r1, #24
 800341c:	428b      	cmp	r3, r1
 800341e:	d029      	beq.n	8003474 <HAL_DMA_Abort_IT+0x1b0>
 8003420:	3118      	adds	r1, #24
 8003422:	428b      	cmp	r3, r1
 8003424:	d026      	beq.n	8003474 <HAL_DMA_Abort_IT+0x1b0>
 8003426:	3118      	adds	r1, #24
 8003428:	428b      	cmp	r3, r1
 800342a:	d023      	beq.n	8003474 <HAL_DMA_Abort_IT+0x1b0>
 800342c:	3118      	adds	r1, #24
 800342e:	428b      	cmp	r3, r1
 8003430:	d020      	beq.n	8003474 <HAL_DMA_Abort_IT+0x1b0>
 8003432:	3118      	adds	r1, #24
 8003434:	428b      	cmp	r3, r1
 8003436:	d01d      	beq.n	8003474 <HAL_DMA_Abort_IT+0x1b0>
 8003438:	3118      	adds	r1, #24
 800343a:	428b      	cmp	r3, r1
 800343c:	d01a      	beq.n	8003474 <HAL_DMA_Abort_IT+0x1b0>
 800343e:	3118      	adds	r1, #24
 8003440:	428b      	cmp	r3, r1
 8003442:	d017      	beq.n	8003474 <HAL_DMA_Abort_IT+0x1b0>
 8003444:	4943      	ldr	r1, [pc, #268]	; (8003554 <HAL_DMA_Abort_IT+0x290>)
 8003446:	428b      	cmp	r3, r1
 8003448:	d014      	beq.n	8003474 <HAL_DMA_Abort_IT+0x1b0>
 800344a:	3114      	adds	r1, #20
 800344c:	428b      	cmp	r3, r1
 800344e:	d011      	beq.n	8003474 <HAL_DMA_Abort_IT+0x1b0>
 8003450:	3114      	adds	r1, #20
 8003452:	428b      	cmp	r3, r1
 8003454:	d00e      	beq.n	8003474 <HAL_DMA_Abort_IT+0x1b0>
 8003456:	3114      	adds	r1, #20
 8003458:	428b      	cmp	r3, r1
 800345a:	d00b      	beq.n	8003474 <HAL_DMA_Abort_IT+0x1b0>
 800345c:	3114      	adds	r1, #20
 800345e:	428b      	cmp	r3, r1
 8003460:	d008      	beq.n	8003474 <HAL_DMA_Abort_IT+0x1b0>
 8003462:	3114      	adds	r1, #20
 8003464:	428b      	cmp	r3, r1
 8003466:	d005      	beq.n	8003474 <HAL_DMA_Abort_IT+0x1b0>
 8003468:	3114      	adds	r1, #20
 800346a:	428b      	cmp	r3, r1
 800346c:	d002      	beq.n	8003474 <HAL_DMA_Abort_IT+0x1b0>
 800346e:	3114      	adds	r1, #20
 8003470:	428b      	cmp	r3, r1
 8003472:	d117      	bne.n	80034a4 <HAL_DMA_Abort_IT+0x1e0>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003474:	6e11      	ldr	r1, [r2, #96]	; 0x60
 8003476:	680b      	ldr	r3, [r1, #0]
 8003478:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800347c:	600b      	str	r3, [r1, #0]
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800347e:	6d90      	ldr	r0, [r2, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003480:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8003482:	f003 011f 	and.w	r1, r3, #31
 8003486:	2301      	movs	r3, #1
 8003488:	408b      	lsls	r3, r1
 800348a:	6043      	str	r3, [r0, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800348c:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800348e:	6e91      	ldr	r1, [r2, #104]	; 0x68
 8003490:	6059      	str	r1, [r3, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8003492:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
 8003494:	b133      	cbz	r3, 80034a4 <HAL_DMA_Abort_IT+0x1e0>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003496:	6819      	ldr	r1, [r3, #0]
 8003498:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800349c:	6019      	str	r1, [r3, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800349e:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80034a0:	6f51      	ldr	r1, [r2, #116]	; 0x74
 80034a2:	6059      	str	r1, [r3, #4]
      __HAL_UNLOCK(hdma);
 80034a4:	2300      	movs	r3, #0
 80034a6:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80034aa:	2301      	movs	r3, #1
 80034ac:	f882 3035 	strb.w	r3, [r2, #53]	; 0x35
      if(hdma->XferAbortCallback != NULL)
 80034b0:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d045      	beq.n	8003542 <HAL_DMA_Abort_IT+0x27e>
 80034b6:	4610      	mov	r0, r2
        hdma->XferAbortCallback(hdma);
 80034b8:	4798      	blx	r3
  return HAL_OK;
 80034ba:	2000      	movs	r0, #0
 80034bc:	e70f      	b.n	80032de <HAL_DMA_Abort_IT+0x1a>
      hdma->State = HAL_DMA_STATE_ABORT;
 80034be:	2004      	movs	r0, #4
 80034c0:	f882 0035 	strb.w	r0, [r2, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80034c4:	bb81      	cbnz	r1, 8003528 <HAL_DMA_Abort_IT+0x264>
 80034c6:	4a22      	ldr	r2, [pc, #136]	; (8003550 <HAL_DMA_Abort_IT+0x28c>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d02d      	beq.n	8003528 <HAL_DMA_Abort_IT+0x264>
 80034cc:	3218      	adds	r2, #24
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d02a      	beq.n	8003528 <HAL_DMA_Abort_IT+0x264>
 80034d2:	3218      	adds	r2, #24
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d027      	beq.n	8003528 <HAL_DMA_Abort_IT+0x264>
 80034d8:	3218      	adds	r2, #24
 80034da:	4293      	cmp	r3, r2
 80034dc:	d024      	beq.n	8003528 <HAL_DMA_Abort_IT+0x264>
 80034de:	3218      	adds	r2, #24
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d021      	beq.n	8003528 <HAL_DMA_Abort_IT+0x264>
 80034e4:	3218      	adds	r2, #24
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d01e      	beq.n	8003528 <HAL_DMA_Abort_IT+0x264>
 80034ea:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d01a      	beq.n	8003528 <HAL_DMA_Abort_IT+0x264>
 80034f2:	3218      	adds	r2, #24
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d017      	beq.n	8003528 <HAL_DMA_Abort_IT+0x264>
 80034f8:	3218      	adds	r2, #24
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d014      	beq.n	8003528 <HAL_DMA_Abort_IT+0x264>
 80034fe:	3218      	adds	r2, #24
 8003500:	4293      	cmp	r3, r2
 8003502:	d011      	beq.n	8003528 <HAL_DMA_Abort_IT+0x264>
 8003504:	3218      	adds	r2, #24
 8003506:	4293      	cmp	r3, r2
 8003508:	d00e      	beq.n	8003528 <HAL_DMA_Abort_IT+0x264>
 800350a:	3218      	adds	r2, #24
 800350c:	4293      	cmp	r3, r2
 800350e:	d00b      	beq.n	8003528 <HAL_DMA_Abort_IT+0x264>
 8003510:	3218      	adds	r2, #24
 8003512:	4293      	cmp	r3, r2
 8003514:	d008      	beq.n	8003528 <HAL_DMA_Abort_IT+0x264>
 8003516:	3218      	adds	r2, #24
 8003518:	4293      	cmp	r3, r2
 800351a:	d005      	beq.n	8003528 <HAL_DMA_Abort_IT+0x264>
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	f022 0201 	bic.w	r2, r2, #1
 8003522:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003524:	2000      	movs	r0, #0
 8003526:	e6da      	b.n	80032de <HAL_DMA_Abort_IT+0x1a>
      __HAL_DMA_DISABLE(hdma);
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	f022 0201 	bic.w	r2, r2, #1
 800352e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003530:	2000      	movs	r0, #0
      __HAL_DMA_DISABLE(hdma);
 8003532:	e6d4      	b.n	80032de <HAL_DMA_Abort_IT+0x1a>
      __HAL_DMA_DISABLE(hdma);
 8003534:	6819      	ldr	r1, [r3, #0]
 8003536:	f021 0101 	bic.w	r1, r1, #1
 800353a:	6019      	str	r1, [r3, #0]
 800353c:	e750      	b.n	80033e0 <HAL_DMA_Abort_IT+0x11c>
    return HAL_ERROR;
 800353e:	2001      	movs	r0, #1
}
 8003540:	4770      	bx	lr
  return HAL_OK;
 8003542:	2000      	movs	r0, #0
 8003544:	e6cb      	b.n	80032de <HAL_DMA_Abort_IT+0x1a>
 8003546:	bf00      	nop
 8003548:	40020010 	.word	0x40020010
 800354c:	40020028 	.word	0x40020028
 8003550:	40020040 	.word	0x40020040
 8003554:	58025408 	.word	0x58025408

08003558 <HAL_DMA_IRQHandler>:
{
 8003558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800355a:	b083      	sub	sp, #12
 800355c:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 800355e:	2300      	movs	r3, #0
 8003560:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003562:	4ba2      	ldr	r3, [pc, #648]	; (80037ec <HAL_DMA_IRQHandler+0x294>)
 8003564:	681d      	ldr	r5, [r3, #0]
 8003566:	4ba2      	ldr	r3, [pc, #648]	; (80037f0 <HAL_DMA_IRQHandler+0x298>)
 8003568:	fba3 3505 	umull	r3, r5, r3, r5
 800356c:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800356e:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr_dma  = regs_dma->ISR;
 8003570:	683e      	ldr	r6, [r7, #0]
  tmpisr_bdma = regs_bdma->ISR;
 8003572:	f8d7 c000 	ldr.w	ip, [r7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003576:	6803      	ldr	r3, [r0, #0]
 8003578:	499e      	ldr	r1, [pc, #632]	; (80037f4 <HAL_DMA_IRQHandler+0x29c>)
 800357a:	489f      	ldr	r0, [pc, #636]	; (80037f8 <HAL_DMA_IRQHandler+0x2a0>)
 800357c:	4283      	cmp	r3, r0
 800357e:	bf18      	it	ne
 8003580:	428b      	cmpne	r3, r1
 8003582:	bf0c      	ite	eq
 8003584:	2001      	moveq	r0, #1
 8003586:	2000      	movne	r0, #0
 8003588:	d061      	beq.n	800364e <HAL_DMA_IRQHandler+0xf6>
 800358a:	4a9c      	ldr	r2, [pc, #624]	; (80037fc <HAL_DMA_IRQHandler+0x2a4>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d05e      	beq.n	800364e <HAL_DMA_IRQHandler+0xf6>
 8003590:	3218      	adds	r2, #24
 8003592:	4293      	cmp	r3, r2
 8003594:	d05b      	beq.n	800364e <HAL_DMA_IRQHandler+0xf6>
 8003596:	3218      	adds	r2, #24
 8003598:	4293      	cmp	r3, r2
 800359a:	d058      	beq.n	800364e <HAL_DMA_IRQHandler+0xf6>
 800359c:	3218      	adds	r2, #24
 800359e:	4293      	cmp	r3, r2
 80035a0:	d055      	beq.n	800364e <HAL_DMA_IRQHandler+0xf6>
 80035a2:	3218      	adds	r2, #24
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d052      	beq.n	800364e <HAL_DMA_IRQHandler+0xf6>
 80035a8:	3218      	adds	r2, #24
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d04f      	beq.n	800364e <HAL_DMA_IRQHandler+0xf6>
 80035ae:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d04b      	beq.n	800364e <HAL_DMA_IRQHandler+0xf6>
 80035b6:	3218      	adds	r2, #24
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d048      	beq.n	800364e <HAL_DMA_IRQHandler+0xf6>
 80035bc:	3218      	adds	r2, #24
 80035be:	4293      	cmp	r3, r2
 80035c0:	d045      	beq.n	800364e <HAL_DMA_IRQHandler+0xf6>
 80035c2:	3218      	adds	r2, #24
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d042      	beq.n	800364e <HAL_DMA_IRQHandler+0xf6>
 80035c8:	3218      	adds	r2, #24
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d03f      	beq.n	800364e <HAL_DMA_IRQHandler+0xf6>
 80035ce:	3218      	adds	r2, #24
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d03c      	beq.n	800364e <HAL_DMA_IRQHandler+0xf6>
 80035d4:	3218      	adds	r2, #24
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d039      	beq.n	800364e <HAL_DMA_IRQHandler+0xf6>
 80035da:	3218      	adds	r2, #24
 80035dc:	4293      	cmp	r3, r2
 80035de:	d036      	beq.n	800364e <HAL_DMA_IRQHandler+0xf6>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80035e0:	4987      	ldr	r1, [pc, #540]	; (8003800 <HAL_DMA_IRQHandler+0x2a8>)
 80035e2:	4a88      	ldr	r2, [pc, #544]	; (8003804 <HAL_DMA_IRQHandler+0x2ac>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	bf18      	it	ne
 80035e8:	428b      	cmpne	r3, r1
 80035ea:	d012      	beq.n	8003612 <HAL_DMA_IRQHandler+0xba>
 80035ec:	4a86      	ldr	r2, [pc, #536]	; (8003808 <HAL_DMA_IRQHandler+0x2b0>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d00f      	beq.n	8003612 <HAL_DMA_IRQHandler+0xba>
 80035f2:	3214      	adds	r2, #20
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d00c      	beq.n	8003612 <HAL_DMA_IRQHandler+0xba>
 80035f8:	3214      	adds	r2, #20
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d009      	beq.n	8003612 <HAL_DMA_IRQHandler+0xba>
 80035fe:	3214      	adds	r2, #20
 8003600:	4293      	cmp	r3, r2
 8003602:	d006      	beq.n	8003612 <HAL_DMA_IRQHandler+0xba>
 8003604:	3214      	adds	r2, #20
 8003606:	4293      	cmp	r3, r2
 8003608:	d003      	beq.n	8003612 <HAL_DMA_IRQHandler+0xba>
 800360a:	3214      	adds	r2, #20
 800360c:	4293      	cmp	r3, r2
 800360e:	f040 8262 	bne.w	8003ad6 <HAL_DMA_IRQHandler+0x57e>
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003612:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003614:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8003616:	f001 011f 	and.w	r1, r1, #31
 800361a:	2004      	movs	r0, #4
 800361c:	4088      	lsls	r0, r1
 800361e:	ea10 0f0c 	tst.w	r0, ip
 8003622:	f000 82a8 	beq.w	8003b76 <HAL_DMA_IRQHandler+0x61e>
 8003626:	f012 0f04 	tst.w	r2, #4
 800362a:	f000 82a4 	beq.w	8003b76 <HAL_DMA_IRQHandler+0x61e>
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800362e:	6078      	str	r0, [r7, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003630:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8003634:	f000 825b 	beq.w	8003aee <HAL_DMA_IRQHandler+0x596>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003638:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 800363c:	f040 8251 	bne.w	8003ae2 <HAL_DMA_IRQHandler+0x58a>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003640:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003642:	2b00      	cmp	r3, #0
 8003644:	f000 8247 	beq.w	8003ad6 <HAL_DMA_IRQHandler+0x57e>
            hdma->XferM1HalfCpltCallback(hdma);
 8003648:	4620      	mov	r0, r4
 800364a:	4798      	blx	r3
 800364c:	e243      	b.n	8003ad6 <HAL_DMA_IRQHandler+0x57e>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800364e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003650:	f002 011f 	and.w	r1, r2, #31
 8003654:	2208      	movs	r2, #8
 8003656:	408a      	lsls	r2, r1
 8003658:	4232      	tst	r2, r6
 800365a:	d041      	beq.n	80036e0 <HAL_DMA_IRQHandler+0x188>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800365c:	bb70      	cbnz	r0, 80036bc <HAL_DMA_IRQHandler+0x164>
 800365e:	4a67      	ldr	r2, [pc, #412]	; (80037fc <HAL_DMA_IRQHandler+0x2a4>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d02b      	beq.n	80036bc <HAL_DMA_IRQHandler+0x164>
 8003664:	3218      	adds	r2, #24
 8003666:	4293      	cmp	r3, r2
 8003668:	d028      	beq.n	80036bc <HAL_DMA_IRQHandler+0x164>
 800366a:	3218      	adds	r2, #24
 800366c:	4293      	cmp	r3, r2
 800366e:	d025      	beq.n	80036bc <HAL_DMA_IRQHandler+0x164>
 8003670:	3218      	adds	r2, #24
 8003672:	4293      	cmp	r3, r2
 8003674:	d022      	beq.n	80036bc <HAL_DMA_IRQHandler+0x164>
 8003676:	3218      	adds	r2, #24
 8003678:	4293      	cmp	r3, r2
 800367a:	d01f      	beq.n	80036bc <HAL_DMA_IRQHandler+0x164>
 800367c:	3218      	adds	r2, #24
 800367e:	4293      	cmp	r3, r2
 8003680:	d01c      	beq.n	80036bc <HAL_DMA_IRQHandler+0x164>
 8003682:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8003686:	4293      	cmp	r3, r2
 8003688:	d018      	beq.n	80036bc <HAL_DMA_IRQHandler+0x164>
 800368a:	3218      	adds	r2, #24
 800368c:	4293      	cmp	r3, r2
 800368e:	d015      	beq.n	80036bc <HAL_DMA_IRQHandler+0x164>
 8003690:	3218      	adds	r2, #24
 8003692:	4293      	cmp	r3, r2
 8003694:	d012      	beq.n	80036bc <HAL_DMA_IRQHandler+0x164>
 8003696:	3218      	adds	r2, #24
 8003698:	4293      	cmp	r3, r2
 800369a:	d00f      	beq.n	80036bc <HAL_DMA_IRQHandler+0x164>
 800369c:	3218      	adds	r2, #24
 800369e:	4293      	cmp	r3, r2
 80036a0:	d00c      	beq.n	80036bc <HAL_DMA_IRQHandler+0x164>
 80036a2:	3218      	adds	r2, #24
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d009      	beq.n	80036bc <HAL_DMA_IRQHandler+0x164>
 80036a8:	3218      	adds	r2, #24
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d006      	beq.n	80036bc <HAL_DMA_IRQHandler+0x164>
 80036ae:	3218      	adds	r2, #24
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d003      	beq.n	80036bc <HAL_DMA_IRQHandler+0x164>
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 80036ba:	e002      	b.n	80036c2 <HAL_DMA_IRQHandler+0x16a>
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	f3c2 0280 	ubfx	r2, r2, #2, #1
 80036c2:	b16a      	cbz	r2, 80036e0 <HAL_DMA_IRQHandler+0x188>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	f022 0204 	bic.w	r2, r2, #4
 80036ca:	601a      	str	r2, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80036cc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80036ce:	f003 021f 	and.w	r2, r3, #31
 80036d2:	2308      	movs	r3, #8
 80036d4:	4093      	lsls	r3, r2
 80036d6:	60bb      	str	r3, [r7, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80036d8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80036da:	f043 0301 	orr.w	r3, r3, #1
 80036de:	6563      	str	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80036e0:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80036e2:	f002 021f 	and.w	r2, r2, #31
 80036e6:	fa26 f302 	lsr.w	r3, r6, r2
 80036ea:	f013 0f01 	tst.w	r3, #1
 80036ee:	d037      	beq.n	8003760 <HAL_DMA_IRQHandler+0x208>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80036f0:	6823      	ldr	r3, [r4, #0]
 80036f2:	4840      	ldr	r0, [pc, #256]	; (80037f4 <HAL_DMA_IRQHandler+0x29c>)
 80036f4:	4940      	ldr	r1, [pc, #256]	; (80037f8 <HAL_DMA_IRQHandler+0x2a0>)
 80036f6:	428b      	cmp	r3, r1
 80036f8:	bf18      	it	ne
 80036fa:	4283      	cmpne	r3, r0
 80036fc:	d02c      	beq.n	8003758 <HAL_DMA_IRQHandler+0x200>
 80036fe:	3118      	adds	r1, #24
 8003700:	428b      	cmp	r3, r1
 8003702:	d029      	beq.n	8003758 <HAL_DMA_IRQHandler+0x200>
 8003704:	3118      	adds	r1, #24
 8003706:	428b      	cmp	r3, r1
 8003708:	d026      	beq.n	8003758 <HAL_DMA_IRQHandler+0x200>
 800370a:	3118      	adds	r1, #24
 800370c:	428b      	cmp	r3, r1
 800370e:	d023      	beq.n	8003758 <HAL_DMA_IRQHandler+0x200>
 8003710:	3118      	adds	r1, #24
 8003712:	428b      	cmp	r3, r1
 8003714:	d020      	beq.n	8003758 <HAL_DMA_IRQHandler+0x200>
 8003716:	3118      	adds	r1, #24
 8003718:	428b      	cmp	r3, r1
 800371a:	d01d      	beq.n	8003758 <HAL_DMA_IRQHandler+0x200>
 800371c:	3118      	adds	r1, #24
 800371e:	428b      	cmp	r3, r1
 8003720:	d01a      	beq.n	8003758 <HAL_DMA_IRQHandler+0x200>
 8003722:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8003726:	428b      	cmp	r3, r1
 8003728:	d016      	beq.n	8003758 <HAL_DMA_IRQHandler+0x200>
 800372a:	3118      	adds	r1, #24
 800372c:	428b      	cmp	r3, r1
 800372e:	d013      	beq.n	8003758 <HAL_DMA_IRQHandler+0x200>
 8003730:	3118      	adds	r1, #24
 8003732:	428b      	cmp	r3, r1
 8003734:	d010      	beq.n	8003758 <HAL_DMA_IRQHandler+0x200>
 8003736:	3118      	adds	r1, #24
 8003738:	428b      	cmp	r3, r1
 800373a:	d00d      	beq.n	8003758 <HAL_DMA_IRQHandler+0x200>
 800373c:	3118      	adds	r1, #24
 800373e:	428b      	cmp	r3, r1
 8003740:	d00a      	beq.n	8003758 <HAL_DMA_IRQHandler+0x200>
 8003742:	3118      	adds	r1, #24
 8003744:	428b      	cmp	r3, r1
 8003746:	d007      	beq.n	8003758 <HAL_DMA_IRQHandler+0x200>
 8003748:	3118      	adds	r1, #24
 800374a:	428b      	cmp	r3, r1
 800374c:	d004      	beq.n	8003758 <HAL_DMA_IRQHandler+0x200>
 800374e:	3118      	adds	r1, #24
 8003750:	428b      	cmp	r3, r1
 8003752:	d001      	beq.n	8003758 <HAL_DMA_IRQHandler+0x200>
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	e003      	b.n	8003760 <HAL_DMA_IRQHandler+0x208>
 8003758:	695b      	ldr	r3, [r3, #20]
 800375a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800375e:	d13b      	bne.n	80037d8 <HAL_DMA_IRQHandler+0x280>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003760:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003762:	f003 031f 	and.w	r3, r3, #31
 8003766:	2204      	movs	r2, #4
 8003768:	fa02 f303 	lsl.w	r3, r2, r3
 800376c:	4233      	tst	r3, r6
 800376e:	d051      	beq.n	8003814 <HAL_DMA_IRQHandler+0x2bc>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003770:	6822      	ldr	r2, [r4, #0]
 8003772:	4820      	ldr	r0, [pc, #128]	; (80037f4 <HAL_DMA_IRQHandler+0x29c>)
 8003774:	4920      	ldr	r1, [pc, #128]	; (80037f8 <HAL_DMA_IRQHandler+0x2a0>)
 8003776:	428a      	cmp	r2, r1
 8003778:	bf18      	it	ne
 800377a:	4282      	cmpne	r2, r0
 800377c:	d046      	beq.n	800380c <HAL_DMA_IRQHandler+0x2b4>
 800377e:	3118      	adds	r1, #24
 8003780:	428a      	cmp	r2, r1
 8003782:	d043      	beq.n	800380c <HAL_DMA_IRQHandler+0x2b4>
 8003784:	3118      	adds	r1, #24
 8003786:	428a      	cmp	r2, r1
 8003788:	d040      	beq.n	800380c <HAL_DMA_IRQHandler+0x2b4>
 800378a:	3118      	adds	r1, #24
 800378c:	428a      	cmp	r2, r1
 800378e:	d03d      	beq.n	800380c <HAL_DMA_IRQHandler+0x2b4>
 8003790:	3118      	adds	r1, #24
 8003792:	428a      	cmp	r2, r1
 8003794:	d03a      	beq.n	800380c <HAL_DMA_IRQHandler+0x2b4>
 8003796:	3118      	adds	r1, #24
 8003798:	428a      	cmp	r2, r1
 800379a:	d037      	beq.n	800380c <HAL_DMA_IRQHandler+0x2b4>
 800379c:	3118      	adds	r1, #24
 800379e:	428a      	cmp	r2, r1
 80037a0:	d034      	beq.n	800380c <HAL_DMA_IRQHandler+0x2b4>
 80037a2:	f501 7156 	add.w	r1, r1, #856	; 0x358
 80037a6:	428a      	cmp	r2, r1
 80037a8:	d030      	beq.n	800380c <HAL_DMA_IRQHandler+0x2b4>
 80037aa:	3118      	adds	r1, #24
 80037ac:	428a      	cmp	r2, r1
 80037ae:	d02d      	beq.n	800380c <HAL_DMA_IRQHandler+0x2b4>
 80037b0:	3118      	adds	r1, #24
 80037b2:	428a      	cmp	r2, r1
 80037b4:	d02a      	beq.n	800380c <HAL_DMA_IRQHandler+0x2b4>
 80037b6:	3118      	adds	r1, #24
 80037b8:	428a      	cmp	r2, r1
 80037ba:	d027      	beq.n	800380c <HAL_DMA_IRQHandler+0x2b4>
 80037bc:	3118      	adds	r1, #24
 80037be:	428a      	cmp	r2, r1
 80037c0:	d024      	beq.n	800380c <HAL_DMA_IRQHandler+0x2b4>
 80037c2:	3118      	adds	r1, #24
 80037c4:	428a      	cmp	r2, r1
 80037c6:	d021      	beq.n	800380c <HAL_DMA_IRQHandler+0x2b4>
 80037c8:	3118      	adds	r1, #24
 80037ca:	428a      	cmp	r2, r1
 80037cc:	d01e      	beq.n	800380c <HAL_DMA_IRQHandler+0x2b4>
 80037ce:	3118      	adds	r1, #24
 80037d0:	428a      	cmp	r2, r1
 80037d2:	d01b      	beq.n	800380c <HAL_DMA_IRQHandler+0x2b4>
 80037d4:	6813      	ldr	r3, [r2, #0]
 80037d6:	e01d      	b.n	8003814 <HAL_DMA_IRQHandler+0x2bc>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80037d8:	2301      	movs	r3, #1
 80037da:	fa03 f202 	lsl.w	r2, r3, r2
 80037de:	60ba      	str	r2, [r7, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80037e0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80037e2:	f043 0302 	orr.w	r3, r3, #2
 80037e6:	6563      	str	r3, [r4, #84]	; 0x54
 80037e8:	e7ba      	b.n	8003760 <HAL_DMA_IRQHandler+0x208>
 80037ea:	bf00      	nop
 80037ec:	200000d8 	.word	0x200000d8
 80037f0:	1b4e81b5 	.word	0x1b4e81b5
 80037f4:	40020010 	.word	0x40020010
 80037f8:	40020028 	.word	0x40020028
 80037fc:	40020040 	.word	0x40020040
 8003800:	58025408 	.word	0x58025408
 8003804:	5802541c 	.word	0x5802541c
 8003808:	58025430 	.word	0x58025430
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800380c:	6812      	ldr	r2, [r2, #0]
 800380e:	f012 0f02 	tst.w	r2, #2
 8003812:	d13d      	bne.n	8003890 <HAL_DMA_IRQHandler+0x338>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003814:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003816:	f003 031f 	and.w	r3, r3, #31
 800381a:	2210      	movs	r2, #16
 800381c:	fa02 f303 	lsl.w	r3, r2, r3
 8003820:	4233      	tst	r3, r6
 8003822:	d05f      	beq.n	80038e4 <HAL_DMA_IRQHandler+0x38c>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003824:	6822      	ldr	r2, [r4, #0]
 8003826:	489b      	ldr	r0, [pc, #620]	; (8003a94 <HAL_DMA_IRQHandler+0x53c>)
 8003828:	499b      	ldr	r1, [pc, #620]	; (8003a98 <HAL_DMA_IRQHandler+0x540>)
 800382a:	428a      	cmp	r2, r1
 800382c:	bf18      	it	ne
 800382e:	4282      	cmpne	r2, r0
 8003830:	d034      	beq.n	800389c <HAL_DMA_IRQHandler+0x344>
 8003832:	3118      	adds	r1, #24
 8003834:	428a      	cmp	r2, r1
 8003836:	d031      	beq.n	800389c <HAL_DMA_IRQHandler+0x344>
 8003838:	3118      	adds	r1, #24
 800383a:	428a      	cmp	r2, r1
 800383c:	d02e      	beq.n	800389c <HAL_DMA_IRQHandler+0x344>
 800383e:	3118      	adds	r1, #24
 8003840:	428a      	cmp	r2, r1
 8003842:	d02b      	beq.n	800389c <HAL_DMA_IRQHandler+0x344>
 8003844:	3118      	adds	r1, #24
 8003846:	428a      	cmp	r2, r1
 8003848:	d028      	beq.n	800389c <HAL_DMA_IRQHandler+0x344>
 800384a:	3118      	adds	r1, #24
 800384c:	428a      	cmp	r2, r1
 800384e:	d025      	beq.n	800389c <HAL_DMA_IRQHandler+0x344>
 8003850:	3118      	adds	r1, #24
 8003852:	428a      	cmp	r2, r1
 8003854:	d022      	beq.n	800389c <HAL_DMA_IRQHandler+0x344>
 8003856:	f501 7156 	add.w	r1, r1, #856	; 0x358
 800385a:	428a      	cmp	r2, r1
 800385c:	d01e      	beq.n	800389c <HAL_DMA_IRQHandler+0x344>
 800385e:	3118      	adds	r1, #24
 8003860:	428a      	cmp	r2, r1
 8003862:	d01b      	beq.n	800389c <HAL_DMA_IRQHandler+0x344>
 8003864:	3118      	adds	r1, #24
 8003866:	428a      	cmp	r2, r1
 8003868:	d018      	beq.n	800389c <HAL_DMA_IRQHandler+0x344>
 800386a:	3118      	adds	r1, #24
 800386c:	428a      	cmp	r2, r1
 800386e:	d015      	beq.n	800389c <HAL_DMA_IRQHandler+0x344>
 8003870:	3118      	adds	r1, #24
 8003872:	428a      	cmp	r2, r1
 8003874:	d012      	beq.n	800389c <HAL_DMA_IRQHandler+0x344>
 8003876:	3118      	adds	r1, #24
 8003878:	428a      	cmp	r2, r1
 800387a:	d00f      	beq.n	800389c <HAL_DMA_IRQHandler+0x344>
 800387c:	3118      	adds	r1, #24
 800387e:	428a      	cmp	r2, r1
 8003880:	d00c      	beq.n	800389c <HAL_DMA_IRQHandler+0x344>
 8003882:	3118      	adds	r1, #24
 8003884:	428a      	cmp	r2, r1
 8003886:	d009      	beq.n	800389c <HAL_DMA_IRQHandler+0x344>
 8003888:	6812      	ldr	r2, [r2, #0]
 800388a:	f3c2 0280 	ubfx	r2, r2, #2, #1
 800388e:	e008      	b.n	80038a2 <HAL_DMA_IRQHandler+0x34a>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003890:	60bb      	str	r3, [r7, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003892:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003894:	f043 0304 	orr.w	r3, r3, #4
 8003898:	6563      	str	r3, [r4, #84]	; 0x54
 800389a:	e7bb      	b.n	8003814 <HAL_DMA_IRQHandler+0x2bc>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800389c:	6812      	ldr	r2, [r2, #0]
 800389e:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 80038a2:	b1fa      	cbz	r2, 80038e4 <HAL_DMA_IRQHandler+0x38c>
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80038a4:	60bb      	str	r3, [r7, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80038a6:	6823      	ldr	r3, [r4, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80038ae:	d00d      	beq.n	80038cc <HAL_DMA_IRQHandler+0x374>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80038b6:	d104      	bne.n	80038c2 <HAL_DMA_IRQHandler+0x36a>
            if(hdma->XferHalfCpltCallback != NULL)
 80038b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80038ba:	b19b      	cbz	r3, 80038e4 <HAL_DMA_IRQHandler+0x38c>
              hdma->XferHalfCpltCallback(hdma);
 80038bc:	4620      	mov	r0, r4
 80038be:	4798      	blx	r3
 80038c0:	e010      	b.n	80038e4 <HAL_DMA_IRQHandler+0x38c>
            if(hdma->XferM1HalfCpltCallback != NULL)
 80038c2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80038c4:	b173      	cbz	r3, 80038e4 <HAL_DMA_IRQHandler+0x38c>
              hdma->XferM1HalfCpltCallback(hdma);
 80038c6:	4620      	mov	r0, r4
 80038c8:	4798      	blx	r3
 80038ca:	e00b      	b.n	80038e4 <HAL_DMA_IRQHandler+0x38c>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	f412 7f80 	tst.w	r2, #256	; 0x100
 80038d2:	d103      	bne.n	80038dc <HAL_DMA_IRQHandler+0x384>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	f022 0208 	bic.w	r2, r2, #8
 80038da:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 80038dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80038de:	b10b      	cbz	r3, 80038e4 <HAL_DMA_IRQHandler+0x38c>
            hdma->XferHalfCpltCallback(hdma);
 80038e0:	4620      	mov	r0, r4
 80038e2:	4798      	blx	r3
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80038e4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80038e6:	f003 031f 	and.w	r3, r3, #31
 80038ea:	2220      	movs	r2, #32
 80038ec:	fa02 f303 	lsl.w	r3, r2, r3
 80038f0:	4233      	tst	r3, r6
 80038f2:	f000 808e 	beq.w	8003a12 <HAL_DMA_IRQHandler+0x4ba>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80038f6:	6822      	ldr	r2, [r4, #0]
 80038f8:	4866      	ldr	r0, [pc, #408]	; (8003a94 <HAL_DMA_IRQHandler+0x53c>)
 80038fa:	4967      	ldr	r1, [pc, #412]	; (8003a98 <HAL_DMA_IRQHandler+0x540>)
 80038fc:	428a      	cmp	r2, r1
 80038fe:	bf18      	it	ne
 8003900:	4282      	cmpne	r2, r0
 8003902:	d02e      	beq.n	8003962 <HAL_DMA_IRQHandler+0x40a>
 8003904:	3118      	adds	r1, #24
 8003906:	428a      	cmp	r2, r1
 8003908:	d02b      	beq.n	8003962 <HAL_DMA_IRQHandler+0x40a>
 800390a:	3118      	adds	r1, #24
 800390c:	428a      	cmp	r2, r1
 800390e:	d028      	beq.n	8003962 <HAL_DMA_IRQHandler+0x40a>
 8003910:	3118      	adds	r1, #24
 8003912:	428a      	cmp	r2, r1
 8003914:	d025      	beq.n	8003962 <HAL_DMA_IRQHandler+0x40a>
 8003916:	3118      	adds	r1, #24
 8003918:	428a      	cmp	r2, r1
 800391a:	d022      	beq.n	8003962 <HAL_DMA_IRQHandler+0x40a>
 800391c:	3118      	adds	r1, #24
 800391e:	428a      	cmp	r2, r1
 8003920:	d01f      	beq.n	8003962 <HAL_DMA_IRQHandler+0x40a>
 8003922:	3118      	adds	r1, #24
 8003924:	428a      	cmp	r2, r1
 8003926:	d01c      	beq.n	8003962 <HAL_DMA_IRQHandler+0x40a>
 8003928:	f501 7156 	add.w	r1, r1, #856	; 0x358
 800392c:	428a      	cmp	r2, r1
 800392e:	d018      	beq.n	8003962 <HAL_DMA_IRQHandler+0x40a>
 8003930:	3118      	adds	r1, #24
 8003932:	428a      	cmp	r2, r1
 8003934:	d015      	beq.n	8003962 <HAL_DMA_IRQHandler+0x40a>
 8003936:	3118      	adds	r1, #24
 8003938:	428a      	cmp	r2, r1
 800393a:	d012      	beq.n	8003962 <HAL_DMA_IRQHandler+0x40a>
 800393c:	3118      	adds	r1, #24
 800393e:	428a      	cmp	r2, r1
 8003940:	d00f      	beq.n	8003962 <HAL_DMA_IRQHandler+0x40a>
 8003942:	3118      	adds	r1, #24
 8003944:	428a      	cmp	r2, r1
 8003946:	d00c      	beq.n	8003962 <HAL_DMA_IRQHandler+0x40a>
 8003948:	3118      	adds	r1, #24
 800394a:	428a      	cmp	r2, r1
 800394c:	d009      	beq.n	8003962 <HAL_DMA_IRQHandler+0x40a>
 800394e:	3118      	adds	r1, #24
 8003950:	428a      	cmp	r2, r1
 8003952:	d006      	beq.n	8003962 <HAL_DMA_IRQHandler+0x40a>
 8003954:	3118      	adds	r1, #24
 8003956:	428a      	cmp	r2, r1
 8003958:	d003      	beq.n	8003962 <HAL_DMA_IRQHandler+0x40a>
 800395a:	6812      	ldr	r2, [r2, #0]
 800395c:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8003960:	e002      	b.n	8003968 <HAL_DMA_IRQHandler+0x410>
 8003962:	6812      	ldr	r2, [r2, #0]
 8003964:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8003968:	2a00      	cmp	r2, #0
 800396a:	d052      	beq.n	8003a12 <HAL_DMA_IRQHandler+0x4ba>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800396c:	60bb      	str	r3, [r7, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 800396e:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8003972:	b2db      	uxtb	r3, r3
 8003974:	2b04      	cmp	r3, #4
 8003976:	d00e      	beq.n	8003996 <HAL_DMA_IRQHandler+0x43e>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003978:	6823      	ldr	r3, [r4, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8003980:	d035      	beq.n	80039ee <HAL_DMA_IRQHandler+0x496>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8003988:	d12c      	bne.n	80039e4 <HAL_DMA_IRQHandler+0x48c>
            if(hdma->XferM1CpltCallback != NULL)
 800398a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800398c:	2b00      	cmp	r3, #0
 800398e:	d040      	beq.n	8003a12 <HAL_DMA_IRQHandler+0x4ba>
              hdma->XferM1CpltCallback(hdma);
 8003990:	4620      	mov	r0, r4
 8003992:	4798      	blx	r3
 8003994:	e03d      	b.n	8003a12 <HAL_DMA_IRQHandler+0x4ba>
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003996:	6822      	ldr	r2, [r4, #0]
 8003998:	6813      	ldr	r3, [r2, #0]
 800399a:	f023 0316 	bic.w	r3, r3, #22
 800399e:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80039a0:	6822      	ldr	r2, [r4, #0]
 80039a2:	6953      	ldr	r3, [r2, #20]
 80039a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039a8:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80039aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80039ac:	b1b3      	cbz	r3, 80039dc <HAL_DMA_IRQHandler+0x484>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80039ae:	6822      	ldr	r2, [r4, #0]
 80039b0:	6813      	ldr	r3, [r2, #0]
 80039b2:	f023 0308 	bic.w	r3, r3, #8
 80039b6:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80039b8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80039ba:	f003 021f 	and.w	r2, r3, #31
 80039be:	233f      	movs	r3, #63	; 0x3f
 80039c0:	4093      	lsls	r3, r2
 80039c2:	60bb      	str	r3, [r7, #8]
          __HAL_UNLOCK(hdma);
 80039c4:	2300      	movs	r3, #0
 80039c6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80039ca:	2301      	movs	r3, #1
 80039cc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          if(hdma->XferAbortCallback != NULL)
 80039d0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d07f      	beq.n	8003ad6 <HAL_DMA_IRQHandler+0x57e>
            hdma->XferAbortCallback(hdma);
 80039d6:	4620      	mov	r0, r4
 80039d8:	4798      	blx	r3
 80039da:	e07c      	b.n	8003ad6 <HAL_DMA_IRQHandler+0x57e>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80039dc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d1e5      	bne.n	80039ae <HAL_DMA_IRQHandler+0x456>
 80039e2:	e7e9      	b.n	80039b8 <HAL_DMA_IRQHandler+0x460>
            if(hdma->XferCpltCallback != NULL)
 80039e4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80039e6:	b1a3      	cbz	r3, 8003a12 <HAL_DMA_IRQHandler+0x4ba>
              hdma->XferCpltCallback(hdma);
 80039e8:	4620      	mov	r0, r4
 80039ea:	4798      	blx	r3
 80039ec:	e011      	b.n	8003a12 <HAL_DMA_IRQHandler+0x4ba>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	f412 7f80 	tst.w	r2, #256	; 0x100
 80039f4:	d109      	bne.n	8003a0a <HAL_DMA_IRQHandler+0x4b2>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	f022 0210 	bic.w	r2, r2, #16
 80039fc:	601a      	str	r2, [r3, #0]
            __HAL_UNLOCK(hdma);
 80039fe:	2300      	movs	r3, #0
 8003a00:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 8003a04:	2301      	movs	r3, #1
 8003a06:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          if(hdma->XferCpltCallback != NULL)
 8003a0a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003a0c:	b10b      	cbz	r3, 8003a12 <HAL_DMA_IRQHandler+0x4ba>
            hdma->XferCpltCallback(hdma);
 8003a0e:	4620      	mov	r0, r4
 8003a10:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003a12:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d05e      	beq.n	8003ad6 <HAL_DMA_IRQHandler+0x57e>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003a18:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003a1a:	f013 0f01 	tst.w	r3, #1
 8003a1e:	d056      	beq.n	8003ace <HAL_DMA_IRQHandler+0x576>
        hdma->State = HAL_DMA_STATE_ABORT;
 8003a20:	2304      	movs	r3, #4
 8003a22:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 8003a26:	6823      	ldr	r3, [r4, #0]
 8003a28:	491a      	ldr	r1, [pc, #104]	; (8003a94 <HAL_DMA_IRQHandler+0x53c>)
 8003a2a:	4a1b      	ldr	r2, [pc, #108]	; (8003a98 <HAL_DMA_IRQHandler+0x540>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	bf18      	it	ne
 8003a30:	428b      	cmpne	r3, r1
 8003a32:	d033      	beq.n	8003a9c <HAL_DMA_IRQHandler+0x544>
 8003a34:	3218      	adds	r2, #24
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d030      	beq.n	8003a9c <HAL_DMA_IRQHandler+0x544>
 8003a3a:	3218      	adds	r2, #24
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d02d      	beq.n	8003a9c <HAL_DMA_IRQHandler+0x544>
 8003a40:	3218      	adds	r2, #24
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d02a      	beq.n	8003a9c <HAL_DMA_IRQHandler+0x544>
 8003a46:	3218      	adds	r2, #24
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d027      	beq.n	8003a9c <HAL_DMA_IRQHandler+0x544>
 8003a4c:	3218      	adds	r2, #24
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d024      	beq.n	8003a9c <HAL_DMA_IRQHandler+0x544>
 8003a52:	3218      	adds	r2, #24
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d021      	beq.n	8003a9c <HAL_DMA_IRQHandler+0x544>
 8003a58:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d01d      	beq.n	8003a9c <HAL_DMA_IRQHandler+0x544>
 8003a60:	3218      	adds	r2, #24
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d01a      	beq.n	8003a9c <HAL_DMA_IRQHandler+0x544>
 8003a66:	3218      	adds	r2, #24
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d017      	beq.n	8003a9c <HAL_DMA_IRQHandler+0x544>
 8003a6c:	3218      	adds	r2, #24
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d014      	beq.n	8003a9c <HAL_DMA_IRQHandler+0x544>
 8003a72:	3218      	adds	r2, #24
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d011      	beq.n	8003a9c <HAL_DMA_IRQHandler+0x544>
 8003a78:	3218      	adds	r2, #24
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d00e      	beq.n	8003a9c <HAL_DMA_IRQHandler+0x544>
 8003a7e:	3218      	adds	r2, #24
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d00b      	beq.n	8003a9c <HAL_DMA_IRQHandler+0x544>
 8003a84:	3218      	adds	r2, #24
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d008      	beq.n	8003a9c <HAL_DMA_IRQHandler+0x544>
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	f022 0201 	bic.w	r2, r2, #1
 8003a90:	601a      	str	r2, [r3, #0]
 8003a92:	e007      	b.n	8003aa4 <HAL_DMA_IRQHandler+0x54c>
 8003a94:	40020010 	.word	0x40020010
 8003a98:	40020028 	.word	0x40020028
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	f022 0201 	bic.w	r2, r2, #1
 8003aa2:	601a      	str	r2, [r3, #0]
          if (++count > timeout)
 8003aa4:	9b01      	ldr	r3, [sp, #4]
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	9301      	str	r3, [sp, #4]
 8003aaa:	42ab      	cmp	r3, r5
 8003aac:	d804      	bhi.n	8003ab8 <HAL_DMA_IRQHandler+0x560>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003aae:	6823      	ldr	r3, [r4, #0]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f013 0f01 	tst.w	r3, #1
 8003ab6:	d1f5      	bne.n	8003aa4 <HAL_DMA_IRQHandler+0x54c>
        __HAL_UNLOCK(hdma);
 8003ab8:	2300      	movs	r3, #0
 8003aba:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003abe:	6823      	ldr	r3, [r4, #0]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f013 0f01 	tst.w	r3, #1
 8003ac6:	d008      	beq.n	8003ada <HAL_DMA_IRQHandler+0x582>
          hdma->State = HAL_DMA_STATE_ERROR;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      if(hdma->XferErrorCallback != NULL)
 8003ace:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003ad0:	b10b      	cbz	r3, 8003ad6 <HAL_DMA_IRQHandler+0x57e>
        hdma->XferErrorCallback(hdma);
 8003ad2:	4620      	mov	r0, r4
 8003ad4:	4798      	blx	r3
}
 8003ad6:	b003      	add	sp, #12
 8003ad8:	bdf0      	pop	{r4, r5, r6, r7, pc}
          hdma->State = HAL_DMA_STATE_READY;
 8003ada:	2301      	movs	r3, #1
 8003adc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
 8003ae0:	e7f5      	b.n	8003ace <HAL_DMA_IRQHandler+0x576>
          if(hdma->XferHalfCpltCallback != NULL)
 8003ae2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d0f6      	beq.n	8003ad6 <HAL_DMA_IRQHandler+0x57e>
            hdma->XferHalfCpltCallback(hdma);
 8003ae8:	4620      	mov	r0, r4
 8003aea:	4798      	blx	r3
 8003aec:	e7f3      	b.n	8003ad6 <HAL_DMA_IRQHandler+0x57e>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003aee:	f012 0f20 	tst.w	r2, #32
 8003af2:	d135      	bne.n	8003b60 <HAL_DMA_IRQHandler+0x608>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003af4:	6823      	ldr	r3, [r4, #0]
 8003af6:	4964      	ldr	r1, [pc, #400]	; (8003c88 <HAL_DMA_IRQHandler+0x730>)
 8003af8:	4a64      	ldr	r2, [pc, #400]	; (8003c8c <HAL_DMA_IRQHandler+0x734>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	bf18      	it	ne
 8003afe:	428b      	cmpne	r3, r1
 8003b00:	d02a      	beq.n	8003b58 <HAL_DMA_IRQHandler+0x600>
 8003b02:	3218      	adds	r2, #24
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d027      	beq.n	8003b58 <HAL_DMA_IRQHandler+0x600>
 8003b08:	3218      	adds	r2, #24
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d024      	beq.n	8003b58 <HAL_DMA_IRQHandler+0x600>
 8003b0e:	3218      	adds	r2, #24
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d021      	beq.n	8003b58 <HAL_DMA_IRQHandler+0x600>
 8003b14:	3218      	adds	r2, #24
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d01e      	beq.n	8003b58 <HAL_DMA_IRQHandler+0x600>
 8003b1a:	3218      	adds	r2, #24
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d01b      	beq.n	8003b58 <HAL_DMA_IRQHandler+0x600>
 8003b20:	3218      	adds	r2, #24
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d018      	beq.n	8003b58 <HAL_DMA_IRQHandler+0x600>
 8003b26:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d014      	beq.n	8003b58 <HAL_DMA_IRQHandler+0x600>
 8003b2e:	3218      	adds	r2, #24
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d011      	beq.n	8003b58 <HAL_DMA_IRQHandler+0x600>
 8003b34:	3218      	adds	r2, #24
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d00e      	beq.n	8003b58 <HAL_DMA_IRQHandler+0x600>
 8003b3a:	3218      	adds	r2, #24
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d00b      	beq.n	8003b58 <HAL_DMA_IRQHandler+0x600>
 8003b40:	3218      	adds	r2, #24
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d008      	beq.n	8003b58 <HAL_DMA_IRQHandler+0x600>
 8003b46:	3218      	adds	r2, #24
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d005      	beq.n	8003b58 <HAL_DMA_IRQHandler+0x600>
 8003b4c:	3218      	adds	r2, #24
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d002      	beq.n	8003b58 <HAL_DMA_IRQHandler+0x600>
 8003b52:	3218      	adds	r2, #24
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d109      	bne.n	8003b6c <HAL_DMA_IRQHandler+0x614>
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	f022 0208 	bic.w	r2, r2, #8
 8003b5e:	601a      	str	r2, [r3, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8003b60:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d0b7      	beq.n	8003ad6 <HAL_DMA_IRQHandler+0x57e>
          hdma->XferHalfCpltCallback(hdma);
 8003b66:	4620      	mov	r0, r4
 8003b68:	4798      	blx	r3
 8003b6a:	e7b4      	b.n	8003ad6 <HAL_DMA_IRQHandler+0x57e>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	f022 0204 	bic.w	r2, r2, #4
 8003b72:	601a      	str	r2, [r3, #0]
 8003b74:	e7f4      	b.n	8003b60 <HAL_DMA_IRQHandler+0x608>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003b76:	2002      	movs	r0, #2
 8003b78:	4088      	lsls	r0, r1
 8003b7a:	ea10 0f0c 	tst.w	r0, ip
 8003b7e:	d060      	beq.n	8003c42 <HAL_DMA_IRQHandler+0x6ea>
 8003b80:	f012 0f02 	tst.w	r2, #2
 8003b84:	d05d      	beq.n	8003c42 <HAL_DMA_IRQHandler+0x6ea>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003b86:	6078      	str	r0, [r7, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b88:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8003b8c:	d00e      	beq.n	8003bac <HAL_DMA_IRQHandler+0x654>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003b8e:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8003b92:	d105      	bne.n	8003ba0 <HAL_DMA_IRQHandler+0x648>
          if(hdma->XferM1CpltCallback != NULL)
 8003b94:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d09d      	beq.n	8003ad6 <HAL_DMA_IRQHandler+0x57e>
            hdma->XferM1CpltCallback(hdma);
 8003b9a:	4620      	mov	r0, r4
 8003b9c:	4798      	blx	r3
 8003b9e:	e79a      	b.n	8003ad6 <HAL_DMA_IRQHandler+0x57e>
          if(hdma->XferCpltCallback != NULL)
 8003ba0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d097      	beq.n	8003ad6 <HAL_DMA_IRQHandler+0x57e>
            hdma->XferCpltCallback(hdma);
 8003ba6:	4620      	mov	r0, r4
 8003ba8:	4798      	blx	r3
 8003baa:	e794      	b.n	8003ad6 <HAL_DMA_IRQHandler+0x57e>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003bac:	f012 0f20 	tst.w	r2, #32
 8003bb0:	d13b      	bne.n	8003c2a <HAL_DMA_IRQHandler+0x6d2>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003bb2:	6823      	ldr	r3, [r4, #0]
 8003bb4:	4934      	ldr	r1, [pc, #208]	; (8003c88 <HAL_DMA_IRQHandler+0x730>)
 8003bb6:	4a35      	ldr	r2, [pc, #212]	; (8003c8c <HAL_DMA_IRQHandler+0x734>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	bf18      	it	ne
 8003bbc:	428b      	cmpne	r3, r1
 8003bbe:	d02a      	beq.n	8003c16 <HAL_DMA_IRQHandler+0x6be>
 8003bc0:	3218      	adds	r2, #24
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d027      	beq.n	8003c16 <HAL_DMA_IRQHandler+0x6be>
 8003bc6:	3218      	adds	r2, #24
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d024      	beq.n	8003c16 <HAL_DMA_IRQHandler+0x6be>
 8003bcc:	3218      	adds	r2, #24
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d021      	beq.n	8003c16 <HAL_DMA_IRQHandler+0x6be>
 8003bd2:	3218      	adds	r2, #24
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d01e      	beq.n	8003c16 <HAL_DMA_IRQHandler+0x6be>
 8003bd8:	3218      	adds	r2, #24
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d01b      	beq.n	8003c16 <HAL_DMA_IRQHandler+0x6be>
 8003bde:	3218      	adds	r2, #24
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d018      	beq.n	8003c16 <HAL_DMA_IRQHandler+0x6be>
 8003be4:	f502 7256 	add.w	r2, r2, #856	; 0x358
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d014      	beq.n	8003c16 <HAL_DMA_IRQHandler+0x6be>
 8003bec:	3218      	adds	r2, #24
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d011      	beq.n	8003c16 <HAL_DMA_IRQHandler+0x6be>
 8003bf2:	3218      	adds	r2, #24
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d00e      	beq.n	8003c16 <HAL_DMA_IRQHandler+0x6be>
 8003bf8:	3218      	adds	r2, #24
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d00b      	beq.n	8003c16 <HAL_DMA_IRQHandler+0x6be>
 8003bfe:	3218      	adds	r2, #24
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d008      	beq.n	8003c16 <HAL_DMA_IRQHandler+0x6be>
 8003c04:	3218      	adds	r2, #24
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d005      	beq.n	8003c16 <HAL_DMA_IRQHandler+0x6be>
 8003c0a:	3218      	adds	r2, #24
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d002      	beq.n	8003c16 <HAL_DMA_IRQHandler+0x6be>
 8003c10:	3218      	adds	r2, #24
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d110      	bne.n	8003c38 <HAL_DMA_IRQHandler+0x6e0>
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	f022 0214 	bic.w	r2, r2, #20
 8003c1c:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 8003c1e:	2300      	movs	r3, #0
 8003c20:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8003c24:	2301      	movs	r3, #1
 8003c26:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8003c2a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	f43f af52 	beq.w	8003ad6 <HAL_DMA_IRQHandler+0x57e>
          hdma->XferCpltCallback(hdma);
 8003c32:	4620      	mov	r0, r4
 8003c34:	4798      	blx	r3
 8003c36:	e74e      	b.n	8003ad6 <HAL_DMA_IRQHandler+0x57e>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	f022 020a 	bic.w	r2, r2, #10
 8003c3e:	601a      	str	r2, [r3, #0]
 8003c40:	e7ed      	b.n	8003c1e <HAL_DMA_IRQHandler+0x6c6>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003c42:	2008      	movs	r0, #8
 8003c44:	fa00 f101 	lsl.w	r1, r0, r1
 8003c48:	ea11 0f0c 	tst.w	r1, ip
 8003c4c:	f43f af43 	beq.w	8003ad6 <HAL_DMA_IRQHandler+0x57e>
 8003c50:	f012 0f08 	tst.w	r2, #8
 8003c54:	f43f af3f 	beq.w	8003ad6 <HAL_DMA_IRQHandler+0x57e>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	f022 020e 	bic.w	r2, r2, #14
 8003c5e:	601a      	str	r2, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003c60:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003c62:	f003 031f 	and.w	r3, r3, #31
 8003c66:	2201      	movs	r2, #1
 8003c68:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6c:	607b      	str	r3, [r7, #4]
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003c6e:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 8003c70:	2300      	movs	r3, #0
 8003c72:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8003c76:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 8003c7a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	f43f af2a 	beq.w	8003ad6 <HAL_DMA_IRQHandler+0x57e>
        hdma->XferErrorCallback(hdma);
 8003c82:	4620      	mov	r0, r4
 8003c84:	4798      	blx	r3
 8003c86:	e726      	b.n	8003ad6 <HAL_DMA_IRQHandler+0x57e>
 8003c88:	40020010 	.word	0x40020010
 8003c8c:	40020028 	.word	0x40020028

08003c90 <HAL_DSI_ConfigErrorMonitor>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003c90:	7c03      	ldrb	r3, [r0, #16]
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d075      	beq.n	8003d82 <HAL_DSI_ConfigErrorMonitor+0xf2>
 8003c96:	2301      	movs	r3, #1
 8003c98:	7403      	strb	r3, [r0, #16]

  hdsi->Instance->IER[0U] = 0U;
 8003c9a:	6802      	ldr	r2, [r0, #0]
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8003ca2:	6802      	ldr	r2, [r0, #0]
 8003ca4:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;
 8003ca8:	6181      	str	r1, [r0, #24]

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8003caa:	f011 0f01 	tst.w	r1, #1
 8003cae:	d06a      	beq.n	8003d86 <HAL_DSI_ConfigErrorMonitor+0xf6>
{
 8003cb0:	b410      	push	{r4}
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8003cb2:	6802      	ldr	r2, [r0, #0]
 8003cb4:	f8d2 40c4 	ldr.w	r4, [r2, #196]	; 0xc4
 8003cb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003cbc:	4323      	orrs	r3, r4
 8003cbe:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8003cc2:	f011 0f02 	tst.w	r1, #2
 8003cc6:	d006      	beq.n	8003cd6 <HAL_DSI_ConfigErrorMonitor+0x46>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8003cc8:	6802      	ldr	r2, [r0, #0]
 8003cca:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 8003cce:	f443 13f8 	orr.w	r3, r3, #2031616	; 0x1f0000
 8003cd2:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8003cd6:	f011 0f04 	tst.w	r1, #4
 8003cda:	d006      	beq.n	8003cea <HAL_DSI_ConfigErrorMonitor+0x5a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8003cdc:	6802      	ldr	r2, [r0, #0]
 8003cde:	f8d2 30c8 	ldr.w	r3, [r2, #200]	; 0xc8
 8003ce2:	f043 0301 	orr.w	r3, r3, #1
 8003ce6:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8003cea:	f011 0f08 	tst.w	r1, #8
 8003cee:	d006      	beq.n	8003cfe <HAL_DSI_ConfigErrorMonitor+0x6e>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8003cf0:	6802      	ldr	r2, [r0, #0]
 8003cf2:	f8d2 30c8 	ldr.w	r3, [r2, #200]	; 0xc8
 8003cf6:	f043 0302 	orr.w	r3, r3, #2
 8003cfa:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8003cfe:	f011 0f10 	tst.w	r1, #16
 8003d02:	d006      	beq.n	8003d12 <HAL_DSI_ConfigErrorMonitor+0x82>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8003d04:	6802      	ldr	r2, [r0, #0]
 8003d06:	f8d2 30c8 	ldr.w	r3, [r2, #200]	; 0xc8
 8003d0a:	f043 030c 	orr.w	r3, r3, #12
 8003d0e:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8003d12:	f011 0f20 	tst.w	r1, #32
 8003d16:	d006      	beq.n	8003d26 <HAL_DSI_ConfigErrorMonitor+0x96>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8003d18:	6802      	ldr	r2, [r0, #0]
 8003d1a:	f8d2 30c8 	ldr.w	r3, [r2, #200]	; 0xc8
 8003d1e:	f043 0310 	orr.w	r3, r3, #16
 8003d22:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8003d26:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003d2a:	d006      	beq.n	8003d3a <HAL_DSI_ConfigErrorMonitor+0xaa>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8003d2c:	6802      	ldr	r2, [r0, #0]
 8003d2e:	f8d2 30c8 	ldr.w	r3, [r2, #200]	; 0xc8
 8003d32:	f043 0320 	orr.w	r3, r3, #32
 8003d36:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8003d3a:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003d3e:	d006      	beq.n	8003d4e <HAL_DSI_ConfigErrorMonitor+0xbe>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8003d40:	6802      	ldr	r2, [r0, #0]
 8003d42:	f8d2 30c8 	ldr.w	r3, [r2, #200]	; 0xc8
 8003d46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d4a:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8003d4e:	f411 7f80 	tst.w	r1, #256	; 0x100
 8003d52:	d006      	beq.n	8003d62 <HAL_DSI_ConfigErrorMonitor+0xd2>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8003d54:	6802      	ldr	r2, [r0, #0]
 8003d56:	f8d2 30c8 	ldr.w	r3, [r2, #200]	; 0xc8
 8003d5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d5e:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8003d62:	f411 7f00 	tst.w	r1, #512	; 0x200
 8003d66:	d006      	beq.n	8003d76 <HAL_DSI_ConfigErrorMonitor+0xe6>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8003d68:	6802      	ldr	r2, [r0, #0]
 8003d6a:	f8d2 30c8 	ldr.w	r3, [r2, #200]	; 0xc8
 8003d6e:	f443 53f8 	orr.w	r3, r3, #7936	; 0x1f00
 8003d72:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8003d76:	2300      	movs	r3, #0
 8003d78:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8003d7a:	4618      	mov	r0, r3
}
 8003d7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d80:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8003d82:	2002      	movs	r0, #2
 8003d84:	4770      	bx	lr
  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8003d86:	f011 0f02 	tst.w	r1, #2
 8003d8a:	d006      	beq.n	8003d9a <HAL_DSI_ConfigErrorMonitor+0x10a>
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8003d8c:	6802      	ldr	r2, [r0, #0]
 8003d8e:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
 8003d92:	f443 13f8 	orr.w	r3, r3, #2031616	; 0x1f0000
 8003d96:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8003d9a:	f011 0f04 	tst.w	r1, #4
 8003d9e:	d006      	beq.n	8003dae <HAL_DSI_ConfigErrorMonitor+0x11e>
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8003da0:	6802      	ldr	r2, [r0, #0]
 8003da2:	f8d2 30c8 	ldr.w	r3, [r2, #200]	; 0xc8
 8003da6:	f043 0301 	orr.w	r3, r3, #1
 8003daa:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8003dae:	f011 0f08 	tst.w	r1, #8
 8003db2:	d006      	beq.n	8003dc2 <HAL_DSI_ConfigErrorMonitor+0x132>
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8003db4:	6802      	ldr	r2, [r0, #0]
 8003db6:	f8d2 30c8 	ldr.w	r3, [r2, #200]	; 0xc8
 8003dba:	f043 0302 	orr.w	r3, r3, #2
 8003dbe:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8003dc2:	f011 0f10 	tst.w	r1, #16
 8003dc6:	d006      	beq.n	8003dd6 <HAL_DSI_ConfigErrorMonitor+0x146>
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8003dc8:	6802      	ldr	r2, [r0, #0]
 8003dca:	f8d2 30c8 	ldr.w	r3, [r2, #200]	; 0xc8
 8003dce:	f043 030c 	orr.w	r3, r3, #12
 8003dd2:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8003dd6:	f011 0f20 	tst.w	r1, #32
 8003dda:	d006      	beq.n	8003dea <HAL_DSI_ConfigErrorMonitor+0x15a>
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8003ddc:	6802      	ldr	r2, [r0, #0]
 8003dde:	f8d2 30c8 	ldr.w	r3, [r2, #200]	; 0xc8
 8003de2:	f043 0310 	orr.w	r3, r3, #16
 8003de6:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8003dea:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003dee:	d006      	beq.n	8003dfe <HAL_DSI_ConfigErrorMonitor+0x16e>
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8003df0:	6802      	ldr	r2, [r0, #0]
 8003df2:	f8d2 30c8 	ldr.w	r3, [r2, #200]	; 0xc8
 8003df6:	f043 0320 	orr.w	r3, r3, #32
 8003dfa:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8003dfe:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003e02:	d006      	beq.n	8003e12 <HAL_DSI_ConfigErrorMonitor+0x182>
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8003e04:	6802      	ldr	r2, [r0, #0]
 8003e06:	f8d2 30c8 	ldr.w	r3, [r2, #200]	; 0xc8
 8003e0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e0e:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8003e12:	f411 7f80 	tst.w	r1, #256	; 0x100
 8003e16:	d006      	beq.n	8003e26 <HAL_DSI_ConfigErrorMonitor+0x196>
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8003e18:	6802      	ldr	r2, [r0, #0]
 8003e1a:	f8d2 30c8 	ldr.w	r3, [r2, #200]	; 0xc8
 8003e1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e22:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8003e26:	f411 7f00 	tst.w	r1, #512	; 0x200
 8003e2a:	d006      	beq.n	8003e3a <HAL_DSI_ConfigErrorMonitor+0x1aa>
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8003e2c:	6802      	ldr	r2, [r0, #0]
 8003e2e:	f8d2 30c8 	ldr.w	r3, [r2, #200]	; 0xc8
 8003e32:	f443 53f8 	orr.w	r3, r3, #7936	; 0x1f00
 8003e36:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
  __HAL_UNLOCK(hdsi);
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	7403      	strb	r3, [r0, #16]
  return HAL_OK;
 8003e3e:	4618      	mov	r0, r3
}
 8003e40:	4770      	bx	lr
	...

08003e44 <HAL_DSI_Init>:
  if (hdsi == NULL)
 8003e44:	2800      	cmp	r0, #0
 8003e46:	f000 80ba 	beq.w	8003fbe <HAL_DSI_Init+0x17a>
{
 8003e4a:	b570      	push	{r4, r5, r6, lr}
 8003e4c:	b082      	sub	sp, #8
 8003e4e:	4604      	mov	r4, r0
 8003e50:	460e      	mov	r6, r1
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8003e52:	7c43      	ldrb	r3, [r0, #17]
 8003e54:	b31b      	cbz	r3, 8003e9e <HAL_DSI_Init+0x5a>
  hdsi->State = HAL_DSI_STATE_BUSY;
 8003e56:	2303      	movs	r3, #3
 8003e58:	7463      	strb	r3, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	9300      	str	r3, [sp, #0]
 8003e5e:	6822      	ldr	r2, [r4, #0]
 8003e60:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 8003e64:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e68:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
 8003e6c:	6823      	ldr	r3, [r4, #0]
 8003e6e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003e72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e76:	9300      	str	r3, [sp, #0]
 8003e78:	9b00      	ldr	r3, [sp, #0]
  tickstart = HAL_GetTick();
 8003e7a:	f7fe fc6b 	bl	8002754 <HAL_GetTick>
 8003e7e:	4605      	mov	r5, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8003e80:	6823      	ldr	r3, [r4, #0]
 8003e82:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8003e86:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8003e8a:	d10b      	bne.n	8003ea4 <HAL_DSI_Init+0x60>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003e8c:	f7fe fc62 	bl	8002754 <HAL_GetTick>
 8003e90:	1b40      	subs	r0, r0, r5
 8003e92:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003e96:	d9f3      	bls.n	8003e80 <HAL_DSI_Init+0x3c>
      return HAL_TIMEOUT;
 8003e98:	2003      	movs	r0, #3
}
 8003e9a:	b002      	add	sp, #8
 8003e9c:	bd70      	pop	{r4, r5, r6, pc}
    HAL_DSI_MspInit(hdsi);
 8003e9e:	f7fd fd7b 	bl	8001998 <HAL_DSI_MspInit>
 8003ea2:	e7d8      	b.n	8003e56 <HAL_DSI_Init+0x12>
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8003ea4:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8003ea8:	4a46      	ldr	r2, [pc, #280]	; (8003fc4 <HAL_DSI_Init+0x180>)
 8003eaa:	400a      	ands	r2, r1
 8003eac:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << 2U) | ((PLLInit->PLLIDF) << 11U) | ((PLLInit->PLLODF) << 16U));
 8003eb0:	6821      	ldr	r1, [r4, #0]
 8003eb2:	f8d1 2430 	ldr.w	r2, [r1, #1072]	; 0x430
 8003eb6:	6830      	ldr	r0, [r6, #0]
 8003eb8:	6873      	ldr	r3, [r6, #4]
 8003eba:	02db      	lsls	r3, r3, #11
 8003ebc:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
 8003ec0:	68b0      	ldr	r0, [r6, #8]
 8003ec2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	f8c1 3430 	str.w	r3, [r1, #1072]	; 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 8003ecc:	2300      	movs	r3, #0
 8003ece:	9301      	str	r3, [sp, #4]
 8003ed0:	6822      	ldr	r2, [r4, #0]
 8003ed2:	f8d2 3430 	ldr.w	r3, [r2, #1072]	; 0x430
 8003ed6:	f043 0301 	orr.w	r3, r3, #1
 8003eda:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
 8003ede:	6823      	ldr	r3, [r4, #0]
 8003ee0:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8003ee4:	f003 0301 	and.w	r3, r3, #1
 8003ee8:	9301      	str	r3, [sp, #4]
 8003eea:	9b01      	ldr	r3, [sp, #4]
  tickstart = HAL_GetTick();
 8003eec:	f7fe fc32 	bl	8002754 <HAL_GetTick>
 8003ef0:	4605      	mov	r5, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8003ef2:	6823      	ldr	r3, [r4, #0]
 8003ef4:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8003ef8:	f412 7f80 	tst.w	r2, #256	; 0x100
 8003efc:	d107      	bne.n	8003f0e <HAL_DSI_Init+0xca>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003efe:	f7fe fc29 	bl	8002754 <HAL_GetTick>
 8003f02:	1b40      	subs	r0, r0, r5
 8003f04:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003f08:	d9f3      	bls.n	8003ef2 <HAL_DSI_Init+0xae>
      return HAL_TIMEOUT;
 8003f0a:	2003      	movs	r0, #3
 8003f0c:	e7c5      	b.n	8003e9a <HAL_DSI_Init+0x56>
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8003f0e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003f12:	f042 0206 	orr.w	r2, r2, #6
 8003f16:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8003f1a:	6822      	ldr	r2, [r4, #0]
 8003f1c:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8003f20:	f023 0303 	bic.w	r3, r3, #3
 8003f24:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8003f28:	6822      	ldr	r2, [r4, #0]
 8003f2a:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8003f2e:	6861      	ldr	r1, [r4, #4]
 8003f30:	430b      	orrs	r3, r1
 8003f32:	f043 0301 	orr.w	r3, r3, #1
 8003f36:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8003f3a:	6822      	ldr	r2, [r4, #0]
 8003f3c:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
 8003f40:	f023 0303 	bic.w	r3, r3, #3
 8003f44:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8003f48:	6822      	ldr	r2, [r4, #0]
 8003f4a:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
 8003f4e:	68e1      	ldr	r1, [r4, #12]
 8003f50:	430b      	orrs	r3, r1
 8003f52:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8003f56:	6822      	ldr	r2, [r4, #0]
 8003f58:	6893      	ldr	r3, [r2, #8]
 8003f5a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003f5e:	6093      	str	r3, [r2, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8003f60:	6822      	ldr	r2, [r4, #0]
 8003f62:	6893      	ldr	r3, [r2, #8]
 8003f64:	68a1      	ldr	r1, [r4, #8]
 8003f66:	430b      	orrs	r3, r1
 8003f68:	6093      	str	r3, [r2, #8]
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8003f6a:	6872      	ldr	r2, [r6, #4]
 8003f6c:	b902      	cbnz	r2, 8003f70 <HAL_DSI_Init+0x12c>
 8003f6e:	2201      	movs	r2, #1
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8003f70:	4b15      	ldr	r3, [pc, #84]	; (8003fc8 <HAL_DSI_Init+0x184>)
 8003f72:	fb03 f302 	mul.w	r3, r3, r2
 8003f76:	68b2      	ldr	r2, [r6, #8]
 8003f78:	f002 0203 	and.w	r2, r2, #3
 8003f7c:	4093      	lsls	r3, r2
 8003f7e:	6831      	ldr	r1, [r6, #0]
 8003f80:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8003f84:	fb02 f201 	mul.w	r2, r2, r1
 8003f88:	fbb3 f3f2 	udiv	r3, r3, r2
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8003f8c:	6821      	ldr	r1, [r4, #0]
 8003f8e:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
 8003f92:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8003f96:	f8c1 2418 	str.w	r2, [r1, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8003f9a:	6821      	ldr	r1, [r4, #0]
 8003f9c:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	f8c1 3418 	str.w	r3, [r1, #1048]	; 0x418
  hdsi->Instance->IER[0U] = 0U;
 8003fa6:	6823      	ldr	r3, [r4, #0]
 8003fa8:	2000      	movs	r0, #0
 8003faa:	f8c3 00c4 	str.w	r0, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8003fae:	6823      	ldr	r3, [r4, #0]
 8003fb0:	f8c3 00c8 	str.w	r0, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 8003fb4:	61a0      	str	r0, [r4, #24]
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8003fb6:	6160      	str	r0, [r4, #20]
  hdsi->State = HAL_DSI_STATE_READY;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	7463      	strb	r3, [r4, #17]
  return HAL_OK;
 8003fbc:	e76d      	b.n	8003e9a <HAL_DSI_Init+0x56>
    return HAL_ERROR;
 8003fbe:	2001      	movs	r0, #1
}
 8003fc0:	4770      	bx	lr
 8003fc2:	bf00      	nop
 8003fc4:	fffc8603 	.word	0xfffc8603
 8003fc8:	003d0900 	.word	0x003d0900

08003fcc <HAL_DSI_SetGenericVCID>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003fcc:	7c03      	ldrb	r3, [r0, #16]
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d00e      	beq.n	8003ff0 <HAL_DSI_SetGenericVCID+0x24>
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	7403      	strb	r3, [r0, #16]

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 8003fd6:	6802      	ldr	r2, [r0, #0]
 8003fd8:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003fda:	f023 0303 	bic.w	r3, r3, #3
 8003fde:	6313      	str	r3, [r2, #48]	; 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8003fe0:	6802      	ldr	r2, [r0, #0]
 8003fe2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003fe4:	4319      	orrs	r1, r3
 8003fe6:	6311      	str	r1, [r2, #48]	; 0x30

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003fe8:	2300      	movs	r3, #0
 8003fea:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8003fec:	4618      	mov	r0, r3
 8003fee:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8003ff0:	2002      	movs	r0, #2
}
 8003ff2:	4770      	bx	lr

08003ff4 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003ff4:	7c03      	ldrb	r3, [r0, #16]
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	f000 8082 	beq.w	8004100 <HAL_DSI_ConfigAdaptedCommandMode+0x10c>
{
 8003ffc:	b430      	push	{r4, r5}
  __HAL_LOCK(hdsi);
 8003ffe:	2301      	movs	r3, #1
 8004000:	7403      	strb	r3, [r0, #16]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8004002:	6802      	ldr	r2, [r0, #0]
 8004004:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8004006:	f043 0301 	orr.w	r3, r3, #1
 800400a:	6353      	str	r3, [r2, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 800400c:	6802      	ldr	r2, [r0, #0]
 800400e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
 8004012:	f023 0301 	bic.w	r3, r3, #1
 8004016:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 800401a:	6802      	ldr	r2, [r0, #0]
 800401c:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
 8004020:	f043 0301 	orr.w	r3, r3, #1
 8004024:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8004028:	6802      	ldr	r2, [r0, #0]
 800402a:	68d3      	ldr	r3, [r2, #12]
 800402c:	f023 0303 	bic.w	r3, r3, #3
 8004030:	60d3      	str	r3, [r2, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8004032:	6802      	ldr	r2, [r0, #0]
 8004034:	68d3      	ldr	r3, [r2, #12]
 8004036:	680c      	ldr	r4, [r1, #0]
 8004038:	4323      	orrs	r3, r4
 800403a:	60d3      	str	r3, [r2, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 800403c:	6802      	ldr	r2, [r0, #0]
 800403e:	6953      	ldr	r3, [r2, #20]
 8004040:	f023 0307 	bic.w	r3, r3, #7
 8004044:	6153      	str	r3, [r2, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8004046:	6804      	ldr	r4, [r0, #0]
 8004048:	6962      	ldr	r2, [r4, #20]
 800404a:	69cb      	ldr	r3, [r1, #28]
 800404c:	698d      	ldr	r5, [r1, #24]
 800404e:	432b      	orrs	r3, r5
 8004050:	694d      	ldr	r5, [r1, #20]
 8004052:	432b      	orrs	r3, r5
 8004054:	4313      	orrs	r3, r2
 8004056:	6163      	str	r3, [r4, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8004058:	6802      	ldr	r2, [r0, #0]
 800405a:	6913      	ldr	r3, [r2, #16]
 800405c:	f023 030f 	bic.w	r3, r3, #15
 8004060:	6113      	str	r3, [r2, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8004062:	6802      	ldr	r2, [r0, #0]
 8004064:	6913      	ldr	r3, [r2, #16]
 8004066:	684c      	ldr	r4, [r1, #4]
 8004068:	4323      	orrs	r3, r4
 800406a:	6113      	str	r3, [r2, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 800406c:	6802      	ldr	r2, [r0, #0]
 800406e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
 8004072:	f023 030e 	bic.w	r3, r3, #14
 8004076:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 800407a:	6802      	ldr	r2, [r0, #0]
 800407c:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
 8004080:	684c      	ldr	r4, [r1, #4]
 8004082:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
 8004086:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 800408a:	6802      	ldr	r2, [r0, #0]
 800408c:	6e54      	ldr	r4, [r2, #100]	; 0x64
 800408e:	4b1d      	ldr	r3, [pc, #116]	; (8004104 <HAL_DSI_ConfigAdaptedCommandMode+0x110>)
 8004090:	4023      	ands	r3, r4
 8004092:	6653      	str	r3, [r2, #100]	; 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8004094:	6802      	ldr	r2, [r0, #0]
 8004096:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8004098:	688c      	ldr	r4, [r1, #8]
 800409a:	4323      	orrs	r3, r4
 800409c:	6653      	str	r3, [r2, #100]	; 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 800409e:	6802      	ldr	r2, [r0, #0]
 80040a0:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
 80040a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040a8:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80040ac:	6804      	ldr	r4, [r0, #0]
 80040ae:	f8d4 2400 	ldr.w	r2, [r4, #1024]	; 0x400
 80040b2:	68cb      	ldr	r3, [r1, #12]
 80040b4:	690d      	ldr	r5, [r1, #16]
 80040b6:	432b      	orrs	r3, r5
 80040b8:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 80040ba:	432b      	orrs	r3, r5
                            CmdCfg->VSyncPol);
 80040bc:	6a0d      	ldr	r5, [r1, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80040be:	432b      	orrs	r3, r5
 80040c0:	4313      	orrs	r3, r2
 80040c2:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 80040c6:	6802      	ldr	r2, [r0, #0]
 80040c8:	6e93      	ldr	r3, [r2, #104]	; 0x68
 80040ca:	f023 0301 	bic.w	r3, r3, #1
 80040ce:	6693      	str	r3, [r2, #104]	; 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 80040d0:	6802      	ldr	r2, [r0, #0]
 80040d2:	6e93      	ldr	r3, [r2, #104]	; 0x68
 80040d4:	6a89      	ldr	r1, [r1, #40]	; 0x28
 80040d6:	430b      	orrs	r3, r1
 80040d8:	6693      	str	r3, [r2, #104]	; 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 80040da:	6802      	ldr	r2, [r0, #0]
 80040dc:	f8d2 3408 	ldr.w	r3, [r2, #1032]	; 0x408
 80040e0:	f043 0301 	orr.w	r3, r3, #1
 80040e4:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 80040e8:	6802      	ldr	r2, [r0, #0]
 80040ea:	f8d2 3408 	ldr.w	r3, [r2, #1032]	; 0x408
 80040ee:	f043 0302 	orr.w	r3, r3, #2
 80040f2:	f8c2 3408 	str.w	r3, [r2, #1032]	; 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80040f6:	2300      	movs	r3, #0
 80040f8:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 80040fa:	4618      	mov	r0, r3
}
 80040fc:	bc30      	pop	{r4, r5}
 80040fe:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8004100:	2002      	movs	r0, #2
}
 8004102:	4770      	bx	lr
 8004104:	ffff0000 	.word	0xffff0000

08004108 <HAL_DSI_ConfigCommand>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004108:	7c03      	ldrb	r3, [r0, #16]
 800410a:	2b01      	cmp	r3, #1
 800410c:	d031      	beq.n	8004172 <HAL_DSI_ConfigCommand+0x6a>
{
 800410e:	b430      	push	{r4, r5}
  __HAL_LOCK(hdsi);
 8004110:	2301      	movs	r3, #1
 8004112:	7403      	strb	r3, [r0, #16]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8004114:	6802      	ldr	r2, [r0, #0]
 8004116:	6e94      	ldr	r4, [r2, #104]	; 0x68
 8004118:	4b17      	ldr	r3, [pc, #92]	; (8004178 <HAL_DSI_ConfigCommand+0x70>)
 800411a:	4023      	ands	r3, r4
 800411c:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 800411e:	6804      	ldr	r4, [r0, #0]
 8004120:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8004122:	680b      	ldr	r3, [r1, #0]
                           LPCmd->LPGenShortWriteOneP | \
 8004124:	684d      	ldr	r5, [r1, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8004126:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteTwoP | \
 8004128:	688d      	ldr	r5, [r1, #8]
                           LPCmd->LPGenShortWriteOneP | \
 800412a:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadNoP   | \
 800412c:	68cd      	ldr	r5, [r1, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 800412e:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadOneP  | \
 8004130:	690d      	ldr	r5, [r1, #16]
                           LPCmd->LPGenShortReadNoP   | \
 8004132:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadTwoP  | \
 8004134:	694d      	ldr	r5, [r1, #20]
                           LPCmd->LPGenShortReadOneP  | \
 8004136:	432b      	orrs	r3, r5
                           LPCmd->LPGenLongWrite      | \
 8004138:	698d      	ldr	r5, [r1, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 800413a:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteNoP  | \
 800413c:	69cd      	ldr	r5, [r1, #28]
                           LPCmd->LPGenLongWrite      | \
 800413e:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteOneP | \
 8004140:	6a0d      	ldr	r5, [r1, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 8004142:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortReadNoP   | \
 8004144:	6a4d      	ldr	r5, [r1, #36]	; 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 8004146:	432b      	orrs	r3, r5
                           LPCmd->LPDcsLongWrite      | \
 8004148:	6a8d      	ldr	r5, [r1, #40]	; 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 800414a:	432b      	orrs	r3, r5
                           LPCmd->LPMaxReadPacket);
 800414c:	6acd      	ldr	r5, [r1, #44]	; 0x2c
                           LPCmd->LPDcsLongWrite      | \
 800414e:	432b      	orrs	r3, r5
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8004150:	4313      	orrs	r3, r2
 8004152:	66a3      	str	r3, [r4, #104]	; 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8004154:	6802      	ldr	r2, [r0, #0]
 8004156:	6e93      	ldr	r3, [r2, #104]	; 0x68
 8004158:	f023 0302 	bic.w	r3, r3, #2
 800415c:	6693      	str	r3, [r2, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 800415e:	6802      	ldr	r2, [r0, #0]
 8004160:	6e93      	ldr	r3, [r2, #104]	; 0x68
 8004162:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8004164:	430b      	orrs	r3, r1
 8004166:	6693      	str	r3, [r2, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004168:	2300      	movs	r3, #0
 800416a:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 800416c:	4618      	mov	r0, r3
}
 800416e:	bc30      	pop	{r4, r5}
 8004170:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8004172:	2002      	movs	r0, #2
}
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	fef080ff 	.word	0xfef080ff

0800417c <HAL_DSI_ConfigFlowControl>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800417c:	7c03      	ldrb	r3, [r0, #16]
 800417e:	2b01      	cmp	r3, #1
 8004180:	d00e      	beq.n	80041a0 <HAL_DSI_ConfigFlowControl+0x24>
 8004182:	2301      	movs	r3, #1
 8004184:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8004186:	6802      	ldr	r2, [r0, #0]
 8004188:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800418a:	f023 031f 	bic.w	r3, r3, #31
 800418e:	62d3      	str	r3, [r2, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8004190:	6802      	ldr	r2, [r0, #0]
 8004192:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004194:	4319      	orrs	r1, r3
 8004196:	62d1      	str	r1, [r2, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004198:	2300      	movs	r3, #0
 800419a:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 800419c:	4618      	mov	r0, r3
 800419e:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 80041a0:	2002      	movs	r0, #2
}
 80041a2:	4770      	bx	lr

080041a4 <HAL_DSI_ConfigPhyTimer>:
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 80041a4:	7c03      	ldrb	r3, [r0, #16]
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d03e      	beq.n	8004228 <HAL_DSI_ConfigPhyTimer+0x84>
{
 80041aa:	b430      	push	{r4, r5}
  __HAL_LOCK(hdsi);
 80041ac:	2301      	movs	r3, #1
 80041ae:	7403      	strb	r3, [r0, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 80041b0:	680b      	ldr	r3, [r1, #0]
 80041b2:	684a      	ldr	r2, [r1, #4]
 80041b4:	4293      	cmp	r3, r2
 80041b6:	bf38      	it	cc
 80041b8:	4613      	movcc	r3, r2
     This timings are configured by the HS2LP_TIME and LP2HS_TIME in the DSI Host Clock Lane Timer Configuration Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 80041ba:	6804      	ldr	r4, [r0, #0]
 80041bc:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 80041c0:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 80041c4:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 80041c8:	6804      	ldr	r4, [r0, #0]
 80041ca:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 80041ce:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 80041d2:	4313      	orrs	r3, r2
 80041d4:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 80041d8:	6802      	ldr	r2, [r0, #0]
 80041da:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 80041de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041e2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80041e6:	6804      	ldr	r4, [r0, #0]
 80041e8:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 80041ec:	690b      	ldr	r3, [r1, #16]
 80041ee:	68cd      	ldr	r5, [r1, #12]
 80041f0:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 80041f4:	688d      	ldr	r5, [r1, #8]
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80041f6:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 80041fa:	4313      	orrs	r3, r2
 80041fc:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 8004200:	6802      	ldr	r2, [r0, #0]
 8004202:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
 8004206:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800420a:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 800420e:	6802      	ldr	r2, [r0, #0]
 8004210:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
 8004214:	6949      	ldr	r1, [r1, #20]
 8004216:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800421a:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800421e:	2300      	movs	r3, #0
 8004220:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8004222:	4618      	mov	r0, r3
}
 8004224:	bc30      	pop	{r4, r5}
 8004226:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8004228:	2002      	movs	r0, #2
}
 800422a:	4770      	bx	lr

0800422c <HAL_DSI_ConfigHostTimeouts>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800422c:	7c03      	ldrb	r3, [r0, #16]
 800422e:	2b01      	cmp	r3, #1
 8004230:	d071      	beq.n	8004316 <HAL_DSI_ConfigHostTimeouts+0xea>
{
 8004232:	b430      	push	{r4, r5}
  __HAL_LOCK(hdsi);
 8004234:	2301      	movs	r3, #1
 8004236:	7403      	strb	r3, [r0, #16]

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8004238:	6802      	ldr	r2, [r0, #0]
 800423a:	6893      	ldr	r3, [r2, #8]
 800423c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004240:	6093      	str	r3, [r2, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8004242:	6802      	ldr	r2, [r0, #0]
 8004244:	6893      	ldr	r3, [r2, #8]
 8004246:	680c      	ldr	r4, [r1, #0]
 8004248:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 800424c:	6093      	str	r3, [r2, #8]

  /* High-speed transmission timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 800424e:	6802      	ldr	r2, [r0, #0]
 8004250:	6f93      	ldr	r3, [r2, #120]	; 0x78
 8004252:	b29b      	uxth	r3, r3
 8004254:	6793      	str	r3, [r2, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8004256:	6802      	ldr	r2, [r0, #0]
 8004258:	6f93      	ldr	r3, [r2, #120]	; 0x78
 800425a:	684c      	ldr	r4, [r1, #4]
 800425c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004260:	6793      	str	r3, [r2, #120]	; 0x78

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8004262:	6804      	ldr	r4, [r0, #0]
 8004264:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8004266:	4b2d      	ldr	r3, [pc, #180]	; (800431c <HAL_DSI_ConfigHostTimeouts+0xf0>)
 8004268:	401a      	ands	r2, r3
 800426a:	67a2      	str	r2, [r4, #120]	; 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 800426c:	6804      	ldr	r4, [r0, #0]
 800426e:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8004270:	688d      	ldr	r5, [r1, #8]
 8004272:	432a      	orrs	r2, r5
 8004274:	67a2      	str	r2, [r4, #120]	; 0x78

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8004276:	6804      	ldr	r4, [r0, #0]
 8004278:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800427a:	401a      	ands	r2, r3
 800427c:	67e2      	str	r2, [r4, #124]	; 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 800427e:	6804      	ldr	r4, [r0, #0]
 8004280:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8004282:	68cd      	ldr	r5, [r1, #12]
 8004284:	432a      	orrs	r2, r5
 8004286:	67e2      	str	r2, [r4, #124]	; 0x7c

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8004288:	6804      	ldr	r4, [r0, #0]
 800428a:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800428e:	401a      	ands	r2, r3
 8004290:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8004294:	6804      	ldr	r4, [r0, #0]
 8004296:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800429a:	690d      	ldr	r5, [r1, #16]
 800429c:	432a      	orrs	r2, r5
 800429e:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 80042a2:	6804      	ldr	r4, [r0, #0]
 80042a4:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80042a8:	401a      	ands	r2, r3
 80042aa:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 80042ae:	6804      	ldr	r4, [r0, #0]
 80042b0:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80042b4:	694d      	ldr	r5, [r1, #20]
 80042b6:	432a      	orrs	r2, r5
 80042b8:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 80042bc:	6804      	ldr	r4, [r0, #0]
 80042be:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80042c2:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80042c6:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 80042ca:	6804      	ldr	r4, [r0, #0]
 80042cc:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80042d0:	698d      	ldr	r5, [r1, #24]
 80042d2:	432a      	orrs	r2, r5
 80042d4:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 80042d8:	6804      	ldr	r4, [r0, #0]
 80042da:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 80042de:	401a      	ands	r2, r3
 80042e0:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 80042e4:	6804      	ldr	r4, [r0, #0]
 80042e6:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 80042ea:	69cd      	ldr	r5, [r1, #28]
 80042ec:	432a      	orrs	r2, r5
 80042ee:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 80042f2:	6804      	ldr	r4, [r0, #0]
 80042f4:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80042f8:	4013      	ands	r3, r2
 80042fa:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 80042fe:	6802      	ldr	r2, [r0, #0]
 8004300:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8004304:	6a09      	ldr	r1, [r1, #32]
 8004306:	430b      	orrs	r3, r1
 8004308:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800430c:	2300      	movs	r3, #0
 800430e:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8004310:	4618      	mov	r0, r3
}
 8004312:	bc30      	pop	{r4, r5}
 8004314:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8004316:	2002      	movs	r0, #2
}
 8004318:	4770      	bx	lr
 800431a:	bf00      	nop
 800431c:	ffff0000 	.word	0xffff0000

08004320 <HAL_DSI_SetLowPowerRXFilter>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8004320:	7c03      	ldrb	r3, [r0, #16]
 8004322:	2b01      	cmp	r3, #1
 8004324:	d013      	beq.n	800434e <HAL_DSI_SetLowPowerRXFilter+0x2e>
 8004326:	2301      	movs	r3, #1
 8004328:	7403      	strb	r3, [r0, #16]

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 800432a:	6802      	ldr	r2, [r0, #0]
 800432c:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
 8004330:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004334:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8004338:	6802      	ldr	r2, [r0, #0]
 800433a:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
 800433e:	ea43 6141 	orr.w	r1, r3, r1, lsl #25
 8004342:	f8c2 141c 	str.w	r1, [r2, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8004346:	2300      	movs	r3, #0
 8004348:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 800434a:	4618      	mov	r0, r3
 800434c:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800434e:	2002      	movs	r0, #2
}
 8004350:	4770      	bx	lr
	...

08004354 <ETH_SetMACConfig>:
/**
  * @}
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004354:	b430      	push	{r4, r5}
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8004356:	688b      	ldr	r3, [r1, #8]
              macconf->SourceAddrControl |
 8004358:	680a      	ldr	r2, [r1, #0]
  macregval =(macconf->InterPacketGapVal |
 800435a:	4313      	orrs	r3, r2
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 800435c:	790a      	ldrb	r2, [r1, #4]
              macconf->SourceAddrControl |
 800435e:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004362:	7b0a      	ldrb	r2, [r1, #12]
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8004364:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8004368:	7b4a      	ldrb	r2, [r1, #13]
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800436a:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800436e:	7b8a      	ldrb	r2, [r1, #14]
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8004370:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004374:	7bca      	ldrb	r2, [r1, #15]
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004376:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800437a:	7c0a      	ldrb	r2, [r1, #16]
 800437c:	2a00      	cmp	r2, #0
 800437e:	f040 80b0 	bne.w	80044e2 <ETH_SetMACConfig+0x18e>
 8004382:	f44f 2200 	mov.w	r2, #524288	; 0x80000
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004386:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004388:	7c4a      	ldrb	r2, [r1, #17]
 800438a:	2a00      	cmp	r2, #0
 800438c:	f040 80ab 	bne.w	80044e6 <ETH_SetMACConfig+0x192>
 8004390:	f44f 3200 	mov.w	r2, #131072	; 0x20000
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004394:	4313      	orrs	r3, r2
                              ((uint32_t)macconf->JumboPacket << 16) |
 8004396:	7c8a      	ldrb	r2, [r1, #18]
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004398:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                                macconf->Speed |
 800439c:	694a      	ldr	r2, [r1, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 800439e:	4313      	orrs	r3, r2
                                  macconf->DuplexMode |
 80043a0:	698a      	ldr	r2, [r1, #24]
                                macconf->Speed |
 80043a2:	4313      	orrs	r3, r2
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80043a4:	7f0a      	ldrb	r2, [r1, #28]
                                  macconf->DuplexMode |
 80043a6:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80043aa:	7f4a      	ldrb	r2, [r1, #29]
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80043ac:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80043b0:	7f8a      	ldrb	r2, [r1, #30]
 80043b2:	2a00      	cmp	r2, #0
 80043b4:	f040 8099 	bne.w	80044ea <ETH_SetMACConfig+0x196>
 80043b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80043bc:	4313      	orrs	r3, r2
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80043be:	7fca      	ldrb	r2, [r1, #31]
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80043c0:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80043c4:	f891 2020 	ldrb.w	r2, [r1, #32]
 80043c8:	2a00      	cmp	r2, #0
 80043ca:	f040 8090 	bne.w	80044ee <ETH_SetMACConfig+0x19a>
 80043ce:	f44f 7280 	mov.w	r2, #256	; 0x100
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80043d2:	4313      	orrs	r3, r2
                                              macconf->BackOffLimit |
 80043d4:	6a4a      	ldr	r2, [r1, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80043d6:	4313      	orrs	r3, r2
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 80043d8:	f891 2028 	ldrb.w	r2, [r1, #40]	; 0x28
                                              macconf->BackOffLimit |
 80043dc:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
                                                  macconf->PreambleLength);
 80043e0:	6aca      	ldr	r2, [r1, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 80043e2:	4313      	orrs	r3, r2

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80043e4:	6804      	ldr	r4, [r0, #0]
 80043e6:	6822      	ldr	r2, [r4, #0]
 80043e8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80043ec:	f422 027b 	bic.w	r2, r2, #16449536	; 0xfb0000
 80043f0:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 80043f4:	f022 027c 	bic.w	r2, r2, #124	; 0x7c
 80043f8:	4313      	orrs	r3, r2
 80043fa:	6023      	str	r3, [r4, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80043fc:	6bca      	ldr	r2, [r1, #60]	; 0x3c
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80043fe:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
 8004402:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8004404:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8004408:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 800440c:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8004410:	f891 2031 	ldrb.w	r2, [r1, #49]	; 0x31
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8004414:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8004418:	f891 2032 	ldrb.w	r2, [r1, #50]	; 0x32
 800441c:	2a00      	cmp	r2, #0
 800441e:	d168      	bne.n	80044f2 <ETH_SetMACConfig+0x19e>
 8004420:	f44f 3280 	mov.w	r2, #65536	; 0x10000
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8004424:	4313      	orrs	r3, r2
                       macconf->GiantPacketSizeLimit);
 8004426:	6b4a      	ldr	r2, [r1, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8004428:	4313      	orrs	r3, r2

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800442a:	6804      	ldr	r4, [r0, #0]
 800442c:	6862      	ldr	r2, [r4, #4]
 800442e:	f022 527c 	bic.w	r2, r2, #1056964608	; 0x3f000000
 8004432:	f422 22ef 	bic.w	r2, r2, #489472	; 0x77800
 8004436:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 800443a:	f022 0207 	bic.w	r2, r2, #7
 800443e:	4313      	orrs	r3, r2
 8004440:	6063      	str	r3, [r4, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004442:	f891 2040 	ldrb.w	r2, [r1, #64]	; 0x40
               macconf->WatchdogTimeout);
 8004446:	6c4b      	ldr	r3, [r1, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004448:	ea43 2202 	orr.w	r2, r3, r2, lsl #8

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800444c:	6804      	ldr	r4, [r0, #0]
 800444e:	68e5      	ldr	r5, [r4, #12]
 8004450:	4b2b      	ldr	r3, [pc, #172]	; (8004500 <ETH_SetMACConfig+0x1ac>)
 8004452:	402b      	ands	r3, r5
 8004454:	4313      	orrs	r3, r2
 8004456:	60e3      	str	r3, [r4, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004458:	f891 2054 	ldrb.w	r2, [r1, #84]	; 0x54
               macconf->PauseLowThreshold |
 800445c:	6d0b      	ldr	r3, [r1, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800445e:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8004462:	f891 204c 	ldrb.w	r2, [r1, #76]	; 0x4c
 8004466:	2a00      	cmp	r2, #0
 8004468:	d145      	bne.n	80044f6 <ETH_SetMACConfig+0x1a2>
 800446a:	2280      	movs	r2, #128	; 0x80
               macconf->PauseLowThreshold |
 800446c:	4313      	orrs	r3, r2
                   (macconf->PauseTime << 16));
 800446e:	6c8a      	ldr	r2, [r1, #72]	; 0x48
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004470:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8004474:	6804      	ldr	r4, [r0, #0]
 8004476:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8004478:	f022 02f2 	bic.w	r2, r2, #242	; 0xf2
 800447c:	0412      	lsls	r2, r2, #16
 800447e:	0c12      	lsrs	r2, r2, #16
 8004480:	4313      	orrs	r3, r2
 8004482:	6723      	str	r3, [r4, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004484:	f891 3056 	ldrb.w	r3, [r1, #86]	; 0x56
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8004488:	f891 2055 	ldrb.w	r2, [r1, #85]	; 0x55
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800448c:	ea43 0242 	orr.w	r2, r3, r2, lsl #1

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8004490:	6804      	ldr	r4, [r0, #0]
 8004492:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8004496:	f023 0303 	bic.w	r3, r3, #3
 800449a:	4313      	orrs	r3, r2
 800449c:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80044a0:	6802      	ldr	r2, [r0, #0]
 80044a2:	f8d2 3d00 	ldr.w	r3, [r2, #3328]	; 0xd00
 80044a6:	f023 0372 	bic.w	r3, r3, #114	; 0x72
 80044aa:	6d8c      	ldr	r4, [r1, #88]	; 0x58
 80044ac:	4323      	orrs	r3, r4
 80044ae:	f8c2 3d00 	str.w	r3, [r2, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80044b2:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80044b4:	f891 2060 	ldrb.w	r2, [r1, #96]	; 0x60
 80044b8:	b1fa      	cbz	r2, 80044fa <ETH_SetMACConfig+0x1a6>
 80044ba:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80044bc:	4313      	orrs	r3, r2
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80044be:	f891 2061 	ldrb.w	r2, [r1, #97]	; 0x61
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80044c2:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80044c6:	f891 2062 	ldrb.w	r2, [r1, #98]	; 0x62
  macregval = (macconf->ReceiveQueueMode |
 80044ca:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80044ce:	6801      	ldr	r1, [r0, #0]
 80044d0:	f8d1 2d30 	ldr.w	r2, [r1, #3376]	; 0xd30
 80044d4:	f022 027b 	bic.w	r2, r2, #123	; 0x7b
 80044d8:	4313      	orrs	r3, r2
 80044da:	f8c1 3d30 	str.w	r3, [r1, #3376]	; 0xd30
}
 80044de:	bc30      	pop	{r4, r5}
 80044e0:	4770      	bx	lr
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80044e2:	2200      	movs	r2, #0
 80044e4:	e74f      	b.n	8004386 <ETH_SetMACConfig+0x32>
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80044e6:	2200      	movs	r2, #0
 80044e8:	e754      	b.n	8004394 <ETH_SetMACConfig+0x40>
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80044ea:	2200      	movs	r2, #0
 80044ec:	e766      	b.n	80043bc <ETH_SetMACConfig+0x68>
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80044ee:	2200      	movs	r2, #0
 80044f0:	e76f      	b.n	80043d2 <ETH_SetMACConfig+0x7e>
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 80044f2:	2200      	movs	r2, #0
 80044f4:	e796      	b.n	8004424 <ETH_SetMACConfig+0xd0>
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 80044f6:	2200      	movs	r2, #0
 80044f8:	e7b8      	b.n	800446c <ETH_SetMACConfig+0x118>
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80044fa:	2240      	movs	r2, #64	; 0x40
 80044fc:	e7de      	b.n	80044bc <ETH_SetMACConfig+0x168>
 80044fe:	bf00      	nop
 8004500:	fffffef0 	.word	0xfffffef0

08004504 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8004504:	b470      	push	{r4, r5, r6}
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8004506:	6802      	ldr	r2, [r0, #0]
 8004508:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800450c:	6814      	ldr	r4, [r2, #0]
 800450e:	4b1e      	ldr	r3, [pc, #120]	; (8004588 <ETH_SetDMAConfig+0x84>)
 8004510:	4023      	ands	r3, r4
 8004512:	680c      	ldr	r4, [r1, #0]
 8004514:	4323      	orrs	r3, r4
 8004516:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004518:	790a      	ldrb	r2, [r1, #4]
               dmaconf->BurstMode |
 800451a:	688b      	ldr	r3, [r1, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800451c:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8004520:	7b0a      	ldrb	r2, [r1, #12]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004522:	ea43 32c2 	orr.w	r2, r3, r2, lsl #15

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8004526:	6805      	ldr	r5, [r0, #0]
 8004528:	f241 0404 	movw	r4, #4100	; 0x1004
 800452c:	592e      	ldr	r6, [r5, r4]
 800452e:	4b17      	ldr	r3, [pc, #92]	; (800458c <ETH_SetDMAConfig+0x88>)
 8004530:	4033      	ands	r3, r6
 8004532:	4313      	orrs	r3, r2
 8004534:	512b      	str	r3, [r5, r4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004536:	7b4c      	ldrb	r4, [r1, #13]
               dmaconf->MaximumSegmentSize);
 8004538:	6a0b      	ldr	r3, [r1, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800453a:	ea43 4404 	orr.w	r4, r3, r4, lsl #16

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800453e:	6802      	ldr	r2, [r0, #0]
 8004540:	f502 5288 	add.w	r2, r2, #4352	; 0x1100
 8004544:	6815      	ldr	r5, [r2, #0]
 8004546:	4b12      	ldr	r3, [pc, #72]	; (8004590 <ETH_SetDMAConfig+0x8c>)
 8004548:	402b      	ands	r3, r5
 800454a:	4323      	orrs	r3, r4
 800454c:	6013      	str	r3, [r2, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800454e:	690b      	ldr	r3, [r1, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8004550:	7d0a      	ldrb	r2, [r1, #20]
  dmaregval = (dmaconf->TxDMABurstLength |
 8004552:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8004556:	7f4a      	ldrb	r2, [r1, #29]
  dmaregval = (dmaconf->TxDMABurstLength |
 8004558:	ea43 3202 	orr.w	r2, r3, r2, lsl #12

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800455c:	6805      	ldr	r5, [r0, #0]
 800455e:	f241 1404 	movw	r4, #4356	; 0x1104
 8004562:	592e      	ldr	r6, [r5, r4]
 8004564:	4b0b      	ldr	r3, [pc, #44]	; (8004594 <ETH_SetDMAConfig+0x90>)
 8004566:	4033      	ands	r3, r6
 8004568:	4313      	orrs	r3, r2
 800456a:	512b      	str	r3, [r5, r4]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800456c:	7f0a      	ldrb	r2, [r1, #28]
               dmaconf->RxDMABurstLength);
 800456e:	698b      	ldr	r3, [r1, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004570:	ea43 72c2 	orr.w	r2, r3, r2, lsl #31

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8004574:	6800      	ldr	r0, [r0, #0]
 8004576:	f241 1108 	movw	r1, #4360	; 0x1108
 800457a:	5844      	ldr	r4, [r0, r1]
 800457c:	4b06      	ldr	r3, [pc, #24]	; (8004598 <ETH_SetDMAConfig+0x94>)
 800457e:	4023      	ands	r3, r4
 8004580:	4313      	orrs	r3, r2
 8004582:	5043      	str	r3, [r0, r1]
}
 8004584:	bc70      	pop	{r4, r5, r6}
 8004586:	4770      	bx	lr
 8004588:	ffff87fd 	.word	0xffff87fd
 800458c:	ffff2ffe 	.word	0xffff2ffe
 8004590:	fffec000 	.word	0xfffec000
 8004594:	ffc0efef 	.word	0xffc0efef
 8004598:	7fc0ffff 	.word	0x7fc0ffff

0800459c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800459c:	b570      	push	{r4, r5, r6, lr}
 800459e:	b0a2      	sub	sp, #136	; 0x88
 80045a0:	4606      	mov	r6, r0
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80045a2:	2501      	movs	r5, #1
 80045a4:	f88d 5033 	strb.w	r5, [sp, #51]	; 0x33
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80045a8:	2400      	movs	r4, #0
 80045aa:	9412      	str	r4, [sp, #72]	; 0x48
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80045ac:	f88d 4041 	strb.w	r4, [sp, #65]	; 0x41
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80045b0:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
  macDefaultConf.ChecksumOffload = ENABLE;
 80045b4:	f88d 5028 	strb.w	r5, [sp, #40]	; 0x28
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80045b8:	f88d 5056 	strb.w	r5, [sp, #86]	; 0x56
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80045bc:	f88d 5032 	strb.w	r5, [sp, #50]	; 0x32
  macDefaultConf.DeferralCheck = DISABLE;
 80045c0:	f88d 404c 	strb.w	r4, [sp, #76]	; 0x4c
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80045c4:	f88d 5084 	strb.w	r5, [sp, #132]	; 0x84
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80045c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80045cc:	930f      	str	r3, [sp, #60]	; 0x3c
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80045ce:	f88d 405c 	strb.w	r4, [sp, #92]	; 0x5c
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80045d2:	9418      	str	r4, [sp, #96]	; 0x60
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80045d4:	f88d 4085 	strb.w	r4, [sp, #133]	; 0x85
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80045d8:	f88d 4086 	strb.w	r4, [sp, #134]	; 0x86
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80045dc:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80045e0:	9316      	str	r3, [sp, #88]	; 0x58
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80045e2:	f88d 4030 	strb.w	r4, [sp, #48]	; 0x30
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80045e6:	940b      	str	r4, [sp, #44]	; 0x2c
  macDefaultConf.Jabber = ENABLE;
 80045e8:	f88d 5035 	strb.w	r5, [sp, #53]	; 0x35
  macDefaultConf.JumboPacket = DISABLE;
 80045ec:	f88d 4036 	strb.w	r4, [sp, #54]	; 0x36
  macDefaultConf.LoopbackMode = DISABLE;
 80045f0:	f88d 4040 	strb.w	r4, [sp, #64]	; 0x40
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80045f4:	941d      	str	r4, [sp, #116]	; 0x74
  macDefaultConf.PauseTime = 0x0;
 80045f6:	941b      	str	r4, [sp, #108]	; 0x6c
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80045f8:	9414      	str	r4, [sp, #80]	; 0x50
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80045fa:	f88d 4064 	strb.w	r4, [sp, #100]	; 0x64
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80045fe:	f88d 407a 	strb.w	r4, [sp, #122]	; 0x7a
  macDefaultConf.ReceiveOwn = ENABLE;
 8004602:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8004606:	2320      	movs	r3, #32
 8004608:	9320      	str	r3, [sp, #128]	; 0x80
  macDefaultConf.RetryTransmission = ENABLE;
 800460a:	f88d 5044 	strb.w	r5, [sp, #68]	; 0x44
  macDefaultConf.SlowProtocolDetect = DISABLE;
 800460e:	f88d 4055 	strb.w	r4, [sp, #85]	; 0x55
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8004612:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8004616:	9309      	str	r3, [sp, #36]	; 0x24
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004618:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800461c:	930e      	str	r3, [sp, #56]	; 0x38
  macDefaultConf.Support2KPacket = DISABLE;
 800461e:	f88d 4031 	strb.w	r4, [sp, #49]	; 0x31
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8004622:	2302      	movs	r3, #2
 8004624:	931f      	str	r3, [sp, #124]	; 0x7c
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004626:	f88d 4078 	strb.w	r4, [sp, #120]	; 0x78
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800462a:	f88d 4079 	strb.w	r4, [sp, #121]	; 0x79
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800462e:	f88d 4054 	strb.w	r4, [sp, #84]	; 0x54
  macDefaultConf.Watchdog = ENABLE;
 8004632:	f88d 5034 	strb.w	r5, [sp, #52]	; 0x34
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8004636:	941a      	str	r4, [sp, #104]	; 0x68
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8004638:	f88d 5070 	strb.w	r5, [sp, #112]	; 0x70

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800463c:	a909      	add	r1, sp, #36	; 0x24
 800463e:	f7ff fe89 	bl	8004354 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004642:	f88d 5004 	strb.w	r5, [sp, #4]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004646:	9502      	str	r5, [sp, #8]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8004648:	9400      	str	r4, [sp, #0]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800464a:	f88d 401c 	strb.w	r4, [sp, #28]
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800464e:	f88d 400d 	strb.w	r4, [sp, #13]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8004652:	f88d 400c 	strb.w	r4, [sp, #12]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004656:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800465a:	9306      	str	r3, [sp, #24]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800465c:	f88d 4014 	strb.w	r4, [sp, #20]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004660:	9304      	str	r3, [sp, #16]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8004662:	f88d 401d 	strb.w	r4, [sp, #29]
  dmaDefaultConf.MaximumSegmentSize = 536;
 8004666:	f44f 7306 	mov.w	r3, #536	; 0x218
 800466a:	9308      	str	r3, [sp, #32]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800466c:	4669      	mov	r1, sp
 800466e:	4630      	mov	r0, r6
 8004670:	f7ff ff48 	bl	8004504 <ETH_SetDMAConfig>
}
 8004674:	b022      	add	sp, #136	; 0x88
 8004676:	bd70      	pop	{r4, r5, r6, pc}

08004678 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004678:	b430      	push	{r4, r5}
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800467a:	2300      	movs	r3, #0
 800467c:	e00d      	b.n	800469a <ETH_DMATxDescListInit+0x22>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800467e:	68c5      	ldr	r5, [r0, #12]
 8004680:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8004684:	00d4      	lsls	r4, r2, #3
 8004686:	192a      	adds	r2, r5, r4

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004688:	2100      	movs	r1, #0
 800468a:	5129      	str	r1, [r5, r4]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800468c:	6051      	str	r1, [r2, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800468e:	6091      	str	r1, [r2, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004690:	60d1      	str	r1, [r2, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004692:	1d99      	adds	r1, r3, #6
 8004694:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004698:	3301      	adds	r3, #1
 800469a:	2b03      	cmp	r3, #3
 800469c:	d9ef      	bls.n	800467e <ETH_DMATxDescListInit+0x6>
  }

  heth->TxDescList.CurTxDesc = 0;
 800469e:	2300      	movs	r3, #0
 80046a0:	6283      	str	r3, [r0, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 80046a2:	6802      	ldr	r2, [r0, #0]
 80046a4:	f241 132c 	movw	r3, #4396	; 0x112c
 80046a8:	2103      	movs	r1, #3
 80046aa:	50d1      	str	r1, [r2, r3]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80046ac:	68c1      	ldr	r1, [r0, #12]
 80046ae:	6802      	ldr	r2, [r0, #0]
 80046b0:	f241 1314 	movw	r3, #4372	; 0x1114
 80046b4:	50d1      	str	r1, [r2, r3]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80046b6:	68c2      	ldr	r2, [r0, #12]
 80046b8:	6803      	ldr	r3, [r0, #0]
 80046ba:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 80046be:	601a      	str	r2, [r3, #0]
}
 80046c0:	bc30      	pop	{r4, r5}
 80046c2:	4770      	bx	lr

080046c4 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80046c4:	b430      	push	{r4, r5}
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80046c6:	2100      	movs	r1, #0
 80046c8:	e011      	b.n	80046ee <ETH_DMARxDescListInit+0x2a>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80046ca:	6905      	ldr	r5, [r0, #16]
 80046cc:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 80046d0:	00dc      	lsls	r4, r3, #3
 80046d2:	192b      	adds	r3, r5, r4

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80046d4:	2200      	movs	r2, #0
 80046d6:	512a      	str	r2, [r5, r4]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80046d8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80046da:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80046dc:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80046de:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80046e0:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80046e2:	f101 020a 	add.w	r2, r1, #10
 80046e6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80046ea:	6053      	str	r3, [r2, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80046ec:	3101      	adds	r1, #1
 80046ee:	2903      	cmp	r1, #3
 80046f0:	d9eb      	bls.n	80046ca <ETH_DMARxDescListInit+0x6>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 80046f2:	2300      	movs	r3, #0
 80046f4:	63c3      	str	r3, [r0, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 80046f6:	6403      	str	r3, [r0, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 80046f8:	6443      	str	r3, [r0, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80046fa:	64c3      	str	r3, [r0, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 80046fc:	6483      	str	r3, [r0, #72]	; 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 80046fe:	6802      	ldr	r2, [r0, #0]
 8004700:	f241 1330 	movw	r3, #4400	; 0x1130
 8004704:	2103      	movs	r1, #3
 8004706:	50d1      	str	r1, [r2, r3]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8004708:	6901      	ldr	r1, [r0, #16]
 800470a:	6802      	ldr	r2, [r0, #0]
 800470c:	f241 131c 	movw	r3, #4380	; 0x111c
 8004710:	50d1      	str	r1, [r2, r3]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (((uint32_t)(ETH_RX_DESC_CNT - 1))*sizeof(ETH_DMADescTypeDef)))));
 8004712:	6903      	ldr	r3, [r0, #16]
 8004714:	f503 63d8 	add.w	r3, r3, #1728	; 0x6c0
 8004718:	6801      	ldr	r1, [r0, #0]
 800471a:	f241 1228 	movw	r2, #4392	; 0x1128
 800471e:	508b      	str	r3, [r1, r2]
}
 8004720:	bc30      	pop	{r4, r5}
 8004722:	4770      	bx	lr

08004724 <ETH_MAC_MDIO_ClkConfig>:
{
 8004724:	b538      	push	{r3, r4, r5, lr}
 8004726:	4605      	mov	r5, r0
  tmpreg = (heth->Instance)->MACMDIOAR;
 8004728:	6803      	ldr	r3, [r0, #0]
 800472a:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800472e:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
  hclk = HAL_RCC_GetHCLKFreq();
 8004732:	f001 facb 	bl	8005ccc <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8004736:	4b11      	ldr	r3, [pc, #68]	; (800477c <ETH_MAC_MDIO_ClkConfig+0x58>)
 8004738:	4403      	add	r3, r0
 800473a:	4a11      	ldr	r2, [pc, #68]	; (8004780 <ETH_MAC_MDIO_ClkConfig+0x5c>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d911      	bls.n	8004764 <ETH_MAC_MDIO_ClkConfig+0x40>
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8004740:	4b10      	ldr	r3, [pc, #64]	; (8004784 <ETH_MAC_MDIO_ClkConfig+0x60>)
 8004742:	4403      	add	r3, r0
 8004744:	4a10      	ldr	r2, [pc, #64]	; (8004788 <ETH_MAC_MDIO_ClkConfig+0x64>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d912      	bls.n	8004770 <ETH_MAC_MDIO_ClkConfig+0x4c>
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 800474a:	4b10      	ldr	r3, [pc, #64]	; (800478c <ETH_MAC_MDIO_ClkConfig+0x68>)
 800474c:	4403      	add	r3, r0
 800474e:	4a10      	ldr	r2, [pc, #64]	; (8004790 <ETH_MAC_MDIO_ClkConfig+0x6c>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d909      	bls.n	8004768 <ETH_MAC_MDIO_ClkConfig+0x44>
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8004754:	4b0f      	ldr	r3, [pc, #60]	; (8004794 <ETH_MAC_MDIO_ClkConfig+0x70>)
 8004756:	4403      	add	r3, r0
 8004758:	4a0f      	ldr	r2, [pc, #60]	; (8004798 <ETH_MAC_MDIO_ClkConfig+0x74>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d90b      	bls.n	8004776 <ETH_MAC_MDIO_ClkConfig+0x52>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800475e:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 8004762:	e001      	b.n	8004768 <ETH_MAC_MDIO_ClkConfig+0x44>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8004764:	f444 7400 	orr.w	r4, r4, #512	; 0x200
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8004768:	682b      	ldr	r3, [r5, #0]
 800476a:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
}
 800476e:	bd38      	pop	{r3, r4, r5, pc}
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8004770:	f444 7440 	orr.w	r4, r4, #768	; 0x300
 8004774:	e7f8      	b.n	8004768 <ETH_MAC_MDIO_ClkConfig+0x44>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8004776:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 800477a:	e7f5      	b.n	8004768 <ETH_MAC_MDIO_ClkConfig+0x44>
 800477c:	feced300 	.word	0xfeced300
 8004780:	00e4e1bf 	.word	0x00e4e1bf
 8004784:	fde9f140 	.word	0xfde9f140
 8004788:	017d783f 	.word	0x017d783f
 800478c:	fc6c7900 	.word	0xfc6c7900
 8004790:	026259ff 	.word	0x026259ff
 8004794:	fa0a1f00 	.word	0xfa0a1f00
 8004798:	02faf07f 	.word	0x02faf07f

0800479c <HAL_ETH_Init>:
  if(heth == NULL)
 800479c:	2800      	cmp	r0, #0
 800479e:	f000 808c 	beq.w	80048ba <HAL_ETH_Init+0x11e>
{
 80047a2:	b530      	push	{r4, r5, lr}
 80047a4:	b083      	sub	sp, #12
 80047a6:	4604      	mov	r4, r0
  if(heth->gState == HAL_ETH_STATE_RESET)
 80047a8:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80047aa:	b38b      	cbz	r3, 8004810 <HAL_ETH_Init+0x74>
  heth->gState = HAL_ETH_STATE_BUSY;
 80047ac:	2323      	movs	r3, #35	; 0x23
 80047ae:	6563      	str	r3, [r4, #84]	; 0x54
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047b0:	4b43      	ldr	r3, [pc, #268]	; (80048c0 <HAL_ETH_Init+0x124>)
 80047b2:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 80047b6:	f042 0202 	orr.w	r2, r2, #2
 80047ba:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 80047be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80047c2:	f003 0302 	and.w	r3, r3, #2
 80047c6:	9301      	str	r3, [sp, #4]
 80047c8:	9b01      	ldr	r3, [sp, #4]
  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80047ca:	7a23      	ldrb	r3, [r4, #8]
 80047cc:	bb1b      	cbnz	r3, 8004816 <HAL_ETH_Init+0x7a>
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80047ce:	2000      	movs	r0, #0
 80047d0:	f7fd ffe0 	bl	8002794 <HAL_SYSCFG_ETHInterfaceSelect>
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80047d4:	6823      	ldr	r3, [r4, #0]
 80047d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	f042 0201 	orr.w	r2, r2, #1
 80047e0:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80047e2:	f7fd ffb7 	bl	8002754 <HAL_GetTick>
 80047e6:	4605      	mov	r5, r0
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80047e8:	6823      	ldr	r3, [r4, #0]
 80047ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f013 0f01 	tst.w	r3, #1
 80047f4:	d014      	beq.n	8004820 <HAL_ETH_Init+0x84>
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 80047f6:	f7fd ffad 	bl	8002754 <HAL_GetTick>
 80047fa:	1b40      	subs	r0, r0, r5
 80047fc:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8004800:	d9f2      	bls.n	80047e8 <HAL_ETH_Init+0x4c>
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004802:	2304      	movs	r3, #4
 8004804:	65e3      	str	r3, [r4, #92]	; 0x5c
      heth->gState = HAL_ETH_STATE_ERROR;
 8004806:	23e0      	movs	r3, #224	; 0xe0
 8004808:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_ERROR;
 800480a:	2001      	movs	r0, #1
}
 800480c:	b003      	add	sp, #12
 800480e:	bd30      	pop	{r4, r5, pc}
    HAL_ETH_MspInit(heth);
 8004810:	f7fd f8fa 	bl	8001a08 <HAL_ETH_MspInit>
 8004814:	e7ca      	b.n	80047ac <HAL_ETH_Init+0x10>
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8004816:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800481a:	f7fd ffbb 	bl	8002794 <HAL_SYSCFG_ETHInterfaceSelect>
 800481e:	e7d9      	b.n	80047d4 <HAL_ETH_Init+0x38>
  ETH_MAC_MDIO_ClkConfig(heth);
 8004820:	4620      	mov	r0, r4
 8004822:	f7ff ff7f 	bl	8004724 <ETH_MAC_MDIO_ClkConfig>
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8004826:	f001 fa51 	bl	8005ccc <HAL_RCC_GetHCLKFreq>
 800482a:	4b26      	ldr	r3, [pc, #152]	; (80048c4 <HAL_ETH_Init+0x128>)
 800482c:	fba3 2300 	umull	r2, r3, r3, r0
 8004830:	0c9b      	lsrs	r3, r3, #18
 8004832:	6822      	ldr	r2, [r4, #0]
 8004834:	3b01      	subs	r3, #1
 8004836:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
  ETH_MACDMAConfig(heth);
 800483a:	4620      	mov	r0, r4
 800483c:	f7ff feae 	bl	800459c <ETH_MACDMAConfig>
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8004840:	6822      	ldr	r2, [r4, #0]
 8004842:	f502 5288 	add.w	r2, r2, #4352	; 0x1100
 8004846:	6813      	ldr	r3, [r2, #0]
 8004848:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 800484c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004850:	6013      	str	r3, [r2, #0]
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8004852:	6963      	ldr	r3, [r4, #20]
 8004854:	f013 0f03 	tst.w	r3, #3
 8004858:	d004      	beq.n	8004864 <HAL_ETH_Init+0xc8>
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800485a:	2001      	movs	r0, #1
 800485c:	65e0      	str	r0, [r4, #92]	; 0x5c
    heth->gState = HAL_ETH_STATE_ERROR;
 800485e:	23e0      	movs	r3, #224	; 0xe0
 8004860:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_ERROR;
 8004862:	e7d3      	b.n	800480c <HAL_ETH_Init+0x70>
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8004864:	6820      	ldr	r0, [r4, #0]
 8004866:	f241 1108 	movw	r1, #4360	; 0x1108
 800486a:	5845      	ldr	r5, [r0, r1]
 800486c:	4a16      	ldr	r2, [pc, #88]	; (80048c8 <HAL_ETH_Init+0x12c>)
 800486e:	402a      	ands	r2, r5
 8004870:	ea42 0343 	orr.w	r3, r2, r3, lsl #1
 8004874:	5043      	str	r3, [r0, r1]
  ETH_DMATxDescListInit(heth);
 8004876:	4620      	mov	r0, r4
 8004878:	f7ff fefe 	bl	8004678 <ETH_DMATxDescListInit>
  ETH_DMARxDescListInit(heth);
 800487c:	4620      	mov	r0, r4
 800487e:	f7ff ff21 	bl	80046c4 <ETH_DMARxDescListInit>
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8004882:	6862      	ldr	r2, [r4, #4]
 8004884:	7951      	ldrb	r1, [r2, #5]
 8004886:	7913      	ldrb	r3, [r2, #4]
 8004888:	6822      	ldr	r2, [r4, #0]
 800488a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800488e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004892:	6862      	ldr	r2, [r4, #4]
 8004894:	78d1      	ldrb	r1, [r2, #3]
 8004896:	7893      	ldrb	r3, [r2, #2]
 8004898:	041b      	lsls	r3, r3, #16
 800489a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800489e:	7851      	ldrb	r1, [r2, #1]
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80048a0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80048a4:	7811      	ldrb	r1, [r2, #0]
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80048a6:	6822      	ldr	r2, [r4, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80048a8:	430b      	orrs	r3, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80048aa:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80048ae:	2000      	movs	r0, #0
 80048b0:	65e0      	str	r0, [r4, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 80048b2:	2310      	movs	r3, #16
 80048b4:	6563      	str	r3, [r4, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 80048b6:	65a3      	str	r3, [r4, #88]	; 0x58
  return HAL_OK;
 80048b8:	e7a8      	b.n	800480c <HAL_ETH_Init+0x70>
    return HAL_ERROR;
 80048ba:	2001      	movs	r0, #1
}
 80048bc:	4770      	bx	lr
 80048be:	bf00      	nop
 80048c0:	58024400 	.word	0x58024400
 80048c4:	431bde83 	.word	0x431bde83
 80048c8:	ffff8001 	.word	0xffff8001

080048cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80048cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048ce:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 80048d0:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80048d2:	e03a      	b.n	800494a <HAL_GPIO_Init+0x7e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80048d4:	2409      	movs	r4, #9
 80048d6:	e000      	b.n	80048da <HAL_GPIO_Init+0xe>
 80048d8:	2400      	movs	r4, #0
 80048da:	40b4      	lsls	r4, r6
 80048dc:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80048de:	3502      	adds	r5, #2
 80048e0:	4e6e      	ldr	r6, [pc, #440]	; (8004a9c <HAL_GPIO_Init+0x1d0>)
 80048e2:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80048e6:	4c6e      	ldr	r4, [pc, #440]	; (8004aa0 <HAL_GPIO_Init+0x1d4>)
 80048e8:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 80048ea:	43d4      	mvns	r4, r2
 80048ec:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80048f0:	684f      	ldr	r7, [r1, #4]
 80048f2:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 80048f6:	d001      	beq.n	80048fc <HAL_GPIO_Init+0x30>
        {
          temp |= iocurrent;
 80048f8:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80048fc:	4d68      	ldr	r5, [pc, #416]	; (8004aa0 <HAL_GPIO_Init+0x1d4>)
 80048fe:	602e      	str	r6, [r5, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8004900:	686e      	ldr	r6, [r5, #4]
        temp &= ~(iocurrent);
 8004902:	ea04 0506 	and.w	r5, r4, r6
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004906:	684f      	ldr	r7, [r1, #4]
 8004908:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 800490c:	d001      	beq.n	8004912 <HAL_GPIO_Init+0x46>
        {
          temp |= iocurrent;
 800490e:	ea42 0506 	orr.w	r5, r2, r6
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004912:	4e63      	ldr	r6, [pc, #396]	; (8004aa0 <HAL_GPIO_Init+0x1d4>)
 8004914:	6075      	str	r5, [r6, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004916:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 800491a:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 800491c:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004920:	684f      	ldr	r7, [r1, #4]
 8004922:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8004926:	d001      	beq.n	800492c <HAL_GPIO_Init+0x60>
        {
          temp |= iocurrent;
 8004928:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 800492c:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8004930:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 8004932:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8004934:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004936:	684e      	ldr	r6, [r1, #4]
 8004938:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 800493c:	d001      	beq.n	8004942 <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 800493e:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR1 = temp;
 8004942:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004946:	6054      	str	r4, [r2, #4]
      }
    }

    position++;
 8004948:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800494a:	680a      	ldr	r2, [r1, #0]
 800494c:	fa32 f403 	lsrs.w	r4, r2, r3
 8004950:	f000 80a2 	beq.w	8004a98 <HAL_GPIO_Init+0x1cc>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004954:	2401      	movs	r4, #1
 8004956:	409c      	lsls	r4, r3
    if (iocurrent != 0x00U)
 8004958:	4022      	ands	r2, r4
 800495a:	d0f5      	beq.n	8004948 <HAL_GPIO_Init+0x7c>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800495c:	684d      	ldr	r5, [r1, #4]
 800495e:	1e6e      	subs	r6, r5, #1
 8004960:	2d11      	cmp	r5, #17
 8004962:	bf18      	it	ne
 8004964:	2e01      	cmpne	r6, #1
 8004966:	d901      	bls.n	800496c <HAL_GPIO_Init+0xa0>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004968:	2d12      	cmp	r5, #18
 800496a:	d112      	bne.n	8004992 <HAL_GPIO_Init+0xc6>
        temp = GPIOx->OSPEEDR;
 800496c:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800496e:	005f      	lsls	r7, r3, #1
 8004970:	2503      	movs	r5, #3
 8004972:	40bd      	lsls	r5, r7
 8004974:	ea26 0605 	bic.w	r6, r6, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004978:	68cd      	ldr	r5, [r1, #12]
 800497a:	40bd      	lsls	r5, r7
 800497c:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 800497e:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 8004980:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004982:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004986:	684d      	ldr	r5, [r1, #4]
 8004988:	f3c5 1400 	ubfx	r4, r5, #4, #1
 800498c:	409c      	lsls	r4, r3
 800498e:	4334      	orrs	r4, r6
        GPIOx->OTYPER = temp;
 8004990:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 8004992:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004994:	005f      	lsls	r7, r3, #1
 8004996:	2503      	movs	r5, #3
 8004998:	40bd      	lsls	r5, r7
 800499a:	43ec      	mvns	r4, r5
 800499c:	4026      	ands	r6, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800499e:	688d      	ldr	r5, [r1, #8]
 80049a0:	40bd      	lsls	r5, r7
 80049a2:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 80049a4:	60c5      	str	r5, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80049a6:	684d      	ldr	r5, [r1, #4]
 80049a8:	2d12      	cmp	r5, #18
 80049aa:	bf18      	it	ne
 80049ac:	2d02      	cmpne	r5, #2
 80049ae:	d113      	bne.n	80049d8 <HAL_GPIO_Init+0x10c>
        temp = GPIOx->AFR[position >> 3U];
 80049b0:	08de      	lsrs	r6, r3, #3
 80049b2:	3608      	adds	r6, #8
 80049b4:	f850 e026 	ldr.w	lr, [r0, r6, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80049b8:	f003 0507 	and.w	r5, r3, #7
 80049bc:	ea4f 0c85 	mov.w	ip, r5, lsl #2
 80049c0:	250f      	movs	r5, #15
 80049c2:	fa05 f50c 	lsl.w	r5, r5, ip
 80049c6:	ea2e 0e05 	bic.w	lr, lr, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80049ca:	690d      	ldr	r5, [r1, #16]
 80049cc:	fa05 f50c 	lsl.w	r5, r5, ip
 80049d0:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 80049d4:	f840 5026 	str.w	r5, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 80049d8:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80049da:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80049dc:	684c      	ldr	r4, [r1, #4]
 80049de:	f004 0403 	and.w	r4, r4, #3
 80049e2:	40bc      	lsls	r4, r7
 80049e4:	432c      	orrs	r4, r5
      GPIOx->MODER = temp;
 80049e6:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80049e8:	684c      	ldr	r4, [r1, #4]
 80049ea:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 80049ee:	d0ab      	beq.n	8004948 <HAL_GPIO_Init+0x7c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049f0:	4c2c      	ldr	r4, [pc, #176]	; (8004aa4 <HAL_GPIO_Init+0x1d8>)
 80049f2:	f8d4 50f4 	ldr.w	r5, [r4, #244]	; 0xf4
 80049f6:	f045 0502 	orr.w	r5, r5, #2
 80049fa:	f8c4 50f4 	str.w	r5, [r4, #244]	; 0xf4
 80049fe:	f8d4 40f4 	ldr.w	r4, [r4, #244]	; 0xf4
 8004a02:	f004 0402 	and.w	r4, r4, #2
 8004a06:	9401      	str	r4, [sp, #4]
 8004a08:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8004a0a:	089d      	lsrs	r5, r3, #2
 8004a0c:	1cae      	adds	r6, r5, #2
 8004a0e:	4c23      	ldr	r4, [pc, #140]	; (8004a9c <HAL_GPIO_Init+0x1d0>)
 8004a10:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004a14:	f003 0403 	and.w	r4, r3, #3
 8004a18:	00a6      	lsls	r6, r4, #2
 8004a1a:	240f      	movs	r4, #15
 8004a1c:	40b4      	lsls	r4, r6
 8004a1e:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004a22:	4c21      	ldr	r4, [pc, #132]	; (8004aa8 <HAL_GPIO_Init+0x1dc>)
 8004a24:	42a0      	cmp	r0, r4
 8004a26:	f43f af57 	beq.w	80048d8 <HAL_GPIO_Init+0xc>
 8004a2a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004a2e:	42a0      	cmp	r0, r4
 8004a30:	d022      	beq.n	8004a78 <HAL_GPIO_Init+0x1ac>
 8004a32:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004a36:	42a0      	cmp	r0, r4
 8004a38:	d020      	beq.n	8004a7c <HAL_GPIO_Init+0x1b0>
 8004a3a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004a3e:	42a0      	cmp	r0, r4
 8004a40:	d01e      	beq.n	8004a80 <HAL_GPIO_Init+0x1b4>
 8004a42:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004a46:	42a0      	cmp	r0, r4
 8004a48:	d01c      	beq.n	8004a84 <HAL_GPIO_Init+0x1b8>
 8004a4a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004a4e:	42a0      	cmp	r0, r4
 8004a50:	d01a      	beq.n	8004a88 <HAL_GPIO_Init+0x1bc>
 8004a52:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004a56:	42a0      	cmp	r0, r4
 8004a58:	d018      	beq.n	8004a8c <HAL_GPIO_Init+0x1c0>
 8004a5a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004a5e:	42a0      	cmp	r0, r4
 8004a60:	d016      	beq.n	8004a90 <HAL_GPIO_Init+0x1c4>
 8004a62:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004a66:	42a0      	cmp	r0, r4
 8004a68:	d014      	beq.n	8004a94 <HAL_GPIO_Init+0x1c8>
 8004a6a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004a6e:	42a0      	cmp	r0, r4
 8004a70:	f43f af30 	beq.w	80048d4 <HAL_GPIO_Init+0x8>
 8004a74:	240a      	movs	r4, #10
 8004a76:	e730      	b.n	80048da <HAL_GPIO_Init+0xe>
 8004a78:	2401      	movs	r4, #1
 8004a7a:	e72e      	b.n	80048da <HAL_GPIO_Init+0xe>
 8004a7c:	2402      	movs	r4, #2
 8004a7e:	e72c      	b.n	80048da <HAL_GPIO_Init+0xe>
 8004a80:	2403      	movs	r4, #3
 8004a82:	e72a      	b.n	80048da <HAL_GPIO_Init+0xe>
 8004a84:	2404      	movs	r4, #4
 8004a86:	e728      	b.n	80048da <HAL_GPIO_Init+0xe>
 8004a88:	2405      	movs	r4, #5
 8004a8a:	e726      	b.n	80048da <HAL_GPIO_Init+0xe>
 8004a8c:	2406      	movs	r4, #6
 8004a8e:	e724      	b.n	80048da <HAL_GPIO_Init+0xe>
 8004a90:	2407      	movs	r4, #7
 8004a92:	e722      	b.n	80048da <HAL_GPIO_Init+0xe>
 8004a94:	2408      	movs	r4, #8
 8004a96:	e720      	b.n	80048da <HAL_GPIO_Init+0xe>
  }
}
 8004a98:	b003      	add	sp, #12
 8004a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a9c:	58000400 	.word	0x58000400
 8004aa0:	58000080 	.word	0x58000080
 8004aa4:	58024400 	.word	0x58024400
 8004aa8:	58020000 	.word	0x58020000

08004aac <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004aac:	b912      	cbnz	r2, 8004ab4 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004aae:	0409      	lsls	r1, r1, #16
 8004ab0:	6181      	str	r1, [r0, #24]
  }
}
 8004ab2:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8004ab4:	6181      	str	r1, [r0, #24]
 8004ab6:	4770      	bx	lr

08004ab8 <HAL_HSEM_FastTake>:
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8004ab8:	3020      	adds	r0, #32
 8004aba:	4b05      	ldr	r3, [pc, #20]	; (8004ad0 <HAL_HSEM_FastTake+0x18>)
 8004abc:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
 8004ac0:	4b04      	ldr	r3, [pc, #16]	; (8004ad4 <HAL_HSEM_FastTake+0x1c>)
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d001      	beq.n	8004aca <HAL_HSEM_FastTake+0x12>
    return HAL_OK;
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8004ac6:	2001      	movs	r0, #1
}
 8004ac8:	4770      	bx	lr
    return HAL_OK;
 8004aca:	2000      	movs	r0, #0
 8004acc:	4770      	bx	lr
 8004ace:	bf00      	nop
 8004ad0:	58026400 	.word	0x58026400
 8004ad4:	80000300 	.word	0x80000300

08004ad8 <HAL_HSEM_Release>:

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8004ad8:	f441 7140 	orr.w	r1, r1, #768	; 0x300
 8004adc:	4b01      	ldr	r3, [pc, #4]	; (8004ae4 <HAL_HSEM_Release+0xc>)
 8004ade:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
#endif

}
 8004ae2:	4770      	bx	lr
 8004ae4:	58026400 	.word	0x58026400

08004ae8 <HAL_I2C_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ae8:	2800      	cmp	r0, #0
 8004aea:	d057      	beq.n	8004b9c <HAL_I2C_Init+0xb4>
{
 8004aec:	b510      	push	{r4, lr}
 8004aee:	4604      	mov	r4, r0
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004af0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d041      	beq.n	8004b7c <HAL_I2C_Init+0x94>
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004af8:	2324      	movs	r3, #36	; 0x24
 8004afa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004afe:	6822      	ldr	r2, [r4, #0]
 8004b00:	6813      	ldr	r3, [r2, #0]
 8004b02:	f023 0301 	bic.w	r3, r3, #1
 8004b06:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004b08:	6863      	ldr	r3, [r4, #4]
 8004b0a:	6822      	ldr	r2, [r4, #0]
 8004b0c:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8004b10:	6113      	str	r3, [r2, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004b12:	6822      	ldr	r2, [r4, #0]
 8004b14:	6893      	ldr	r3, [r2, #8]
 8004b16:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004b1a:	6093      	str	r3, [r2, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b1c:	68e3      	ldr	r3, [r4, #12]
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d031      	beq.n	8004b86 <HAL_I2C_Init+0x9e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004b22:	68a3      	ldr	r3, [r4, #8]
 8004b24:	6822      	ldr	r2, [r4, #0]
 8004b26:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8004b2a:	6093      	str	r3, [r2, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004b2c:	68e3      	ldr	r3, [r4, #12]
 8004b2e:	2b02      	cmp	r3, #2
 8004b30:	d02f      	beq.n	8004b92 <HAL_I2C_Init+0xaa>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004b32:	6822      	ldr	r2, [r4, #0]
 8004b34:	6851      	ldr	r1, [r2, #4]
 8004b36:	4b1a      	ldr	r3, [pc, #104]	; (8004ba0 <HAL_I2C_Init+0xb8>)
 8004b38:	430b      	orrs	r3, r1
 8004b3a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004b3c:	6822      	ldr	r2, [r4, #0]
 8004b3e:	68d3      	ldr	r3, [r2, #12]
 8004b40:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004b44:	60d3      	str	r3, [r2, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004b46:	6923      	ldr	r3, [r4, #16]
 8004b48:	6962      	ldr	r2, [r4, #20]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	69a1      	ldr	r1, [r4, #24]
 8004b4e:	6822      	ldr	r2, [r4, #0]
 8004b50:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004b54:	60d3      	str	r3, [r2, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004b56:	69e3      	ldr	r3, [r4, #28]
 8004b58:	6a21      	ldr	r1, [r4, #32]
 8004b5a:	6822      	ldr	r2, [r4, #0]
 8004b5c:	430b      	orrs	r3, r1
 8004b5e:	6013      	str	r3, [r2, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b60:	6822      	ldr	r2, [r4, #0]
 8004b62:	6813      	ldr	r3, [r2, #0]
 8004b64:	f043 0301 	orr.w	r3, r3, #1
 8004b68:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b6a:	2000      	movs	r0, #0
 8004b6c:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004b6e:	2320      	movs	r3, #32
 8004b70:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b74:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b76:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42

  return HAL_OK;
}
 8004b7a:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8004b7c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8004b80:	f7fc ffc4 	bl	8001b0c <HAL_I2C_MspInit>
 8004b84:	e7b8      	b.n	8004af8 <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004b86:	68a3      	ldr	r3, [r4, #8]
 8004b88:	6822      	ldr	r2, [r4, #0]
 8004b8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b8e:	6093      	str	r3, [r2, #8]
 8004b90:	e7cc      	b.n	8004b2c <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004b92:	6823      	ldr	r3, [r4, #0]
 8004b94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b98:	605a      	str	r2, [r3, #4]
 8004b9a:	e7ca      	b.n	8004b32 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8004b9c:	2001      	movs	r0, #1
}
 8004b9e:	4770      	bx	lr
 8004ba0:	02008000 	.word	0x02008000

08004ba4 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ba4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	2b20      	cmp	r3, #32
 8004bac:	d124      	bne.n	8004bf8 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bae:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d022      	beq.n	8004bfc <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004bbc:	2324      	movs	r3, #36	; 0x24
 8004bbe:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004bc2:	6802      	ldr	r2, [r0, #0]
 8004bc4:	6813      	ldr	r3, [r2, #0]
 8004bc6:	f023 0301 	bic.w	r3, r3, #1
 8004bca:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004bcc:	6802      	ldr	r2, [r0, #0]
 8004bce:	6813      	ldr	r3, [r2, #0]
 8004bd0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004bd4:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004bd6:	6802      	ldr	r2, [r0, #0]
 8004bd8:	6813      	ldr	r3, [r2, #0]
 8004bda:	4319      	orrs	r1, r3
 8004bdc:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004bde:	6802      	ldr	r2, [r0, #0]
 8004be0:	6813      	ldr	r3, [r2, #0]
 8004be2:	f043 0301 	orr.w	r3, r3, #1
 8004be6:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004be8:	2320      	movs	r3, #32
 8004bea:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bee:	2300      	movs	r3, #0
 8004bf0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8004bf8:	2002      	movs	r0, #2
 8004bfa:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8004bfc:	2002      	movs	r0, #2
  }
}
 8004bfe:	4770      	bx	lr

08004c00 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c00:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	2b20      	cmp	r3, #32
 8004c08:	d122      	bne.n	8004c50 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c0a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d020      	beq.n	8004c54 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8004c12:	2301      	movs	r3, #1
 8004c14:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c18:	2324      	movs	r3, #36	; 0x24
 8004c1a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004c1e:	6802      	ldr	r2, [r0, #0]
 8004c20:	6813      	ldr	r3, [r2, #0]
 8004c22:	f023 0301 	bic.w	r3, r3, #1
 8004c26:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004c28:	6802      	ldr	r2, [r0, #0]
 8004c2a:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004c2c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004c30:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004c34:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004c36:	6802      	ldr	r2, [r0, #0]
 8004c38:	6813      	ldr	r3, [r2, #0]
 8004c3a:	f043 0301 	orr.w	r3, r3, #1
 8004c3e:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c40:	2320      	movs	r3, #32
 8004c42:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c46:	2300      	movs	r3, #0
 8004c48:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8004c50:	2002      	movs	r0, #2
 8004c52:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8004c54:	2002      	movs	r0, #2
  }
}
 8004c56:	4770      	bx	lr

08004c58 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004c58:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004c5a:	684d      	ldr	r5, [r1, #4]
 8004c5c:	6804      	ldr	r4, [r0, #0]
 8004c5e:	68e3      	ldr	r3, [r4, #12]
 8004c60:	f3c3 430b 	ubfx	r3, r3, #16, #12
 8004c64:	441d      	add	r5, r3
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004c66:	01d2      	lsls	r2, r2, #7
 8004c68:	4414      	add	r4, r2
 8004c6a:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 8004c6e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004c72:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004c76:	680b      	ldr	r3, [r1, #0]
 8004c78:	6804      	ldr	r4, [r0, #0]
 8004c7a:	68e6      	ldr	r6, [r4, #12]
 8004c7c:	f3c6 460b 	ubfx	r6, r6, #16, #12
 8004c80:	4433      	add	r3, r6
 8004c82:	3301      	adds	r3, #1
 8004c84:	4414      	add	r4, r2
 8004c86:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8004c8a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004c8e:	68cd      	ldr	r5, [r1, #12]
 8004c90:	6804      	ldr	r4, [r0, #0]
 8004c92:	68e3      	ldr	r3, [r4, #12]
 8004c94:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c98:	441d      	add	r5, r3
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004c9a:	4414      	add	r4, r2
 8004c9c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8004ca0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004ca4:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004ca8:	688b      	ldr	r3, [r1, #8]
 8004caa:	6804      	ldr	r4, [r0, #0]
 8004cac:	68e6      	ldr	r6, [r4, #12]
 8004cae:	f3c6 060a 	ubfx	r6, r6, #0, #11
 8004cb2:	4433      	add	r3, r6
 8004cb4:	3301      	adds	r3, #1
 8004cb6:	4414      	add	r4, r2
 8004cb8:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8004cbc:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004cc0:	6803      	ldr	r3, [r0, #0]
 8004cc2:	4413      	add	r3, r2
 8004cc4:	f8d3 4094 	ldr.w	r4, [r3, #148]	; 0x94
 8004cc8:	f024 0407 	bic.w	r4, r4, #7
 8004ccc:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004cd0:	6803      	ldr	r3, [r0, #0]
 8004cd2:	4413      	add	r3, r2
 8004cd4:	690c      	ldr	r4, [r1, #16]
 8004cd6:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004cda:	f891 c031 	ldrb.w	ip, [r1, #49]	; 0x31
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004cde:	f891 7032 	ldrb.w	r7, [r1, #50]	; 0x32
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004ce2:	698e      	ldr	r6, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8004ce4:	6805      	ldr	r5, [r0, #0]
 8004ce6:	4415      	add	r5, r2
 8004ce8:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
 8004cec:	2400      	movs	r4, #0
 8004cee:	f8c5 409c 	str.w	r4, [r5, #156]	; 0x9c
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004cf2:	f891 3030 	ldrb.w	r3, [r1, #48]	; 0x30
 8004cf6:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8004cfa:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8004cfe:	6805      	ldr	r5, [r0, #0]
 8004d00:	4415      	add	r5, r2
 8004d02:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 8004d06:	f8c5 309c 	str.w	r3, [r5, #156]	; 0x9c

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004d0a:	6803      	ldr	r3, [r0, #0]
 8004d0c:	4413      	add	r3, r2
 8004d0e:	f8d3 5098 	ldr.w	r5, [r3, #152]	; 0x98
 8004d12:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8004d16:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004d1a:	6803      	ldr	r3, [r0, #0]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	694d      	ldr	r5, [r1, #20]
 8004d20:	f8c3 5098 	str.w	r5, [r3, #152]	; 0x98

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004d24:	6803      	ldr	r3, [r0, #0]
 8004d26:	4413      	add	r3, r2
 8004d28:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 8004d2c:	4d2d      	ldr	r5, [pc, #180]	; (8004de4 <LTDC_SetConfig+0x18c>)
 8004d2e:	4035      	ands	r5, r6
 8004d30:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004d34:	69cd      	ldr	r5, [r1, #28]
 8004d36:	6a0e      	ldr	r6, [r1, #32]
 8004d38:	6803      	ldr	r3, [r0, #0]
 8004d3a:	4413      	add	r3, r2
 8004d3c:	4335      	orrs	r5, r6
 8004d3e:	f8c3 50a0 	str.w	r5, [r3, #160]	; 0xa0

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004d42:	6803      	ldr	r3, [r0, #0]
 8004d44:	4413      	add	r3, r2
 8004d46:	f8d3 50ac 	ldr.w	r5, [r3, #172]	; 0xac
 8004d4a:	f8c3 40ac 	str.w	r4, [r3, #172]	; 0xac
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004d4e:	6803      	ldr	r3, [r0, #0]
 8004d50:	4413      	add	r3, r2
 8004d52:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8004d54:	f8c3 40ac 	str.w	r4, [r3, #172]	; 0xac

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004d58:	690b      	ldr	r3, [r1, #16]
 8004d5a:	b16b      	cbz	r3, 8004d78 <LTDC_SetConfig+0x120>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d03a      	beq.n	8004dd6 <LTDC_SetConfig+0x17e>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004d60:	2b02      	cmp	r3, #2
 8004d62:	bf18      	it	ne
 8004d64:	2b04      	cmpne	r3, #4
 8004d66:	d038      	beq.n	8004dda <LTDC_SetConfig+0x182>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004d68:	2b03      	cmp	r3, #3
 8004d6a:	d038      	beq.n	8004dde <LTDC_SetConfig+0x186>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004d6c:	2b07      	cmp	r3, #7
 8004d6e:	d001      	beq.n	8004d74 <LTDC_SetConfig+0x11c>
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8004d70:	2301      	movs	r3, #1
 8004d72:	e002      	b.n	8004d7a <LTDC_SetConfig+0x122>
    tmp = 2U;
 8004d74:	2302      	movs	r3, #2
 8004d76:	e000      	b.n	8004d7a <LTDC_SetConfig+0x122>
    tmp = 4U;
 8004d78:	2304      	movs	r3, #4
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004d7a:	6804      	ldr	r4, [r0, #0]
 8004d7c:	4414      	add	r4, r2
 8004d7e:	f8d4 50b0 	ldr.w	r5, [r4, #176]	; 0xb0
 8004d82:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 8004d86:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8004d8a:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8004d8c:	fb03 f504 	mul.w	r5, r3, r4
 8004d90:	684c      	ldr	r4, [r1, #4]
 8004d92:	680e      	ldr	r6, [r1, #0]
 8004d94:	1ba4      	subs	r4, r4, r6
 8004d96:	fb03 f304 	mul.w	r3, r3, r4
 8004d9a:	3307      	adds	r3, #7
 8004d9c:	6804      	ldr	r4, [r0, #0]
 8004d9e:	4414      	add	r4, r2
 8004da0:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8004da4:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004da8:	6803      	ldr	r3, [r0, #0]
 8004daa:	4413      	add	r3, r2
 8004dac:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
 8004db0:	4c0d      	ldr	r4, [pc, #52]	; (8004de8 <LTDC_SetConfig+0x190>)
 8004db2:	402c      	ands	r4, r5
 8004db4:	f8c3 40b4 	str.w	r4, [r3, #180]	; 0xb4
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004db8:	6803      	ldr	r3, [r0, #0]
 8004dba:	4413      	add	r3, r2
 8004dbc:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8004dbe:	f8c3 10b4 	str.w	r1, [r3, #180]	; 0xb4

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004dc2:	6803      	ldr	r3, [r0, #0]
 8004dc4:	441a      	add	r2, r3
 8004dc6:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 8004dca:	f043 0301 	orr.w	r3, r3, #1
 8004dce:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
}
 8004dd2:	bcf0      	pop	{r4, r5, r6, r7}
 8004dd4:	4770      	bx	lr
    tmp = 3U;
 8004dd6:	2303      	movs	r3, #3
 8004dd8:	e7cf      	b.n	8004d7a <LTDC_SetConfig+0x122>
    tmp = 2U;
 8004dda:	2302      	movs	r3, #2
 8004ddc:	e7cd      	b.n	8004d7a <LTDC_SetConfig+0x122>
 8004dde:	2302      	movs	r3, #2
 8004de0:	e7cb      	b.n	8004d7a <LTDC_SetConfig+0x122>
 8004de2:	bf00      	nop
 8004de4:	fffff8f8 	.word	0xfffff8f8
 8004de8:	fffff800 	.word	0xfffff800

08004dec <HAL_LTDC_Init>:
  if (hltdc == NULL)
 8004dec:	2800      	cmp	r0, #0
 8004dee:	d072      	beq.n	8004ed6 <HAL_LTDC_Init+0xea>
{
 8004df0:	b538      	push	{r3, r4, r5, lr}
 8004df2:	4604      	mov	r4, r0
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004df4:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d067      	beq.n	8004ecc <HAL_LTDC_Init+0xe0>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004dfc:	2302      	movs	r3, #2
 8004dfe:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004e02:	6822      	ldr	r2, [r4, #0]
 8004e04:	6993      	ldr	r3, [r2, #24]
 8004e06:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004e0a:	6193      	str	r3, [r2, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004e0c:	6821      	ldr	r1, [r4, #0]
 8004e0e:	698a      	ldr	r2, [r1, #24]
 8004e10:	6863      	ldr	r3, [r4, #4]
 8004e12:	68a0      	ldr	r0, [r4, #8]
 8004e14:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004e16:	68e0      	ldr	r0, [r4, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004e18:	4303      	orrs	r3, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004e1a:	6920      	ldr	r0, [r4, #16]
 8004e1c:	4303      	orrs	r3, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	618b      	str	r3, [r1, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004e22:	6821      	ldr	r1, [r4, #0]
 8004e24:	688a      	ldr	r2, [r1, #8]
 8004e26:	4b2d      	ldr	r3, [pc, #180]	; (8004edc <HAL_LTDC_Init+0xf0>)
 8004e28:	401a      	ands	r2, r3
 8004e2a:	608a      	str	r2, [r1, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004e2c:	6965      	ldr	r5, [r4, #20]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004e2e:	6820      	ldr	r0, [r4, #0]
 8004e30:	6882      	ldr	r2, [r0, #8]
 8004e32:	69a1      	ldr	r1, [r4, #24]
 8004e34:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8004e38:	430a      	orrs	r2, r1
 8004e3a:	6082      	str	r2, [r0, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004e3c:	6821      	ldr	r1, [r4, #0]
 8004e3e:	68ca      	ldr	r2, [r1, #12]
 8004e40:	401a      	ands	r2, r3
 8004e42:	60ca      	str	r2, [r1, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004e44:	69e5      	ldr	r5, [r4, #28]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004e46:	6820      	ldr	r0, [r4, #0]
 8004e48:	68c2      	ldr	r2, [r0, #12]
 8004e4a:	6a21      	ldr	r1, [r4, #32]
 8004e4c:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8004e50:	430a      	orrs	r2, r1
 8004e52:	60c2      	str	r2, [r0, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004e54:	6821      	ldr	r1, [r4, #0]
 8004e56:	690a      	ldr	r2, [r1, #16]
 8004e58:	401a      	ands	r2, r3
 8004e5a:	610a      	str	r2, [r1, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004e5c:	6a65      	ldr	r5, [r4, #36]	; 0x24
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004e5e:	6820      	ldr	r0, [r4, #0]
 8004e60:	6902      	ldr	r2, [r0, #16]
 8004e62:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004e64:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8004e68:	430a      	orrs	r2, r1
 8004e6a:	6102      	str	r2, [r0, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004e6c:	6821      	ldr	r1, [r4, #0]
 8004e6e:	694a      	ldr	r2, [r1, #20]
 8004e70:	4013      	ands	r3, r2
 8004e72:	614b      	str	r3, [r1, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004e74:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004e76:	6821      	ldr	r1, [r4, #0]
 8004e78:	694b      	ldr	r3, [r1, #20]
 8004e7a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004e7c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8004e80:	4313      	orrs	r3, r2
 8004e82:	614b      	str	r3, [r1, #20]
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004e84:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004e88:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8004e8c:	041b      	lsls	r3, r3, #16
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004e8e:	6821      	ldr	r1, [r4, #0]
 8004e90:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8004e92:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8004e96:	62ca      	str	r2, [r1, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004e98:	6821      	ldr	r1, [r4, #0]
 8004e9a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8004e9c:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8004ea0:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 8004ea4:	4303      	orrs	r3, r0
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	62cb      	str	r3, [r1, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004eaa:	6822      	ldr	r2, [r4, #0]
 8004eac:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8004eae:	f043 0306 	orr.w	r3, r3, #6
 8004eb2:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8004eb4:	6822      	ldr	r2, [r4, #0]
 8004eb6:	6993      	ldr	r3, [r2, #24]
 8004eb8:	f043 0301 	orr.w	r3, r3, #1
 8004ebc:	6193      	str	r3, [r2, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004ebe:	2000      	movs	r0, #0
 8004ec0:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 8004eca:	bd38      	pop	{r3, r4, r5, pc}
    hltdc->Lock = HAL_UNLOCKED;
 8004ecc:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8004ed0:	f7fc fe54 	bl	8001b7c <HAL_LTDC_MspInit>
 8004ed4:	e792      	b.n	8004dfc <HAL_LTDC_Init+0x10>
    return HAL_ERROR;
 8004ed6:	2001      	movs	r0, #1
}
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop
 8004edc:	f000f800 	.word	0xf000f800

08004ee0 <HAL_LTDC_ConfigLayer>:
  __HAL_LOCK(hltdc);
 8004ee0:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d027      	beq.n	8004f38 <HAL_LTDC_ConfigLayer+0x58>
{
 8004ee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004eec:	4694      	mov	ip, r2
 8004eee:	460f      	mov	r7, r1
 8004ef0:	4606      	mov	r6, r0
  __HAL_LOCK(hltdc);
 8004ef2:	f04f 0801 	mov.w	r8, #1
 8004ef6:	f880 80a0 	strb.w	r8, [r0, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004efa:	2302      	movs	r3, #2
 8004efc:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004f00:	2434      	movs	r4, #52	; 0x34
 8004f02:	fb04 0402 	mla	r4, r4, r2, r0
 8004f06:	3438      	adds	r4, #56	; 0x38
 8004f08:	460d      	mov	r5, r1
 8004f0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004f0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004f0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004f10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004f12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004f14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004f16:	682b      	ldr	r3, [r5, #0]
 8004f18:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004f1a:	4662      	mov	r2, ip
 8004f1c:	4639      	mov	r1, r7
 8004f1e:	4630      	mov	r0, r6
 8004f20:	f7ff fe9a 	bl	8004c58 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004f24:	6833      	ldr	r3, [r6, #0]
 8004f26:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004f2a:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8004f2e:	2000      	movs	r0, #0
 8004f30:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8004f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hltdc);
 8004f38:	2002      	movs	r0, #2
}
 8004f3a:	4770      	bx	lr

08004f3c <HAL_NOR_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_NOR_Init(NOR_HandleTypeDef *hnor, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
  /* Check the NOR handle parameter */
  if (hnor == NULL)
 8004f3c:	2800      	cmp	r0, #0
 8004f3e:	d036      	beq.n	8004fae <HAL_NOR_Init+0x72>
{
 8004f40:	b570      	push	{r4, r5, r6, lr}
 8004f42:	4604      	mov	r4, r0
 8004f44:	4615      	mov	r5, r2
 8004f46:	460e      	mov	r6, r1
  {
    return HAL_ERROR;
  }

  if (hnor->State == HAL_NOR_STATE_RESET)
 8004f48:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8004f4c:	b333      	cbz	r3, 8004f9c <HAL_NOR_Init+0x60>
    HAL_NOR_MspInit(hnor);
#endif /* (USE_HAL_NOR_REGISTER_CALLBACKS) */
  }

  /* Initialize NOR control Interface */
  (void)FMC_NORSRAM_Init(hnor->Instance, &(hnor->Init));
 8004f4e:	4621      	mov	r1, r4
 8004f50:	f851 0b08 	ldr.w	r0, [r1], #8
 8004f54:	f004 f982 	bl	800925c <FMC_NORSRAM_Init>

  /* Initialize NOR timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hnor->Instance, Timing, hnor->Init.NSBank);
 8004f58:	68a2      	ldr	r2, [r4, #8]
 8004f5a:	4631      	mov	r1, r6
 8004f5c:	6820      	ldr	r0, [r4, #0]
 8004f5e:	f004 f9c7 	bl	80092f0 <FMC_NORSRAM_Timing_Init>

  /* Initialize NOR extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hnor->Extended, ExtTiming, hnor->Init.NSBank, hnor->Init.ExtendedMode);
 8004f62:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004f64:	68a2      	ldr	r2, [r4, #8]
 8004f66:	4629      	mov	r1, r5
 8004f68:	6860      	ldr	r0, [r4, #4]
 8004f6a:	f004 f9f1 	bl	8009350 <FMC_NORSRAM_Extended_Timing_Init>

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hnor->Instance, hnor->Init.NSBank);
 8004f6e:	6822      	ldr	r2, [r4, #0]
 8004f70:	68a1      	ldr	r1, [r4, #8]
 8004f72:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004f76:	f043 0301 	orr.w	r3, r3, #1
 8004f7a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  /* Initialize NOR Memory Data Width*/
  if (hnor->Init.MemoryDataWidth == FMC_NORSRAM_MEM_BUS_WIDTH_8)
 8004f7e:	6963      	ldr	r3, [r4, #20]
 8004f80:	b98b      	cbnz	r3, 8004fa6 <HAL_NOR_Init+0x6a>
  {
    uwNORMemoryDataWidth = NOR_MEMORY_8B;
 8004f82:	4b0c      	ldr	r3, [pc, #48]	; (8004fb4 <HAL_NOR_Init+0x78>)
 8004f84:	2200      	movs	r2, #0
 8004f86:	601a      	str	r2, [r3, #0]
  {
    uwNORMemoryDataWidth = NOR_MEMORY_16B;
  }

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8004f88:	4a0b      	ldr	r2, [pc, #44]	; (8004fb8 <HAL_NOR_Init+0x7c>)
 8004f8a:	6813      	ldr	r3, [r2, #0]
 8004f8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f90:	6013      	str	r3, [r2, #0]

  /* Initialize the NOR controller state */
  hnor->State = HAL_NOR_STATE_READY;
 8004f92:	2301      	movs	r3, #1
 8004f94:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45

  return HAL_OK;
 8004f98:	2000      	movs	r0, #0
}
 8004f9a:	bd70      	pop	{r4, r5, r6, pc}
    hnor->Lock = HAL_UNLOCKED;
 8004f9c:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    HAL_NOR_MspInit(hnor);
 8004fa0:	f7fd fa24 	bl	80023ec <HAL_NOR_MspInit>
 8004fa4:	e7d3      	b.n	8004f4e <HAL_NOR_Init+0x12>
    uwNORMemoryDataWidth = NOR_MEMORY_16B;
 8004fa6:	4b03      	ldr	r3, [pc, #12]	; (8004fb4 <HAL_NOR_Init+0x78>)
 8004fa8:	2201      	movs	r2, #1
 8004faa:	601a      	str	r2, [r3, #0]
 8004fac:	e7ec      	b.n	8004f88 <HAL_NOR_Init+0x4c>
    return HAL_ERROR;
 8004fae:	2001      	movs	r0, #1
}
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop
 8004fb4:	20000238 	.word	0x20000238
 8004fb8:	52004000 	.word	0x52004000

08004fbc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fbe:	b08b      	sub	sp, #44	; 0x2c
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004fc0:	2800      	cmp	r0, #0
 8004fc2:	f000 8091 	beq.w	80050e8 <HAL_PCD_Init+0x12c>
 8004fc6:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004fc8:	6805      	ldr	r5, [r0, #0]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004fca:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
 8004fce:	b323      	cbz	r3, 800501a <HAL_PCD_Init+0x5e>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004fd6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8004fd8:	f413 7f80 	tst.w	r3, #256	; 0x100
 8004fdc:	d101      	bne.n	8004fe2 <HAL_PCD_Init+0x26>
  {
    hpcd->Init.dma_enable = 0U;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	6123      	str	r3, [r4, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004fe2:	6820      	ldr	r0, [r4, #0]
 8004fe4:	f004 fac0 	bl	8009568 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004fe8:	4625      	mov	r5, r4
 8004fea:	f855 7b10 	ldr.w	r7, [r5], #16
 8004fee:	466e      	mov	r6, sp
 8004ff0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ff2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004ff4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ff6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8004ff8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004ffc:	e886 0003 	stmia.w	r6, {r0, r1}
 8005000:	1d23      	adds	r3, r4, #4
 8005002:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005004:	4638      	mov	r0, r7
 8005006:	f004 fa69 	bl	80094dc <USB_CoreInit>
 800500a:	b158      	cbz	r0, 8005024 <HAL_PCD_Init+0x68>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800500c:	2302      	movs	r3, #2
 800500e:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 8005012:	2501      	movs	r5, #1
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 8005014:	4628      	mov	r0, r5
 8005016:	b00b      	add	sp, #44	; 0x2c
 8005018:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->Lock = HAL_UNLOCKED;
 800501a:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
    HAL_PCD_MspInit(hpcd);
 800501e:	f7fd f905 	bl	800222c <HAL_PCD_MspInit>
 8005022:	e7d5      	b.n	8004fd0 <HAL_PCD_Init+0x14>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005024:	2100      	movs	r1, #0
 8005026:	6820      	ldr	r0, [r4, #0]
 8005028:	f004 faa4 	bl	8009574 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800502c:	2300      	movs	r3, #0
 800502e:	e015      	b.n	800505c <HAL_PCD_Init+0xa0>
    hpcd->IN_ep[i].is_in = 1U;
 8005030:	00d9      	lsls	r1, r3, #3
 8005032:	1ac8      	subs	r0, r1, r3
 8005034:	0082      	lsls	r2, r0, #2
 8005036:	4422      	add	r2, r4
 8005038:	2001      	movs	r0, #1
 800503a:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 800503e:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005042:	f8a2 3042 	strh.w	r3, [r2, #66]	; 0x42
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005046:	2000      	movs	r0, #0
 8005048:	f882 003f 	strb.w	r0, [r2, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 800504c:	6450      	str	r0, [r2, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 800504e:	6490      	str	r0, [r2, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 8005050:	1aca      	subs	r2, r1, r3
 8005052:	0091      	lsls	r1, r2, #2
 8005054:	4421      	add	r1, r4
 8005056:	6508      	str	r0, [r1, #80]	; 0x50
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005058:	3301      	adds	r3, #1
 800505a:	b2db      	uxtb	r3, r3
 800505c:	6865      	ldr	r5, [r4, #4]
 800505e:	42ab      	cmp	r3, r5
 8005060:	d3e6      	bcc.n	8005030 <HAL_PCD_Init+0x74>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005062:	2300      	movs	r3, #0
 8005064:	e015      	b.n	8005092 <HAL_PCD_Init+0xd6>
    hpcd->OUT_ep[i].is_in = 0U;
 8005066:	00d8      	lsls	r0, r3, #3
 8005068:	1ac1      	subs	r1, r0, r3
 800506a:	008a      	lsls	r2, r1, #2
 800506c:	4422      	add	r2, r4
 800506e:	2100      	movs	r1, #0
 8005070:	f882 11fd 	strb.w	r1, [r2, #509]	; 0x1fd
    hpcd->OUT_ep[i].num = i;
 8005074:	f882 31fc 	strb.w	r3, [r2, #508]	; 0x1fc
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005078:	f882 11ff 	strb.w	r1, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 800507c:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005080:	f8c2 1208 	str.w	r1, [r2, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005084:	1ac2      	subs	r2, r0, r3
 8005086:	0090      	lsls	r0, r2, #2
 8005088:	4420      	add	r0, r4
 800508a:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800508e:	3301      	adds	r3, #1
 8005090:	b2db      	uxtb	r3, r3
 8005092:	429d      	cmp	r5, r3
 8005094:	d8e7      	bhi.n	8005066 <HAL_PCD_Init+0xaa>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005096:	4625      	mov	r5, r4
 8005098:	f855 7b10 	ldr.w	r7, [r5], #16
 800509c:	466e      	mov	r6, sp
 800509e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80050a0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80050a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80050a4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80050a6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80050aa:	e886 0003 	stmia.w	r6, {r0, r1}
 80050ae:	1d23      	adds	r3, r4, #4
 80050b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80050b2:	4638      	mov	r0, r7
 80050b4:	f004 faa4 	bl	8009600 <USB_DevInit>
 80050b8:	4605      	mov	r5, r0
 80050ba:	b960      	cbnz	r0, 80050d6 <HAL_PCD_Init+0x11a>
  hpcd->USB_Address = 0U;
 80050bc:	2300      	movs	r3, #0
 80050be:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80050c2:	2301      	movs	r3, #1
 80050c4:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
 80050c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d008      	beq.n	80050e0 <HAL_PCD_Init+0x124>
  (void)USB_DevDisconnect(hpcd->Instance);
 80050ce:	6820      	ldr	r0, [r4, #0]
 80050d0:	f004 fb5a 	bl	8009788 <USB_DevDisconnect>
  return HAL_OK;
 80050d4:	e79e      	b.n	8005014 <HAL_PCD_Init+0x58>
    hpcd->State = HAL_PCD_STATE_ERROR;
 80050d6:	2302      	movs	r3, #2
 80050d8:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 80050dc:	2501      	movs	r5, #1
 80050de:	e799      	b.n	8005014 <HAL_PCD_Init+0x58>
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80050e0:	4620      	mov	r0, r4
 80050e2:	f000 f803 	bl	80050ec <HAL_PCDEx_ActivateLPM>
 80050e6:	e7f2      	b.n	80050ce <HAL_PCD_Init+0x112>
    return HAL_ERROR;
 80050e8:	2501      	movs	r5, #1
 80050ea:	e793      	b.n	8005014 <HAL_PCD_Init+0x58>

080050ec <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80050ec:	4602      	mov	r2, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80050ee:	6803      	ldr	r3, [r0, #0]

  hpcd->lpm_active = 1U;
 80050f0:	2101      	movs	r1, #1
 80050f2:	f8c0 13fc 	str.w	r1, [r0, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80050f6:	2000      	movs	r0, #0
 80050f8:	f882 03f4 	strb.w	r0, [r2, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80050fc:	699a      	ldr	r2, [r3, #24]
 80050fe:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8005102:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005104:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005106:	4a02      	ldr	r2, [pc, #8]	; (8005110 <HAL_PCDEx_ActivateLPM+0x24>)
 8005108:	430a      	orrs	r2, r1
 800510a:	655a      	str	r2, [r3, #84]	; 0x54

  return HAL_OK;
}
 800510c:	4770      	bx	lr
 800510e:	bf00      	nop
 8005110:	10000003 	.word	0x10000003

08005114 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005114:	b538      	push	{r3, r4, r5, lr}

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8005116:	4b23      	ldr	r3, [pc, #140]	; (80051a4 <HAL_PWREx_ConfigSupply+0x90>)
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	f003 0307 	and.w	r3, r3, #7
 800511e:	2b06      	cmp	r3, #6
 8005120:	d007      	beq.n	8005132 <HAL_PWREx_ConfigSupply+0x1e>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005122:	4b20      	ldr	r3, [pc, #128]	; (80051a4 <HAL_PWREx_ConfigSupply+0x90>)
 8005124:	68db      	ldr	r3, [r3, #12]
 8005126:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800512a:	4283      	cmp	r3, r0
 800512c:	d037      	beq.n	800519e <HAL_PWREx_ConfigSupply+0x8a>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800512e:	2001      	movs	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8005130:	bd38      	pop	{r3, r4, r5, pc}
 8005132:	4604      	mov	r4, r0
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005134:	4a1b      	ldr	r2, [pc, #108]	; (80051a4 <HAL_PWREx_ConfigSupply+0x90>)
 8005136:	68d3      	ldr	r3, [r2, #12]
 8005138:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800513c:	4303      	orrs	r3, r0
 800513e:	60d3      	str	r3, [r2, #12]
  tickstart = HAL_GetTick ();
 8005140:	f7fd fb08 	bl	8002754 <HAL_GetTick>
 8005144:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005146:	4b17      	ldr	r3, [pc, #92]	; (80051a4 <HAL_PWREx_ConfigSupply+0x90>)
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 800514e:	d107      	bne.n	8005160 <HAL_PWREx_ConfigSupply+0x4c>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005150:	f7fd fb00 	bl	8002754 <HAL_GetTick>
 8005154:	1b40      	subs	r0, r0, r5
 8005156:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800515a:	d9f4      	bls.n	8005146 <HAL_PWREx_ConfigSupply+0x32>
      return HAL_ERROR;
 800515c:	2001      	movs	r0, #1
 800515e:	e7e7      	b.n	8005130 <HAL_PWREx_ConfigSupply+0x1c>
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8005160:	2c2e      	cmp	r4, #46	; 0x2e
 8005162:	bf18      	it	ne
 8005164:	2c1e      	cmpne	r4, #30
 8005166:	d008      	beq.n	800517a <HAL_PWREx_ConfigSupply+0x66>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
 8005168:	2c2d      	cmp	r4, #45	; 0x2d
 800516a:	bf14      	ite	ne
 800516c:	2300      	movne	r3, #0
 800516e:	2301      	moveq	r3, #1
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8005170:	2c1d      	cmp	r4, #29
 8005172:	d002      	beq.n	800517a <HAL_PWREx_ConfigSupply+0x66>
 8005174:	b90b      	cbnz	r3, 800517a <HAL_PWREx_ConfigSupply+0x66>
  return HAL_OK;
 8005176:	2000      	movs	r0, #0
 8005178:	e7da      	b.n	8005130 <HAL_PWREx_ConfigSupply+0x1c>
    tickstart = HAL_GetTick ();
 800517a:	f7fd faeb 	bl	8002754 <HAL_GetTick>
 800517e:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005180:	4b08      	ldr	r3, [pc, #32]	; (80051a4 <HAL_PWREx_ConfigSupply+0x90>)
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8005188:	d107      	bne.n	800519a <HAL_PWREx_ConfigSupply+0x86>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800518a:	f7fd fae3 	bl	8002754 <HAL_GetTick>
 800518e:	1b00      	subs	r0, r0, r4
 8005190:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8005194:	d9f4      	bls.n	8005180 <HAL_PWREx_ConfigSupply+0x6c>
        return HAL_ERROR;
 8005196:	2001      	movs	r0, #1
 8005198:	e7ca      	b.n	8005130 <HAL_PWREx_ConfigSupply+0x1c>
  return HAL_OK;
 800519a:	2000      	movs	r0, #0
 800519c:	e7c8      	b.n	8005130 <HAL_PWREx_ConfigSupply+0x1c>
      return HAL_OK;
 800519e:	2000      	movs	r0, #0
 80051a0:	e7c6      	b.n	8005130 <HAL_PWREx_ConfigSupply+0x1c>
 80051a2:	bf00      	nop
 80051a4:	58024800 	.word	0x58024800

080051a8 <HAL_PWREx_EnableUSBVoltageDetector>:
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80051a8:	4a02      	ldr	r2, [pc, #8]	; (80051b4 <HAL_PWREx_EnableUSBVoltageDetector+0xc>)
 80051aa:	68d3      	ldr	r3, [r2, #12]
 80051ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051b0:	60d3      	str	r3, [r2, #12]
}
 80051b2:	4770      	bx	lr
 80051b4:	58024800 	.word	0x58024800

080051b8 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80051b8:	2800      	cmp	r0, #0
 80051ba:	f000 82e6 	beq.w	800578a <HAL_RCC_OscConfig+0x5d2>
{
 80051be:	b538      	push	{r3, r4, r5, lr}
 80051c0:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051c2:	6803      	ldr	r3, [r0, #0]
 80051c4:	f013 0f01 	tst.w	r3, #1
 80051c8:	d025      	beq.n	8005216 <HAL_RCC_OscConfig+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051ca:	4aaa      	ldr	r2, [pc, #680]	; (8005474 <HAL_RCC_OscConfig+0x2bc>)
 80051cc:	6913      	ldr	r3, [r2, #16]
 80051ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80051d2:	6a92      	ldr	r2, [r2, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80051d4:	2b10      	cmp	r3, #16
 80051d6:	d015      	beq.n	8005204 <HAL_RCC_OscConfig+0x4c>
 80051d8:	2b18      	cmp	r3, #24
 80051da:	d00f      	beq.n	80051fc <HAL_RCC_OscConfig+0x44>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051dc:	6863      	ldr	r3, [r4, #4]
 80051de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051e2:	d03e      	beq.n	8005262 <HAL_RCC_OscConfig+0xaa>
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d152      	bne.n	800528e <HAL_RCC_OscConfig+0xd6>
 80051e8:	4ba2      	ldr	r3, [pc, #648]	; (8005474 <HAL_RCC_OscConfig+0x2bc>)
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80051f0:	601a      	str	r2, [r3, #0]
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80051f8:	601a      	str	r2, [r3, #0]
 80051fa:	e037      	b.n	800526c <HAL_RCC_OscConfig+0xb4>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80051fc:	f002 0203 	and.w	r2, r2, #3
 8005200:	2a02      	cmp	r2, #2
 8005202:	d1eb      	bne.n	80051dc <HAL_RCC_OscConfig+0x24>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005204:	4b9b      	ldr	r3, [pc, #620]	; (8005474 <HAL_RCC_OscConfig+0x2bc>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800520c:	d003      	beq.n	8005216 <HAL_RCC_OscConfig+0x5e>
 800520e:	6863      	ldr	r3, [r4, #4]
 8005210:	2b00      	cmp	r3, #0
 8005212:	f000 82bc 	beq.w	800578e <HAL_RCC_OscConfig+0x5d6>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005216:	6823      	ldr	r3, [r4, #0]
 8005218:	f013 0f02 	tst.w	r3, #2
 800521c:	d077      	beq.n	800530e <HAL_RCC_OscConfig+0x156>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800521e:	4a95      	ldr	r2, [pc, #596]	; (8005474 <HAL_RCC_OscConfig+0x2bc>)
 8005220:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005222:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005224:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 8005228:	d05a      	beq.n	80052e0 <HAL_RCC_OscConfig+0x128>
 800522a:	2b18      	cmp	r3, #24
 800522c:	d055      	beq.n	80052da <HAL_RCC_OscConfig+0x122>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800522e:	68e3      	ldr	r3, [r4, #12]
 8005230:	2b00      	cmp	r3, #0
 8005232:	f000 80b2 	beq.w	800539a <HAL_RCC_OscConfig+0x1e2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005236:	498f      	ldr	r1, [pc, #572]	; (8005474 <HAL_RCC_OscConfig+0x2bc>)
 8005238:	680a      	ldr	r2, [r1, #0]
 800523a:	f022 0219 	bic.w	r2, r2, #25
 800523e:	4313      	orrs	r3, r2
 8005240:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005242:	f7fd fa87 	bl	8002754 <HAL_GetTick>
 8005246:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005248:	4b8a      	ldr	r3, [pc, #552]	; (8005474 <HAL_RCC_OscConfig+0x2bc>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f013 0f04 	tst.w	r3, #4
 8005250:	f040 808b 	bne.w	800536a <HAL_RCC_OscConfig+0x1b2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005254:	f7fd fa7e 	bl	8002754 <HAL_GetTick>
 8005258:	1b40      	subs	r0, r0, r5
 800525a:	2802      	cmp	r0, #2
 800525c:	d9f4      	bls.n	8005248 <HAL_RCC_OscConfig+0x90>
          {
            return HAL_TIMEOUT;
 800525e:	2003      	movs	r0, #3
 8005260:	e29a      	b.n	8005798 <HAL_RCC_OscConfig+0x5e0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005262:	4a84      	ldr	r2, [pc, #528]	; (8005474 <HAL_RCC_OscConfig+0x2bc>)
 8005264:	6813      	ldr	r3, [r2, #0]
 8005266:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800526a:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800526c:	6863      	ldr	r3, [r4, #4]
 800526e:	b32b      	cbz	r3, 80052bc <HAL_RCC_OscConfig+0x104>
        tickstart = HAL_GetTick();
 8005270:	f7fd fa70 	bl	8002754 <HAL_GetTick>
 8005274:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005276:	4b7f      	ldr	r3, [pc, #508]	; (8005474 <HAL_RCC_OscConfig+0x2bc>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800527e:	d1ca      	bne.n	8005216 <HAL_RCC_OscConfig+0x5e>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005280:	f7fd fa68 	bl	8002754 <HAL_GetTick>
 8005284:	1b40      	subs	r0, r0, r5
 8005286:	2864      	cmp	r0, #100	; 0x64
 8005288:	d9f5      	bls.n	8005276 <HAL_RCC_OscConfig+0xbe>
            return HAL_TIMEOUT;
 800528a:	2003      	movs	r0, #3
 800528c:	e284      	b.n	8005798 <HAL_RCC_OscConfig+0x5e0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800528e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005292:	d009      	beq.n	80052a8 <HAL_RCC_OscConfig+0xf0>
 8005294:	4b77      	ldr	r3, [pc, #476]	; (8005474 <HAL_RCC_OscConfig+0x2bc>)
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800529c:	601a      	str	r2, [r3, #0]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80052a4:	601a      	str	r2, [r3, #0]
 80052a6:	e7e1      	b.n	800526c <HAL_RCC_OscConfig+0xb4>
 80052a8:	4b72      	ldr	r3, [pc, #456]	; (8005474 <HAL_RCC_OscConfig+0x2bc>)
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80052b0:	601a      	str	r2, [r3, #0]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80052b8:	601a      	str	r2, [r3, #0]
 80052ba:	e7d7      	b.n	800526c <HAL_RCC_OscConfig+0xb4>
        tickstart = HAL_GetTick();
 80052bc:	f7fd fa4a 	bl	8002754 <HAL_GetTick>
 80052c0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80052c2:	4b6c      	ldr	r3, [pc, #432]	; (8005474 <HAL_RCC_OscConfig+0x2bc>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80052ca:	d0a4      	beq.n	8005216 <HAL_RCC_OscConfig+0x5e>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052cc:	f7fd fa42 	bl	8002754 <HAL_GetTick>
 80052d0:	1b40      	subs	r0, r0, r5
 80052d2:	2864      	cmp	r0, #100	; 0x64
 80052d4:	d9f5      	bls.n	80052c2 <HAL_RCC_OscConfig+0x10a>
            return HAL_TIMEOUT;
 80052d6:	2003      	movs	r0, #3
 80052d8:	e25e      	b.n	8005798 <HAL_RCC_OscConfig+0x5e0>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80052da:	f012 0f03 	tst.w	r2, #3
 80052de:	d1a6      	bne.n	800522e <HAL_RCC_OscConfig+0x76>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80052e0:	4b64      	ldr	r3, [pc, #400]	; (8005474 <HAL_RCC_OscConfig+0x2bc>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f013 0f04 	tst.w	r3, #4
 80052e8:	d003      	beq.n	80052f2 <HAL_RCC_OscConfig+0x13a>
 80052ea:	68e3      	ldr	r3, [r4, #12]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	f000 8250 	beq.w	8005792 <HAL_RCC_OscConfig+0x5da>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052f2:	f7fd fa49 	bl	8002788 <HAL_GetREVID>
 80052f6:	f241 0303 	movw	r3, #4099	; 0x1003
 80052fa:	4298      	cmp	r0, r3
 80052fc:	d82c      	bhi.n	8005358 <HAL_RCC_OscConfig+0x1a0>
 80052fe:	4a5d      	ldr	r2, [pc, #372]	; (8005474 <HAL_RCC_OscConfig+0x2bc>)
 8005300:	6853      	ldr	r3, [r2, #4]
 8005302:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005306:	6921      	ldr	r1, [r4, #16]
 8005308:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 800530c:	6053      	str	r3, [r2, #4]
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800530e:	6823      	ldr	r3, [r4, #0]
 8005310:	f013 0f10 	tst.w	r3, #16
 8005314:	d071      	beq.n	80053fa <HAL_RCC_OscConfig+0x242>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005316:	4a57      	ldr	r2, [pc, #348]	; (8005474 <HAL_RCC_OscConfig+0x2bc>)
 8005318:	6913      	ldr	r3, [r2, #16]
 800531a:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800531e:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005320:	2b08      	cmp	r3, #8
 8005322:	d052      	beq.n	80053ca <HAL_RCC_OscConfig+0x212>
 8005324:	2b18      	cmp	r3, #24
 8005326:	d04c      	beq.n	80053c2 <HAL_RCC_OscConfig+0x20a>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005328:	69e3      	ldr	r3, [r4, #28]
 800532a:	2b00      	cmp	r3, #0
 800532c:	f000 80a4 	beq.w	8005478 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005330:	4a50      	ldr	r2, [pc, #320]	; (8005474 <HAL_RCC_OscConfig+0x2bc>)
 8005332:	6813      	ldr	r3, [r2, #0]
 8005334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005338:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800533a:	f7fd fa0b 	bl	8002754 <HAL_GetTick>
 800533e:	4605      	mov	r5, r0

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005340:	4b4c      	ldr	r3, [pc, #304]	; (8005474 <HAL_RCC_OscConfig+0x2bc>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005348:	d17b      	bne.n	8005442 <HAL_RCC_OscConfig+0x28a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800534a:	f7fd fa03 	bl	8002754 <HAL_GetTick>
 800534e:	1b40      	subs	r0, r0, r5
 8005350:	2802      	cmp	r0, #2
 8005352:	d9f5      	bls.n	8005340 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005354:	2003      	movs	r0, #3
 8005356:	e21f      	b.n	8005798 <HAL_RCC_OscConfig+0x5e0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005358:	4a46      	ldr	r2, [pc, #280]	; (8005474 <HAL_RCC_OscConfig+0x2bc>)
 800535a:	6853      	ldr	r3, [r2, #4]
 800535c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005360:	6921      	ldr	r1, [r4, #16]
 8005362:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8005366:	6053      	str	r3, [r2, #4]
 8005368:	e7d1      	b.n	800530e <HAL_RCC_OscConfig+0x156>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800536a:	f7fd fa0d 	bl	8002788 <HAL_GetREVID>
 800536e:	f241 0303 	movw	r3, #4099	; 0x1003
 8005372:	4298      	cmp	r0, r3
 8005374:	d808      	bhi.n	8005388 <HAL_RCC_OscConfig+0x1d0>
 8005376:	4a3f      	ldr	r2, [pc, #252]	; (8005474 <HAL_RCC_OscConfig+0x2bc>)
 8005378:	6853      	ldr	r3, [r2, #4]
 800537a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800537e:	6921      	ldr	r1, [r4, #16]
 8005380:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 8005384:	6053      	str	r3, [r2, #4]
 8005386:	e7c2      	b.n	800530e <HAL_RCC_OscConfig+0x156>
 8005388:	4a3a      	ldr	r2, [pc, #232]	; (8005474 <HAL_RCC_OscConfig+0x2bc>)
 800538a:	6853      	ldr	r3, [r2, #4]
 800538c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005390:	6921      	ldr	r1, [r4, #16]
 8005392:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8005396:	6053      	str	r3, [r2, #4]
 8005398:	e7b9      	b.n	800530e <HAL_RCC_OscConfig+0x156>
        __HAL_RCC_HSI_DISABLE();
 800539a:	4a36      	ldr	r2, [pc, #216]	; (8005474 <HAL_RCC_OscConfig+0x2bc>)
 800539c:	6813      	ldr	r3, [r2, #0]
 800539e:	f023 0301 	bic.w	r3, r3, #1
 80053a2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80053a4:	f7fd f9d6 	bl	8002754 <HAL_GetTick>
 80053a8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80053aa:	4b32      	ldr	r3, [pc, #200]	; (8005474 <HAL_RCC_OscConfig+0x2bc>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f013 0f04 	tst.w	r3, #4
 80053b2:	d0ac      	beq.n	800530e <HAL_RCC_OscConfig+0x156>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053b4:	f7fd f9ce 	bl	8002754 <HAL_GetTick>
 80053b8:	1b40      	subs	r0, r0, r5
 80053ba:	2802      	cmp	r0, #2
 80053bc:	d9f5      	bls.n	80053aa <HAL_RCC_OscConfig+0x1f2>
            return HAL_TIMEOUT;
 80053be:	2003      	movs	r0, #3
 80053c0:	e1ea      	b.n	8005798 <HAL_RCC_OscConfig+0x5e0>
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80053c2:	f002 0203 	and.w	r2, r2, #3
 80053c6:	2a01      	cmp	r2, #1
 80053c8:	d1ae      	bne.n	8005328 <HAL_RCC_OscConfig+0x170>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80053ca:	4b2a      	ldr	r3, [pc, #168]	; (8005474 <HAL_RCC_OscConfig+0x2bc>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f413 7f80 	tst.w	r3, #256	; 0x100
 80053d2:	d004      	beq.n	80053de <HAL_RCC_OscConfig+0x226>
 80053d4:	69e3      	ldr	r3, [r4, #28]
 80053d6:	2b80      	cmp	r3, #128	; 0x80
 80053d8:	d001      	beq.n	80053de <HAL_RCC_OscConfig+0x226>
        return HAL_ERROR;
 80053da:	2001      	movs	r0, #1
 80053dc:	e1dc      	b.n	8005798 <HAL_RCC_OscConfig+0x5e0>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80053de:	f7fd f9d3 	bl	8002788 <HAL_GetREVID>
 80053e2:	f241 0303 	movw	r3, #4099	; 0x1003
 80053e6:	4298      	cmp	r0, r3
 80053e8:	d822      	bhi.n	8005430 <HAL_RCC_OscConfig+0x278>
 80053ea:	4a22      	ldr	r2, [pc, #136]	; (8005474 <HAL_RCC_OscConfig+0x2bc>)
 80053ec:	6853      	ldr	r3, [r2, #4]
 80053ee:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80053f2:	6a21      	ldr	r1, [r4, #32]
 80053f4:	ea43 6381 	orr.w	r3, r3, r1, lsl #26
 80053f8:	6053      	str	r3, [r2, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053fa:	6823      	ldr	r3, [r4, #0]
 80053fc:	f013 0f08 	tst.w	r3, #8
 8005400:	d062      	beq.n	80054c8 <HAL_RCC_OscConfig+0x310>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005402:	6963      	ldr	r3, [r4, #20]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d04b      	beq.n	80054a0 <HAL_RCC_OscConfig+0x2e8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005408:	4a1a      	ldr	r2, [pc, #104]	; (8005474 <HAL_RCC_OscConfig+0x2bc>)
 800540a:	6f53      	ldr	r3, [r2, #116]	; 0x74
 800540c:	f043 0301 	orr.w	r3, r3, #1
 8005410:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005412:	f7fd f99f 	bl	8002754 <HAL_GetTick>
 8005416:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005418:	4b16      	ldr	r3, [pc, #88]	; (8005474 <HAL_RCC_OscConfig+0x2bc>)
 800541a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800541c:	f013 0f02 	tst.w	r3, #2
 8005420:	d152      	bne.n	80054c8 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005422:	f7fd f997 	bl	8002754 <HAL_GetTick>
 8005426:	1b40      	subs	r0, r0, r5
 8005428:	2802      	cmp	r0, #2
 800542a:	d9f5      	bls.n	8005418 <HAL_RCC_OscConfig+0x260>
        {
          return HAL_TIMEOUT;
 800542c:	2003      	movs	r0, #3
 800542e:	e1b3      	b.n	8005798 <HAL_RCC_OscConfig+0x5e0>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005430:	4a10      	ldr	r2, [pc, #64]	; (8005474 <HAL_RCC_OscConfig+0x2bc>)
 8005432:	68d3      	ldr	r3, [r2, #12]
 8005434:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8005438:	6a21      	ldr	r1, [r4, #32]
 800543a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800543e:	60d3      	str	r3, [r2, #12]
 8005440:	e7db      	b.n	80053fa <HAL_RCC_OscConfig+0x242>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005442:	f7fd f9a1 	bl	8002788 <HAL_GetREVID>
 8005446:	f241 0303 	movw	r3, #4099	; 0x1003
 800544a:	4298      	cmp	r0, r3
 800544c:	d808      	bhi.n	8005460 <HAL_RCC_OscConfig+0x2a8>
 800544e:	4a09      	ldr	r2, [pc, #36]	; (8005474 <HAL_RCC_OscConfig+0x2bc>)
 8005450:	6853      	ldr	r3, [r2, #4]
 8005452:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005456:	6a21      	ldr	r1, [r4, #32]
 8005458:	ea43 6381 	orr.w	r3, r3, r1, lsl #26
 800545c:	6053      	str	r3, [r2, #4]
 800545e:	e7cc      	b.n	80053fa <HAL_RCC_OscConfig+0x242>
 8005460:	4a04      	ldr	r2, [pc, #16]	; (8005474 <HAL_RCC_OscConfig+0x2bc>)
 8005462:	68d3      	ldr	r3, [r2, #12]
 8005464:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8005468:	6a21      	ldr	r1, [r4, #32]
 800546a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800546e:	60d3      	str	r3, [r2, #12]
 8005470:	e7c3      	b.n	80053fa <HAL_RCC_OscConfig+0x242>
 8005472:	bf00      	nop
 8005474:	58024400 	.word	0x58024400
        __HAL_RCC_CSI_DISABLE();
 8005478:	4aad      	ldr	r2, [pc, #692]	; (8005730 <HAL_RCC_OscConfig+0x578>)
 800547a:	6813      	ldr	r3, [r2, #0]
 800547c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005480:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005482:	f7fd f967 	bl	8002754 <HAL_GetTick>
 8005486:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005488:	4ba9      	ldr	r3, [pc, #676]	; (8005730 <HAL_RCC_OscConfig+0x578>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005490:	d0b3      	beq.n	80053fa <HAL_RCC_OscConfig+0x242>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005492:	f7fd f95f 	bl	8002754 <HAL_GetTick>
 8005496:	1b40      	subs	r0, r0, r5
 8005498:	2802      	cmp	r0, #2
 800549a:	d9f5      	bls.n	8005488 <HAL_RCC_OscConfig+0x2d0>
            return HAL_TIMEOUT;
 800549c:	2003      	movs	r0, #3
 800549e:	e17b      	b.n	8005798 <HAL_RCC_OscConfig+0x5e0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054a0:	4aa3      	ldr	r2, [pc, #652]	; (8005730 <HAL_RCC_OscConfig+0x578>)
 80054a2:	6f53      	ldr	r3, [r2, #116]	; 0x74
 80054a4:	f023 0301 	bic.w	r3, r3, #1
 80054a8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054aa:	f7fd f953 	bl	8002754 <HAL_GetTick>
 80054ae:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80054b0:	4b9f      	ldr	r3, [pc, #636]	; (8005730 <HAL_RCC_OscConfig+0x578>)
 80054b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054b4:	f013 0f02 	tst.w	r3, #2
 80054b8:	d006      	beq.n	80054c8 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054ba:	f7fd f94b 	bl	8002754 <HAL_GetTick>
 80054be:	1b40      	subs	r0, r0, r5
 80054c0:	2802      	cmp	r0, #2
 80054c2:	d9f5      	bls.n	80054b0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80054c4:	2003      	movs	r0, #3
 80054c6:	e167      	b.n	8005798 <HAL_RCC_OscConfig+0x5e0>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80054c8:	6823      	ldr	r3, [r4, #0]
 80054ca:	f013 0f20 	tst.w	r3, #32
 80054ce:	d029      	beq.n	8005524 <HAL_RCC_OscConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80054d0:	69a3      	ldr	r3, [r4, #24]
 80054d2:	b19b      	cbz	r3, 80054fc <HAL_RCC_OscConfig+0x344>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80054d4:	4a96      	ldr	r2, [pc, #600]	; (8005730 <HAL_RCC_OscConfig+0x578>)
 80054d6:	6813      	ldr	r3, [r2, #0]
 80054d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80054dc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80054de:	f7fd f939 	bl	8002754 <HAL_GetTick>
 80054e2:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80054e4:	4b92      	ldr	r3, [pc, #584]	; (8005730 <HAL_RCC_OscConfig+0x578>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80054ec:	d11a      	bne.n	8005524 <HAL_RCC_OscConfig+0x36c>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80054ee:	f7fd f931 	bl	8002754 <HAL_GetTick>
 80054f2:	1b40      	subs	r0, r0, r5
 80054f4:	2802      	cmp	r0, #2
 80054f6:	d9f5      	bls.n	80054e4 <HAL_RCC_OscConfig+0x32c>
        {
          return HAL_TIMEOUT;
 80054f8:	2003      	movs	r0, #3
 80054fa:	e14d      	b.n	8005798 <HAL_RCC_OscConfig+0x5e0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80054fc:	4a8c      	ldr	r2, [pc, #560]	; (8005730 <HAL_RCC_OscConfig+0x578>)
 80054fe:	6813      	ldr	r3, [r2, #0]
 8005500:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005504:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005506:	f7fd f925 	bl	8002754 <HAL_GetTick>
 800550a:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800550c:	4b88      	ldr	r3, [pc, #544]	; (8005730 <HAL_RCC_OscConfig+0x578>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8005514:	d006      	beq.n	8005524 <HAL_RCC_OscConfig+0x36c>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005516:	f7fd f91d 	bl	8002754 <HAL_GetTick>
 800551a:	1b40      	subs	r0, r0, r5
 800551c:	2802      	cmp	r0, #2
 800551e:	d9f5      	bls.n	800550c <HAL_RCC_OscConfig+0x354>
        {
          return HAL_TIMEOUT;
 8005520:	2003      	movs	r0, #3
 8005522:	e139      	b.n	8005798 <HAL_RCC_OscConfig+0x5e0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005524:	6823      	ldr	r3, [r4, #0]
 8005526:	f013 0f04 	tst.w	r3, #4
 800552a:	d121      	bne.n	8005570 <HAL_RCC_OscConfig+0x3b8>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800552c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800552e:	2b00      	cmp	r3, #0
 8005530:	f000 8131 	beq.w	8005796 <HAL_RCC_OscConfig+0x5de>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005534:	4a7e      	ldr	r2, [pc, #504]	; (8005730 <HAL_RCC_OscConfig+0x578>)
 8005536:	6912      	ldr	r2, [r2, #16]
 8005538:	f002 0238 	and.w	r2, r2, #56	; 0x38
 800553c:	2a18      	cmp	r2, #24
 800553e:	f000 80ea 	beq.w	8005716 <HAL_RCC_OscConfig+0x55e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005542:	2b02      	cmp	r3, #2
 8005544:	d075      	beq.n	8005632 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005546:	4a7a      	ldr	r2, [pc, #488]	; (8005730 <HAL_RCC_OscConfig+0x578>)
 8005548:	6813      	ldr	r3, [r2, #0]
 800554a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800554e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005550:	f7fd f900 	bl	8002754 <HAL_GetTick>
 8005554:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005556:	4b76      	ldr	r3, [pc, #472]	; (8005730 <HAL_RCC_OscConfig+0x578>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800555e:	f000 80d8 	beq.w	8005712 <HAL_RCC_OscConfig+0x55a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005562:	f7fd f8f7 	bl	8002754 <HAL_GetTick>
 8005566:	1b00      	subs	r0, r0, r4
 8005568:	2802      	cmp	r0, #2
 800556a:	d9f4      	bls.n	8005556 <HAL_RCC_OscConfig+0x39e>
          {
            return HAL_TIMEOUT;
 800556c:	2003      	movs	r0, #3
 800556e:	e113      	b.n	8005798 <HAL_RCC_OscConfig+0x5e0>
    PWR->CR1 |= PWR_CR1_DBP;
 8005570:	4a70      	ldr	r2, [pc, #448]	; (8005734 <HAL_RCC_OscConfig+0x57c>)
 8005572:	6813      	ldr	r3, [r2, #0]
 8005574:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005578:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800557a:	f7fd f8eb 	bl	8002754 <HAL_GetTick>
 800557e:	4605      	mov	r5, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005580:	4b6c      	ldr	r3, [pc, #432]	; (8005734 <HAL_RCC_OscConfig+0x57c>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005588:	d106      	bne.n	8005598 <HAL_RCC_OscConfig+0x3e0>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800558a:	f7fd f8e3 	bl	8002754 <HAL_GetTick>
 800558e:	1b40      	subs	r0, r0, r5
 8005590:	2864      	cmp	r0, #100	; 0x64
 8005592:	d9f5      	bls.n	8005580 <HAL_RCC_OscConfig+0x3c8>
        return HAL_TIMEOUT;
 8005594:	2003      	movs	r0, #3
 8005596:	e0ff      	b.n	8005798 <HAL_RCC_OscConfig+0x5e0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005598:	68a3      	ldr	r3, [r4, #8]
 800559a:	2b01      	cmp	r3, #1
 800559c:	d00a      	beq.n	80055b4 <HAL_RCC_OscConfig+0x3fc>
 800559e:	bb0b      	cbnz	r3, 80055e4 <HAL_RCC_OscConfig+0x42c>
 80055a0:	4b63      	ldr	r3, [pc, #396]	; (8005730 <HAL_RCC_OscConfig+0x578>)
 80055a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80055a4:	f022 0201 	bic.w	r2, r2, #1
 80055a8:	671a      	str	r2, [r3, #112]	; 0x70
 80055aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80055ac:	f022 0204 	bic.w	r2, r2, #4
 80055b0:	671a      	str	r2, [r3, #112]	; 0x70
 80055b2:	e004      	b.n	80055be <HAL_RCC_OscConfig+0x406>
 80055b4:	4a5e      	ldr	r2, [pc, #376]	; (8005730 <HAL_RCC_OscConfig+0x578>)
 80055b6:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80055b8:	f043 0301 	orr.w	r3, r3, #1
 80055bc:	6713      	str	r3, [r2, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80055be:	68a3      	ldr	r3, [r4, #8]
 80055c0:	b333      	cbz	r3, 8005610 <HAL_RCC_OscConfig+0x458>
      tickstart = HAL_GetTick();
 80055c2:	f7fd f8c7 	bl	8002754 <HAL_GetTick>
 80055c6:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80055c8:	4b59      	ldr	r3, [pc, #356]	; (8005730 <HAL_RCC_OscConfig+0x578>)
 80055ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055cc:	f013 0f02 	tst.w	r3, #2
 80055d0:	d1ac      	bne.n	800552c <HAL_RCC_OscConfig+0x374>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055d2:	f7fd f8bf 	bl	8002754 <HAL_GetTick>
 80055d6:	1b40      	subs	r0, r0, r5
 80055d8:	f241 3388 	movw	r3, #5000	; 0x1388
 80055dc:	4298      	cmp	r0, r3
 80055de:	d9f3      	bls.n	80055c8 <HAL_RCC_OscConfig+0x410>
          return HAL_TIMEOUT;
 80055e0:	2003      	movs	r0, #3
 80055e2:	e0d9      	b.n	8005798 <HAL_RCC_OscConfig+0x5e0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055e4:	2b05      	cmp	r3, #5
 80055e6:	d009      	beq.n	80055fc <HAL_RCC_OscConfig+0x444>
 80055e8:	4b51      	ldr	r3, [pc, #324]	; (8005730 <HAL_RCC_OscConfig+0x578>)
 80055ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80055ec:	f022 0201 	bic.w	r2, r2, #1
 80055f0:	671a      	str	r2, [r3, #112]	; 0x70
 80055f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80055f4:	f022 0204 	bic.w	r2, r2, #4
 80055f8:	671a      	str	r2, [r3, #112]	; 0x70
 80055fa:	e7e0      	b.n	80055be <HAL_RCC_OscConfig+0x406>
 80055fc:	4b4c      	ldr	r3, [pc, #304]	; (8005730 <HAL_RCC_OscConfig+0x578>)
 80055fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005600:	f042 0204 	orr.w	r2, r2, #4
 8005604:	671a      	str	r2, [r3, #112]	; 0x70
 8005606:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005608:	f042 0201 	orr.w	r2, r2, #1
 800560c:	671a      	str	r2, [r3, #112]	; 0x70
 800560e:	e7d6      	b.n	80055be <HAL_RCC_OscConfig+0x406>
      tickstart = HAL_GetTick();
 8005610:	f7fd f8a0 	bl	8002754 <HAL_GetTick>
 8005614:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005616:	4b46      	ldr	r3, [pc, #280]	; (8005730 <HAL_RCC_OscConfig+0x578>)
 8005618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800561a:	f013 0f02 	tst.w	r3, #2
 800561e:	d085      	beq.n	800552c <HAL_RCC_OscConfig+0x374>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005620:	f7fd f898 	bl	8002754 <HAL_GetTick>
 8005624:	1b40      	subs	r0, r0, r5
 8005626:	f241 3388 	movw	r3, #5000	; 0x1388
 800562a:	4298      	cmp	r0, r3
 800562c:	d9f3      	bls.n	8005616 <HAL_RCC_OscConfig+0x45e>
          return HAL_TIMEOUT;
 800562e:	2003      	movs	r0, #3
 8005630:	e0b2      	b.n	8005798 <HAL_RCC_OscConfig+0x5e0>
        __HAL_RCC_PLL_DISABLE();
 8005632:	4a3f      	ldr	r2, [pc, #252]	; (8005730 <HAL_RCC_OscConfig+0x578>)
 8005634:	6813      	ldr	r3, [r2, #0]
 8005636:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800563a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800563c:	f7fd f88a 	bl	8002754 <HAL_GetTick>
 8005640:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005642:	4b3b      	ldr	r3, [pc, #236]	; (8005730 <HAL_RCC_OscConfig+0x578>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800564a:	d006      	beq.n	800565a <HAL_RCC_OscConfig+0x4a2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800564c:	f7fd f882 	bl	8002754 <HAL_GetTick>
 8005650:	1b40      	subs	r0, r0, r5
 8005652:	2802      	cmp	r0, #2
 8005654:	d9f5      	bls.n	8005642 <HAL_RCC_OscConfig+0x48a>
            return HAL_TIMEOUT;
 8005656:	2003      	movs	r0, #3
 8005658:	e09e      	b.n	8005798 <HAL_RCC_OscConfig+0x5e0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800565a:	4b35      	ldr	r3, [pc, #212]	; (8005730 <HAL_RCC_OscConfig+0x578>)
 800565c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800565e:	4a36      	ldr	r2, [pc, #216]	; (8005738 <HAL_RCC_OscConfig+0x580>)
 8005660:	400a      	ands	r2, r1
 8005662:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005664:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8005666:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 800566a:	430a      	orrs	r2, r1
 800566c:	629a      	str	r2, [r3, #40]	; 0x28
 800566e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005670:	3a01      	subs	r2, #1
 8005672:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005676:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005678:	3901      	subs	r1, #1
 800567a:	0249      	lsls	r1, r1, #9
 800567c:	b289      	uxth	r1, r1
 800567e:	430a      	orrs	r2, r1
 8005680:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005682:	3901      	subs	r1, #1
 8005684:	0409      	lsls	r1, r1, #16
 8005686:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 800568a:	430a      	orrs	r2, r1
 800568c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800568e:	3901      	subs	r1, #1
 8005690:	0609      	lsls	r1, r1, #24
 8005692:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 8005696:	430a      	orrs	r2, r1
 8005698:	631a      	str	r2, [r3, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 800569a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800569c:	f022 0201 	bic.w	r2, r2, #1
 80056a0:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80056a2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80056a4:	4a25      	ldr	r2, [pc, #148]	; (800573c <HAL_RCC_OscConfig+0x584>)
 80056a6:	400a      	ands	r2, r1
 80056a8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80056aa:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80056ae:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80056b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056b2:	f022 020c 	bic.w	r2, r2, #12
 80056b6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80056b8:	430a      	orrs	r2, r1
 80056ba:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80056bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056be:	f022 0202 	bic.w	r2, r2, #2
 80056c2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80056c4:	430a      	orrs	r2, r1
 80056c6:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80056c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056ca:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80056ce:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056d2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80056d6:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80056d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056da:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80056de:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 80056e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056e2:	f042 0201 	orr.w	r2, r2, #1
 80056e6:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80056ee:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80056f0:	f7fd f830 	bl	8002754 <HAL_GetTick>
 80056f4:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80056f6:	4b0e      	ldr	r3, [pc, #56]	; (8005730 <HAL_RCC_OscConfig+0x578>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80056fe:	d106      	bne.n	800570e <HAL_RCC_OscConfig+0x556>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005700:	f7fd f828 	bl	8002754 <HAL_GetTick>
 8005704:	1b00      	subs	r0, r0, r4
 8005706:	2802      	cmp	r0, #2
 8005708:	d9f5      	bls.n	80056f6 <HAL_RCC_OscConfig+0x53e>
            return HAL_TIMEOUT;
 800570a:	2003      	movs	r0, #3
 800570c:	e044      	b.n	8005798 <HAL_RCC_OscConfig+0x5e0>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 800570e:	2000      	movs	r0, #0
 8005710:	e042      	b.n	8005798 <HAL_RCC_OscConfig+0x5e0>
 8005712:	2000      	movs	r0, #0
 8005714:	e040      	b.n	8005798 <HAL_RCC_OscConfig+0x5e0>
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005716:	4a06      	ldr	r2, [pc, #24]	; (8005730 <HAL_RCC_OscConfig+0x578>)
 8005718:	6a91      	ldr	r1, [r2, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800571a:	6b10      	ldr	r0, [r2, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800571c:	2b01      	cmp	r3, #1
 800571e:	d03c      	beq.n	800579a <HAL_RCC_OscConfig+0x5e2>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005720:	f001 0303 	and.w	r3, r1, #3
 8005724:	6aa2      	ldr	r2, [r4, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005726:	4293      	cmp	r3, r2
 8005728:	d00a      	beq.n	8005740 <HAL_RCC_OscConfig+0x588>
        return HAL_ERROR;
 800572a:	2001      	movs	r0, #1
 800572c:	e034      	b.n	8005798 <HAL_RCC_OscConfig+0x5e0>
 800572e:	bf00      	nop
 8005730:	58024400 	.word	0x58024400
 8005734:	58024800 	.word	0x58024800
 8005738:	fffffc0c 	.word	0xfffffc0c
 800573c:	ffff0007 	.word	0xffff0007
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005740:	f3c1 1105 	ubfx	r1, r1, #4, #6
 8005744:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005746:	4299      	cmp	r1, r3
 8005748:	d001      	beq.n	800574e <HAL_RCC_OscConfig+0x596>
        return HAL_ERROR;
 800574a:	2001      	movs	r0, #1
 800574c:	e024      	b.n	8005798 <HAL_RCC_OscConfig+0x5e0>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800574e:	f3c0 0208 	ubfx	r2, r0, #0, #9
 8005752:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005754:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005756:	429a      	cmp	r2, r3
 8005758:	d001      	beq.n	800575e <HAL_RCC_OscConfig+0x5a6>
        return HAL_ERROR;
 800575a:	2001      	movs	r0, #1
 800575c:	e01c      	b.n	8005798 <HAL_RCC_OscConfig+0x5e0>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800575e:	f3c0 2246 	ubfx	r2, r0, #9, #7
 8005762:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005764:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005766:	429a      	cmp	r2, r3
 8005768:	d001      	beq.n	800576e <HAL_RCC_OscConfig+0x5b6>
        return HAL_ERROR;
 800576a:	2001      	movs	r0, #1
 800576c:	e014      	b.n	8005798 <HAL_RCC_OscConfig+0x5e0>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800576e:	f3c0 4206 	ubfx	r2, r0, #16, #7
 8005772:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005774:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005776:	429a      	cmp	r2, r3
 8005778:	d111      	bne.n	800579e <HAL_RCC_OscConfig+0x5e6>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800577a:	f3c0 6006 	ubfx	r0, r0, #24, #7
 800577e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005780:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005782:	4298      	cmp	r0, r3
 8005784:	d00d      	beq.n	80057a2 <HAL_RCC_OscConfig+0x5ea>
        return HAL_ERROR;
 8005786:	2001      	movs	r0, #1
 8005788:	e006      	b.n	8005798 <HAL_RCC_OscConfig+0x5e0>
    return HAL_ERROR;
 800578a:	2001      	movs	r0, #1
}
 800578c:	4770      	bx	lr
        return HAL_ERROR;
 800578e:	2001      	movs	r0, #1
 8005790:	e002      	b.n	8005798 <HAL_RCC_OscConfig+0x5e0>
        return HAL_ERROR;
 8005792:	2001      	movs	r0, #1
 8005794:	e000      	b.n	8005798 <HAL_RCC_OscConfig+0x5e0>
  return HAL_OK;
 8005796:	2000      	movs	r0, #0
}
 8005798:	bd38      	pop	{r3, r4, r5, pc}
        return HAL_ERROR;
 800579a:	2001      	movs	r0, #1
 800579c:	e7fc      	b.n	8005798 <HAL_RCC_OscConfig+0x5e0>
 800579e:	2001      	movs	r0, #1
 80057a0:	e7fa      	b.n	8005798 <HAL_RCC_OscConfig+0x5e0>
  return HAL_OK;
 80057a2:	2000      	movs	r0, #0
 80057a4:	e7f8      	b.n	8005798 <HAL_RCC_OscConfig+0x5e0>
 80057a6:	bf00      	nop

080057a8 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80057a8:	b570      	push	{r4, r5, r6, lr}
 80057aa:	b088      	sub	sp, #32
 80057ac:	460c      	mov	r4, r1
 80057ae:	4616      	mov	r6, r2
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 80057b0:	b318      	cbz	r0, 80057fa <HAL_RCC_MCOConfig+0x52>
  else
  {
    assert_param(IS_RCC_MCO2SOURCE(RCC_MCOSource));

    /* MCO2 Clock Enable */
    MCO2_CLK_ENABLE();
 80057b2:	4d23      	ldr	r5, [pc, #140]	; (8005840 <HAL_RCC_MCOConfig+0x98>)
 80057b4:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80057b8:	f043 0304 	orr.w	r3, r3, #4
 80057bc:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 80057c0:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 80057c4:	f003 0304 	and.w	r3, r3, #4
 80057c8:	9302      	str	r3, [sp, #8]
 80057ca:	9b02      	ldr	r3, [sp, #8]

    /* Configure the MCO2 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO2_PIN;
 80057cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80057d0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057d2:	2302      	movs	r3, #2
 80057d4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057d6:	2303      	movs	r3, #3
 80057d8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057da:	2300      	movs	r3, #0
 80057dc:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80057de:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80057e0:	a903      	add	r1, sp, #12
 80057e2:	4818      	ldr	r0, [pc, #96]	; (8005844 <HAL_RCC_MCOConfig+0x9c>)
 80057e4:	f7ff f872 	bl	80048cc <HAL_GPIO_Init>

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 80057e8:	692b      	ldr	r3, [r5, #16]
 80057ea:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80057ee:	ea44 14c6 	orr.w	r4, r4, r6, lsl #7
 80057f2:	431c      	orrs	r4, r3
 80057f4:	612c      	str	r4, [r5, #16]
  }
}
 80057f6:	b008      	add	sp, #32
 80057f8:	bd70      	pop	{r4, r5, r6, pc}
    MCO1_CLK_ENABLE();
 80057fa:	4d11      	ldr	r5, [pc, #68]	; (8005840 <HAL_RCC_MCOConfig+0x98>)
 80057fc:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 8005800:	f043 0301 	orr.w	r3, r3, #1
 8005804:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
 8005808:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
 800580c:	f003 0301 	and.w	r3, r3, #1
 8005810:	9301      	str	r3, [sp, #4]
 8005812:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = MCO1_PIN;
 8005814:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005818:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800581a:	2302      	movs	r3, #2
 800581c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800581e:	2303      	movs	r3, #3
 8005820:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005822:	2300      	movs	r3, #0
 8005824:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005826:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8005828:	a903      	add	r1, sp, #12
 800582a:	4807      	ldr	r0, [pc, #28]	; (8005848 <HAL_RCC_MCOConfig+0xa0>)
 800582c:	f7ff f84e 	bl	80048cc <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8005830:	692b      	ldr	r3, [r5, #16]
 8005832:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 8005836:	4334      	orrs	r4, r6
 8005838:	431c      	orrs	r4, r3
 800583a:	612c      	str	r4, [r5, #16]
 800583c:	e7db      	b.n	80057f6 <HAL_RCC_MCOConfig+0x4e>
 800583e:	bf00      	nop
 8005840:	58024400 	.word	0x58024400
 8005844:	58020800 	.word	0x58020800
 8005848:	58020000 	.word	0x58020000

0800584c <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800584c:	4b72      	ldr	r3, [pc, #456]	; (8005a18 <HAL_RCC_GetSysClockFreq+0x1cc>)
 800584e:	691b      	ldr	r3, [r3, #16]
 8005850:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005854:	2b10      	cmp	r3, #16
 8005856:	f000 80db 	beq.w	8005a10 <HAL_RCC_GetSysClockFreq+0x1c4>
 800585a:	2b18      	cmp	r3, #24
 800585c:	d010      	beq.n	8005880 <HAL_RCC_GetSysClockFreq+0x34>
 800585e:	b10b      	cbz	r3, 8005864 <HAL_RCC_GetSysClockFreq+0x18>
      }

    break;

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005860:	486e      	ldr	r0, [pc, #440]	; (8005a1c <HAL_RCC_GetSysClockFreq+0x1d0>)
 8005862:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005864:	4b6c      	ldr	r3, [pc, #432]	; (8005a18 <HAL_RCC_GetSysClockFreq+0x1cc>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f013 0f20 	tst.w	r3, #32
 800586c:	f000 80d2 	beq.w	8005a14 <HAL_RCC_GetSysClockFreq+0x1c8>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005870:	4b69      	ldr	r3, [pc, #420]	; (8005a18 <HAL_RCC_GetSysClockFreq+0x1cc>)
 8005872:	6818      	ldr	r0, [r3, #0]
 8005874:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 8005878:	4b69      	ldr	r3, [pc, #420]	; (8005a20 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800587a:	fa23 f000 	lsr.w	r0, r3, r0
 800587e:	4770      	bx	lr
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005880:	4a65      	ldr	r2, [pc, #404]	; (8005a18 <HAL_RCC_GetSysClockFreq+0x1cc>)
 8005882:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005884:	f001 0103 	and.w	r1, r1, #3
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005888:	6a90      	ldr	r0, [r2, #40]	; 0x28
 800588a:	f3c0 1005 	ubfx	r0, r0, #4, #6
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800588e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005890:	f003 0301 	and.w	r3, r3, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005894:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005896:	f3c2 02cc 	ubfx	r2, r2, #3, #13
 800589a:	fb03 f302 	mul.w	r3, r3, r2
 800589e:	ee07 3a90 	vmov	s15, r3
 80058a2:	eef8 7a67 	vcvt.f32.u32	s15, s15

    if (pllm != 0U)
 80058a6:	2800      	cmp	r0, #0
 80058a8:	f000 80b5 	beq.w	8005a16 <HAL_RCC_GetSysClockFreq+0x1ca>
    {
      switch (pllsource)
 80058ac:	2901      	cmp	r1, #1
 80058ae:	d066      	beq.n	800597e <HAL_RCC_GetSysClockFreq+0x132>
 80058b0:	b1f9      	cbz	r1, 80058f2 <HAL_RCC_GetSysClockFreq+0xa6>
 80058b2:	2902      	cmp	r1, #2
 80058b4:	f000 808f 	beq.w	80059d6 <HAL_RCC_GetSysClockFreq+0x18a>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80058b8:	ee07 0a10 	vmov	s14, r0
 80058bc:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80058c0:	ed9f 6a58 	vldr	s12, [pc, #352]	; 8005a24 <HAL_RCC_GetSysClockFreq+0x1d8>
 80058c4:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80058c8:	4b53      	ldr	r3, [pc, #332]	; (8005a18 <HAL_RCC_GetSysClockFreq+0x1cc>)
 80058ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058d0:	ee06 3a90 	vmov	s13, r3
 80058d4:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80058d8:	ed9f 6a53 	vldr	s12, [pc, #332]	; 8005a28 <HAL_RCC_GetSysClockFreq+0x1dc>
 80058dc:	ee67 7a86 	vmul.f32	s15, s15, s12
 80058e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058ec:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 80058f0:	e061      	b.n	80059b6 <HAL_RCC_GetSysClockFreq+0x16a>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80058f2:	4b49      	ldr	r3, [pc, #292]	; (8005a18 <HAL_RCC_GetSysClockFreq+0x1cc>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f013 0f20 	tst.w	r3, #32
 80058fa:	d023      	beq.n	8005944 <HAL_RCC_GetSysClockFreq+0xf8>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80058fc:	4946      	ldr	r1, [pc, #280]	; (8005a18 <HAL_RCC_GetSysClockFreq+0x1cc>)
 80058fe:	680a      	ldr	r2, [r1, #0]
 8005900:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8005904:	4b46      	ldr	r3, [pc, #280]	; (8005a20 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8005906:	40d3      	lsrs	r3, r2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005908:	ee07 3a10 	vmov	s14, r3
 800590c:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8005910:	ee07 0a10 	vmov	s14, r0
 8005914:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 8005918:	ee86 7a86 	vdiv.f32	s14, s13, s12
 800591c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800591e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005922:	ee06 3a90 	vmov	s13, r3
 8005926:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800592a:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 8005a28 <HAL_RCC_GetSysClockFreq+0x1dc>
 800592e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005932:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005936:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800593a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800593e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005942:	e038      	b.n	80059b6 <HAL_RCC_GetSysClockFreq+0x16a>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005944:	ee07 0a10 	vmov	s14, r0
 8005948:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800594c:	ed9f 6a37 	vldr	s12, [pc, #220]	; 8005a2c <HAL_RCC_GetSysClockFreq+0x1e0>
 8005950:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8005954:	4b30      	ldr	r3, [pc, #192]	; (8005a18 <HAL_RCC_GetSysClockFreq+0x1cc>)
 8005956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005958:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800595c:	ee06 3a90 	vmov	s13, r3
 8005960:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8005964:	ed9f 6a30 	vldr	s12, [pc, #192]	; 8005a28 <HAL_RCC_GetSysClockFreq+0x1dc>
 8005968:	ee67 7a86 	vmul.f32	s15, s15, s12
 800596c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005970:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005974:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005978:	ee27 7a27 	vmul.f32	s14, s14, s15
 800597c:	e01b      	b.n	80059b6 <HAL_RCC_GetSysClockFreq+0x16a>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800597e:	ee07 0a10 	vmov	s14, r0
 8005982:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8005986:	ed9f 6a27 	vldr	s12, [pc, #156]	; 8005a24 <HAL_RCC_GetSysClockFreq+0x1d8>
 800598a:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800598e:	4b22      	ldr	r3, [pc, #136]	; (8005a18 <HAL_RCC_GetSysClockFreq+0x1cc>)
 8005990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005992:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005996:	ee06 3a90 	vmov	s13, r3
 800599a:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800599e:	ed9f 6a22 	vldr	s12, [pc, #136]	; 8005a28 <HAL_RCC_GetSysClockFreq+0x1dc>
 80059a2:	ee67 7a86 	vmul.f32	s15, s15, s12
 80059a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059b2:	ee27 7a27 	vmul.f32	s14, s14, s15
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80059b6:	4b18      	ldr	r3, [pc, #96]	; (8005a18 <HAL_RCC_GetSysClockFreq+0x1cc>)
 80059b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ba:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80059be:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80059c0:	ee07 3a90 	vmov	s15, r3
 80059c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059c8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80059cc:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 80059d0:	ee17 0a90 	vmov	r0, s15
 80059d4:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80059d6:	ee07 0a10 	vmov	s14, r0
 80059da:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80059de:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8005a30 <HAL_RCC_GetSysClockFreq+0x1e4>
 80059e2:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80059e6:	4b0c      	ldr	r3, [pc, #48]	; (8005a18 <HAL_RCC_GetSysClockFreq+0x1cc>)
 80059e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059ee:	ee06 3a90 	vmov	s13, r3
 80059f2:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80059f6:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 8005a28 <HAL_RCC_GetSysClockFreq+0x1dc>
 80059fa:	ee67 7a86 	vmul.f32	s15, s15, s12
 80059fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a0a:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 8005a0e:	e7d2      	b.n	80059b6 <HAL_RCC_GetSysClockFreq+0x16a>
    sysclockfreq = HSE_VALUE;
 8005a10:	4808      	ldr	r0, [pc, #32]	; (8005a34 <HAL_RCC_GetSysClockFreq+0x1e8>)
 8005a12:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005a14:	4802      	ldr	r0, [pc, #8]	; (8005a20 <HAL_RCC_GetSysClockFreq+0x1d4>)
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 8005a16:	4770      	bx	lr
 8005a18:	58024400 	.word	0x58024400
 8005a1c:	003d0900 	.word	0x003d0900
 8005a20:	03d09000 	.word	0x03d09000
 8005a24:	4a742400 	.word	0x4a742400
 8005a28:	39000000 	.word	0x39000000
 8005a2c:	4c742400 	.word	0x4c742400
 8005a30:	4bbebc20 	.word	0x4bbebc20
 8005a34:	017d7840 	.word	0x017d7840

08005a38 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8005a38:	2800      	cmp	r0, #0
 8005a3a:	f000 8136 	beq.w	8005caa <HAL_RCC_ClockConfig+0x272>
 8005a3e:	4603      	mov	r3, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a40:	4a9c      	ldr	r2, [pc, #624]	; (8005cb4 <HAL_RCC_ClockConfig+0x27c>)
 8005a42:	6812      	ldr	r2, [r2, #0]
 8005a44:	f002 020f 	and.w	r2, r2, #15
 8005a48:	428a      	cmp	r2, r1
 8005a4a:	d20c      	bcs.n	8005a66 <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a4c:	4899      	ldr	r0, [pc, #612]	; (8005cb4 <HAL_RCC_ClockConfig+0x27c>)
 8005a4e:	6802      	ldr	r2, [r0, #0]
 8005a50:	f022 020f 	bic.w	r2, r2, #15
 8005a54:	430a      	orrs	r2, r1
 8005a56:	6002      	str	r2, [r0, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a58:	6802      	ldr	r2, [r0, #0]
 8005a5a:	f002 020f 	and.w	r2, r2, #15
 8005a5e:	428a      	cmp	r2, r1
 8005a60:	d001      	beq.n	8005a66 <HAL_RCC_ClockConfig+0x2e>
      return HAL_ERROR;
 8005a62:	2001      	movs	r0, #1
}
 8005a64:	4770      	bx	lr
{
 8005a66:	b570      	push	{r4, r5, r6, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	f012 0f04 	tst.w	r2, #4
 8005a6e:	d00c      	beq.n	8005a8a <HAL_RCC_ClockConfig+0x52>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005a70:	6918      	ldr	r0, [r3, #16]
 8005a72:	4a91      	ldr	r2, [pc, #580]	; (8005cb8 <HAL_RCC_ClockConfig+0x280>)
 8005a74:	6992      	ldr	r2, [r2, #24]
 8005a76:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8005a7a:	4290      	cmp	r0, r2
 8005a7c:	d905      	bls.n	8005a8a <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005a7e:	4c8e      	ldr	r4, [pc, #568]	; (8005cb8 <HAL_RCC_ClockConfig+0x280>)
 8005a80:	69a2      	ldr	r2, [r4, #24]
 8005a82:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005a86:	4310      	orrs	r0, r2
 8005a88:	61a0      	str	r0, [r4, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	f012 0f08 	tst.w	r2, #8
 8005a90:	d00c      	beq.n	8005aac <HAL_RCC_ClockConfig+0x74>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005a92:	6958      	ldr	r0, [r3, #20]
 8005a94:	4a88      	ldr	r2, [pc, #544]	; (8005cb8 <HAL_RCC_ClockConfig+0x280>)
 8005a96:	69d2      	ldr	r2, [r2, #28]
 8005a98:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8005a9c:	4290      	cmp	r0, r2
 8005a9e:	d905      	bls.n	8005aac <HAL_RCC_ClockConfig+0x74>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005aa0:	4c85      	ldr	r4, [pc, #532]	; (8005cb8 <HAL_RCC_ClockConfig+0x280>)
 8005aa2:	69e2      	ldr	r2, [r4, #28]
 8005aa4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005aa8:	4310      	orrs	r0, r2
 8005aaa:	61e0      	str	r0, [r4, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	f012 0f10 	tst.w	r2, #16
 8005ab2:	d00c      	beq.n	8005ace <HAL_RCC_ClockConfig+0x96>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005ab4:	6998      	ldr	r0, [r3, #24]
 8005ab6:	4a80      	ldr	r2, [pc, #512]	; (8005cb8 <HAL_RCC_ClockConfig+0x280>)
 8005ab8:	69d2      	ldr	r2, [r2, #28]
 8005aba:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8005abe:	4290      	cmp	r0, r2
 8005ac0:	d905      	bls.n	8005ace <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005ac2:	4c7d      	ldr	r4, [pc, #500]	; (8005cb8 <HAL_RCC_ClockConfig+0x280>)
 8005ac4:	69e2      	ldr	r2, [r4, #28]
 8005ac6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005aca:	4310      	orrs	r0, r2
 8005acc:	61e0      	str	r0, [r4, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	f012 0f20 	tst.w	r2, #32
 8005ad4:	d00c      	beq.n	8005af0 <HAL_RCC_ClockConfig+0xb8>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005ad6:	69d8      	ldr	r0, [r3, #28]
 8005ad8:	4a77      	ldr	r2, [pc, #476]	; (8005cb8 <HAL_RCC_ClockConfig+0x280>)
 8005ada:	6a12      	ldr	r2, [r2, #32]
 8005adc:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8005ae0:	4290      	cmp	r0, r2
 8005ae2:	d905      	bls.n	8005af0 <HAL_RCC_ClockConfig+0xb8>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005ae4:	4c74      	ldr	r4, [pc, #464]	; (8005cb8 <HAL_RCC_ClockConfig+0x280>)
 8005ae6:	6a22      	ldr	r2, [r4, #32]
 8005ae8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005aec:	4310      	orrs	r0, r2
 8005aee:	6220      	str	r0, [r4, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	f012 0f02 	tst.w	r2, #2
 8005af6:	d00c      	beq.n	8005b12 <HAL_RCC_ClockConfig+0xda>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005af8:	68d8      	ldr	r0, [r3, #12]
 8005afa:	4a6f      	ldr	r2, [pc, #444]	; (8005cb8 <HAL_RCC_ClockConfig+0x280>)
 8005afc:	6992      	ldr	r2, [r2, #24]
 8005afe:	f002 020f 	and.w	r2, r2, #15
 8005b02:	4290      	cmp	r0, r2
 8005b04:	d905      	bls.n	8005b12 <HAL_RCC_ClockConfig+0xda>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b06:	4c6c      	ldr	r4, [pc, #432]	; (8005cb8 <HAL_RCC_ClockConfig+0x280>)
 8005b08:	69a2      	ldr	r2, [r4, #24]
 8005b0a:	f022 020f 	bic.w	r2, r2, #15
 8005b0e:	4310      	orrs	r0, r2
 8005b10:	61a0      	str	r0, [r4, #24]
 8005b12:	461c      	mov	r4, r3
 8005b14:	460d      	mov	r5, r1
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f013 0f01 	tst.w	r3, #1
 8005b1c:	d041      	beq.n	8005ba2 <HAL_RCC_ClockConfig+0x16a>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005b1e:	4a66      	ldr	r2, [pc, #408]	; (8005cb8 <HAL_RCC_ClockConfig+0x280>)
 8005b20:	6993      	ldr	r3, [r2, #24]
 8005b22:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005b26:	68a1      	ldr	r1, [r4, #8]
 8005b28:	430b      	orrs	r3, r1
 8005b2a:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b2c:	6863      	ldr	r3, [r4, #4]
 8005b2e:	2b02      	cmp	r3, #2
 8005b30:	d00a      	beq.n	8005b48 <HAL_RCC_ClockConfig+0x110>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b32:	2b03      	cmp	r3, #3
 8005b34:	d027      	beq.n	8005b86 <HAL_RCC_ClockConfig+0x14e>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	d02c      	beq.n	8005b94 <HAL_RCC_ClockConfig+0x15c>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005b3a:	4a5f      	ldr	r2, [pc, #380]	; (8005cb8 <HAL_RCC_ClockConfig+0x280>)
 8005b3c:	6812      	ldr	r2, [r2, #0]
 8005b3e:	f012 0f04 	tst.w	r2, #4
 8005b42:	d106      	bne.n	8005b52 <HAL_RCC_ClockConfig+0x11a>
          return HAL_ERROR;
 8005b44:	2001      	movs	r0, #1
 8005b46:	e0af      	b.n	8005ca8 <HAL_RCC_ClockConfig+0x270>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005b48:	6812      	ldr	r2, [r2, #0]
 8005b4a:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8005b4e:	f000 80ae 	beq.w	8005cae <HAL_RCC_ClockConfig+0x276>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005b52:	4959      	ldr	r1, [pc, #356]	; (8005cb8 <HAL_RCC_ClockConfig+0x280>)
 8005b54:	690a      	ldr	r2, [r1, #16]
 8005b56:	f022 0207 	bic.w	r2, r2, #7
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	610b      	str	r3, [r1, #16]
      tickstart = HAL_GetTick();
 8005b5e:	f7fc fdf9 	bl	8002754 <HAL_GetTick>
 8005b62:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b64:	4b54      	ldr	r3, [pc, #336]	; (8005cb8 <HAL_RCC_ClockConfig+0x280>)
 8005b66:	691b      	ldr	r3, [r3, #16]
 8005b68:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b6c:	6862      	ldr	r2, [r4, #4]
 8005b6e:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8005b72:	d016      	beq.n	8005ba2 <HAL_RCC_ClockConfig+0x16a>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b74:	f7fc fdee 	bl	8002754 <HAL_GetTick>
 8005b78:	1b80      	subs	r0, r0, r6
 8005b7a:	f241 3388 	movw	r3, #5000	; 0x1388
 8005b7e:	4298      	cmp	r0, r3
 8005b80:	d9f0      	bls.n	8005b64 <HAL_RCC_ClockConfig+0x12c>
            return HAL_TIMEOUT;
 8005b82:	2003      	movs	r0, #3
 8005b84:	e090      	b.n	8005ca8 <HAL_RCC_ClockConfig+0x270>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005b86:	4a4c      	ldr	r2, [pc, #304]	; (8005cb8 <HAL_RCC_ClockConfig+0x280>)
 8005b88:	6812      	ldr	r2, [r2, #0]
 8005b8a:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8005b8e:	d1e0      	bne.n	8005b52 <HAL_RCC_ClockConfig+0x11a>
          return HAL_ERROR;
 8005b90:	2001      	movs	r0, #1
 8005b92:	e089      	b.n	8005ca8 <HAL_RCC_ClockConfig+0x270>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005b94:	4a48      	ldr	r2, [pc, #288]	; (8005cb8 <HAL_RCC_ClockConfig+0x280>)
 8005b96:	6812      	ldr	r2, [r2, #0]
 8005b98:	f412 7f80 	tst.w	r2, #256	; 0x100
 8005b9c:	d1d9      	bne.n	8005b52 <HAL_RCC_ClockConfig+0x11a>
          return HAL_ERROR;
 8005b9e:	2001      	movs	r0, #1
 8005ba0:	e082      	b.n	8005ca8 <HAL_RCC_ClockConfig+0x270>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ba2:	6823      	ldr	r3, [r4, #0]
 8005ba4:	f013 0f02 	tst.w	r3, #2
 8005ba8:	d00c      	beq.n	8005bc4 <HAL_RCC_ClockConfig+0x18c>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005baa:	68e2      	ldr	r2, [r4, #12]
 8005bac:	4b42      	ldr	r3, [pc, #264]	; (8005cb8 <HAL_RCC_ClockConfig+0x280>)
 8005bae:	699b      	ldr	r3, [r3, #24]
 8005bb0:	f003 030f 	and.w	r3, r3, #15
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d205      	bcs.n	8005bc4 <HAL_RCC_ClockConfig+0x18c>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bb8:	493f      	ldr	r1, [pc, #252]	; (8005cb8 <HAL_RCC_ClockConfig+0x280>)
 8005bba:	698b      	ldr	r3, [r1, #24]
 8005bbc:	f023 030f 	bic.w	r3, r3, #15
 8005bc0:	431a      	orrs	r2, r3
 8005bc2:	618a      	str	r2, [r1, #24]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005bc4:	4b3b      	ldr	r3, [pc, #236]	; (8005cb4 <HAL_RCC_ClockConfig+0x27c>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 030f 	and.w	r3, r3, #15
 8005bcc:	42ab      	cmp	r3, r5
 8005bce:	d90c      	bls.n	8005bea <HAL_RCC_ClockConfig+0x1b2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bd0:	4a38      	ldr	r2, [pc, #224]	; (8005cb4 <HAL_RCC_ClockConfig+0x27c>)
 8005bd2:	6813      	ldr	r3, [r2, #0]
 8005bd4:	f023 030f 	bic.w	r3, r3, #15
 8005bd8:	432b      	orrs	r3, r5
 8005bda:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bdc:	6813      	ldr	r3, [r2, #0]
 8005bde:	f003 030f 	and.w	r3, r3, #15
 8005be2:	42ab      	cmp	r3, r5
 8005be4:	d001      	beq.n	8005bea <HAL_RCC_ClockConfig+0x1b2>
      return HAL_ERROR;
 8005be6:	2001      	movs	r0, #1
 8005be8:	e05e      	b.n	8005ca8 <HAL_RCC_ClockConfig+0x270>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005bea:	6823      	ldr	r3, [r4, #0]
 8005bec:	f013 0f04 	tst.w	r3, #4
 8005bf0:	d00c      	beq.n	8005c0c <HAL_RCC_ClockConfig+0x1d4>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005bf2:	6922      	ldr	r2, [r4, #16]
 8005bf4:	4b30      	ldr	r3, [pc, #192]	; (8005cb8 <HAL_RCC_ClockConfig+0x280>)
 8005bf6:	699b      	ldr	r3, [r3, #24]
 8005bf8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d205      	bcs.n	8005c0c <HAL_RCC_ClockConfig+0x1d4>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005c00:	492d      	ldr	r1, [pc, #180]	; (8005cb8 <HAL_RCC_ClockConfig+0x280>)
 8005c02:	698b      	ldr	r3, [r1, #24]
 8005c04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c08:	431a      	orrs	r2, r3
 8005c0a:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c0c:	6823      	ldr	r3, [r4, #0]
 8005c0e:	f013 0f08 	tst.w	r3, #8
 8005c12:	d00c      	beq.n	8005c2e <HAL_RCC_ClockConfig+0x1f6>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005c14:	6962      	ldr	r2, [r4, #20]
 8005c16:	4b28      	ldr	r3, [pc, #160]	; (8005cb8 <HAL_RCC_ClockConfig+0x280>)
 8005c18:	69db      	ldr	r3, [r3, #28]
 8005c1a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d205      	bcs.n	8005c2e <HAL_RCC_ClockConfig+0x1f6>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005c22:	4925      	ldr	r1, [pc, #148]	; (8005cb8 <HAL_RCC_ClockConfig+0x280>)
 8005c24:	69cb      	ldr	r3, [r1, #28]
 8005c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c2a:	431a      	orrs	r2, r3
 8005c2c:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c2e:	6823      	ldr	r3, [r4, #0]
 8005c30:	f013 0f10 	tst.w	r3, #16
 8005c34:	d00c      	beq.n	8005c50 <HAL_RCC_ClockConfig+0x218>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005c36:	69a2      	ldr	r2, [r4, #24]
 8005c38:	4b1f      	ldr	r3, [pc, #124]	; (8005cb8 <HAL_RCC_ClockConfig+0x280>)
 8005c3a:	69db      	ldr	r3, [r3, #28]
 8005c3c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d205      	bcs.n	8005c50 <HAL_RCC_ClockConfig+0x218>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005c44:	491c      	ldr	r1, [pc, #112]	; (8005cb8 <HAL_RCC_ClockConfig+0x280>)
 8005c46:	69cb      	ldr	r3, [r1, #28]
 8005c48:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005c4c:	431a      	orrs	r2, r3
 8005c4e:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005c50:	6823      	ldr	r3, [r4, #0]
 8005c52:	f013 0f20 	tst.w	r3, #32
 8005c56:	d00c      	beq.n	8005c72 <HAL_RCC_ClockConfig+0x23a>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005c58:	69e2      	ldr	r2, [r4, #28]
 8005c5a:	4b17      	ldr	r3, [pc, #92]	; (8005cb8 <HAL_RCC_ClockConfig+0x280>)
 8005c5c:	6a1b      	ldr	r3, [r3, #32]
 8005c5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d205      	bcs.n	8005c72 <HAL_RCC_ClockConfig+0x23a>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005c66:	4914      	ldr	r1, [pc, #80]	; (8005cb8 <HAL_RCC_ClockConfig+0x280>)
 8005c68:	6a0b      	ldr	r3, [r1, #32]
 8005c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c6e:	431a      	orrs	r2, r3
 8005c70:	620a      	str	r2, [r1, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005c72:	f7ff fdeb 	bl	800584c <HAL_RCC_GetSysClockFreq>
 8005c76:	4910      	ldr	r1, [pc, #64]	; (8005cb8 <HAL_RCC_ClockConfig+0x280>)
 8005c78:	698b      	ldr	r3, [r1, #24]
 8005c7a:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8005c7e:	4a0f      	ldr	r2, [pc, #60]	; (8005cbc <HAL_RCC_ClockConfig+0x284>)
 8005c80:	5cd3      	ldrb	r3, [r2, r3]
 8005c82:	f003 031f 	and.w	r3, r3, #31
 8005c86:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005c88:	698b      	ldr	r3, [r1, #24]
 8005c8a:	f003 030f 	and.w	r3, r3, #15
 8005c8e:	5cd3      	ldrb	r3, [r2, r3]
 8005c90:	f003 031f 	and.w	r3, r3, #31
 8005c94:	fa20 f303 	lsr.w	r3, r0, r3
 8005c98:	4a09      	ldr	r2, [pc, #36]	; (8005cc0 <HAL_RCC_ClockConfig+0x288>)
 8005c9a:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8005c9c:	4b09      	ldr	r3, [pc, #36]	; (8005cc4 <HAL_RCC_ClockConfig+0x28c>)
 8005c9e:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick (uwTickPrio);
 8005ca0:	4b09      	ldr	r3, [pc, #36]	; (8005cc8 <HAL_RCC_ClockConfig+0x290>)
 8005ca2:	6818      	ldr	r0, [r3, #0]
 8005ca4:	f7fc fbae 	bl	8002404 <HAL_InitTick>
}
 8005ca8:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8005caa:	2001      	movs	r0, #1
 8005cac:	4770      	bx	lr
          return HAL_ERROR;
 8005cae:	2001      	movs	r0, #1
 8005cb0:	e7fa      	b.n	8005ca8 <HAL_RCC_ClockConfig+0x270>
 8005cb2:	bf00      	nop
 8005cb4:	52002000 	.word	0x52002000
 8005cb8:	58024400 	.word	0x58024400
 8005cbc:	0800cfb0 	.word	0x0800cfb0
 8005cc0:	200000dc 	.word	0x200000dc
 8005cc4:	200000d8 	.word	0x200000d8
 8005cc8:	200000e4 	.word	0x200000e4

08005ccc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ccc:	b508      	push	{r3, lr}
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005cce:	f7ff fdbd 	bl	800584c <HAL_RCC_GetSysClockFreq>
 8005cd2:	4a0b      	ldr	r2, [pc, #44]	; (8005d00 <HAL_RCC_GetHCLKFreq+0x34>)
 8005cd4:	6993      	ldr	r3, [r2, #24]
 8005cd6:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8005cda:	490a      	ldr	r1, [pc, #40]	; (8005d04 <HAL_RCC_GetHCLKFreq+0x38>)
 8005cdc:	5ccb      	ldrb	r3, [r1, r3]
 8005cde:	f003 031f 	and.w	r3, r3, #31
 8005ce2:	fa20 f303 	lsr.w	r3, r0, r3
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005ce6:	6992      	ldr	r2, [r2, #24]
 8005ce8:	f002 020f 	and.w	r2, r2, #15
 8005cec:	5c88      	ldrb	r0, [r1, r2]
 8005cee:	f000 001f 	and.w	r0, r0, #31
 8005cf2:	fa23 f000 	lsr.w	r0, r3, r0
 8005cf6:	4a04      	ldr	r2, [pc, #16]	; (8005d08 <HAL_RCC_GetHCLKFreq+0x3c>)
 8005cf8:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005cfa:	4a04      	ldr	r2, [pc, #16]	; (8005d0c <HAL_RCC_GetHCLKFreq+0x40>)
 8005cfc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8005cfe:	bd08      	pop	{r3, pc}
 8005d00:	58024400 	.word	0x58024400
 8005d04:	0800cfb0 	.word	0x0800cfb0
 8005d08:	200000dc 	.word	0x200000dc
 8005d0c:	200000d8 	.word	0x200000d8

08005d10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d10:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005d12:	f7ff ffdb 	bl	8005ccc <HAL_RCC_GetHCLKFreq>
 8005d16:	4b05      	ldr	r3, [pc, #20]	; (8005d2c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005d18:	69db      	ldr	r3, [r3, #28]
 8005d1a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8005d1e:	4a04      	ldr	r2, [pc, #16]	; (8005d30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d20:	5cd3      	ldrb	r3, [r2, r3]
 8005d22:	f003 031f 	and.w	r3, r3, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005d26:	40d8      	lsrs	r0, r3
 8005d28:	bd08      	pop	{r3, pc}
 8005d2a:	bf00      	nop
 8005d2c:	58024400 	.word	0x58024400
 8005d30:	0800cfb0 	.word	0x0800cfb0

08005d34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d34:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005d36:	f7ff ffc9 	bl	8005ccc <HAL_RCC_GetHCLKFreq>
 8005d3a:	4b05      	ldr	r3, [pc, #20]	; (8005d50 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8005d3c:	69db      	ldr	r3, [r3, #28]
 8005d3e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8005d42:	4a04      	ldr	r2, [pc, #16]	; (8005d54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005d44:	5cd3      	ldrb	r3, [r2, r3]
 8005d46:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005d4a:	40d8      	lsrs	r0, r3
 8005d4c:	bd08      	pop	{r3, pc}
 8005d4e:	bf00      	nop
 8005d50:	58024400 	.word	0x58024400
 8005d54:	0800cfb0 	.word	0x0800cfb0

08005d58 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8005d58:	233f      	movs	r3, #63	; 0x3f
 8005d5a:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005d5c:	4b11      	ldr	r3, [pc, #68]	; (8005da4 <HAL_RCC_GetClockConfig+0x4c>)
 8005d5e:	691a      	ldr	r2, [r3, #16]
 8005d60:	f002 0207 	and.w	r2, r2, #7
 8005d64:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8005d66:	699a      	ldr	r2, [r3, #24]
 8005d68:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 8005d6c:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8005d6e:	699a      	ldr	r2, [r3, #24]
 8005d70:	f002 020f 	and.w	r2, r2, #15
 8005d74:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8005d76:	699a      	ldr	r2, [r3, #24]
 8005d78:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8005d7c:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8005d7e:	69da      	ldr	r2, [r3, #28]
 8005d80:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8005d84:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8005d86:	69da      	ldr	r2, [r3, #28]
 8005d88:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8005d8c:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8005d8e:	6a1b      	ldr	r3, [r3, #32]
 8005d90:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d94:	61c3      	str	r3, [r0, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005d96:	4b04      	ldr	r3, [pc, #16]	; (8005da8 <HAL_RCC_GetClockConfig+0x50>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f003 030f 	and.w	r3, r3, #15
 8005d9e:	600b      	str	r3, [r1, #0]
}
 8005da0:	4770      	bx	lr
 8005da2:	bf00      	nop
 8005da4:	58024400 	.word	0x58024400
 8005da8:	52002000 	.word	0x52002000

08005dac <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005dac:	4b40      	ldr	r3, [pc, #256]	; (8005eb0 <RCCEx_PLL2_Config+0x104>)
 8005dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005db0:	f003 0303 	and.w	r3, r3, #3
 8005db4:	2b03      	cmp	r3, #3
 8005db6:	d079      	beq.n	8005eac <RCCEx_PLL2_Config+0x100>
{
 8005db8:	b570      	push	{r4, r5, r6, lr}
 8005dba:	460e      	mov	r6, r1
 8005dbc:	4604      	mov	r4, r0


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005dbe:	4a3c      	ldr	r2, [pc, #240]	; (8005eb0 <RCCEx_PLL2_Config+0x104>)
 8005dc0:	6813      	ldr	r3, [r2, #0]
 8005dc2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005dc6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005dc8:	f7fc fcc4 	bl	8002754 <HAL_GetTick>
 8005dcc:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005dce:	4b38      	ldr	r3, [pc, #224]	; (8005eb0 <RCCEx_PLL2_Config+0x104>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8005dd6:	d006      	beq.n	8005de6 <RCCEx_PLL2_Config+0x3a>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005dd8:	f7fc fcbc 	bl	8002754 <HAL_GetTick>
 8005ddc:	1b40      	subs	r0, r0, r5
 8005dde:	2802      	cmp	r0, #2
 8005de0:	d9f5      	bls.n	8005dce <RCCEx_PLL2_Config+0x22>
      {
        return HAL_TIMEOUT;
 8005de2:	2003      	movs	r0, #3

  }


  return status;
}
 8005de4:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005de6:	4b32      	ldr	r3, [pc, #200]	; (8005eb0 <RCCEx_PLL2_Config+0x104>)
 8005de8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005dea:	f422 327c 	bic.w	r2, r2, #258048	; 0x3f000
 8005dee:	6821      	ldr	r1, [r4, #0]
 8005df0:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 8005df4:	629a      	str	r2, [r3, #40]	; 0x28
 8005df6:	6862      	ldr	r2, [r4, #4]
 8005df8:	3a01      	subs	r2, #1
 8005dfa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005dfe:	68a1      	ldr	r1, [r4, #8]
 8005e00:	3901      	subs	r1, #1
 8005e02:	0249      	lsls	r1, r1, #9
 8005e04:	b289      	uxth	r1, r1
 8005e06:	430a      	orrs	r2, r1
 8005e08:	68e1      	ldr	r1, [r4, #12]
 8005e0a:	3901      	subs	r1, #1
 8005e0c:	0409      	lsls	r1, r1, #16
 8005e0e:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 8005e12:	430a      	orrs	r2, r1
 8005e14:	6921      	ldr	r1, [r4, #16]
 8005e16:	3901      	subs	r1, #1
 8005e18:	0609      	lsls	r1, r1, #24
 8005e1a:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 8005e1e:	430a      	orrs	r2, r1
 8005e20:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e24:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005e28:	6961      	ldr	r1, [r4, #20]
 8005e2a:	430a      	orrs	r2, r1
 8005e2c:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e30:	f022 0220 	bic.w	r2, r2, #32
 8005e34:	69a1      	ldr	r1, [r4, #24]
 8005e36:	430a      	orrs	r2, r1
 8005e38:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005e3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e3c:	f022 0210 	bic.w	r2, r2, #16
 8005e40:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005e42:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8005e44:	4a1b      	ldr	r2, [pc, #108]	; (8005eb4 <RCCEx_PLL2_Config+0x108>)
 8005e46:	400a      	ands	r2, r1
 8005e48:	69e1      	ldr	r1, [r4, #28]
 8005e4a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8005e4e:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005e50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e52:	f042 0210 	orr.w	r2, r2, #16
 8005e56:	62da      	str	r2, [r3, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8005e58:	b9c6      	cbnz	r6, 8005e8c <RCCEx_PLL2_Config+0xe0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e5e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e62:	62d3      	str	r3, [r2, #44]	; 0x2c
    __HAL_RCC_PLL2_ENABLE();
 8005e64:	4a12      	ldr	r2, [pc, #72]	; (8005eb0 <RCCEx_PLL2_Config+0x104>)
 8005e66:	6813      	ldr	r3, [r2, #0]
 8005e68:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005e6c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8005e6e:	f7fc fc71 	bl	8002754 <HAL_GetTick>
 8005e72:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005e74:	4b0e      	ldr	r3, [pc, #56]	; (8005eb0 <RCCEx_PLL2_Config+0x104>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8005e7c:	d114      	bne.n	8005ea8 <RCCEx_PLL2_Config+0xfc>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005e7e:	f7fc fc69 	bl	8002754 <HAL_GetTick>
 8005e82:	1b00      	subs	r0, r0, r4
 8005e84:	2802      	cmp	r0, #2
 8005e86:	d9f5      	bls.n	8005e74 <RCCEx_PLL2_Config+0xc8>
        return HAL_TIMEOUT;
 8005e88:	2003      	movs	r0, #3
 8005e8a:	e7ab      	b.n	8005de4 <RCCEx_PLL2_Config+0x38>
    else if(Divider == DIVIDER_Q_UPDATE)
 8005e8c:	2e01      	cmp	r6, #1
 8005e8e:	d005      	beq.n	8005e9c <RCCEx_PLL2_Config+0xf0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005e90:	4a07      	ldr	r2, [pc, #28]	; (8005eb0 <RCCEx_PLL2_Config+0x104>)
 8005e92:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005e94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005e98:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005e9a:	e7e3      	b.n	8005e64 <RCCEx_PLL2_Config+0xb8>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005e9c:	4a04      	ldr	r2, [pc, #16]	; (8005eb0 <RCCEx_PLL2_Config+0x104>)
 8005e9e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005ea0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ea4:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005ea6:	e7dd      	b.n	8005e64 <RCCEx_PLL2_Config+0xb8>
  return status;
 8005ea8:	2000      	movs	r0, #0
 8005eaa:	e79b      	b.n	8005de4 <RCCEx_PLL2_Config+0x38>
    return HAL_ERROR;
 8005eac:	2001      	movs	r0, #1
}
 8005eae:	4770      	bx	lr
 8005eb0:	58024400 	.word	0x58024400
 8005eb4:	ffff0007 	.word	0xffff0007

08005eb8 <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005eb8:	4b40      	ldr	r3, [pc, #256]	; (8005fbc <RCCEx_PLL3_Config+0x104>)
 8005eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ebc:	f003 0303 	and.w	r3, r3, #3
 8005ec0:	2b03      	cmp	r3, #3
 8005ec2:	d079      	beq.n	8005fb8 <RCCEx_PLL3_Config+0x100>
{
 8005ec4:	b570      	push	{r4, r5, r6, lr}
 8005ec6:	460e      	mov	r6, r1
 8005ec8:	4604      	mov	r4, r0


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005eca:	4a3c      	ldr	r2, [pc, #240]	; (8005fbc <RCCEx_PLL3_Config+0x104>)
 8005ecc:	6813      	ldr	r3, [r2, #0]
 8005ece:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ed2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ed4:	f7fc fc3e 	bl	8002754 <HAL_GetTick>
 8005ed8:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005eda:	4b38      	ldr	r3, [pc, #224]	; (8005fbc <RCCEx_PLL3_Config+0x104>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8005ee2:	d006      	beq.n	8005ef2 <RCCEx_PLL3_Config+0x3a>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005ee4:	f7fc fc36 	bl	8002754 <HAL_GetTick>
 8005ee8:	1b40      	subs	r0, r0, r5
 8005eea:	2802      	cmp	r0, #2
 8005eec:	d9f5      	bls.n	8005eda <RCCEx_PLL3_Config+0x22>
      {
        return HAL_TIMEOUT;
 8005eee:	2003      	movs	r0, #3

  }


  return status;
}
 8005ef0:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005ef2:	4b32      	ldr	r3, [pc, #200]	; (8005fbc <RCCEx_PLL3_Config+0x104>)
 8005ef4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ef6:	f022 727c 	bic.w	r2, r2, #66060288	; 0x3f00000
 8005efa:	6821      	ldr	r1, [r4, #0]
 8005efc:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8005f00:	629a      	str	r2, [r3, #40]	; 0x28
 8005f02:	6862      	ldr	r2, [r4, #4]
 8005f04:	3a01      	subs	r2, #1
 8005f06:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f0a:	68a1      	ldr	r1, [r4, #8]
 8005f0c:	3901      	subs	r1, #1
 8005f0e:	0249      	lsls	r1, r1, #9
 8005f10:	b289      	uxth	r1, r1
 8005f12:	430a      	orrs	r2, r1
 8005f14:	68e1      	ldr	r1, [r4, #12]
 8005f16:	3901      	subs	r1, #1
 8005f18:	0409      	lsls	r1, r1, #16
 8005f1a:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 8005f1e:	430a      	orrs	r2, r1
 8005f20:	6921      	ldr	r1, [r4, #16]
 8005f22:	3901      	subs	r1, #1
 8005f24:	0609      	lsls	r1, r1, #24
 8005f26:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 8005f2a:	430a      	orrs	r2, r1
 8005f2c:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f30:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005f34:	6961      	ldr	r1, [r4, #20]
 8005f36:	430a      	orrs	r2, r1
 8005f38:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f3c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005f40:	69a1      	ldr	r1, [r4, #24]
 8005f42:	430a      	orrs	r2, r1
 8005f44:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f4c:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005f4e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8005f50:	4a1b      	ldr	r2, [pc, #108]	; (8005fc0 <RCCEx_PLL3_Config+0x108>)
 8005f52:	400a      	ands	r2, r1
 8005f54:	69e1      	ldr	r1, [r4, #28]
 8005f56:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8005f5a:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005f5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f62:	62da      	str	r2, [r3, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8005f64:	b9c6      	cbnz	r6, 8005f98 <RCCEx_PLL3_Config+0xe0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005f66:	461a      	mov	r2, r3
 8005f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f6a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005f6e:	62d3      	str	r3, [r2, #44]	; 0x2c
    __HAL_RCC_PLL3_ENABLE();
 8005f70:	4a12      	ldr	r2, [pc, #72]	; (8005fbc <RCCEx_PLL3_Config+0x104>)
 8005f72:	6813      	ldr	r3, [r2, #0]
 8005f74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f78:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8005f7a:	f7fc fbeb 	bl	8002754 <HAL_GetTick>
 8005f7e:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005f80:	4b0e      	ldr	r3, [pc, #56]	; (8005fbc <RCCEx_PLL3_Config+0x104>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8005f88:	d114      	bne.n	8005fb4 <RCCEx_PLL3_Config+0xfc>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005f8a:	f7fc fbe3 	bl	8002754 <HAL_GetTick>
 8005f8e:	1b00      	subs	r0, r0, r4
 8005f90:	2802      	cmp	r0, #2
 8005f92:	d9f5      	bls.n	8005f80 <RCCEx_PLL3_Config+0xc8>
        return HAL_TIMEOUT;
 8005f94:	2003      	movs	r0, #3
 8005f96:	e7ab      	b.n	8005ef0 <RCCEx_PLL3_Config+0x38>
    else if(Divider == DIVIDER_Q_UPDATE)
 8005f98:	2e01      	cmp	r6, #1
 8005f9a:	d005      	beq.n	8005fa8 <RCCEx_PLL3_Config+0xf0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005f9c:	4a07      	ldr	r2, [pc, #28]	; (8005fbc <RCCEx_PLL3_Config+0x104>)
 8005f9e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005fa0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005fa4:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005fa6:	e7e3      	b.n	8005f70 <RCCEx_PLL3_Config+0xb8>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005fa8:	4a04      	ldr	r2, [pc, #16]	; (8005fbc <RCCEx_PLL3_Config+0x104>)
 8005faa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005fac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005fb0:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005fb2:	e7dd      	b.n	8005f70 <RCCEx_PLL3_Config+0xb8>
  return status;
 8005fb4:	2000      	movs	r0, #0
 8005fb6:	e79b      	b.n	8005ef0 <RCCEx_PLL3_Config+0x38>
    return HAL_ERROR;
 8005fb8:	2001      	movs	r0, #1
}
 8005fba:	4770      	bx	lr
 8005fbc:	58024400 	.word	0x58024400
 8005fc0:	ffff0007 	.word	0xffff0007

08005fc4 <HAL_RCCEx_PeriphCLKConfig>:
{
 8005fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fc6:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005fc8:	6803      	ldr	r3, [r0, #0]
 8005fca:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8005fce:	d02b      	beq.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x64>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8005fd0:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8005fd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fd6:	d018      	beq.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x46>
 8005fd8:	d907      	bls.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005fda:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005fde:	d01d      	beq.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x58>
 8005fe0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005fe4:	d12e      	bne.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x80>
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005fe6:	2500      	movs	r5, #0
 8005fe8:	e006      	b.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x34>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8005fea:	bb5b      	cbnz	r3, 8006044 <HAL_RCCEx_PeriphCLKConfig+0x80>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fec:	4a93      	ldr	r2, [pc, #588]	; (800623c <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8005fee:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8005ff0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ff4:	62d3      	str	r3, [r2, #44]	; 0x2c
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005ff6:	2500      	movs	r5, #0
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005ff8:	4a90      	ldr	r2, [pc, #576]	; (800623c <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8005ffa:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005ffc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006000:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8006002:	430b      	orrs	r3, r1
 8006004:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006006:	2600      	movs	r6, #0
 8006008:	e010      	b.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x68>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800600a:	2102      	movs	r1, #2
 800600c:	3004      	adds	r0, #4
 800600e:	f7ff fecd 	bl	8005dac <RCCEx_PLL2_Config>
 8006012:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8006014:	2d00      	cmp	r5, #0
 8006016:	d0ef      	beq.n	8005ff8 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8006018:	462e      	mov	r6, r5
 800601a:	e007      	b.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x68>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800601c:	2102      	movs	r1, #2
 800601e:	3024      	adds	r0, #36	; 0x24
 8006020:	f7ff ff4a 	bl	8005eb8 <RCCEx_PLL3_Config>
 8006024:	4605      	mov	r5, r0
      break;
 8006026:	e7f5      	b.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x50>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006028:	2600      	movs	r6, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800602a:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800602c:	6823      	ldr	r3, [r4, #0]
 800602e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006032:	d017      	beq.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    switch(PeriphClkInit->Sai1ClockSelection)
 8006034:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006036:	2b04      	cmp	r3, #4
 8006038:	d832      	bhi.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 800603a:	e8df f003 	tbb	[pc, r3]
 800603e:	2406      	.short	0x2406
 8006040:	0b2a      	.short	0x0b2a
 8006042:	0b          	.byte	0x0b
 8006043:	00          	.byte	0x00
      ret = HAL_ERROR;
 8006044:	2601      	movs	r6, #1
 8006046:	4635      	mov	r5, r6
 8006048:	e7f0      	b.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x68>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800604a:	4a7c      	ldr	r2, [pc, #496]	; (800623c <HAL_RCCEx_PeriphCLKConfig+0x278>)
 800604c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800604e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006052:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8006054:	bb3d      	cbnz	r5, 80060a6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006056:	4a79      	ldr	r2, [pc, #484]	; (800623c <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8006058:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800605a:	f023 0307 	bic.w	r3, r3, #7
 800605e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006060:	430b      	orrs	r3, r1
 8006062:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006064:	6823      	ldr	r3, [r4, #0]
 8006066:	f413 7f00 	tst.w	r3, #512	; 0x200
 800606a:	d033      	beq.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    switch(PeriphClkInit->Sai23ClockSelection)
 800606c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800606e:	2b80      	cmp	r3, #128	; 0x80
 8006070:	d044      	beq.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x138>
 8006072:	d81a      	bhi.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0xe6>
 8006074:	b30b      	cbz	r3, 80060ba <HAL_RCCEx_PeriphCLKConfig+0xf6>
 8006076:	2b40      	cmp	r3, #64	; 0x40
 8006078:	d11c      	bne.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0xf0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800607a:	2100      	movs	r1, #0
 800607c:	1d20      	adds	r0, r4, #4
 800607e:	f7ff fe95 	bl	8005dac <RCCEx_PLL2_Config>
 8006082:	4605      	mov	r5, r0
      break;
 8006084:	e01e      	b.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x100>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006086:	2100      	movs	r1, #0
 8006088:	1d20      	adds	r0, r4, #4
 800608a:	f7ff fe8f 	bl	8005dac <RCCEx_PLL2_Config>
 800608e:	4605      	mov	r5, r0
      break;
 8006090:	e7e0      	b.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x90>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006092:	2100      	movs	r1, #0
 8006094:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006098:	f7ff ff0e 	bl	8005eb8 <RCCEx_PLL3_Config>
 800609c:	4605      	mov	r5, r0
      break;
 800609e:	e7d9      	b.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x90>
      ret = HAL_ERROR;
 80060a0:	2601      	movs	r6, #1
 80060a2:	4635      	mov	r5, r6
 80060a4:	e7de      	b.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 80060a6:	462e      	mov	r6, r5
 80060a8:	e7dc      	b.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    switch(PeriphClkInit->Sai23ClockSelection)
 80060aa:	2bc0      	cmp	r3, #192	; 0xc0
 80060ac:	d00a      	beq.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x100>
 80060ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060b2:	d007      	beq.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x100>
      ret = HAL_ERROR;
 80060b4:	2601      	movs	r6, #1
 80060b6:	4635      	mov	r5, r6
 80060b8:	e00c      	b.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060ba:	4a60      	ldr	r2, [pc, #384]	; (800623c <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80060bc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80060be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060c2:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80060c4:	bb0d      	cbnz	r5, 800610a <HAL_RCCEx_PeriphCLKConfig+0x146>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80060c6:	4a5d      	ldr	r2, [pc, #372]	; (800623c <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80060c8:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80060ca:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 80060ce:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80060d0:	430b      	orrs	r3, r1
 80060d2:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80060d4:	6823      	ldr	r3, [r4, #0]
 80060d6:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80060da:	d02f      	beq.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x178>
    switch(PeriphClkInit->Sai4AClockSelection)
 80060dc:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 80060e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80060e4:	d03e      	beq.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
 80060e6:	d812      	bhi.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80060e8:	b1d3      	cbz	r3, 8006120 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80060ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80060ee:	d114      	bne.n	800611a <HAL_RCCEx_PeriphCLKConfig+0x156>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80060f0:	2100      	movs	r1, #0
 80060f2:	1d20      	adds	r0, r4, #4
 80060f4:	f7ff fe5a 	bl	8005dac <RCCEx_PLL2_Config>
 80060f8:	4605      	mov	r5, r0
      break;
 80060fa:	e016      	b.n	800612a <HAL_RCCEx_PeriphCLKConfig+0x166>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80060fc:	2100      	movs	r1, #0
 80060fe:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006102:	f7ff fed9 	bl	8005eb8 <RCCEx_PLL3_Config>
 8006106:	4605      	mov	r5, r0
      break;
 8006108:	e7dc      	b.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x100>
 800610a:	462e      	mov	r6, r5
 800610c:	e7e2      	b.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    switch(PeriphClkInit->Sai4AClockSelection)
 800610e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006112:	d00a      	beq.n	800612a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8006114:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006118:	d007      	beq.n	800612a <HAL_RCCEx_PeriphCLKConfig+0x166>
      ret = HAL_ERROR;
 800611a:	2601      	movs	r6, #1
 800611c:	4635      	mov	r5, r6
 800611e:	e00d      	b.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x178>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006120:	4a46      	ldr	r2, [pc, #280]	; (800623c <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8006122:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006124:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006128:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800612a:	bb15      	cbnz	r5, 8006172 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800612c:	4a43      	ldr	r2, [pc, #268]	; (800623c <HAL_RCCEx_PeriphCLKConfig+0x278>)
 800612e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8006130:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8006134:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 8006138:	430b      	orrs	r3, r1
 800613a:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800613c:	6823      	ldr	r3, [r4, #0]
 800613e:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8006142:	d02f      	beq.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
    switch(PeriphClkInit->Sai4BClockSelection)
 8006144:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8006148:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800614c:	d037      	beq.n	80061be <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800614e:	d812      	bhi.n	8006176 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8006150:	b1d3      	cbz	r3, 8006188 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
 8006152:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006156:	d114      	bne.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0x1be>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006158:	2100      	movs	r1, #0
 800615a:	1d20      	adds	r0, r4, #4
 800615c:	f7ff fe26 	bl	8005dac <RCCEx_PLL2_Config>
 8006160:	4605      	mov	r5, r0
      break;
 8006162:	e016      	b.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006164:	2100      	movs	r1, #0
 8006166:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800616a:	f7ff fea5 	bl	8005eb8 <RCCEx_PLL3_Config>
 800616e:	4605      	mov	r5, r0
      break;
 8006170:	e7db      	b.n	800612a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8006172:	462e      	mov	r6, r5
 8006174:	e7e2      	b.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x178>
    switch(PeriphClkInit->Sai4BClockSelection)
 8006176:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800617a:	d00a      	beq.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800617c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006180:	d007      	beq.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
      ret = HAL_ERROR;
 8006182:	2601      	movs	r6, #1
 8006184:	4635      	mov	r5, r6
 8006186:	e00d      	b.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006188:	4a2c      	ldr	r2, [pc, #176]	; (800623c <HAL_RCCEx_PeriphCLKConfig+0x278>)
 800618a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800618c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006190:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8006192:	b9dd      	cbnz	r5, 80061cc <HAL_RCCEx_PeriphCLKConfig+0x208>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006194:	4a29      	ldr	r2, [pc, #164]	; (800623c <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8006196:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8006198:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800619c:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 80061a0:	430b      	orrs	r3, r1
 80061a2:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80061a4:	6823      	ldr	r3, [r4, #0]
 80061a6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80061aa:	d02a      	beq.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0x23e>
    switch(PeriphClkInit->QspiClockSelection)
 80061ac:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80061ae:	2b10      	cmp	r3, #16
 80061b0:	d012      	beq.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x214>
 80061b2:	d90d      	bls.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
 80061b4:	2b20      	cmp	r3, #32
 80061b6:	d01d      	beq.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80061b8:	2b30      	cmp	r3, #48	; 0x30
 80061ba:	d012      	beq.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80061bc:	e009      	b.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80061be:	2100      	movs	r1, #0
 80061c0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80061c4:	f7ff fe78 	bl	8005eb8 <RCCEx_PLL3_Config>
 80061c8:	4605      	mov	r5, r0
      break;
 80061ca:	e7e2      	b.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80061cc:	462e      	mov	r6, r5
 80061ce:	e7e9      	b.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
    switch(PeriphClkInit->QspiClockSelection)
 80061d0:	b13b      	cbz	r3, 80061e2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      ret = HAL_ERROR;
 80061d2:	2601      	movs	r6, #1
 80061d4:	4635      	mov	r5, r6
 80061d6:	e014      	b.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0x23e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061d8:	4a18      	ldr	r2, [pc, #96]	; (800623c <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80061da:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80061dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061e0:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80061e2:	b96d      	cbnz	r5, 8006200 <HAL_RCCEx_PeriphCLKConfig+0x23c>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80061e4:	4a15      	ldr	r2, [pc, #84]	; (800623c <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80061e6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80061e8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80061ec:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80061ee:	430b      	orrs	r3, r1
 80061f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80061f2:	e006      	b.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0x23e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80061f4:	2102      	movs	r1, #2
 80061f6:	1d20      	adds	r0, r4, #4
 80061f8:	f7ff fdd8 	bl	8005dac <RCCEx_PLL2_Config>
 80061fc:	4605      	mov	r5, r0
      break;
 80061fe:	e7f0      	b.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8006200:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006202:	6823      	ldr	r3, [r4, #0]
 8006204:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8006208:	d027      	beq.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x296>
    switch(PeriphClkInit->Spi123ClockSelection)
 800620a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800620c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006210:	d03e      	beq.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8006212:	d809      	bhi.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8006214:	b1a3      	cbz	r3, 8006240 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006216:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800621a:	d10b      	bne.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0x270>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800621c:	2100      	movs	r1, #0
 800621e:	1d20      	adds	r0, r4, #4
 8006220:	f7ff fdc4 	bl	8005dac <RCCEx_PLL2_Config>
 8006224:	4605      	mov	r5, r0
      break;
 8006226:	e010      	b.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x286>
    switch(PeriphClkInit->Spi123ClockSelection)
 8006228:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800622c:	d00d      	beq.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x286>
 800622e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006232:	d00a      	beq.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x286>
      ret = HAL_ERROR;
 8006234:	2601      	movs	r6, #1
 8006236:	4635      	mov	r5, r6
 8006238:	e00f      	b.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x296>
 800623a:	bf00      	nop
 800623c:	58024400 	.word	0x58024400
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006240:	4a7d      	ldr	r2, [pc, #500]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006242:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006244:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006248:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800624a:	bb45      	cbnz	r5, 800629e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800624c:	4a7a      	ldr	r2, [pc, #488]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800624e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8006250:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006254:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8006256:	430b      	orrs	r3, r1
 8006258:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800625a:	6823      	ldr	r3, [r4, #0]
 800625c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8006260:	d033      	beq.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x306>
    switch(PeriphClkInit->Spi45ClockSelection)
 8006262:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006264:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006268:	d027      	beq.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x2f6>
 800626a:	d81a      	bhi.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800626c:	b13b      	cbz	r3, 800627e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800626e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006272:	d11f      	bne.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006274:	2101      	movs	r1, #1
 8006276:	1d20      	adds	r0, r4, #4
 8006278:	f7ff fd98 	bl	8005dac <RCCEx_PLL2_Config>
 800627c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800627e:	bb1d      	cbnz	r5, 80062c8 <HAL_RCCEx_PeriphCLKConfig+0x304>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006280:	4a6d      	ldr	r2, [pc, #436]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006282:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8006284:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8006288:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800628a:	430b      	orrs	r3, r1
 800628c:	6513      	str	r3, [r2, #80]	; 0x50
 800628e:	e01c      	b.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x306>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006290:	2100      	movs	r1, #0
 8006292:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006296:	f7ff fe0f 	bl	8005eb8 <RCCEx_PLL3_Config>
 800629a:	4605      	mov	r5, r0
      break;
 800629c:	e7d5      	b.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x286>
 800629e:	462e      	mov	r6, r5
 80062a0:	e7db      	b.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x296>
    switch(PeriphClkInit->Spi45ClockSelection)
 80062a2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80062a6:	d0ea      	beq.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80062a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80062ac:	d0e7      	beq.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80062ae:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80062b2:	d0e4      	beq.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
      ret = HAL_ERROR;
 80062b4:	2601      	movs	r6, #1
 80062b6:	4635      	mov	r5, r6
 80062b8:	e007      	b.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x306>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80062ba:	2101      	movs	r1, #1
 80062bc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80062c0:	f7ff fdfa 	bl	8005eb8 <RCCEx_PLL3_Config>
 80062c4:	4605      	mov	r5, r0
      break;
 80062c6:	e7da      	b.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80062c8:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80062ca:	6823      	ldr	r3, [r4, #0]
 80062cc:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80062d0:	d02c      	beq.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x368>
    switch(PeriphClkInit->Spi6ClockSelection)
 80062d2:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 80062d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062da:	d01f      	beq.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x358>
 80062dc:	d812      	bhi.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x340>
 80062de:	b13b      	cbz	r3, 80062f0 <HAL_RCCEx_PeriphCLKConfig+0x32c>
 80062e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80062e4:	d117      	bne.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x352>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80062e6:	2101      	movs	r1, #1
 80062e8:	1d20      	adds	r0, r4, #4
 80062ea:	f7ff fd5f 	bl	8005dac <RCCEx_PLL2_Config>
 80062ee:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80062f0:	b9dd      	cbnz	r5, 800632a <HAL_RCCEx_PeriphCLKConfig+0x366>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80062f2:	4a51      	ldr	r2, [pc, #324]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80062f4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80062f6:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 80062fa:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
 80062fe:	430b      	orrs	r3, r1
 8006300:	6593      	str	r3, [r2, #88]	; 0x58
 8006302:	e013      	b.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x368>
    switch(PeriphClkInit->Spi6ClockSelection)
 8006304:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006308:	d0f2      	beq.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x32c>
 800630a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800630e:	d0ef      	beq.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x32c>
 8006310:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006314:	d0ec      	beq.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x32c>
      ret = HAL_ERROR;
 8006316:	2601      	movs	r6, #1
 8006318:	4635      	mov	r5, r6
 800631a:	e007      	b.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x368>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800631c:	2101      	movs	r1, #1
 800631e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006322:	f7ff fdc9 	bl	8005eb8 <RCCEx_PLL3_Config>
 8006326:	4605      	mov	r5, r0
      break;
 8006328:	e7e2      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x32c>
 800632a:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800632c:	6823      	ldr	r3, [r4, #0]
 800632e:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8006332:	d011      	beq.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x394>
    switch(PeriphClkInit->DsiClockSelection)
 8006334:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006336:	b13b      	cbz	r3, 8006348 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8006338:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800633c:	d11b      	bne.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800633e:	2101      	movs	r1, #1
 8006340:	1d20      	adds	r0, r4, #4
 8006342:	f7ff fd33 	bl	8005dac <RCCEx_PLL2_Config>
 8006346:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8006348:	b9c5      	cbnz	r5, 800637c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800634a:	4a3b      	ldr	r2, [pc, #236]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800634c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800634e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006352:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006354:	430b      	orrs	r3, r1
 8006356:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006358:	6823      	ldr	r3, [r4, #0]
 800635a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800635e:	d024      	beq.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x3e6>
    switch(PeriphClkInit->FdcanClockSelection)
 8006360:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8006362:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006366:	d00b      	beq.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8006368:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800636c:	d016      	beq.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x3d8>
 800636e:	b163      	cbz	r3, 800638a <HAL_RCCEx_PeriphCLKConfig+0x3c6>
      ret = HAL_ERROR;
 8006370:	2601      	movs	r6, #1
 8006372:	4635      	mov	r5, r6
 8006374:	e019      	b.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x3e6>
      ret = HAL_ERROR;
 8006376:	2601      	movs	r6, #1
 8006378:	4635      	mov	r5, r6
 800637a:	e7ed      	b.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x394>
 800637c:	462e      	mov	r6, r5
 800637e:	e7eb      	b.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x394>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006380:	4a2d      	ldr	r2, [pc, #180]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006382:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006384:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006388:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800638a:	b96d      	cbnz	r5, 80063a8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800638c:	4a2a      	ldr	r2, [pc, #168]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800638e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8006390:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8006394:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8006396:	430b      	orrs	r3, r1
 8006398:	6513      	str	r3, [r2, #80]	; 0x50
 800639a:	e006      	b.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0x3e6>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800639c:	2101      	movs	r1, #1
 800639e:	1d20      	adds	r0, r4, #4
 80063a0:	f7ff fd04 	bl	8005dac <RCCEx_PLL2_Config>
 80063a4:	4605      	mov	r5, r0
      break;
 80063a6:	e7f0      	b.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x3c6>
 80063a8:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80063aa:	6823      	ldr	r3, [r4, #0]
 80063ac:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80063b0:	d01e      	beq.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
    switch(PeriphClkInit->FmcClockSelection)
 80063b2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80063b4:	2b03      	cmp	r3, #3
 80063b6:	d817      	bhi.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x424>
 80063b8:	e8df f003 	tbb	[pc, r3]
 80063bc:	07100207 	.word	0x07100207
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063c0:	4a1d      	ldr	r2, [pc, #116]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80063c2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80063c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063c8:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80063ca:	b985      	cbnz	r5, 80063ee <HAL_RCCEx_PeriphCLKConfig+0x42a>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80063cc:	4a1a      	ldr	r2, [pc, #104]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80063ce:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80063d0:	f023 0303 	bic.w	r3, r3, #3
 80063d4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80063d6:	430b      	orrs	r3, r1
 80063d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80063da:	e009      	b.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80063dc:	2102      	movs	r1, #2
 80063de:	1d20      	adds	r0, r4, #4
 80063e0:	f7ff fce4 	bl	8005dac <RCCEx_PLL2_Config>
 80063e4:	4605      	mov	r5, r0
      break;
 80063e6:	e7f0      	b.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x406>
      ret = HAL_ERROR;
 80063e8:	2601      	movs	r6, #1
 80063ea:	4635      	mov	r5, r6
 80063ec:	e000      	b.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 80063ee:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80063f0:	6823      	ldr	r3, [r4, #0]
 80063f2:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80063f6:	d121      	bne.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x478>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80063f8:	6823      	ldr	r3, [r4, #0]
 80063fa:	f013 0f01 	tst.w	r3, #1
 80063fe:	f000 809a 	beq.w	8006536 <HAL_RCCEx_PeriphCLKConfig+0x572>
    switch(PeriphClkInit->Usart16ClockSelection)
 8006402:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8006404:	2b28      	cmp	r3, #40	; 0x28
 8006406:	f200 8092 	bhi.w	800652e <HAL_RCCEx_PeriphCLKConfig+0x56a>
 800640a:	e8df f003 	tbb	[pc, r3]
 800640e:	9080      	.short	0x9080
 8006410:	90909090 	.word	0x90909090
 8006414:	907b9090 	.word	0x907b9090
 8006418:	90909090 	.word	0x90909090
 800641c:	90899090 	.word	0x90899090
 8006420:	90909090 	.word	0x90909090
 8006424:	90809090 	.word	0x90809090
 8006428:	90909090 	.word	0x90909090
 800642c:	90809090 	.word	0x90809090
 8006430:	90909090 	.word	0x90909090
 8006434:	9090      	.short	0x9090
 8006436:	80          	.byte	0x80
 8006437:	00          	.byte	0x00
 8006438:	58024400 	.word	0x58024400
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800643c:	4aa9      	ldr	r2, [pc, #676]	; (80066e4 <HAL_RCCEx_PeriphCLKConfig+0x720>)
 800643e:	6813      	ldr	r3, [r2, #0]
 8006440:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006444:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8006446:	f7fc f985 	bl	8002754 <HAL_GetTick>
 800644a:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800644c:	4ba5      	ldr	r3, [pc, #660]	; (80066e4 <HAL_RCCEx_PeriphCLKConfig+0x720>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f413 7f80 	tst.w	r3, #256	; 0x100
 8006454:	d105      	bne.n	8006462 <HAL_RCCEx_PeriphCLKConfig+0x49e>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006456:	f7fc f97d 	bl	8002754 <HAL_GetTick>
 800645a:	1bc0      	subs	r0, r0, r7
 800645c:	2864      	cmp	r0, #100	; 0x64
 800645e:	d9f5      	bls.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x488>
        ret = HAL_TIMEOUT;
 8006460:	2503      	movs	r5, #3
    if(ret == HAL_OK)
 8006462:	2d00      	cmp	r5, #0
 8006464:	d14a      	bne.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x538>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006466:	4ba0      	ldr	r3, [pc, #640]	; (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x724>)
 8006468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800646a:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
 800646e:	4053      	eors	r3, r2
 8006470:	f413 7f40 	tst.w	r3, #768	; 0x300
 8006474:	d00c      	beq.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006476:	4b9c      	ldr	r3, [pc, #624]	; (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x724>)
 8006478:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800647a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800647e:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8006480:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8006484:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006486:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8006488:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800648c:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 800648e:	671a      	str	r2, [r3, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006490:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 8006494:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006498:	d015      	beq.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x502>
      if(ret == HAL_OK)
 800649a:	bb8d      	cbnz	r5, 8006500 <HAL_RCCEx_PeriphCLKConfig+0x53c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800649c:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 80064a0:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80064a4:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80064a8:	d01e      	beq.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80064aa:	4a8f      	ldr	r2, [pc, #572]	; (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x724>)
 80064ac:	6913      	ldr	r3, [r2, #16]
 80064ae:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80064b2:	6113      	str	r3, [r2, #16]
 80064b4:	498c      	ldr	r1, [pc, #560]	; (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x724>)
 80064b6:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 80064b8:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
 80064bc:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80064c0:	4313      	orrs	r3, r2
 80064c2:	670b      	str	r3, [r1, #112]	; 0x70
 80064c4:	e798      	b.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        tickstart = HAL_GetTick();
 80064c6:	f7fc f945 	bl	8002754 <HAL_GetTick>
 80064ca:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80064cc:	4b86      	ldr	r3, [pc, #536]	; (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x724>)
 80064ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064d0:	f013 0f02 	tst.w	r3, #2
 80064d4:	d1e1      	bne.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x4d6>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064d6:	f7fc f93d 	bl	8002754 <HAL_GetTick>
 80064da:	1bc0      	subs	r0, r0, r7
 80064dc:	f241 3388 	movw	r3, #5000	; 0x1388
 80064e0:	4298      	cmp	r0, r3
 80064e2:	d9f3      	bls.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x508>
            ret = HAL_TIMEOUT;
 80064e4:	2503      	movs	r5, #3
 80064e6:	e7d8      	b.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x4d6>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80064e8:	487f      	ldr	r0, [pc, #508]	; (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x724>)
 80064ea:	6902      	ldr	r2, [r0, #16]
 80064ec:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 80064f0:	497e      	ldr	r1, [pc, #504]	; (80066ec <HAL_RCCEx_PeriphCLKConfig+0x728>)
 80064f2:	ea01 1313 	and.w	r3, r1, r3, lsr #4
 80064f6:	4313      	orrs	r3, r2
 80064f8:	6103      	str	r3, [r0, #16]
 80064fa:	e7db      	b.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
      status = ret;
 80064fc:	462e      	mov	r6, r5
 80064fe:	e77b      	b.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x434>
        status = ret;
 8006500:	462e      	mov	r6, r5
 8006502:	e779      	b.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x434>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006504:	2101      	movs	r1, #1
 8006506:	1d20      	adds	r0, r4, #4
 8006508:	f7ff fc50 	bl	8005dac <RCCEx_PLL2_Config>
 800650c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800650e:	b98d      	cbnz	r5, 8006534 <HAL_RCCEx_PeriphCLKConfig+0x570>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006510:	4a75      	ldr	r2, [pc, #468]	; (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x724>)
 8006512:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8006514:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8006518:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800651a:	430b      	orrs	r3, r1
 800651c:	6553      	str	r3, [r2, #84]	; 0x54
 800651e:	e00a      	b.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0x572>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006520:	2101      	movs	r1, #1
 8006522:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006526:	f7ff fcc7 	bl	8005eb8 <RCCEx_PLL3_Config>
 800652a:	4605      	mov	r5, r0
      break;
 800652c:	e7ef      	b.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x54a>
      ret = HAL_ERROR;
 800652e:	2601      	movs	r6, #1
 8006530:	4635      	mov	r5, r6
 8006532:	e000      	b.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8006534:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006536:	6823      	ldr	r3, [r4, #0]
 8006538:	f013 0f02 	tst.w	r3, #2
 800653c:	d020      	beq.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    switch(PeriphClkInit->Usart234578ClockSelection)
 800653e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8006540:	2b05      	cmp	r3, #5
 8006542:	d819      	bhi.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
 8006544:	e8df f003 	tbb	[pc, r3]
 8006548:	08110308 	.word	0x08110308
 800654c:	0808      	.short	0x0808
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800654e:	2101      	movs	r1, #1
 8006550:	1d20      	adds	r0, r4, #4
 8006552:	f7ff fc2b 	bl	8005dac <RCCEx_PLL2_Config>
 8006556:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8006558:	b98d      	cbnz	r5, 800657e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800655a:	4a63      	ldr	r2, [pc, #396]	; (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x724>)
 800655c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800655e:	f023 0307 	bic.w	r3, r3, #7
 8006562:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8006564:	430b      	orrs	r3, r1
 8006566:	6553      	str	r3, [r2, #84]	; 0x54
 8006568:	e00a      	b.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800656a:	2101      	movs	r1, #1
 800656c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006570:	f7ff fca2 	bl	8005eb8 <RCCEx_PLL3_Config>
 8006574:	4605      	mov	r5, r0
      break;
 8006576:	e7ef      	b.n	8006558 <HAL_RCCEx_PeriphCLKConfig+0x594>
      ret = HAL_ERROR;
 8006578:	2601      	movs	r6, #1
 800657a:	4635      	mov	r5, r6
 800657c:	e000      	b.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800657e:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006580:	6823      	ldr	r3, [r4, #0]
 8006582:	f013 0f04 	tst.w	r3, #4
 8006586:	d022      	beq.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0x60a>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006588:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800658c:	2b05      	cmp	r3, #5
 800658e:	d81a      	bhi.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x602>
 8006590:	e8df f003 	tbb	[pc, r3]
 8006594:	08120308 	.word	0x08120308
 8006598:	0808      	.short	0x0808
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800659a:	2101      	movs	r1, #1
 800659c:	1d20      	adds	r0, r4, #4
 800659e:	f7ff fc05 	bl	8005dac <RCCEx_PLL2_Config>
 80065a2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80065a4:	b995      	cbnz	r5, 80065cc <HAL_RCCEx_PeriphCLKConfig+0x608>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80065a6:	4a50      	ldr	r2, [pc, #320]	; (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x724>)
 80065a8:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80065aa:	f023 0307 	bic.w	r3, r3, #7
 80065ae:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 80065b2:	430b      	orrs	r3, r1
 80065b4:	6593      	str	r3, [r2, #88]	; 0x58
 80065b6:	e00a      	b.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0x60a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80065b8:	2101      	movs	r1, #1
 80065ba:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80065be:	f7ff fc7b 	bl	8005eb8 <RCCEx_PLL3_Config>
 80065c2:	4605      	mov	r5, r0
      break;
 80065c4:	e7ee      	b.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      ret = HAL_ERROR;
 80065c6:	2601      	movs	r6, #1
 80065c8:	4635      	mov	r5, r6
 80065ca:	e000      	b.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0x60a>
 80065cc:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80065ce:	6823      	ldr	r3, [r4, #0]
 80065d0:	f013 0f20 	tst.w	r3, #32
 80065d4:	d02c      	beq.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x66c>
    switch(PeriphClkInit->Lptim1ClockSelection)
 80065d6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80065da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065de:	d01f      	beq.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 80065e0:	d812      	bhi.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0x644>
 80065e2:	b13b      	cbz	r3, 80065f4 <HAL_RCCEx_PeriphCLKConfig+0x630>
 80065e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80065e8:	d117      	bne.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x656>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80065ea:	2100      	movs	r1, #0
 80065ec:	1d20      	adds	r0, r4, #4
 80065ee:	f7ff fbdd 	bl	8005dac <RCCEx_PLL2_Config>
 80065f2:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80065f4:	b9dd      	cbnz	r5, 800662e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80065f6:	4a3c      	ldr	r2, [pc, #240]	; (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x724>)
 80065f8:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80065fa:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 80065fe:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8006602:	430b      	orrs	r3, r1
 8006604:	6553      	str	r3, [r2, #84]	; 0x54
 8006606:	e013      	b.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x66c>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006608:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800660c:	d0f2      	beq.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x630>
 800660e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006612:	d0ef      	beq.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x630>
 8006614:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006618:	d0ec      	beq.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x630>
      ret = HAL_ERROR;
 800661a:	2601      	movs	r6, #1
 800661c:	4635      	mov	r5, r6
 800661e:	e007      	b.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006620:	2102      	movs	r1, #2
 8006622:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006626:	f7ff fc47 	bl	8005eb8 <RCCEx_PLL3_Config>
 800662a:	4605      	mov	r5, r0
      break;
 800662c:	e7e2      	b.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x630>
 800662e:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006630:	6823      	ldr	r3, [r4, #0]
 8006632:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006636:	d02c      	beq.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006638:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800663c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006640:	d01f      	beq.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x6be>
 8006642:	d812      	bhi.n	800666a <HAL_RCCEx_PeriphCLKConfig+0x6a6>
 8006644:	b13b      	cbz	r3, 8006656 <HAL_RCCEx_PeriphCLKConfig+0x692>
 8006646:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800664a:	d117      	bne.n	800667c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800664c:	2100      	movs	r1, #0
 800664e:	1d20      	adds	r0, r4, #4
 8006650:	f7ff fbac 	bl	8005dac <RCCEx_PLL2_Config>
 8006654:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8006656:	b9dd      	cbnz	r5, 8006690 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006658:	4a23      	ldr	r2, [pc, #140]	; (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x724>)
 800665a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800665c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8006660:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8006664:	430b      	orrs	r3, r1
 8006666:	6593      	str	r3, [r2, #88]	; 0x58
 8006668:	e013      	b.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
    switch(PeriphClkInit->Lptim2ClockSelection)
 800666a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800666e:	d0f2      	beq.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x692>
 8006670:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006674:	d0ef      	beq.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x692>
 8006676:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800667a:	d0ec      	beq.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x692>
      ret = HAL_ERROR;
 800667c:	2601      	movs	r6, #1
 800667e:	4635      	mov	r5, r6
 8006680:	e007      	b.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006682:	2102      	movs	r1, #2
 8006684:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8006688:	f7ff fc16 	bl	8005eb8 <RCCEx_PLL3_Config>
 800668c:	4605      	mov	r5, r0
      break;
 800668e:	e7e2      	b.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x692>
 8006690:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006692:	6823      	ldr	r3, [r4, #0]
 8006694:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006698:	d032      	beq.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x73c>
    switch(PeriphClkInit->Lptim345ClockSelection)
 800669a:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800669e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80066a2:	d025      	beq.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 80066a4:	d812      	bhi.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0x708>
 80066a6:	b13b      	cbz	r3, 80066b8 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 80066a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066ac:	d117      	bne.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x71a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80066ae:	2100      	movs	r1, #0
 80066b0:	1d20      	adds	r0, r4, #4
 80066b2:	f7ff fb7b 	bl	8005dac <RCCEx_PLL2_Config>
 80066b6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80066b8:	bb0d      	cbnz	r5, 80066fe <HAL_RCCEx_PeriphCLKConfig+0x73a>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80066ba:	4a0b      	ldr	r2, [pc, #44]	; (80066e8 <HAL_RCCEx_PeriphCLKConfig+0x724>)
 80066bc:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80066be:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80066c2:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 80066c6:	430b      	orrs	r3, r1
 80066c8:	6593      	str	r3, [r2, #88]	; 0x58
 80066ca:	e019      	b.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x73c>
    switch(PeriphClkInit->Lptim345ClockSelection)
 80066cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066d0:	d0f2      	beq.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 80066d2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80066d6:	d0ef      	beq.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 80066d8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80066dc:	d0ec      	beq.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
      ret = HAL_ERROR;
 80066de:	2601      	movs	r6, #1
 80066e0:	4635      	mov	r5, r6
 80066e2:	e00d      	b.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x73c>
 80066e4:	58024800 	.word	0x58024800
 80066e8:	58024400 	.word	0x58024400
 80066ec:	00ffffcf 	.word	0x00ffffcf
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80066f0:	2102      	movs	r1, #2
 80066f2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80066f6:	f7ff fbdf 	bl	8005eb8 <RCCEx_PLL3_Config>
 80066fa:	4605      	mov	r5, r0
      break;
 80066fc:	e7dc      	b.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 80066fe:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006700:	6823      	ldr	r3, [r4, #0]
 8006702:	f013 0f08 	tst.w	r3, #8
 8006706:	d00c      	beq.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x75e>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006708:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800670c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006710:	d028      	beq.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x7a0>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006712:	4a80      	ldr	r2, [pc, #512]	; (8006914 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8006714:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8006716:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800671a:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 800671e:	430b      	orrs	r3, r1
 8006720:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006722:	6823      	ldr	r3, [r4, #0]
 8006724:	f013 0f10 	tst.w	r3, #16
 8006728:	d00c      	beq.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x780>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800672a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800672e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006732:	d020      	beq.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0x7b2>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006734:	4a77      	ldr	r2, [pc, #476]	; (8006914 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8006736:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8006738:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800673c:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8006740:	430b      	orrs	r3, r1
 8006742:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006744:	6823      	ldr	r3, [r4, #0]
 8006746:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800674a:	d034      	beq.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
    switch(PeriphClkInit->AdcClockSelection)
 800674c:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8006750:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006754:	d027      	beq.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
 8006756:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800675a:	d01a      	beq.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 800675c:	b1a3      	cbz	r3, 8006788 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      ret = HAL_ERROR;
 800675e:	2601      	movs	r6, #1
 8006760:	4635      	mov	r5, r6
 8006762:	e028      	b.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006764:	2102      	movs	r1, #2
 8006766:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800676a:	f7ff fba5 	bl	8005eb8 <RCCEx_PLL3_Config>
 800676e:	2800      	cmp	r0, #0
 8006770:	d0cf      	beq.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x74e>
          status = HAL_ERROR;
 8006772:	2601      	movs	r6, #1
 8006774:	e7cd      	b.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x74e>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006776:	2102      	movs	r1, #2
 8006778:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800677c:	f7ff fb9c 	bl	8005eb8 <RCCEx_PLL3_Config>
 8006780:	2800      	cmp	r0, #0
 8006782:	d0d7      	beq.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x770>
        status = HAL_ERROR;
 8006784:	2601      	movs	r6, #1
 8006786:	e7d5      	b.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x770>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006788:	2100      	movs	r1, #0
 800678a:	1d20      	adds	r0, r4, #4
 800678c:	f7ff fb0e 	bl	8005dac <RCCEx_PLL2_Config>
 8006790:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8006792:	b97d      	cbnz	r5, 80067b4 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006794:	4a5f      	ldr	r2, [pc, #380]	; (8006914 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8006796:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8006798:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800679c:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 80067a0:	430b      	orrs	r3, r1
 80067a2:	6593      	str	r3, [r2, #88]	; 0x58
 80067a4:	e007      	b.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80067a6:	2102      	movs	r1, #2
 80067a8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80067ac:	f7ff fb84 	bl	8005eb8 <RCCEx_PLL3_Config>
 80067b0:	4605      	mov	r5, r0
      break;
 80067b2:	e7ee      	b.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80067b4:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80067b6:	6823      	ldr	r3, [r4, #0]
 80067b8:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80067bc:	d024      	beq.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x844>
    switch(PeriphClkInit->UsbClockSelection)
 80067be:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80067c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80067c6:	d017      	beq.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x834>
 80067c8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80067cc:	d00a      	beq.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x820>
 80067ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067d2:	d002      	beq.n	80067da <HAL_RCCEx_PeriphCLKConfig+0x816>
      ret = HAL_ERROR;
 80067d4:	2601      	movs	r6, #1
 80067d6:	4635      	mov	r5, r6
 80067d8:	e016      	b.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x844>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067da:	4a4e      	ldr	r2, [pc, #312]	; (8006914 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 80067dc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80067de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067e2:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80067e4:	b97d      	cbnz	r5, 8006806 <HAL_RCCEx_PeriphCLKConfig+0x842>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80067e6:	4a4b      	ldr	r2, [pc, #300]	; (8006914 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 80067e8:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80067ea:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80067ee:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 80067f2:	430b      	orrs	r3, r1
 80067f4:	6553      	str	r3, [r2, #84]	; 0x54
 80067f6:	e007      	b.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x844>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80067f8:	2101      	movs	r1, #1
 80067fa:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80067fe:	f7ff fb5b 	bl	8005eb8 <RCCEx_PLL3_Config>
 8006802:	4605      	mov	r5, r0
      break;
 8006804:	e7ee      	b.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x820>
 8006806:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006808:	6823      	ldr	r3, [r4, #0]
 800680a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800680e:	d014      	beq.n	800683a <HAL_RCCEx_PeriphCLKConfig+0x876>
    switch(PeriphClkInit->SdmmcClockSelection)
 8006810:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006812:	b12b      	cbz	r3, 8006820 <HAL_RCCEx_PeriphCLKConfig+0x85c>
 8006814:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006818:	d024      	beq.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x8a0>
      ret = HAL_ERROR;
 800681a:	2601      	movs	r6, #1
 800681c:	4635      	mov	r5, r6
 800681e:	e00c      	b.n	800683a <HAL_RCCEx_PeriphCLKConfig+0x876>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006820:	4a3c      	ldr	r2, [pc, #240]	; (8006914 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8006822:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006824:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006828:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800682a:	bb0d      	cbnz	r5, 8006870 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800682c:	4a39      	ldr	r2, [pc, #228]	; (8006914 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 800682e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8006830:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006834:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8006836:	430b      	orrs	r3, r1
 8006838:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800683a:	6823      	ldr	r3, [r4, #0]
 800683c:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8006840:	d118      	bne.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006842:	6823      	ldr	r3, [r4, #0]
 8006844:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8006848:	d02f      	beq.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0x8e6>
    switch(PeriphClkInit->RngClockSelection)
 800684a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800684e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006852:	d01b      	beq.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x8c8>
 8006854:	d917      	bls.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
 8006856:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800685a:	d01c      	beq.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x8d2>
 800685c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006860:	d112      	bne.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 8006862:	e018      	b.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x8d2>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006864:	2102      	movs	r1, #2
 8006866:	1d20      	adds	r0, r4, #4
 8006868:	f7ff faa0 	bl	8005dac <RCCEx_PLL2_Config>
 800686c:	4605      	mov	r5, r0
      break;
 800686e:	e7dc      	b.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x866>
 8006870:	462e      	mov	r6, r5
 8006872:	e7e2      	b.n	800683a <HAL_RCCEx_PeriphCLKConfig+0x876>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006874:	2102      	movs	r1, #2
 8006876:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800687a:	f7ff fb1d 	bl	8005eb8 <RCCEx_PLL3_Config>
 800687e:	2800      	cmp	r0, #0
 8006880:	d0df      	beq.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0x87e>
      status=HAL_ERROR;
 8006882:	2601      	movs	r6, #1
 8006884:	e7dd      	b.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0x87e>
    switch(PeriphClkInit->RngClockSelection)
 8006886:	b133      	cbz	r3, 8006896 <HAL_RCCEx_PeriphCLKConfig+0x8d2>
      ret = HAL_ERROR;
 8006888:	2601      	movs	r6, #1
 800688a:	e00e      	b.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0x8e6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800688c:	4a21      	ldr	r2, [pc, #132]	; (8006914 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 800688e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8006890:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006894:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8006896:	2d00      	cmp	r5, #0
 8006898:	d132      	bne.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800689a:	4a1e      	ldr	r2, [pc, #120]	; (8006914 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 800689c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800689e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068a2:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80068a6:	430b      	orrs	r3, r1
 80068a8:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80068aa:	6823      	ldr	r3, [r4, #0]
 80068ac:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80068b0:	d006      	beq.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80068b2:	4a18      	ldr	r2, [pc, #96]	; (8006914 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 80068b4:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80068b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80068ba:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80068bc:	430b      	orrs	r3, r1
 80068be:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80068c0:	6823      	ldr	r3, [r4, #0]
 80068c2:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 80068c6:	d006      	beq.n	80068d6 <HAL_RCCEx_PeriphCLKConfig+0x912>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80068c8:	4a12      	ldr	r2, [pc, #72]	; (8006914 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 80068ca:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80068cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80068d0:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80068d2:	430b      	orrs	r3, r1
 80068d4:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80068d6:	6823      	ldr	r3, [r4, #0]
 80068d8:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80068dc:	d009      	beq.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x92e>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80068de:	4b0d      	ldr	r3, [pc, #52]	; (8006914 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 80068e0:	691a      	ldr	r2, [r3, #16]
 80068e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80068e6:	611a      	str	r2, [r3, #16]
 80068e8:	691a      	ldr	r2, [r3, #16]
 80068ea:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
 80068ee:	430a      	orrs	r2, r1
 80068f0:	611a      	str	r2, [r3, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80068f2:	6823      	ldr	r3, [r4, #0]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	db05      	blt.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0x940>
  if (status == HAL_OK)
 80068f8:	b106      	cbz	r6, 80068fc <HAL_RCCEx_PeriphCLKConfig+0x938>
  return HAL_ERROR;
 80068fa:	2601      	movs	r6, #1
}
 80068fc:	4630      	mov	r0, r6
 80068fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006900:	462e      	mov	r6, r5
 8006902:	e7d2      	b.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0x8e6>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006904:	4a03      	ldr	r2, [pc, #12]	; (8006914 <HAL_RCCEx_PeriphCLKConfig+0x950>)
 8006906:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8006908:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800690c:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800690e:	430b      	orrs	r3, r1
 8006910:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006912:	e7f1      	b.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8006914:	58024400 	.word	0x58024400

08006918 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 8006918:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800691a:	f7ff f9d7 	bl	8005ccc <HAL_RCC_GetHCLKFreq>
 800691e:	4b05      	ldr	r3, [pc, #20]	; (8006934 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 8006920:	6a1b      	ldr	r3, [r3, #32]
 8006922:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8006926:	4a04      	ldr	r2, [pc, #16]	; (8006938 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 8006928:	5cd3      	ldrb	r3, [r2, r3]
 800692a:	f003 031f 	and.w	r3, r3, #31
}
 800692e:	40d8      	lsrs	r0, r3
 8006930:	bd08      	pop	{r3, pc}
 8006932:	bf00      	nop
 8006934:	58024400 	.word	0x58024400
 8006938:	0800cfb0 	.word	0x0800cfb0

0800693c <HAL_RCCEx_GetPLL2ClockFreq>:
{
 800693c:	b410      	push	{r4}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800693e:	4978      	ldr	r1, [pc, #480]	; (8006b20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8006940:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8006942:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8006944:	f3c2 3205 	ubfx	r2, r2, #12, #6
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006948:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800694a:	f3c3 1300 	ubfx	r3, r3, #4, #1
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800694e:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8006950:	f3c1 01cc 	ubfx	r1, r1, #3, #13
 8006954:	fb03 f301 	mul.w	r3, r3, r1
  if (pll2m != 0U)
 8006958:	2a00      	cmp	r2, #0
 800695a:	f000 80db 	beq.w	8006b14 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>
 800695e:	f004 0403 	and.w	r4, r4, #3
 8006962:	ee07 3a90 	vmov	s15, r3
 8006966:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 800696a:	2c01      	cmp	r4, #1
 800696c:	d066      	beq.n	8006a3c <HAL_RCCEx_GetPLL2ClockFreq+0x100>
 800696e:	b1fc      	cbz	r4, 80069b0 <HAL_RCCEx_GetPLL2ClockFreq+0x74>
 8006970:	2c02      	cmp	r4, #2
 8006972:	f000 80b2 	beq.w	8006ada <HAL_RCCEx_GetPLL2ClockFreq+0x19e>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006976:	ee07 2a10 	vmov	s14, r2
 800697a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800697e:	ed9f 6a69 	vldr	s12, [pc, #420]	; 8006b24 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 8006982:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8006986:	4b66      	ldr	r3, [pc, #408]	; (8006b20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8006988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800698a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800698e:	ee07 3a10 	vmov	s14, r3
 8006992:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8006996:	ed9f 6a64 	vldr	s12, [pc, #400]	; 8006b28 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 800699a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800699e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80069a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80069a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80069aa:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 80069ae:	e061      	b.n	8006a74 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80069b0:	4b5b      	ldr	r3, [pc, #364]	; (8006b20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f013 0f20 	tst.w	r3, #32
 80069b8:	d023      	beq.n	8006a02 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80069ba:	4c59      	ldr	r4, [pc, #356]	; (8006b20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 80069bc:	6821      	ldr	r1, [r4, #0]
 80069be:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 80069c2:	4b5a      	ldr	r3, [pc, #360]	; (8006b2c <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>)
 80069c4:	40cb      	lsrs	r3, r1
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80069c6:	ee07 3a10 	vmov	s14, r3
 80069ca:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80069ce:	ee06 2a90 	vmov	s13, r2
 80069d2:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 80069d6:	eec7 6a06 	vdiv.f32	s13, s14, s12
 80069da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80069dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069e0:	ee07 3a10 	vmov	s14, r3
 80069e4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80069e8:	ed9f 6a4f 	vldr	s12, [pc, #316]	; 8006b28 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 80069ec:	ee67 7a86 	vmul.f32	s15, s15, s12
 80069f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80069f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80069f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80069fc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006a00:	e038      	b.n	8006a74 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006a02:	ee07 2a10 	vmov	s14, r2
 8006a06:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8006a0a:	ed9f 6a49 	vldr	s12, [pc, #292]	; 8006b30 <HAL_RCCEx_GetPLL2ClockFreq+0x1f4>
 8006a0e:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8006a12:	4b43      	ldr	r3, [pc, #268]	; (8006b20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8006a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a1a:	ee07 3a10 	vmov	s14, r3
 8006a1e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8006a22:	ed9f 6a41 	vldr	s12, [pc, #260]	; 8006b28 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 8006a26:	ee67 7a86 	vmul.f32	s15, s15, s12
 8006a2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006a32:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006a36:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006a3a:	e01b      	b.n	8006a74 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006a3c:	ee07 2a10 	vmov	s14, r2
 8006a40:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8006a44:	ed9f 6a37 	vldr	s12, [pc, #220]	; 8006b24 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 8006a48:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8006a4c:	4b34      	ldr	r3, [pc, #208]	; (8006b20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8006a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a54:	ee07 3a10 	vmov	s14, r3
 8006a58:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8006a5c:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8006b28 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 8006a60:	ee67 7a86 	vmul.f32	s15, s15, s12
 8006a64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006a6c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006a70:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006a74:	4a2a      	ldr	r2, [pc, #168]	; (8006b20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8006a76:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8006a78:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8006a7c:	ee07 3a10 	vmov	s14, r3
 8006a80:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8006a84:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8006a88:	ee37 7a06 	vadd.f32	s14, s14, s12
 8006a8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a94:	edc0 7a00 	vstr	s15, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006a98:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8006a9a:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8006a9e:	ee07 3a10 	vmov	s14, r3
 8006aa2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8006aa6:	ee37 7a06 	vadd.f32	s14, s14, s12
 8006aaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006aae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ab2:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006ab6:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8006ab8:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8006abc:	ee07 3a90 	vmov	s15, r3
 8006ac0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ac4:	ee77 7a86 	vadd.f32	s15, s15, s12
 8006ac8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006acc:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8006ad0:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8006ad4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ad8:	4770      	bx	lr
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006ada:	ee07 2a10 	vmov	s14, r2
 8006ade:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8006ae2:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8006b34 <HAL_RCCEx_GetPLL2ClockFreq+0x1f8>
 8006ae6:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8006aea:	4b0d      	ldr	r3, [pc, #52]	; (8006b20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8006aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006af2:	ee07 3a10 	vmov	s14, r3
 8006af6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8006afa:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 8006b28 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 8006afe:	ee67 7a86 	vmul.f32	s15, s15, s12
 8006b02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006b06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006b0a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006b0e:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 8006b12:	e7af      	b.n	8006a74 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006b14:	2300      	movs	r3, #0
 8006b16:	6003      	str	r3, [r0, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006b18:	6043      	str	r3, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006b1a:	6083      	str	r3, [r0, #8]
}
 8006b1c:	e7da      	b.n	8006ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x198>
 8006b1e:	bf00      	nop
 8006b20:	58024400 	.word	0x58024400
 8006b24:	4a742400 	.word	0x4a742400
 8006b28:	39000000 	.word	0x39000000
 8006b2c:	03d09000 	.word	0x03d09000
 8006b30:	4c742400 	.word	0x4c742400
 8006b34:	4bbebc20 	.word	0x4bbebc20

08006b38 <HAL_RCCEx_GetPLL3ClockFreq>:
{
 8006b38:	b410      	push	{r4}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006b3a:	4978      	ldr	r1, [pc, #480]	; (8006d1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8006b3c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006b3e:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8006b40:	f3c2 5205 	ubfx	r2, r2, #20, #6
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006b44:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8006b46:	f3c3 2300 	ubfx	r3, r3, #8, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006b4a:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8006b4c:	f3c1 01cc 	ubfx	r1, r1, #3, #13
 8006b50:	fb03 f301 	mul.w	r3, r3, r1
  if (pll3m != 0U)
 8006b54:	2a00      	cmp	r2, #0
 8006b56:	f000 80db 	beq.w	8006d10 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>
 8006b5a:	f004 0403 	and.w	r4, r4, #3
 8006b5e:	ee07 3a90 	vmov	s15, r3
 8006b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
    switch (pllsource)
 8006b66:	2c01      	cmp	r4, #1
 8006b68:	d066      	beq.n	8006c38 <HAL_RCCEx_GetPLL3ClockFreq+0x100>
 8006b6a:	b1fc      	cbz	r4, 8006bac <HAL_RCCEx_GetPLL3ClockFreq+0x74>
 8006b6c:	2c02      	cmp	r4, #2
 8006b6e:	f000 80b2 	beq.w	8006cd6 <HAL_RCCEx_GetPLL3ClockFreq+0x19e>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006b72:	ee07 2a10 	vmov	s14, r2
 8006b76:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8006b7a:	ed9f 6a69 	vldr	s12, [pc, #420]	; 8006d20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 8006b7e:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8006b82:	4b66      	ldr	r3, [pc, #408]	; (8006d1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8006b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b8a:	ee07 3a10 	vmov	s14, r3
 8006b8e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8006b92:	ed9f 6a64 	vldr	s12, [pc, #400]	; 8006d24 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 8006b96:	ee67 7a86 	vmul.f32	s15, s15, s12
 8006b9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006b9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006ba2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006ba6:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 8006baa:	e061      	b.n	8006c70 <HAL_RCCEx_GetPLL3ClockFreq+0x138>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006bac:	4b5b      	ldr	r3, [pc, #364]	; (8006d1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f013 0f20 	tst.w	r3, #32
 8006bb4:	d023      	beq.n	8006bfe <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006bb6:	4c59      	ldr	r4, [pc, #356]	; (8006d1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8006bb8:	6821      	ldr	r1, [r4, #0]
 8006bba:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 8006bbe:	4b5a      	ldr	r3, [pc, #360]	; (8006d28 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>)
 8006bc0:	40cb      	lsrs	r3, r1
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006bc2:	ee07 3a10 	vmov	s14, r3
 8006bc6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8006bca:	ee06 2a90 	vmov	s13, r2
 8006bce:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 8006bd2:	eec7 6a06 	vdiv.f32	s13, s14, s12
 8006bd6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006bd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bdc:	ee07 3a10 	vmov	s14, r3
 8006be0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8006be4:	ed9f 6a4f 	vldr	s12, [pc, #316]	; 8006d24 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 8006be8:	ee67 7a86 	vmul.f32	s15, s15, s12
 8006bec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006bf0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006bf4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006bf8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006bfc:	e038      	b.n	8006c70 <HAL_RCCEx_GetPLL3ClockFreq+0x138>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006bfe:	ee07 2a10 	vmov	s14, r2
 8006c02:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8006c06:	ed9f 6a49 	vldr	s12, [pc, #292]	; 8006d2c <HAL_RCCEx_GetPLL3ClockFreq+0x1f4>
 8006c0a:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8006c0e:	4b43      	ldr	r3, [pc, #268]	; (8006d1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8006c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c16:	ee07 3a10 	vmov	s14, r3
 8006c1a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8006c1e:	ed9f 6a41 	vldr	s12, [pc, #260]	; 8006d24 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 8006c22:	ee67 7a86 	vmul.f32	s15, s15, s12
 8006c26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c2e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006c32:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006c36:	e01b      	b.n	8006c70 <HAL_RCCEx_GetPLL3ClockFreq+0x138>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006c38:	ee07 2a10 	vmov	s14, r2
 8006c3c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8006c40:	ed9f 6a37 	vldr	s12, [pc, #220]	; 8006d20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 8006c44:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8006c48:	4b34      	ldr	r3, [pc, #208]	; (8006d1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8006c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c50:	ee07 3a10 	vmov	s14, r3
 8006c54:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8006c58:	ed9f 6a32 	vldr	s12, [pc, #200]	; 8006d24 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 8006c5c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8006c60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c68:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006c6c:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006c70:	4a2a      	ldr	r2, [pc, #168]	; (8006d1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8006c72:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006c74:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8006c78:	ee07 3a10 	vmov	s14, r3
 8006c7c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8006c80:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8006c84:	ee37 7a06 	vadd.f32	s14, s14, s12
 8006c88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c90:	edc0 7a00 	vstr	s15, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006c94:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006c96:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8006c9a:	ee07 3a10 	vmov	s14, r3
 8006c9e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8006ca2:	ee37 7a06 	vadd.f32	s14, s14, s12
 8006ca6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006caa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cae:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006cb2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006cb4:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8006cb8:	ee07 3a90 	vmov	s15, r3
 8006cbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cc0:	ee77 7a86 	vadd.f32	s15, s15, s12
 8006cc4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cc8:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8006ccc:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8006cd0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006cd4:	4770      	bx	lr
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006cd6:	ee07 2a10 	vmov	s14, r2
 8006cda:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8006cde:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8006d30 <HAL_RCCEx_GetPLL3ClockFreq+0x1f8>
 8006ce2:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8006ce6:	4b0d      	ldr	r3, [pc, #52]	; (8006d1c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8006ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cee:	ee07 3a10 	vmov	s14, r3
 8006cf2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8006cf6:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 8006d24 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 8006cfa:	ee67 7a86 	vmul.f32	s15, s15, s12
 8006cfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006d02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006d06:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006d0a:	ee66 6aa7 	vmul.f32	s13, s13, s15
      break;
 8006d0e:	e7af      	b.n	8006c70 <HAL_RCCEx_GetPLL3ClockFreq+0x138>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006d10:	2300      	movs	r3, #0
 8006d12:	6003      	str	r3, [r0, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006d14:	6043      	str	r3, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006d16:	6083      	str	r3, [r0, #8]
}
 8006d18:	e7da      	b.n	8006cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x198>
 8006d1a:	bf00      	nop
 8006d1c:	58024400 	.word	0x58024400
 8006d20:	4a742400 	.word	0x4a742400
 8006d24:	39000000 	.word	0x39000000
 8006d28:	03d09000 	.word	0x03d09000
 8006d2c:	4c742400 	.word	0x4c742400
 8006d30:	4bbebc20 	.word	0x4bbebc20

08006d34 <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8006d34:	b308      	cbz	r0, 8006d7a <HAL_SDRAM_Init+0x46>
{
 8006d36:	b538      	push	{r3, r4, r5, lr}
 8006d38:	4604      	mov	r4, r0
 8006d3a:	460d      	mov	r5, r1
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8006d3c:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8006d40:	b1b3      	cbz	r3, 8006d70 <HAL_SDRAM_Init+0x3c>
    HAL_SDRAM_MspInit(hsdram);
#endif
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006d42:	2302      	movs	r3, #2
 8006d44:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006d48:	4621      	mov	r1, r4
 8006d4a:	f851 0b04 	ldr.w	r0, [r1], #4
 8006d4e:	f002 fb21 	bl	8009394 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8006d52:	6862      	ldr	r2, [r4, #4]
 8006d54:	4629      	mov	r1, r5
 8006d56:	6820      	ldr	r0, [r4, #0]
 8006d58:	f002 fb56 	bl	8009408 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8006d5c:	4a08      	ldr	r2, [pc, #32]	; (8006d80 <HAL_SDRAM_Init+0x4c>)
 8006d5e:	6813      	ldr	r3, [r2, #0]
 8006d60:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d64:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006d66:	2301      	movs	r3, #1
 8006d68:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

  return HAL_OK;
 8006d6c:	2000      	movs	r0, #0
}
 8006d6e:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 8006d70:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8006d74:	f7fb fb42 	bl	80023fc <HAL_SDRAM_MspInit>
 8006d78:	e7e3      	b.n	8006d42 <HAL_SDRAM_Init+0xe>
    return HAL_ERROR;
 8006d7a:	2001      	movs	r0, #1
}
 8006d7c:	4770      	bx	lr
 8006d7e:	bf00      	nop
 8006d80:	52004000 	.word	0x52004000

08006d84 <SPI_GetPacketSize>:
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006d84:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8006d86:	095b      	lsrs	r3, r3, #5
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006d88:	68c0      	ldr	r0, [r0, #12]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006d8a:	3008      	adds	r0, #8
 8006d8c:	08c0      	lsrs	r0, r0, #3

  return data_size * fifo_threashold;
}
 8006d8e:	fb03 0000 	mla	r0, r3, r0, r0
 8006d92:	4770      	bx	lr

08006d94 <HAL_SPI_Init>:
  if (hspi == NULL)
 8006d94:	2800      	cmp	r0, #0
 8006d96:	f000 8097 	beq.w	8006ec8 <HAL_SPI_Init+0x134>
{
 8006d9a:	b570      	push	{r4, r5, r6, lr}
 8006d9c:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	6283      	str	r3, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006da2:	6805      	ldr	r5, [r0, #0]
 8006da4:	4b4c      	ldr	r3, [pc, #304]	; (8006ed8 <HAL_SPI_Init+0x144>)
 8006da6:	4e4d      	ldr	r6, [pc, #308]	; (8006edc <HAL_SPI_Init+0x148>)
 8006da8:	429d      	cmp	r5, r3
 8006daa:	bf18      	it	ne
 8006dac:	42b5      	cmpne	r5, r6
 8006dae:	bf14      	ite	ne
 8006db0:	2601      	movne	r6, #1
 8006db2:	2600      	moveq	r6, #0
 8006db4:	d007      	beq.n	8006dc6 <HAL_SPI_Init+0x32>
 8006db6:	f5a3 4374 	sub.w	r3, r3, #62464	; 0xf400
 8006dba:	429d      	cmp	r5, r3
 8006dbc:	d003      	beq.n	8006dc6 <HAL_SPI_Init+0x32>
 8006dbe:	68c3      	ldr	r3, [r0, #12]
 8006dc0:	2b0f      	cmp	r3, #15
 8006dc2:	f200 8083 	bhi.w	8006ecc <HAL_SPI_Init+0x138>
  packet_length = SPI_GetPacketSize(hspi);
 8006dc6:	4620      	mov	r0, r4
 8006dc8:	f7ff ffdc 	bl	8006d84 <SPI_GetPacketSize>
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8006dcc:	b126      	cbz	r6, 8006dd8 <HAL_SPI_Init+0x44>
 8006dce:	4b44      	ldr	r3, [pc, #272]	; (8006ee0 <HAL_SPI_Init+0x14c>)
 8006dd0:	429d      	cmp	r5, r3
 8006dd2:	d001      	beq.n	8006dd8 <HAL_SPI_Init+0x44>
 8006dd4:	2808      	cmp	r0, #8
 8006dd6:	d87b      	bhi.n	8006ed0 <HAL_SPI_Init+0x13c>
 8006dd8:	4a3f      	ldr	r2, [pc, #252]	; (8006ed8 <HAL_SPI_Init+0x144>)
 8006dda:	4b40      	ldr	r3, [pc, #256]	; (8006edc <HAL_SPI_Init+0x148>)
 8006ddc:	429d      	cmp	r5, r3
 8006dde:	bf18      	it	ne
 8006de0:	4295      	cmpne	r5, r2
 8006de2:	d003      	beq.n	8006dec <HAL_SPI_Init+0x58>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006de4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006de8:	429d      	cmp	r5, r3
 8006dea:	d101      	bne.n	8006df0 <HAL_SPI_Init+0x5c>
 8006dec:	2810      	cmp	r0, #16
 8006dee:	d871      	bhi.n	8006ed4 <HAL_SPI_Init+0x140>
  if (hspi->State == HAL_SPI_STATE_RESET)
 8006df0:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d054      	beq.n	8006ea2 <HAL_SPI_Init+0x10e>
  hspi->State = HAL_SPI_STATE_BUSY;
 8006df8:	2302      	movs	r3, #2
 8006dfa:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
 8006dfe:	6822      	ldr	r2, [r4, #0]
 8006e00:	6813      	ldr	r3, [r2, #0]
 8006e02:	f023 0301 	bic.w	r3, r3, #1
 8006e06:	6013      	str	r3, [r2, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 8006e08:	69a3      	ldr	r3, [r4, #24]
 8006e0a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006e0e:	d04e      	beq.n	8006eae <HAL_SPI_Init+0x11a>
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006e10:	69e3      	ldr	r3, [r4, #28]
 8006e12:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006e14:	4313      	orrs	r3, r2
 8006e16:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	68e1      	ldr	r1, [r4, #12]
 8006e1c:	6822      	ldr	r2, [r4, #0]
 8006e1e:	430b      	orrs	r3, r1
 8006e20:	6093      	str	r3, [r2, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8006e22:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006e24:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006e26:	4313      	orrs	r3, r2
 8006e28:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	69a2      	ldr	r2, [r4, #24]
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	6922      	ldr	r2, [r4, #16]
 8006e32:	4313      	orrs	r3, r2
 8006e34:	6962      	ldr	r2, [r4, #20]
 8006e36:	4313      	orrs	r3, r2
 8006e38:	6a22      	ldr	r2, [r4, #32]
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	6862      	ldr	r2, [r4, #4]
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8006e42:	4313      	orrs	r3, r2
 8006e44:	68a2      	ldr	r2, [r4, #8]
 8006e46:	4313      	orrs	r3, r2
 8006e48:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006e4e:	6822      	ldr	r2, [r4, #0]
 8006e50:	430b      	orrs	r3, r1
 8006e52:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8006e54:	6863      	ldr	r3, [r4, #4]
 8006e56:	b96b      	cbnz	r3, 8006e74 <HAL_SPI_Init+0xe0>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8006e58:	6822      	ldr	r2, [r4, #0]
 8006e5a:	6893      	ldr	r3, [r2, #8]
 8006e5c:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8006e60:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006e64:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8006e66:	6822      	ldr	r2, [r4, #0]
 8006e68:	6893      	ldr	r3, [r2, #8]
 8006e6a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006e6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006e72:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006e74:	6822      	ldr	r2, [r4, #0]
 8006e76:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8006e78:	f023 0301 	bic.w	r3, r3, #1
 8006e7c:	6513      	str	r3, [r2, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8006e7e:	6863      	ldr	r3, [r4, #4]
 8006e80:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8006e84:	d006      	beq.n	8006e94 <HAL_SPI_Init+0x100>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006e86:	6822      	ldr	r2, [r4, #0]
 8006e88:	68d3      	ldr	r3, [r2, #12]
 8006e8a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e8e:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8006e90:	430b      	orrs	r3, r1
 8006e92:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006e94:	2000      	movs	r0, #0
 8006e96:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
 8006ea0:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Lock = HAL_UNLOCKED;
 8006ea2:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 8006ea6:	4620      	mov	r0, r4
 8006ea8:	f7fa fe82 	bl	8001bb0 <HAL_SPI_MspInit>
 8006eac:	e7a4      	b.n	8006df8 <HAL_SPI_Init+0x64>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 8006eae:	6863      	ldr	r3, [r4, #4]
 8006eb0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006eb4:	d1ac      	bne.n	8006e10 <HAL_SPI_Init+0x7c>
 8006eb6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d1a9      	bne.n	8006e10 <HAL_SPI_Init+0x7c>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8006ebc:	6822      	ldr	r2, [r4, #0]
 8006ebe:	6813      	ldr	r3, [r2, #0]
 8006ec0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006ec4:	6013      	str	r3, [r2, #0]
 8006ec6:	e7a3      	b.n	8006e10 <HAL_SPI_Init+0x7c>
    return HAL_ERROR;
 8006ec8:	2001      	movs	r0, #1
}
 8006eca:	4770      	bx	lr
    return HAL_ERROR;
 8006ecc:	2001      	movs	r0, #1
 8006ece:	e7e7      	b.n	8006ea0 <HAL_SPI_Init+0x10c>
    return HAL_ERROR;
 8006ed0:	2001      	movs	r0, #1
 8006ed2:	e7e5      	b.n	8006ea0 <HAL_SPI_Init+0x10c>
 8006ed4:	2001      	movs	r0, #1
 8006ed6:	e7e3      	b.n	8006ea0 <HAL_SPI_Init+0x10c>
 8006ed8:	40013000 	.word	0x40013000
 8006edc:	40003800 	.word	0x40003800
 8006ee0:	40003c00 	.word	0x40003c00

08006ee4 <HAL_SRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8006ee4:	b368      	cbz	r0, 8006f42 <HAL_SRAM_Init+0x5e>
{
 8006ee6:	b570      	push	{r4, r5, r6, lr}
 8006ee8:	4604      	mov	r4, r0
 8006eea:	4615      	mov	r5, r2
 8006eec:	460e      	mov	r6, r1
  {
    return HAL_ERROR;
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8006eee:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8006ef2:	b30b      	cbz	r3, 8006f38 <HAL_SRAM_Init+0x54>
    HAL_SRAM_MspInit(hsram);
#endif
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8006ef4:	4621      	mov	r1, r4
 8006ef6:	f851 0b08 	ldr.w	r0, [r1], #8
 8006efa:	f002 f9af 	bl	800925c <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8006efe:	68a2      	ldr	r2, [r4, #8]
 8006f00:	4631      	mov	r1, r6
 8006f02:	6820      	ldr	r0, [r4, #0]
 8006f04:	f002 f9f4 	bl	80092f0 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);
 8006f08:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006f0a:	68a2      	ldr	r2, [r4, #8]
 8006f0c:	4629      	mov	r1, r5
 8006f0e:	6860      	ldr	r0, [r4, #4]
 8006f10:	f002 fa1e 	bl	8009350 <FMC_NORSRAM_Extended_Timing_Init>

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8006f14:	6822      	ldr	r2, [r4, #0]
 8006f16:	68a1      	ldr	r1, [r4, #8]
 8006f18:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006f1c:	f043 0301 	orr.w	r3, r3, #1
 8006f20:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8006f24:	4a08      	ldr	r2, [pc, #32]	; (8006f48 <HAL_SRAM_Init+0x64>)
 8006f26:	6813      	ldr	r3, [r2, #0]
 8006f28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006f2c:	6013      	str	r3, [r2, #0]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45

  return HAL_OK;
 8006f34:	2000      	movs	r0, #0
}
 8006f36:	bd70      	pop	{r4, r5, r6, pc}
    hsram->Lock = HAL_UNLOCKED;
 8006f38:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    HAL_SRAM_MspInit(hsram);
 8006f3c:	f7fb fa5a 	bl	80023f4 <HAL_SRAM_MspInit>
 8006f40:	e7d8      	b.n	8006ef4 <HAL_SRAM_Init+0x10>
    return HAL_ERROR;
 8006f42:	2001      	movs	r0, #1
}
 8006f44:	4770      	bx	lr
 8006f46:	bf00      	nop
 8006f48:	52004000 	.word	0x52004000

08006f4c <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006f4c:	4770      	bx	lr
	...

08006f50 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006f50:	6802      	ldr	r2, [r0, #0]
 8006f52:	68d3      	ldr	r3, [r2, #12]
 8006f54:	f043 0301 	orr.w	r3, r3, #1
 8006f58:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f5a:	6802      	ldr	r2, [r0, #0]
 8006f5c:	6891      	ldr	r1, [r2, #8]
 8006f5e:	4b06      	ldr	r3, [pc, #24]	; (8006f78 <HAL_TIM_Base_Start_IT+0x28>)
 8006f60:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f62:	2b06      	cmp	r3, #6
 8006f64:	bf18      	it	ne
 8006f66:	f5b3 3f80 	cmpne.w	r3, #65536	; 0x10000
 8006f6a:	d003      	beq.n	8006f74 <HAL_TIM_Base_Start_IT+0x24>
  {
    __HAL_TIM_ENABLE(htim);
 8006f6c:	6813      	ldr	r3, [r2, #0]
 8006f6e:	f043 0301 	orr.w	r3, r3, #1
 8006f72:	6013      	str	r3, [r2, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8006f74:	2000      	movs	r0, #0
 8006f76:	4770      	bx	lr
 8006f78:	00010007 	.word	0x00010007

08006f7c <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f7c:	4770      	bx	lr

08006f7e <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006f7e:	4770      	bx	lr

08006f80 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f80:	4770      	bx	lr

08006f82 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f82:	4770      	bx	lr

08006f84 <HAL_TIM_IRQHandler>:
{
 8006f84:	b510      	push	{r4, lr}
 8006f86:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006f88:	6803      	ldr	r3, [r0, #0]
 8006f8a:	691a      	ldr	r2, [r3, #16]
 8006f8c:	f012 0f02 	tst.w	r2, #2
 8006f90:	d011      	beq.n	8006fb6 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006f92:	68da      	ldr	r2, [r3, #12]
 8006f94:	f012 0f02 	tst.w	r2, #2
 8006f98:	d00d      	beq.n	8006fb6 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006f9a:	f06f 0202 	mvn.w	r2, #2
 8006f9e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006fa4:	6803      	ldr	r3, [r0, #0]
 8006fa6:	699b      	ldr	r3, [r3, #24]
 8006fa8:	f013 0f03 	tst.w	r3, #3
 8006fac:	d079      	beq.n	80070a2 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 8006fae:	f7ff ffe6 	bl	8006f7e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006fb6:	6823      	ldr	r3, [r4, #0]
 8006fb8:	691a      	ldr	r2, [r3, #16]
 8006fba:	f012 0f04 	tst.w	r2, #4
 8006fbe:	d012      	beq.n	8006fe6 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006fc0:	68da      	ldr	r2, [r3, #12]
 8006fc2:	f012 0f04 	tst.w	r2, #4
 8006fc6:	d00e      	beq.n	8006fe6 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006fc8:	f06f 0204 	mvn.w	r2, #4
 8006fcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006fce:	2302      	movs	r3, #2
 8006fd0:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006fd2:	6823      	ldr	r3, [r4, #0]
 8006fd4:	699b      	ldr	r3, [r3, #24]
 8006fd6:	f413 7f40 	tst.w	r3, #768	; 0x300
 8006fda:	d068      	beq.n	80070ae <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8006fdc:	4620      	mov	r0, r4
 8006fde:	f7ff ffce 	bl	8006f7e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006fe6:	6823      	ldr	r3, [r4, #0]
 8006fe8:	691a      	ldr	r2, [r3, #16]
 8006fea:	f012 0f08 	tst.w	r2, #8
 8006fee:	d012      	beq.n	8007016 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006ff0:	68da      	ldr	r2, [r3, #12]
 8006ff2:	f012 0f08 	tst.w	r2, #8
 8006ff6:	d00e      	beq.n	8007016 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006ff8:	f06f 0208 	mvn.w	r2, #8
 8006ffc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006ffe:	2304      	movs	r3, #4
 8007000:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007002:	6823      	ldr	r3, [r4, #0]
 8007004:	69db      	ldr	r3, [r3, #28]
 8007006:	f013 0f03 	tst.w	r3, #3
 800700a:	d057      	beq.n	80070bc <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 800700c:	4620      	mov	r0, r4
 800700e:	f7ff ffb6 	bl	8006f7e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007012:	2300      	movs	r3, #0
 8007014:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007016:	6823      	ldr	r3, [r4, #0]
 8007018:	691a      	ldr	r2, [r3, #16]
 800701a:	f012 0f10 	tst.w	r2, #16
 800701e:	d012      	beq.n	8007046 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007020:	68da      	ldr	r2, [r3, #12]
 8007022:	f012 0f10 	tst.w	r2, #16
 8007026:	d00e      	beq.n	8007046 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007028:	f06f 0210 	mvn.w	r2, #16
 800702c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800702e:	2308      	movs	r3, #8
 8007030:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007032:	6823      	ldr	r3, [r4, #0]
 8007034:	69db      	ldr	r3, [r3, #28]
 8007036:	f413 7f40 	tst.w	r3, #768	; 0x300
 800703a:	d046      	beq.n	80070ca <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800703c:	4620      	mov	r0, r4
 800703e:	f7ff ff9e 	bl	8006f7e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007042:	2300      	movs	r3, #0
 8007044:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007046:	6823      	ldr	r3, [r4, #0]
 8007048:	691a      	ldr	r2, [r3, #16]
 800704a:	f012 0f01 	tst.w	r2, #1
 800704e:	d003      	beq.n	8007058 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007050:	68da      	ldr	r2, [r3, #12]
 8007052:	f012 0f01 	tst.w	r2, #1
 8007056:	d13f      	bne.n	80070d8 <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007058:	6823      	ldr	r3, [r4, #0]
 800705a:	691a      	ldr	r2, [r3, #16]
 800705c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8007060:	d003      	beq.n	800706a <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007062:	68da      	ldr	r2, [r3, #12]
 8007064:	f012 0f80 	tst.w	r2, #128	; 0x80
 8007068:	d13d      	bne.n	80070e6 <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800706a:	6823      	ldr	r3, [r4, #0]
 800706c:	691a      	ldr	r2, [r3, #16]
 800706e:	f412 7f80 	tst.w	r2, #256	; 0x100
 8007072:	d003      	beq.n	800707c <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007074:	68da      	ldr	r2, [r3, #12]
 8007076:	f012 0f80 	tst.w	r2, #128	; 0x80
 800707a:	d13b      	bne.n	80070f4 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800707c:	6823      	ldr	r3, [r4, #0]
 800707e:	691a      	ldr	r2, [r3, #16]
 8007080:	f012 0f40 	tst.w	r2, #64	; 0x40
 8007084:	d003      	beq.n	800708e <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007086:	68da      	ldr	r2, [r3, #12]
 8007088:	f012 0f40 	tst.w	r2, #64	; 0x40
 800708c:	d139      	bne.n	8007102 <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800708e:	6823      	ldr	r3, [r4, #0]
 8007090:	691a      	ldr	r2, [r3, #16]
 8007092:	f012 0f20 	tst.w	r2, #32
 8007096:	d003      	beq.n	80070a0 <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007098:	68da      	ldr	r2, [r3, #12]
 800709a:	f012 0f20 	tst.w	r2, #32
 800709e:	d137      	bne.n	8007110 <HAL_TIM_IRQHandler+0x18c>
}
 80070a0:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80070a2:	f7ff ff6b 	bl	8006f7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070a6:	4620      	mov	r0, r4
 80070a8:	f7ff ff6a 	bl	8006f80 <HAL_TIM_PWM_PulseFinishedCallback>
 80070ac:	e781      	b.n	8006fb2 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070ae:	4620      	mov	r0, r4
 80070b0:	f7ff ff64 	bl	8006f7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070b4:	4620      	mov	r0, r4
 80070b6:	f7ff ff63 	bl	8006f80 <HAL_TIM_PWM_PulseFinishedCallback>
 80070ba:	e792      	b.n	8006fe2 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070bc:	4620      	mov	r0, r4
 80070be:	f7ff ff5d 	bl	8006f7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070c2:	4620      	mov	r0, r4
 80070c4:	f7ff ff5c 	bl	8006f80 <HAL_TIM_PWM_PulseFinishedCallback>
 80070c8:	e7a3      	b.n	8007012 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070ca:	4620      	mov	r0, r4
 80070cc:	f7ff ff56 	bl	8006f7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070d0:	4620      	mov	r0, r4
 80070d2:	f7ff ff55 	bl	8006f80 <HAL_TIM_PWM_PulseFinishedCallback>
 80070d6:	e7b4      	b.n	8007042 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80070d8:	f06f 0201 	mvn.w	r2, #1
 80070dc:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80070de:	4620      	mov	r0, r4
 80070e0:	f7fa fbbe 	bl	8001860 <HAL_TIM_PeriodElapsedCallback>
 80070e4:	e7b8      	b.n	8007058 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80070e6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80070ea:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80070ec:	4620      	mov	r0, r4
 80070ee:	f000 f8b1 	bl	8007254 <HAL_TIMEx_BreakCallback>
 80070f2:	e7ba      	b.n	800706a <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80070f4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80070f8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80070fa:	4620      	mov	r0, r4
 80070fc:	f000 f8ab 	bl	8007256 <HAL_TIMEx_Break2Callback>
 8007100:	e7bc      	b.n	800707c <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007102:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007106:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8007108:	4620      	mov	r0, r4
 800710a:	f7ff ff3a 	bl	8006f82 <HAL_TIM_TriggerCallback>
 800710e:	e7be      	b.n	800708e <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007110:	f06f 0220 	mvn.w	r2, #32
 8007114:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8007116:	4620      	mov	r0, r4
 8007118:	f000 f89b 	bl	8007252 <HAL_TIMEx_CommutCallback>
}
 800711c:	e7c0      	b.n	80070a0 <HAL_TIM_IRQHandler+0x11c>
	...

08007120 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007120:	b470      	push	{r4, r5, r6}
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007122:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007124:	4c37      	ldr	r4, [pc, #220]	; (8007204 <TIM_Base_SetConfig+0xe4>)
 8007126:	42a0      	cmp	r0, r4
 8007128:	bf14      	ite	ne
 800712a:	2400      	movne	r4, #0
 800712c:	2401      	moveq	r4, #1
 800712e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8007132:	bf14      	ite	ne
 8007134:	4622      	movne	r2, r4
 8007136:	f044 0201 	orreq.w	r2, r4, #1
 800713a:	b9aa      	cbnz	r2, 8007168 <TIM_Base_SetConfig+0x48>
 800713c:	4d32      	ldr	r5, [pc, #200]	; (8007208 <TIM_Base_SetConfig+0xe8>)
 800713e:	42a8      	cmp	r0, r5
 8007140:	bf14      	ite	ne
 8007142:	2500      	movne	r5, #0
 8007144:	2501      	moveq	r5, #1
 8007146:	4e31      	ldr	r6, [pc, #196]	; (800720c <TIM_Base_SetConfig+0xec>)
 8007148:	42b0      	cmp	r0, r6
 800714a:	d00d      	beq.n	8007168 <TIM_Base_SetConfig+0x48>
 800714c:	b965      	cbnz	r5, 8007168 <TIM_Base_SetConfig+0x48>
 800714e:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8007152:	f505 3582 	add.w	r5, r5, #66560	; 0x10400
 8007156:	42a8      	cmp	r0, r5
 8007158:	bf14      	ite	ne
 800715a:	2500      	movne	r5, #0
 800715c:	2501      	moveq	r5, #1
 800715e:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8007162:	42b0      	cmp	r0, r6
 8007164:	d000      	beq.n	8007168 <TIM_Base_SetConfig+0x48>
 8007166:	b11d      	cbz	r5, 8007170 <TIM_Base_SetConfig+0x50>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007168:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800716c:	684d      	ldr	r5, [r1, #4]
 800716e:	432b      	orrs	r3, r5
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007170:	bb12      	cbnz	r2, 80071b8 <TIM_Base_SetConfig+0x98>
 8007172:	4a25      	ldr	r2, [pc, #148]	; (8007208 <TIM_Base_SetConfig+0xe8>)
 8007174:	4290      	cmp	r0, r2
 8007176:	bf14      	ite	ne
 8007178:	2200      	movne	r2, #0
 800717a:	2201      	moveq	r2, #1
 800717c:	4d23      	ldr	r5, [pc, #140]	; (800720c <TIM_Base_SetConfig+0xec>)
 800717e:	42a8      	cmp	r0, r5
 8007180:	d01a      	beq.n	80071b8 <TIM_Base_SetConfig+0x98>
 8007182:	b9ca      	cbnz	r2, 80071b8 <TIM_Base_SetConfig+0x98>
 8007184:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8007188:	f502 3282 	add.w	r2, r2, #66560	; 0x10400
 800718c:	4290      	cmp	r0, r2
 800718e:	bf14      	ite	ne
 8007190:	2200      	movne	r2, #0
 8007192:	2201      	moveq	r2, #1
 8007194:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8007198:	42a8      	cmp	r0, r5
 800719a:	d00d      	beq.n	80071b8 <TIM_Base_SetConfig+0x98>
 800719c:	b962      	cbnz	r2, 80071b8 <TIM_Base_SetConfig+0x98>
 800719e:	4a1c      	ldr	r2, [pc, #112]	; (8007210 <TIM_Base_SetConfig+0xf0>)
 80071a0:	4290      	cmp	r0, r2
 80071a2:	bf14      	ite	ne
 80071a4:	2200      	movne	r2, #0
 80071a6:	2201      	moveq	r2, #1
 80071a8:	f505 359a 	add.w	r5, r5, #78848	; 0x13400
 80071ac:	42a8      	cmp	r0, r5
 80071ae:	d003      	beq.n	80071b8 <TIM_Base_SetConfig+0x98>
 80071b0:	b912      	cbnz	r2, 80071b8 <TIM_Base_SetConfig+0x98>
 80071b2:	4a18      	ldr	r2, [pc, #96]	; (8007214 <TIM_Base_SetConfig+0xf4>)
 80071b4:	4290      	cmp	r0, r2
 80071b6:	d103      	bne.n	80071c0 <TIM_Base_SetConfig+0xa0>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80071b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80071bc:	68ca      	ldr	r2, [r1, #12]
 80071be:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80071c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071c4:	694a      	ldr	r2, [r1, #20]
 80071c6:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80071c8:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80071ca:	688a      	ldr	r2, [r1, #8]
 80071cc:	62c2      	str	r2, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80071ce:	680a      	ldr	r2, [r1, #0]
 80071d0:	6282      	str	r2, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80071d2:	4b11      	ldr	r3, [pc, #68]	; (8007218 <TIM_Base_SetConfig+0xf8>)
 80071d4:	4298      	cmp	r0, r3
 80071d6:	bf14      	ite	ne
 80071d8:	4623      	movne	r3, r4
 80071da:	f044 0301 	orreq.w	r3, r4, #1
 80071de:	b95b      	cbnz	r3, 80071f8 <TIM_Base_SetConfig+0xd8>
 80071e0:	4b0b      	ldr	r3, [pc, #44]	; (8007210 <TIM_Base_SetConfig+0xf0>)
 80071e2:	4298      	cmp	r0, r3
 80071e4:	bf14      	ite	ne
 80071e6:	2300      	movne	r3, #0
 80071e8:	2301      	moveq	r3, #1
 80071ea:	4a0c      	ldr	r2, [pc, #48]	; (800721c <TIM_Base_SetConfig+0xfc>)
 80071ec:	4290      	cmp	r0, r2
 80071ee:	d003      	beq.n	80071f8 <TIM_Base_SetConfig+0xd8>
 80071f0:	b913      	cbnz	r3, 80071f8 <TIM_Base_SetConfig+0xd8>
 80071f2:	4b08      	ldr	r3, [pc, #32]	; (8007214 <TIM_Base_SetConfig+0xf4>)
 80071f4:	4298      	cmp	r0, r3
 80071f6:	d101      	bne.n	80071fc <TIM_Base_SetConfig+0xdc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80071f8:	690b      	ldr	r3, [r1, #16]
 80071fa:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80071fc:	2301      	movs	r3, #1
 80071fe:	6143      	str	r3, [r0, #20]
}
 8007200:	bc70      	pop	{r4, r5, r6}
 8007202:	4770      	bx	lr
 8007204:	40010000 	.word	0x40010000
 8007208:	40000800 	.word	0x40000800
 800720c:	40000400 	.word	0x40000400
 8007210:	40014400 	.word	0x40014400
 8007214:	40014800 	.word	0x40014800
 8007218:	40010400 	.word	0x40010400
 800721c:	40014000 	.word	0x40014000

08007220 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8007220:	b1a8      	cbz	r0, 800724e <HAL_TIM_Base_Init+0x2e>
{
 8007222:	b510      	push	{r4, lr}
 8007224:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8007226:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800722a:	b15b      	cbz	r3, 8007244 <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 800722c:	2302      	movs	r3, #2
 800722e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007232:	1d21      	adds	r1, r4, #4
 8007234:	6820      	ldr	r0, [r4, #0]
 8007236:	f7ff ff73 	bl	8007120 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800723a:	2301      	movs	r3, #1
 800723c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8007240:	2000      	movs	r0, #0
}
 8007242:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8007244:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8007248:	f7ff fe80 	bl	8006f4c <HAL_TIM_Base_MspInit>
 800724c:	e7ee      	b.n	800722c <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 800724e:	2001      	movs	r0, #1
}
 8007250:	4770      	bx	lr

08007252 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007252:	4770      	bx	lr

08007254 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007254:	4770      	bx	lr

08007256 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007256:	4770      	bx	lr

08007258 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007258:	6802      	ldr	r2, [r0, #0]
 800725a:	6813      	ldr	r3, [r2, #0]
 800725c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007260:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8007262:	6802      	ldr	r2, [r0, #0]
 8007264:	6893      	ldr	r3, [r2, #8]
 8007266:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800726a:	6093      	str	r3, [r2, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800726c:	2320      	movs	r3, #32
 800726e:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
}
 8007272:	4770      	bx	lr

08007274 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007274:	6802      	ldr	r2, [r0, #0]
 8007276:	6813      	ldr	r3, [r2, #0]
 8007278:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800727c:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800727e:	6802      	ldr	r2, [r0, #0]
 8007280:	6891      	ldr	r1, [r2, #8]
 8007282:	4b04      	ldr	r3, [pc, #16]	; (8007294 <UART_EndRxTransfer+0x20>)
 8007284:	400b      	ands	r3, r1
 8007286:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007288:	2320      	movs	r3, #32
 800728a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800728e:	2300      	movs	r3, #0
 8007290:	66c3      	str	r3, [r0, #108]	; 0x6c
}
 8007292:	4770      	bx	lr
 8007294:	effffffe 	.word	0xeffffffe

08007298 <HAL_UART_Transmit_DMA>:
{
 8007298:	b538      	push	{r3, r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 800729a:	f8d0 4080 	ldr.w	r4, [r0, #128]	; 0x80
 800729e:	2c20      	cmp	r4, #32
 80072a0:	d146      	bne.n	8007330 <HAL_UART_Transmit_DMA+0x98>
    if ((pData == NULL) || (Size == 0U))
 80072a2:	fab2 f582 	clz	r5, r2
 80072a6:	096d      	lsrs	r5, r5, #5
 80072a8:	2900      	cmp	r1, #0
 80072aa:	bf08      	it	eq
 80072ac:	2501      	moveq	r5, #1
 80072ae:	2d00      	cmp	r5, #0
 80072b0:	d140      	bne.n	8007334 <HAL_UART_Transmit_DMA+0x9c>
    __HAL_LOCK(huart);
 80072b2:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 80072b6:	2b01      	cmp	r3, #1
 80072b8:	d03e      	beq.n	8007338 <HAL_UART_Transmit_DMA+0xa0>
 80072ba:	4613      	mov	r3, r2
 80072bc:	4604      	mov	r4, r0
 80072be:	2201      	movs	r2, #1
 80072c0:	f880 207c 	strb.w	r2, [r0, #124]	; 0x7c
    huart->pTxBuffPtr  = pData;
 80072c4:	6501      	str	r1, [r0, #80]	; 0x50
    huart->TxXferSize  = Size;
 80072c6:	f8a0 3054 	strh.w	r3, [r0, #84]	; 0x54
    huart->TxXferCount = Size;
 80072ca:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072ce:	2200      	movs	r2, #0
 80072d0:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80072d4:	2221      	movs	r2, #33	; 0x21
 80072d6:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
    if (huart->hdmatx != NULL)
 80072da:	6f42      	ldr	r2, [r0, #116]	; 0x74
 80072dc:	b18a      	cbz	r2, 8007302 <HAL_UART_Transmit_DMA+0x6a>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80072de:	4917      	ldr	r1, [pc, #92]	; (800733c <HAL_UART_Transmit_DMA+0xa4>)
 80072e0:	63d1      	str	r1, [r2, #60]	; 0x3c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80072e2:	6f42      	ldr	r2, [r0, #116]	; 0x74
 80072e4:	4916      	ldr	r1, [pc, #88]	; (8007340 <HAL_UART_Transmit_DMA+0xa8>)
 80072e6:	6411      	str	r1, [r2, #64]	; 0x40
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80072e8:	6f42      	ldr	r2, [r0, #116]	; 0x74
 80072ea:	4916      	ldr	r1, [pc, #88]	; (8007344 <HAL_UART_Transmit_DMA+0xac>)
 80072ec:	64d1      	str	r1, [r2, #76]	; 0x4c
      huart->hdmatx->XferAbortCallback = NULL;
 80072ee:	6f42      	ldr	r2, [r0, #116]	; 0x74
 80072f0:	2100      	movs	r1, #0
 80072f2:	6511      	str	r1, [r2, #80]	; 0x50
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80072f4:	6802      	ldr	r2, [r0, #0]
 80072f6:	3228      	adds	r2, #40	; 0x28
 80072f8:	6d01      	ldr	r1, [r0, #80]	; 0x50
 80072fa:	6f40      	ldr	r0, [r0, #116]	; 0x74
 80072fc:	f7fb fe96 	bl	800302c <HAL_DMA_Start_IT>
 8007300:	b958      	cbnz	r0, 800731a <HAL_UART_Transmit_DMA+0x82>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007302:	6823      	ldr	r3, [r4, #0]
 8007304:	2240      	movs	r2, #64	; 0x40
 8007306:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 8007308:	2000      	movs	r0, #0
 800730a:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800730e:	6822      	ldr	r2, [r4, #0]
 8007310:	6893      	ldr	r3, [r2, #8]
 8007312:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007316:	6093      	str	r3, [r2, #8]
    return HAL_OK;
 8007318:	e00b      	b.n	8007332 <HAL_UART_Transmit_DMA+0x9a>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800731a:	2310      	movs	r3, #16
 800731c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        __HAL_UNLOCK(huart);
 8007320:	2300      	movs	r3, #0
 8007322:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
        huart->gState = HAL_UART_STATE_READY;
 8007326:	2320      	movs	r3, #32
 8007328:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        return HAL_ERROR;
 800732c:	2001      	movs	r0, #1
 800732e:	e000      	b.n	8007332 <HAL_UART_Transmit_DMA+0x9a>
    return HAL_BUSY;
 8007330:	2002      	movs	r0, #2
}
 8007332:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8007334:	2001      	movs	r0, #1
 8007336:	e7fc      	b.n	8007332 <HAL_UART_Transmit_DMA+0x9a>
    __HAL_LOCK(huart);
 8007338:	2002      	movs	r0, #2
 800733a:	e7fa      	b.n	8007332 <HAL_UART_Transmit_DMA+0x9a>
 800733c:	08007405 	.word	0x08007405
 8007340:	08007453 	.word	0x08007453
 8007344:	080074a9 	.word	0x080074a9

08007348 <HAL_UART_Receive_DMA>:
{
 8007348:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800734a:	f8d0 4084 	ldr.w	r4, [r0, #132]	; 0x84
 800734e:	2c20      	cmp	r4, #32
 8007350:	d14b      	bne.n	80073ea <HAL_UART_Receive_DMA+0xa2>
    if ((pData == NULL) || (Size == 0U))
 8007352:	fab2 f582 	clz	r5, r2
 8007356:	096d      	lsrs	r5, r5, #5
 8007358:	2900      	cmp	r1, #0
 800735a:	bf08      	it	eq
 800735c:	2501      	moveq	r5, #1
 800735e:	2d00      	cmp	r5, #0
 8007360:	d145      	bne.n	80073ee <HAL_UART_Receive_DMA+0xa6>
    __HAL_LOCK(huart);
 8007362:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8007366:	2b01      	cmp	r3, #1
 8007368:	d043      	beq.n	80073f2 <HAL_UART_Receive_DMA+0xaa>
 800736a:	4613      	mov	r3, r2
 800736c:	4604      	mov	r4, r0
 800736e:	2201      	movs	r2, #1
 8007370:	f880 207c 	strb.w	r2, [r0, #124]	; 0x7c
    huart->pRxBuffPtr = pData;
 8007374:	6581      	str	r1, [r0, #88]	; 0x58
    huart->RxXferSize = Size;
 8007376:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800737a:	2200      	movs	r2, #0
 800737c:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007380:	2222      	movs	r2, #34	; 0x22
 8007382:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    if (huart->hdmarx != NULL)
 8007386:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8007388:	b18a      	cbz	r2, 80073ae <HAL_UART_Receive_DMA+0x66>
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800738a:	491b      	ldr	r1, [pc, #108]	; (80073f8 <HAL_UART_Receive_DMA+0xb0>)
 800738c:	63d1      	str	r1, [r2, #60]	; 0x3c
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800738e:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8007390:	491a      	ldr	r1, [pc, #104]	; (80073fc <HAL_UART_Receive_DMA+0xb4>)
 8007392:	6411      	str	r1, [r2, #64]	; 0x40
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007394:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8007396:	491a      	ldr	r1, [pc, #104]	; (8007400 <HAL_UART_Receive_DMA+0xb8>)
 8007398:	64d1      	str	r1, [r2, #76]	; 0x4c
      huart->hdmarx->XferAbortCallback = NULL;
 800739a:	6f82      	ldr	r2, [r0, #120]	; 0x78
 800739c:	2100      	movs	r1, #0
 800739e:	6511      	str	r1, [r2, #80]	; 0x50
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80073a0:	6801      	ldr	r1, [r0, #0]
 80073a2:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80073a4:	3124      	adds	r1, #36	; 0x24
 80073a6:	6f80      	ldr	r0, [r0, #120]	; 0x78
 80073a8:	f7fb fe40 	bl	800302c <HAL_DMA_Start_IT>
 80073ac:	b990      	cbnz	r0, 80073d4 <HAL_UART_Receive_DMA+0x8c>
    __HAL_UNLOCK(huart);
 80073ae:	2000      	movs	r0, #0
 80073b0:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80073b4:	6822      	ldr	r2, [r4, #0]
 80073b6:	6813      	ldr	r3, [r2, #0]
 80073b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073bc:	6013      	str	r3, [r2, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073be:	6822      	ldr	r2, [r4, #0]
 80073c0:	6893      	ldr	r3, [r2, #8]
 80073c2:	f043 0301 	orr.w	r3, r3, #1
 80073c6:	6093      	str	r3, [r2, #8]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073c8:	6822      	ldr	r2, [r4, #0]
 80073ca:	6893      	ldr	r3, [r2, #8]
 80073cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073d0:	6093      	str	r3, [r2, #8]
    return HAL_OK;
 80073d2:	e00b      	b.n	80073ec <HAL_UART_Receive_DMA+0xa4>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80073d4:	2310      	movs	r3, #16
 80073d6:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        __HAL_UNLOCK(huart);
 80073da:	2300      	movs	r3, #0
 80073dc:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
        huart->gState = HAL_UART_STATE_READY;
 80073e0:	2320      	movs	r3, #32
 80073e2:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        return HAL_ERROR;
 80073e6:	2001      	movs	r0, #1
 80073e8:	e000      	b.n	80073ec <HAL_UART_Receive_DMA+0xa4>
    return HAL_BUSY;
 80073ea:	2002      	movs	r0, #2
}
 80073ec:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 80073ee:	2001      	movs	r0, #1
 80073f0:	e7fc      	b.n	80073ec <HAL_UART_Receive_DMA+0xa4>
    __HAL_LOCK(huart);
 80073f2:	2002      	movs	r0, #2
 80073f4:	e7fa      	b.n	80073ec <HAL_UART_Receive_DMA+0xa4>
 80073f6:	bf00      	nop
 80073f8:	0800745d 	.word	0x0800745d
 80073fc:	0800749d 	.word	0x0800749d
 8007400:	080074a9 	.word	0x080074a9

08007404 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007404:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007406:	6b83      	ldr	r3, [r0, #56]	; 0x38

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8007408:	69c2      	ldr	r2, [r0, #28]
 800740a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800740e:	d00d      	beq.n	800742c <UART_DMATransmitCplt+0x28>
  {
    huart->TxXferCount = 0U;
 8007410:	2200      	movs	r2, #0
 8007412:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007416:	6819      	ldr	r1, [r3, #0]
 8007418:	688a      	ldr	r2, [r1, #8]
 800741a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800741e:	608a      	str	r2, [r1, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007420:	681a      	ldr	r2, [r3, #0]
 8007422:	6813      	ldr	r3, [r2, #0]
 8007424:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007428:	6013      	str	r3, [r2, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800742a:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 800742c:	4618      	mov	r0, r3
 800742e:	f7f9 fbdb 	bl	8000be8 <HAL_UART_TxCpltCallback>
}
 8007432:	e7fa      	b.n	800742a <UART_DMATransmitCplt+0x26>

08007434 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007434:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007436:	6801      	ldr	r1, [r0, #0]
 8007438:	680a      	ldr	r2, [r1, #0]
 800743a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800743e:	600a      	str	r2, [r1, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007440:	2220      	movs	r2, #32
 8007442:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007446:	2200      	movs	r2, #0
 8007448:	6702      	str	r2, [r0, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800744a:	f7f9 fbcd 	bl	8000be8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800744e:	bd08      	pop	{r3, pc}

08007450 <HAL_UART_TxHalfCpltCallback>:
}
 8007450:	4770      	bx	lr

08007452 <UART_DMATxHalfCplt>:
{
 8007452:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8007454:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8007456:	f7ff fffb 	bl	8007450 <HAL_UART_TxHalfCpltCallback>
}
 800745a:	bd08      	pop	{r3, pc}

0800745c <UART_DMAReceiveCplt>:
{
 800745c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800745e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8007460:	69c2      	ldr	r2, [r0, #28]
 8007462:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8007466:	d014      	beq.n	8007492 <UART_DMAReceiveCplt+0x36>
    huart->RxXferCount = 0U;
 8007468:	2200      	movs	r2, #0
 800746a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800746e:	6819      	ldr	r1, [r3, #0]
 8007470:	680a      	ldr	r2, [r1, #0]
 8007472:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007476:	600a      	str	r2, [r1, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007478:	6819      	ldr	r1, [r3, #0]
 800747a:	688a      	ldr	r2, [r1, #8]
 800747c:	f022 0201 	bic.w	r2, r2, #1
 8007480:	608a      	str	r2, [r1, #8]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007482:	6819      	ldr	r1, [r3, #0]
 8007484:	688a      	ldr	r2, [r1, #8]
 8007486:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800748a:	608a      	str	r2, [r1, #8]
    huart->RxState = HAL_UART_STATE_READY;
 800748c:	2220      	movs	r2, #32
 800748e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  HAL_UART_RxCpltCallback(huart);
 8007492:	4618      	mov	r0, r3
 8007494:	f7f9 fb76 	bl	8000b84 <HAL_UART_RxCpltCallback>
}
 8007498:	bd08      	pop	{r3, pc}

0800749a <HAL_UART_RxHalfCpltCallback>:
}
 800749a:	4770      	bx	lr

0800749c <UART_DMARxHalfCplt>:
{
 800749c:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart);
 800749e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80074a0:	f7ff fffb 	bl	800749a <HAL_UART_RxHalfCpltCallback>
}
 80074a4:	bd08      	pop	{r3, pc}

080074a6 <HAL_UART_ErrorCallback>:
}
 80074a6:	4770      	bx	lr

080074a8 <UART_DMAError>:
{
 80074a8:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80074aa:	6b84      	ldr	r4, [r0, #56]	; 0x38
  const HAL_UART_StateTypeDef gstate = huart->gState;
 80074ac:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80074b0:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80074b4:	6823      	ldr	r3, [r4, #0]
 80074b6:	689b      	ldr	r3, [r3, #8]
 80074b8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80074bc:	d001      	beq.n	80074c2 <UART_DMAError+0x1a>
 80074be:	2a21      	cmp	r2, #33	; 0x21
 80074c0:	d010      	beq.n	80074e4 <UART_DMAError+0x3c>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80074c2:	6823      	ldr	r3, [r4, #0]
 80074c4:	689b      	ldr	r3, [r3, #8]
 80074c6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80074ca:	d001      	beq.n	80074d0 <UART_DMAError+0x28>
 80074cc:	2d22      	cmp	r5, #34	; 0x22
 80074ce:	d010      	beq.n	80074f2 <UART_DMAError+0x4a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80074d0:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 80074d4:	f043 0310 	orr.w	r3, r3, #16
 80074d8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  HAL_UART_ErrorCallback(huart);
 80074dc:	4620      	mov	r0, r4
 80074de:	f7ff ffe2 	bl	80074a6 <HAL_UART_ErrorCallback>
}
 80074e2:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 80074e4:	2300      	movs	r3, #0
 80074e6:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80074ea:	4620      	mov	r0, r4
 80074ec:	f7ff feb4 	bl	8007258 <UART_EndTxTransfer>
 80074f0:	e7e7      	b.n	80074c2 <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 80074f2:	2300      	movs	r3, #0
 80074f4:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80074f8:	4620      	mov	r0, r4
 80074fa:	f7ff febb 	bl	8007274 <UART_EndRxTransfer>
 80074fe:	e7e7      	b.n	80074d0 <UART_DMAError+0x28>

08007500 <HAL_UART_IRQHandler>:
{
 8007500:	b570      	push	{r4, r5, r6, lr}
 8007502:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007504:	6801      	ldr	r1, [r0, #0]
 8007506:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007508:	680d      	ldr	r5, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800750a:	6888      	ldr	r0, [r1, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800750c:	f640 020f 	movw	r2, #2063	; 0x80f
  if (errorflags == 0U)
 8007510:	401a      	ands	r2, r3
 8007512:	d10d      	bne.n	8007530 <HAL_UART_IRQHandler+0x30>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007514:	f013 0f20 	tst.w	r3, #32
 8007518:	d00a      	beq.n	8007530 <HAL_UART_IRQHandler+0x30>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800751a:	f015 0f20 	tst.w	r5, #32
 800751e:	d102      	bne.n	8007526 <HAL_UART_IRQHandler+0x26>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007520:	f010 5f80 	tst.w	r0, #268435456	; 0x10000000
 8007524:	d004      	beq.n	8007530 <HAL_UART_IRQHandler+0x30>
      if (huart->RxISR != NULL)
 8007526:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8007528:	b10b      	cbz	r3, 800752e <HAL_UART_IRQHandler+0x2e>
        huart->RxISR(huart);
 800752a:	4620      	mov	r0, r4
 800752c:	4798      	blx	r3
}
 800752e:	bd70      	pop	{r4, r5, r6, pc}
  if ((errorflags != 0U)
 8007530:	2a00      	cmp	r2, #0
 8007532:	f000 8095 	beq.w	8007660 <HAL_UART_IRQHandler+0x160>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007536:	4a68      	ldr	r2, [pc, #416]	; (80076d8 <HAL_UART_IRQHandler+0x1d8>)
 8007538:	4002      	ands	r2, r0
 800753a:	d103      	bne.n	8007544 <HAL_UART_IRQHandler+0x44>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800753c:	4e67      	ldr	r6, [pc, #412]	; (80076dc <HAL_UART_IRQHandler+0x1dc>)
 800753e:	4235      	tst	r5, r6
 8007540:	f000 808e 	beq.w	8007660 <HAL_UART_IRQHandler+0x160>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007544:	f013 0f01 	tst.w	r3, #1
 8007548:	d009      	beq.n	800755e <HAL_UART_IRQHandler+0x5e>
 800754a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800754e:	d006      	beq.n	800755e <HAL_UART_IRQHandler+0x5e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007550:	2601      	movs	r6, #1
 8007552:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007554:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8007558:	4331      	orrs	r1, r6
 800755a:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800755e:	f013 0f02 	tst.w	r3, #2
 8007562:	d00b      	beq.n	800757c <HAL_UART_IRQHandler+0x7c>
 8007564:	f010 0f01 	tst.w	r0, #1
 8007568:	d008      	beq.n	800757c <HAL_UART_IRQHandler+0x7c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800756a:	6821      	ldr	r1, [r4, #0]
 800756c:	2602      	movs	r6, #2
 800756e:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007570:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8007574:	f041 0104 	orr.w	r1, r1, #4
 8007578:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800757c:	f013 0f04 	tst.w	r3, #4
 8007580:	d00b      	beq.n	800759a <HAL_UART_IRQHandler+0x9a>
 8007582:	f010 0f01 	tst.w	r0, #1
 8007586:	d008      	beq.n	800759a <HAL_UART_IRQHandler+0x9a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007588:	6821      	ldr	r1, [r4, #0]
 800758a:	2604      	movs	r6, #4
 800758c:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800758e:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8007592:	f041 0102 	orr.w	r1, r1, #2
 8007596:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_ORE) != 0U)
 800759a:	f013 0f08 	tst.w	r3, #8
 800759e:	d00b      	beq.n	80075b8 <HAL_UART_IRQHandler+0xb8>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80075a0:	f015 0f20 	tst.w	r5, #32
 80075a4:	d100      	bne.n	80075a8 <HAL_UART_IRQHandler+0xa8>
 80075a6:	b13a      	cbz	r2, 80075b8 <HAL_UART_IRQHandler+0xb8>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80075a8:	6822      	ldr	r2, [r4, #0]
 80075aa:	2108      	movs	r1, #8
 80075ac:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80075ae:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 80075b2:	430a      	orrs	r2, r1
 80075b4:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80075b8:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80075bc:	d00c      	beq.n	80075d8 <HAL_UART_IRQHandler+0xd8>
 80075be:	f015 6f80 	tst.w	r5, #67108864	; 0x4000000
 80075c2:	d009      	beq.n	80075d8 <HAL_UART_IRQHandler+0xd8>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80075c4:	6822      	ldr	r2, [r4, #0]
 80075c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80075ca:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80075cc:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 80075d0:	f042 0220 	orr.w	r2, r2, #32
 80075d4:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80075d8:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 80075dc:	2a00      	cmp	r2, #0
 80075de:	d0a6      	beq.n	800752e <HAL_UART_IRQHandler+0x2e>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80075e0:	f013 0f20 	tst.w	r3, #32
 80075e4:	d009      	beq.n	80075fa <HAL_UART_IRQHandler+0xfa>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80075e6:	f015 0f20 	tst.w	r5, #32
 80075ea:	d102      	bne.n	80075f2 <HAL_UART_IRQHandler+0xf2>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80075ec:	f010 5f80 	tst.w	r0, #268435456	; 0x10000000
 80075f0:	d003      	beq.n	80075fa <HAL_UART_IRQHandler+0xfa>
        if (huart->RxISR != NULL)
 80075f2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80075f4:	b10b      	cbz	r3, 80075fa <HAL_UART_IRQHandler+0xfa>
          huart->RxISR(huart);
 80075f6:	4620      	mov	r0, r4
 80075f8:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 80075fa:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80075fe:	6823      	ldr	r3, [r4, #0]
 8007600:	689b      	ldr	r3, [r3, #8]
 8007602:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007606:	d102      	bne.n	800760e <HAL_UART_IRQHandler+0x10e>
 8007608:	f012 0f28 	tst.w	r2, #40	; 0x28
 800760c:	d021      	beq.n	8007652 <HAL_UART_IRQHandler+0x152>
        UART_EndRxTransfer(huart);
 800760e:	4620      	mov	r0, r4
 8007610:	f7ff fe30 	bl	8007274 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007614:	6823      	ldr	r3, [r4, #0]
 8007616:	689a      	ldr	r2, [r3, #8]
 8007618:	f012 0f40 	tst.w	r2, #64	; 0x40
 800761c:	d015      	beq.n	800764a <HAL_UART_IRQHandler+0x14a>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800761e:	689a      	ldr	r2, [r3, #8]
 8007620:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007624:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8007626:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8007628:	b15b      	cbz	r3, 8007642 <HAL_UART_IRQHandler+0x142>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800762a:	4a2d      	ldr	r2, [pc, #180]	; (80076e0 <HAL_UART_IRQHandler+0x1e0>)
 800762c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800762e:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8007630:	f7fb fe48 	bl	80032c4 <HAL_DMA_Abort_IT>
 8007634:	2800      	cmp	r0, #0
 8007636:	f43f af7a 	beq.w	800752e <HAL_UART_IRQHandler+0x2e>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800763a:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800763c:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800763e:	4798      	blx	r3
 8007640:	e775      	b.n	800752e <HAL_UART_IRQHandler+0x2e>
            HAL_UART_ErrorCallback(huart);
 8007642:	4620      	mov	r0, r4
 8007644:	f7ff ff2f 	bl	80074a6 <HAL_UART_ErrorCallback>
 8007648:	e771      	b.n	800752e <HAL_UART_IRQHandler+0x2e>
          HAL_UART_ErrorCallback(huart);
 800764a:	4620      	mov	r0, r4
 800764c:	f7ff ff2b 	bl	80074a6 <HAL_UART_ErrorCallback>
 8007650:	e76d      	b.n	800752e <HAL_UART_IRQHandler+0x2e>
        HAL_UART_ErrorCallback(huart);
 8007652:	4620      	mov	r0, r4
 8007654:	f7ff ff27 	bl	80074a6 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007658:	2300      	movs	r3, #0
 800765a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800765e:	e766      	b.n	800752e <HAL_UART_IRQHandler+0x2e>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007660:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8007664:	d002      	beq.n	800766c <HAL_UART_IRQHandler+0x16c>
 8007666:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 800766a:	d10f      	bne.n	800768c <HAL_UART_IRQHandler+0x18c>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800766c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007670:	d013      	beq.n	800769a <HAL_UART_IRQHandler+0x19a>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007672:	f015 0f80 	tst.w	r5, #128	; 0x80
 8007676:	d102      	bne.n	800767e <HAL_UART_IRQHandler+0x17e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007678:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 800767c:	d00d      	beq.n	800769a <HAL_UART_IRQHandler+0x19a>
    if (huart->TxISR != NULL)
 800767e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8007680:	2b00      	cmp	r3, #0
 8007682:	f43f af54 	beq.w	800752e <HAL_UART_IRQHandler+0x2e>
      huart->TxISR(huart);
 8007686:	4620      	mov	r0, r4
 8007688:	4798      	blx	r3
 800768a:	e750      	b.n	800752e <HAL_UART_IRQHandler+0x2e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800768c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007690:	620b      	str	r3, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8007692:	4620      	mov	r0, r4
 8007694:	f001 fd76 	bl	8009184 <HAL_UARTEx_WakeupCallback>
    return;
 8007698:	e749      	b.n	800752e <HAL_UART_IRQHandler+0x2e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800769a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800769e:	d002      	beq.n	80076a6 <HAL_UART_IRQHandler+0x1a6>
 80076a0:	f015 0f40 	tst.w	r5, #64	; 0x40
 80076a4:	d110      	bne.n	80076c8 <HAL_UART_IRQHandler+0x1c8>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80076a6:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 80076aa:	d002      	beq.n	80076b2 <HAL_UART_IRQHandler+0x1b2>
 80076ac:	f015 4f80 	tst.w	r5, #1073741824	; 0x40000000
 80076b0:	d10e      	bne.n	80076d0 <HAL_UART_IRQHandler+0x1d0>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80076b2:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80076b6:	f43f af3a 	beq.w	800752e <HAL_UART_IRQHandler+0x2e>
 80076ba:	2d00      	cmp	r5, #0
 80076bc:	f6bf af37 	bge.w	800752e <HAL_UART_IRQHandler+0x2e>
    HAL_UARTEx_RxFifoFullCallback(huart);
 80076c0:	4620      	mov	r0, r4
 80076c2:	f001 fd60 	bl	8009186 <HAL_UARTEx_RxFifoFullCallback>
    return;
 80076c6:	e732      	b.n	800752e <HAL_UART_IRQHandler+0x2e>
    UART_EndTransmit_IT(huart);
 80076c8:	4620      	mov	r0, r4
 80076ca:	f7ff feb3 	bl	8007434 <UART_EndTransmit_IT>
    return;
 80076ce:	e72e      	b.n	800752e <HAL_UART_IRQHandler+0x2e>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80076d0:	4620      	mov	r0, r4
 80076d2:	f001 fd59 	bl	8009188 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 80076d6:	e72a      	b.n	800752e <HAL_UART_IRQHandler+0x2e>
 80076d8:	10000001 	.word	0x10000001
 80076dc:	04000120 	.word	0x04000120
 80076e0:	080076e5 	.word	0x080076e5

080076e4 <UART_DMAAbortOnError>:
{
 80076e4:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80076e6:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 80076e8:	2300      	movs	r3, #0
 80076ea:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80076ee:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 80076f2:	f7ff fed8 	bl	80074a6 <HAL_UART_ErrorCallback>
}
 80076f6:	bd08      	pop	{r3, pc}

080076f8 <UART_SetConfig>:
{
 80076f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80076fc:	b087      	sub	sp, #28
 80076fe:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8007700:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007702:	6883      	ldr	r3, [r0, #8]
 8007704:	6902      	ldr	r2, [r0, #16]
 8007706:	4313      	orrs	r3, r2
 8007708:	6942      	ldr	r2, [r0, #20]
 800770a:	4313      	orrs	r3, r2
 800770c:	69c2      	ldr	r2, [r0, #28]
 800770e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)huart->FifoMode;
 8007710:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8007712:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007714:	6808      	ldr	r0, [r1, #0]
 8007716:	4a87      	ldr	r2, [pc, #540]	; (8007934 <UART_SetConfig+0x23c>)
 8007718:	4002      	ands	r2, r0
 800771a:	431a      	orrs	r2, r3
 800771c:	600a      	str	r2, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800771e:	6822      	ldr	r2, [r4, #0]
 8007720:	6853      	ldr	r3, [r2, #4]
 8007722:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007726:	68e1      	ldr	r1, [r4, #12]
 8007728:	430b      	orrs	r3, r1
 800772a:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800772c:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800772e:	6822      	ldr	r2, [r4, #0]
 8007730:	4b81      	ldr	r3, [pc, #516]	; (8007938 <UART_SetConfig+0x240>)
 8007732:	429a      	cmp	r2, r3
 8007734:	d001      	beq.n	800773a <UART_SetConfig+0x42>
    tmpreg |= huart->Init.OneBitSampling;
 8007736:	6a23      	ldr	r3, [r4, #32]
 8007738:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800773a:	6890      	ldr	r0, [r2, #8]
 800773c:	4b7f      	ldr	r3, [pc, #508]	; (800793c <UART_SetConfig+0x244>)
 800773e:	4003      	ands	r3, r0
 8007740:	430b      	orrs	r3, r1
 8007742:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007744:	6822      	ldr	r2, [r4, #0]
 8007746:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007748:	f023 030f 	bic.w	r3, r3, #15
 800774c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800774e:	430b      	orrs	r3, r1
 8007750:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007752:	6823      	ldr	r3, [r4, #0]
 8007754:	4a7a      	ldr	r2, [pc, #488]	; (8007940 <UART_SetConfig+0x248>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d01f      	beq.n	800779a <UART_SetConfig+0xa2>
 800775a:	4a7a      	ldr	r2, [pc, #488]	; (8007944 <UART_SetConfig+0x24c>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d059      	beq.n	8007814 <UART_SetConfig+0x11c>
 8007760:	4a79      	ldr	r2, [pc, #484]	; (8007948 <UART_SetConfig+0x250>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d070      	beq.n	8007848 <UART_SetConfig+0x150>
 8007766:	4a79      	ldr	r2, [pc, #484]	; (800794c <UART_SetConfig+0x254>)
 8007768:	4293      	cmp	r3, r2
 800776a:	f000 8087 	beq.w	800787c <UART_SetConfig+0x184>
 800776e:	4a78      	ldr	r2, [pc, #480]	; (8007950 <UART_SetConfig+0x258>)
 8007770:	4293      	cmp	r3, r2
 8007772:	f000 809d 	beq.w	80078b0 <UART_SetConfig+0x1b8>
 8007776:	4a77      	ldr	r2, [pc, #476]	; (8007954 <UART_SetConfig+0x25c>)
 8007778:	4293      	cmp	r3, r2
 800777a:	f000 80b3 	beq.w	80078e4 <UART_SetConfig+0x1ec>
 800777e:	4a76      	ldr	r2, [pc, #472]	; (8007958 <UART_SetConfig+0x260>)
 8007780:	4293      	cmp	r3, r2
 8007782:	f000 80f1 	beq.w	8007968 <UART_SetConfig+0x270>
 8007786:	4a75      	ldr	r2, [pc, #468]	; (800795c <UART_SetConfig+0x264>)
 8007788:	4293      	cmp	r3, r2
 800778a:	f000 8104 	beq.w	8007996 <UART_SetConfig+0x29e>
 800778e:	4a6a      	ldr	r2, [pc, #424]	; (8007938 <UART_SetConfig+0x240>)
 8007790:	4293      	cmp	r3, r2
 8007792:	f000 8117 	beq.w	80079c4 <UART_SetConfig+0x2cc>
 8007796:	2580      	movs	r5, #128	; 0x80
 8007798:	e12d      	b.n	80079f6 <UART_SetConfig+0x2fe>
 800779a:	4a71      	ldr	r2, [pc, #452]	; (8007960 <UART_SetConfig+0x268>)
 800779c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800779e:	f002 0238 	and.w	r2, r2, #56	; 0x38
 80077a2:	2a28      	cmp	r2, #40	; 0x28
 80077a4:	d834      	bhi.n	8007810 <UART_SetConfig+0x118>
 80077a6:	e8df f012 	tbh	[pc, r2, lsl #1]
 80077aa:	0029      	.short	0x0029
 80077ac:	00330033 	.word	0x00330033
 80077b0:	00330033 	.word	0x00330033
 80077b4:	00330033 	.word	0x00330033
 80077b8:	01250033 	.word	0x01250033
 80077bc:	00330033 	.word	0x00330033
 80077c0:	00330033 	.word	0x00330033
 80077c4:	00330033 	.word	0x00330033
 80077c8:	002b0033 	.word	0x002b0033
 80077cc:	00330033 	.word	0x00330033
 80077d0:	00330033 	.word	0x00330033
 80077d4:	00330033 	.word	0x00330033
 80077d8:	002d0033 	.word	0x002d0033
 80077dc:	00330033 	.word	0x00330033
 80077e0:	00330033 	.word	0x00330033
 80077e4:	00330033 	.word	0x00330033
 80077e8:	002f0033 	.word	0x002f0033
 80077ec:	00330033 	.word	0x00330033
 80077f0:	00330033 	.word	0x00330033
 80077f4:	00330033 	.word	0x00330033
 80077f8:	00310033 	.word	0x00310033
 80077fc:	2501      	movs	r5, #1
 80077fe:	e0fa      	b.n	80079f6 <UART_SetConfig+0x2fe>
 8007800:	2508      	movs	r5, #8
 8007802:	e0f8      	b.n	80079f6 <UART_SetConfig+0x2fe>
 8007804:	2510      	movs	r5, #16
 8007806:	e0f6      	b.n	80079f6 <UART_SetConfig+0x2fe>
 8007808:	2520      	movs	r5, #32
 800780a:	e0f4      	b.n	80079f6 <UART_SetConfig+0x2fe>
 800780c:	2540      	movs	r5, #64	; 0x40
 800780e:	e0f2      	b.n	80079f6 <UART_SetConfig+0x2fe>
 8007810:	2580      	movs	r5, #128	; 0x80
 8007812:	e0f0      	b.n	80079f6 <UART_SetConfig+0x2fe>
 8007814:	4a52      	ldr	r2, [pc, #328]	; (8007960 <UART_SetConfig+0x268>)
 8007816:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007818:	f002 0207 	and.w	r2, r2, #7
 800781c:	2a05      	cmp	r2, #5
 800781e:	d811      	bhi.n	8007844 <UART_SetConfig+0x14c>
 8007820:	e8df f012 	tbh	[pc, r2, lsl #1]
 8007824:	01370006 	.word	0x01370006
 8007828:	000a0008 	.word	0x000a0008
 800782c:	000e000c 	.word	0x000e000c
 8007830:	2500      	movs	r5, #0
 8007832:	e0e0      	b.n	80079f6 <UART_SetConfig+0x2fe>
 8007834:	2508      	movs	r5, #8
 8007836:	e0de      	b.n	80079f6 <UART_SetConfig+0x2fe>
 8007838:	2510      	movs	r5, #16
 800783a:	e0dc      	b.n	80079f6 <UART_SetConfig+0x2fe>
 800783c:	2520      	movs	r5, #32
 800783e:	e0da      	b.n	80079f6 <UART_SetConfig+0x2fe>
 8007840:	2540      	movs	r5, #64	; 0x40
 8007842:	e0d8      	b.n	80079f6 <UART_SetConfig+0x2fe>
 8007844:	2580      	movs	r5, #128	; 0x80
 8007846:	e0d6      	b.n	80079f6 <UART_SetConfig+0x2fe>
 8007848:	4a45      	ldr	r2, [pc, #276]	; (8007960 <UART_SetConfig+0x268>)
 800784a:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800784c:	f002 0207 	and.w	r2, r2, #7
 8007850:	2a05      	cmp	r2, #5
 8007852:	d811      	bhi.n	8007878 <UART_SetConfig+0x180>
 8007854:	e8df f012 	tbh	[pc, r2, lsl #1]
 8007858:	011f0006 	.word	0x011f0006
 800785c:	000a0008 	.word	0x000a0008
 8007860:	000e000c 	.word	0x000e000c
 8007864:	2500      	movs	r5, #0
 8007866:	e0c6      	b.n	80079f6 <UART_SetConfig+0x2fe>
 8007868:	2508      	movs	r5, #8
 800786a:	e0c4      	b.n	80079f6 <UART_SetConfig+0x2fe>
 800786c:	2510      	movs	r5, #16
 800786e:	e0c2      	b.n	80079f6 <UART_SetConfig+0x2fe>
 8007870:	2520      	movs	r5, #32
 8007872:	e0c0      	b.n	80079f6 <UART_SetConfig+0x2fe>
 8007874:	2540      	movs	r5, #64	; 0x40
 8007876:	e0be      	b.n	80079f6 <UART_SetConfig+0x2fe>
 8007878:	2580      	movs	r5, #128	; 0x80
 800787a:	e0bc      	b.n	80079f6 <UART_SetConfig+0x2fe>
 800787c:	4a38      	ldr	r2, [pc, #224]	; (8007960 <UART_SetConfig+0x268>)
 800787e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007880:	f002 0207 	and.w	r2, r2, #7
 8007884:	2a05      	cmp	r2, #5
 8007886:	d811      	bhi.n	80078ac <UART_SetConfig+0x1b4>
 8007888:	e8df f012 	tbh	[pc, r2, lsl #1]
 800788c:	01070006 	.word	0x01070006
 8007890:	000a0008 	.word	0x000a0008
 8007894:	000e000c 	.word	0x000e000c
 8007898:	2500      	movs	r5, #0
 800789a:	e0ac      	b.n	80079f6 <UART_SetConfig+0x2fe>
 800789c:	2508      	movs	r5, #8
 800789e:	e0aa      	b.n	80079f6 <UART_SetConfig+0x2fe>
 80078a0:	2510      	movs	r5, #16
 80078a2:	e0a8      	b.n	80079f6 <UART_SetConfig+0x2fe>
 80078a4:	2520      	movs	r5, #32
 80078a6:	e0a6      	b.n	80079f6 <UART_SetConfig+0x2fe>
 80078a8:	2540      	movs	r5, #64	; 0x40
 80078aa:	e0a4      	b.n	80079f6 <UART_SetConfig+0x2fe>
 80078ac:	2580      	movs	r5, #128	; 0x80
 80078ae:	e0a2      	b.n	80079f6 <UART_SetConfig+0x2fe>
 80078b0:	4a2b      	ldr	r2, [pc, #172]	; (8007960 <UART_SetConfig+0x268>)
 80078b2:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80078b4:	f002 0207 	and.w	r2, r2, #7
 80078b8:	2a05      	cmp	r2, #5
 80078ba:	d811      	bhi.n	80078e0 <UART_SetConfig+0x1e8>
 80078bc:	e8df f012 	tbh	[pc, r2, lsl #1]
 80078c0:	00ef0006 	.word	0x00ef0006
 80078c4:	000a0008 	.word	0x000a0008
 80078c8:	000e000c 	.word	0x000e000c
 80078cc:	2500      	movs	r5, #0
 80078ce:	e092      	b.n	80079f6 <UART_SetConfig+0x2fe>
 80078d0:	2508      	movs	r5, #8
 80078d2:	e090      	b.n	80079f6 <UART_SetConfig+0x2fe>
 80078d4:	2510      	movs	r5, #16
 80078d6:	e08e      	b.n	80079f6 <UART_SetConfig+0x2fe>
 80078d8:	2520      	movs	r5, #32
 80078da:	e08c      	b.n	80079f6 <UART_SetConfig+0x2fe>
 80078dc:	2540      	movs	r5, #64	; 0x40
 80078de:	e08a      	b.n	80079f6 <UART_SetConfig+0x2fe>
 80078e0:	2580      	movs	r5, #128	; 0x80
 80078e2:	e088      	b.n	80079f6 <UART_SetConfig+0x2fe>
 80078e4:	4a1e      	ldr	r2, [pc, #120]	; (8007960 <UART_SetConfig+0x268>)
 80078e6:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80078e8:	f002 0238 	and.w	r2, r2, #56	; 0x38
 80078ec:	2a28      	cmp	r2, #40	; 0x28
 80078ee:	d839      	bhi.n	8007964 <UART_SetConfig+0x26c>
 80078f0:	e8df f002 	tbb	[pc, r2]
 80078f4:	38383815 	.word	0x38383815
 80078f8:	38383838 	.word	0x38383838
 80078fc:	383838d7 	.word	0x383838d7
 8007900:	38383838 	.word	0x38383838
 8007904:	38383817 	.word	0x38383817
 8007908:	38383838 	.word	0x38383838
 800790c:	38383819 	.word	0x38383819
 8007910:	38383838 	.word	0x38383838
 8007914:	3838381b 	.word	0x3838381b
 8007918:	38383838 	.word	0x38383838
 800791c:	1d          	.byte	0x1d
 800791d:	00          	.byte	0x00
 800791e:	2501      	movs	r5, #1
 8007920:	e069      	b.n	80079f6 <UART_SetConfig+0x2fe>
 8007922:	2508      	movs	r5, #8
 8007924:	e067      	b.n	80079f6 <UART_SetConfig+0x2fe>
 8007926:	2510      	movs	r5, #16
 8007928:	e065      	b.n	80079f6 <UART_SetConfig+0x2fe>
 800792a:	2520      	movs	r5, #32
 800792c:	e063      	b.n	80079f6 <UART_SetConfig+0x2fe>
 800792e:	2540      	movs	r5, #64	; 0x40
 8007930:	e061      	b.n	80079f6 <UART_SetConfig+0x2fe>
 8007932:	bf00      	nop
 8007934:	cfff69f3 	.word	0xcfff69f3
 8007938:	58000c00 	.word	0x58000c00
 800793c:	11fff4ff 	.word	0x11fff4ff
 8007940:	40011000 	.word	0x40011000
 8007944:	40004400 	.word	0x40004400
 8007948:	40004800 	.word	0x40004800
 800794c:	40004c00 	.word	0x40004c00
 8007950:	40005000 	.word	0x40005000
 8007954:	40011400 	.word	0x40011400
 8007958:	40007800 	.word	0x40007800
 800795c:	40007c00 	.word	0x40007c00
 8007960:	58024400 	.word	0x58024400
 8007964:	2580      	movs	r5, #128	; 0x80
 8007966:	e046      	b.n	80079f6 <UART_SetConfig+0x2fe>
 8007968:	4a99      	ldr	r2, [pc, #612]	; (8007bd0 <UART_SetConfig+0x4d8>)
 800796a:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800796c:	f002 0207 	and.w	r2, r2, #7
 8007970:	2a05      	cmp	r2, #5
 8007972:	d80e      	bhi.n	8007992 <UART_SetConfig+0x29a>
 8007974:	e8df f002 	tbb	[pc, r2]
 8007978:	07059703 	.word	0x07059703
 800797c:	0b09      	.short	0x0b09
 800797e:	2500      	movs	r5, #0
 8007980:	e039      	b.n	80079f6 <UART_SetConfig+0x2fe>
 8007982:	2508      	movs	r5, #8
 8007984:	e037      	b.n	80079f6 <UART_SetConfig+0x2fe>
 8007986:	2510      	movs	r5, #16
 8007988:	e035      	b.n	80079f6 <UART_SetConfig+0x2fe>
 800798a:	2520      	movs	r5, #32
 800798c:	e033      	b.n	80079f6 <UART_SetConfig+0x2fe>
 800798e:	2540      	movs	r5, #64	; 0x40
 8007990:	e031      	b.n	80079f6 <UART_SetConfig+0x2fe>
 8007992:	2580      	movs	r5, #128	; 0x80
 8007994:	e02f      	b.n	80079f6 <UART_SetConfig+0x2fe>
 8007996:	4a8e      	ldr	r2, [pc, #568]	; (8007bd0 <UART_SetConfig+0x4d8>)
 8007998:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800799a:	f002 0207 	and.w	r2, r2, #7
 800799e:	2a05      	cmp	r2, #5
 80079a0:	d80e      	bhi.n	80079c0 <UART_SetConfig+0x2c8>
 80079a2:	e8df f002 	tbb	[pc, r2]
 80079a6:	8203      	.short	0x8203
 80079a8:	0b090705 	.word	0x0b090705
 80079ac:	2500      	movs	r5, #0
 80079ae:	e022      	b.n	80079f6 <UART_SetConfig+0x2fe>
 80079b0:	2508      	movs	r5, #8
 80079b2:	e020      	b.n	80079f6 <UART_SetConfig+0x2fe>
 80079b4:	2510      	movs	r5, #16
 80079b6:	e01e      	b.n	80079f6 <UART_SetConfig+0x2fe>
 80079b8:	2520      	movs	r5, #32
 80079ba:	e01c      	b.n	80079f6 <UART_SetConfig+0x2fe>
 80079bc:	2540      	movs	r5, #64	; 0x40
 80079be:	e01a      	b.n	80079f6 <UART_SetConfig+0x2fe>
 80079c0:	2580      	movs	r5, #128	; 0x80
 80079c2:	e018      	b.n	80079f6 <UART_SetConfig+0x2fe>
 80079c4:	f502 320e 	add.w	r2, r2, #145408	; 0x23800
 80079c8:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80079ca:	f002 0207 	and.w	r2, r2, #7
 80079ce:	2a05      	cmp	r2, #5
 80079d0:	d80e      	bhi.n	80079f0 <UART_SetConfig+0x2f8>
 80079d2:	e8df f002 	tbb	[pc, r2]
 80079d6:	6c03      	.short	0x6c03
 80079d8:	0b090705 	.word	0x0b090705
 80079dc:	2502      	movs	r5, #2
 80079de:	e00a      	b.n	80079f6 <UART_SetConfig+0x2fe>
 80079e0:	2508      	movs	r5, #8
 80079e2:	e008      	b.n	80079f6 <UART_SetConfig+0x2fe>
 80079e4:	2510      	movs	r5, #16
 80079e6:	e006      	b.n	80079f6 <UART_SetConfig+0x2fe>
 80079e8:	2520      	movs	r5, #32
 80079ea:	e004      	b.n	80079f6 <UART_SetConfig+0x2fe>
 80079ec:	2540      	movs	r5, #64	; 0x40
 80079ee:	e002      	b.n	80079f6 <UART_SetConfig+0x2fe>
 80079f0:	2580      	movs	r5, #128	; 0x80
 80079f2:	e000      	b.n	80079f6 <UART_SetConfig+0x2fe>
 80079f4:	2504      	movs	r5, #4
  if (UART_INSTANCE_LOWPOWER(huart))
 80079f6:	4a77      	ldr	r2, [pc, #476]	; (8007bd4 <UART_SetConfig+0x4dc>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d05a      	beq.n	8007ab2 <UART_SetConfig+0x3ba>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80079fc:	69e3      	ldr	r3, [r4, #28]
 80079fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a02:	f000 8517 	beq.w	8008434 <UART_SetConfig+0xd3c>
    switch (clocksource)
 8007a06:	2d40      	cmp	r5, #64	; 0x40
 8007a08:	f201 81bb 	bhi.w	8008d82 <UART_SetConfig+0x168a>
 8007a0c:	e8df f015 	tbh	[pc, r5, lsl #1]
 8007a10:	07fa076c 	.word	0x07fa076c
 8007a14:	09b909b9 	.word	0x09b909b9
 8007a18:	09b90838 	.word	0x09b90838
 8007a1c:	09b909b9 	.word	0x09b909b9
 8007a20:	09b90878 	.word	0x09b90878
 8007a24:	09b909b9 	.word	0x09b909b9
 8007a28:	09b909b9 	.word	0x09b909b9
 8007a2c:	09b909b9 	.word	0x09b909b9
 8007a30:	09b908b8 	.word	0x09b908b8
 8007a34:	09b909b9 	.word	0x09b909b9
 8007a38:	09b909b9 	.word	0x09b909b9
 8007a3c:	09b909b9 	.word	0x09b909b9
 8007a40:	09b909b9 	.word	0x09b909b9
 8007a44:	09b909b9 	.word	0x09b909b9
 8007a48:	09b909b9 	.word	0x09b909b9
 8007a4c:	09b909b9 	.word	0x09b909b9
 8007a50:	09b90938 	.word	0x09b90938
 8007a54:	09b909b9 	.word	0x09b909b9
 8007a58:	09b909b9 	.word	0x09b909b9
 8007a5c:	09b909b9 	.word	0x09b909b9
 8007a60:	09b909b9 	.word	0x09b909b9
 8007a64:	09b909b9 	.word	0x09b909b9
 8007a68:	09b909b9 	.word	0x09b909b9
 8007a6c:	09b909b9 	.word	0x09b909b9
 8007a70:	09b909b9 	.word	0x09b909b9
 8007a74:	09b909b9 	.word	0x09b909b9
 8007a78:	09b909b9 	.word	0x09b909b9
 8007a7c:	09b909b9 	.word	0x09b909b9
 8007a80:	09b909b9 	.word	0x09b909b9
 8007a84:	09b909b9 	.word	0x09b909b9
 8007a88:	09b909b9 	.word	0x09b909b9
 8007a8c:	09b909b9 	.word	0x09b909b9
 8007a90:	0974      	.short	0x0974
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007a92:	2504      	movs	r5, #4
 8007a94:	e7af      	b.n	80079f6 <UART_SetConfig+0x2fe>
 8007a96:	2504      	movs	r5, #4
 8007a98:	e7ad      	b.n	80079f6 <UART_SetConfig+0x2fe>
 8007a9a:	2504      	movs	r5, #4
 8007a9c:	e7ab      	b.n	80079f6 <UART_SetConfig+0x2fe>
 8007a9e:	2504      	movs	r5, #4
 8007aa0:	e7a9      	b.n	80079f6 <UART_SetConfig+0x2fe>
 8007aa2:	2504      	movs	r5, #4
 8007aa4:	e7a7      	b.n	80079f6 <UART_SetConfig+0x2fe>
 8007aa6:	2504      	movs	r5, #4
 8007aa8:	e7a5      	b.n	80079f6 <UART_SetConfig+0x2fe>
 8007aaa:	2504      	movs	r5, #4
 8007aac:	e7a3      	b.n	80079f6 <UART_SetConfig+0x2fe>
 8007aae:	2504      	movs	r5, #4
 8007ab0:	e7a1      	b.n	80079f6 <UART_SetConfig+0x2fe>
    switch (clocksource)
 8007ab2:	2d08      	cmp	r5, #8
 8007ab4:	f000 80a4 	beq.w	8007c00 <UART_SetConfig+0x508>
 8007ab8:	d90b      	bls.n	8007ad2 <UART_SetConfig+0x3da>
 8007aba:	2d20      	cmp	r5, #32
 8007abc:	f000 8134 	beq.w	8007d28 <UART_SetConfig+0x630>
 8007ac0:	2d40      	cmp	r5, #64	; 0x40
 8007ac2:	f000 814f 	beq.w	8007d64 <UART_SetConfig+0x66c>
 8007ac6:	2d10      	cmp	r5, #16
 8007ac8:	f000 80d3 	beq.w	8007c72 <UART_SetConfig+0x57a>
        ret = HAL_ERROR;
 8007acc:	2001      	movs	r0, #1
 8007ace:	f000 bf3d 	b.w	800894c <UART_SetConfig+0x1254>
    switch (clocksource)
 8007ad2:	2d02      	cmp	r5, #2
 8007ad4:	d020      	beq.n	8007b18 <UART_SetConfig+0x420>
 8007ad6:	2d04      	cmp	r5, #4
 8007ad8:	d1f8      	bne.n	8007acc <UART_SetConfig+0x3d4>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007ada:	a803      	add	r0, sp, #12
 8007adc:	f7fe ff2e 	bl	800693c <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007ae0:	9804      	ldr	r0, [sp, #16]
 8007ae2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d06e      	beq.n	8007bc6 <UART_SetConfig+0x4ce>
 8007ae8:	2b01      	cmp	r3, #1
 8007aea:	d075      	beq.n	8007bd8 <UART_SetConfig+0x4e0>
 8007aec:	2b02      	cmp	r3, #2
 8007aee:	d075      	beq.n	8007bdc <UART_SetConfig+0x4e4>
 8007af0:	2b03      	cmp	r3, #3
 8007af2:	d075      	beq.n	8007be0 <UART_SetConfig+0x4e8>
 8007af4:	2b04      	cmp	r3, #4
 8007af6:	d075      	beq.n	8007be4 <UART_SetConfig+0x4ec>
 8007af8:	2b05      	cmp	r3, #5
 8007afa:	d075      	beq.n	8007be8 <UART_SetConfig+0x4f0>
 8007afc:	2b06      	cmp	r3, #6
 8007afe:	d075      	beq.n	8007bec <UART_SetConfig+0x4f4>
 8007b00:	2b07      	cmp	r3, #7
 8007b02:	d075      	beq.n	8007bf0 <UART_SetConfig+0x4f8>
 8007b04:	2b08      	cmp	r3, #8
 8007b06:	d075      	beq.n	8007bf4 <UART_SetConfig+0x4fc>
 8007b08:	2b09      	cmp	r3, #9
 8007b0a:	d075      	beq.n	8007bf8 <UART_SetConfig+0x500>
 8007b0c:	2b0a      	cmp	r3, #10
 8007b0e:	d075      	beq.n	8007bfc <UART_SetConfig+0x504>
 8007b10:	2b0b      	cmp	r3, #11
 8007b12:	d055      	beq.n	8007bc0 <UART_SetConfig+0x4c8>
 8007b14:	2301      	movs	r3, #1
 8007b16:	e057      	b.n	8007bc8 <UART_SetConfig+0x4d0>
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007b18:	f7fe fefe 	bl	8006918 <HAL_RCCEx_GetD3PCLK1Freq>
 8007b1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b1e:	b1d3      	cbz	r3, 8007b56 <UART_SetConfig+0x45e>
 8007b20:	2b01      	cmp	r3, #1
 8007b22:	d039      	beq.n	8007b98 <UART_SetConfig+0x4a0>
 8007b24:	2b02      	cmp	r3, #2
 8007b26:	d039      	beq.n	8007b9c <UART_SetConfig+0x4a4>
 8007b28:	2b03      	cmp	r3, #3
 8007b2a:	d039      	beq.n	8007ba0 <UART_SetConfig+0x4a8>
 8007b2c:	2b04      	cmp	r3, #4
 8007b2e:	d039      	beq.n	8007ba4 <UART_SetConfig+0x4ac>
 8007b30:	2b05      	cmp	r3, #5
 8007b32:	d039      	beq.n	8007ba8 <UART_SetConfig+0x4b0>
 8007b34:	2b06      	cmp	r3, #6
 8007b36:	d039      	beq.n	8007bac <UART_SetConfig+0x4b4>
 8007b38:	2b07      	cmp	r3, #7
 8007b3a:	d039      	beq.n	8007bb0 <UART_SetConfig+0x4b8>
 8007b3c:	2b08      	cmp	r3, #8
 8007b3e:	d039      	beq.n	8007bb4 <UART_SetConfig+0x4bc>
 8007b40:	2b09      	cmp	r3, #9
 8007b42:	d039      	beq.n	8007bb8 <UART_SetConfig+0x4c0>
 8007b44:	2b0a      	cmp	r3, #10
 8007b46:	d039      	beq.n	8007bbc <UART_SetConfig+0x4c4>
 8007b48:	2b0b      	cmp	r3, #11
 8007b4a:	d001      	beq.n	8007b50 <UART_SetConfig+0x458>
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	e003      	b.n	8007b58 <UART_SetConfig+0x460>
 8007b50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007b54:	e000      	b.n	8007b58 <UART_SetConfig+0x460>
 8007b56:	2301      	movs	r3, #1
 8007b58:	fbb0 f0f3 	udiv	r0, r0, r3
    if (lpuart_ker_ck_pres != 0U)
 8007b5c:	2800      	cmp	r0, #0
 8007b5e:	f001 8113 	beq.w	8008d88 <UART_SetConfig+0x1690>
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007b62:	6866      	ldr	r6, [r4, #4]
 8007b64:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8007b68:	4283      	cmp	r3, r0
 8007b6a:	f201 810f 	bhi.w	8008d8c <UART_SetConfig+0x1694>
 8007b6e:	ebb0 3f06 	cmp.w	r0, r6, lsl #12
 8007b72:	f201 810d 	bhi.w	8008d90 <UART_SetConfig+0x1698>
        switch (clocksource)
 8007b76:	2d08      	cmp	r5, #8
 8007b78:	f000 8251 	beq.w	800801e <UART_SetConfig+0x926>
 8007b7c:	f240 8161 	bls.w	8007e42 <UART_SetConfig+0x74a>
 8007b80:	2d20      	cmp	r5, #32
 8007b82:	f000 838d 	beq.w	80082a0 <UART_SetConfig+0xba8>
 8007b86:	2d40      	cmp	r5, #64	; 0x40
 8007b88:	f000 83ef 	beq.w	800836a <UART_SetConfig+0xc72>
 8007b8c:	2d10      	cmp	r5, #16
 8007b8e:	f000 829f 	beq.w	80080d0 <UART_SetConfig+0x9d8>
            ret = HAL_ERROR;
 8007b92:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8007b94:	2300      	movs	r3, #0
 8007b96:	e1de      	b.n	8007f56 <UART_SetConfig+0x85e>
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007b98:	2302      	movs	r3, #2
 8007b9a:	e7dd      	b.n	8007b58 <UART_SetConfig+0x460>
 8007b9c:	2304      	movs	r3, #4
 8007b9e:	e7db      	b.n	8007b58 <UART_SetConfig+0x460>
 8007ba0:	2306      	movs	r3, #6
 8007ba2:	e7d9      	b.n	8007b58 <UART_SetConfig+0x460>
 8007ba4:	2308      	movs	r3, #8
 8007ba6:	e7d7      	b.n	8007b58 <UART_SetConfig+0x460>
 8007ba8:	230a      	movs	r3, #10
 8007baa:	e7d5      	b.n	8007b58 <UART_SetConfig+0x460>
 8007bac:	230c      	movs	r3, #12
 8007bae:	e7d3      	b.n	8007b58 <UART_SetConfig+0x460>
 8007bb0:	2310      	movs	r3, #16
 8007bb2:	e7d1      	b.n	8007b58 <UART_SetConfig+0x460>
 8007bb4:	2320      	movs	r3, #32
 8007bb6:	e7cf      	b.n	8007b58 <UART_SetConfig+0x460>
 8007bb8:	2340      	movs	r3, #64	; 0x40
 8007bba:	e7cd      	b.n	8007b58 <UART_SetConfig+0x460>
 8007bbc:	2380      	movs	r3, #128	; 0x80
 8007bbe:	e7cb      	b.n	8007b58 <UART_SetConfig+0x460>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007bc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007bc4:	e000      	b.n	8007bc8 <UART_SetConfig+0x4d0>
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 8007bcc:	e7c6      	b.n	8007b5c <UART_SetConfig+0x464>
 8007bce:	bf00      	nop
 8007bd0:	58024400 	.word	0x58024400
 8007bd4:	58000c00 	.word	0x58000c00
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007bd8:	2302      	movs	r3, #2
 8007bda:	e7f5      	b.n	8007bc8 <UART_SetConfig+0x4d0>
 8007bdc:	2304      	movs	r3, #4
 8007bde:	e7f3      	b.n	8007bc8 <UART_SetConfig+0x4d0>
 8007be0:	2306      	movs	r3, #6
 8007be2:	e7f1      	b.n	8007bc8 <UART_SetConfig+0x4d0>
 8007be4:	2308      	movs	r3, #8
 8007be6:	e7ef      	b.n	8007bc8 <UART_SetConfig+0x4d0>
 8007be8:	230a      	movs	r3, #10
 8007bea:	e7ed      	b.n	8007bc8 <UART_SetConfig+0x4d0>
 8007bec:	230c      	movs	r3, #12
 8007bee:	e7eb      	b.n	8007bc8 <UART_SetConfig+0x4d0>
 8007bf0:	2310      	movs	r3, #16
 8007bf2:	e7e9      	b.n	8007bc8 <UART_SetConfig+0x4d0>
 8007bf4:	2320      	movs	r3, #32
 8007bf6:	e7e7      	b.n	8007bc8 <UART_SetConfig+0x4d0>
 8007bf8:	2340      	movs	r3, #64	; 0x40
 8007bfa:	e7e5      	b.n	8007bc8 <UART_SetConfig+0x4d0>
 8007bfc:	2380      	movs	r3, #128	; 0x80
 8007bfe:	e7e3      	b.n	8007bc8 <UART_SetConfig+0x4d0>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c00:	4668      	mov	r0, sp
 8007c02:	f7fe ff99 	bl	8006b38 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007c06:	9801      	ldr	r0, [sp, #4]
 8007c08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c0a:	b1d3      	cbz	r3, 8007c42 <UART_SetConfig+0x54a>
 8007c0c:	2b01      	cmp	r3, #1
 8007c0e:	d01c      	beq.n	8007c4a <UART_SetConfig+0x552>
 8007c10:	2b02      	cmp	r3, #2
 8007c12:	d01c      	beq.n	8007c4e <UART_SetConfig+0x556>
 8007c14:	2b03      	cmp	r3, #3
 8007c16:	d01c      	beq.n	8007c52 <UART_SetConfig+0x55a>
 8007c18:	2b04      	cmp	r3, #4
 8007c1a:	d01c      	beq.n	8007c56 <UART_SetConfig+0x55e>
 8007c1c:	2b05      	cmp	r3, #5
 8007c1e:	d01c      	beq.n	8007c5a <UART_SetConfig+0x562>
 8007c20:	2b06      	cmp	r3, #6
 8007c22:	d01c      	beq.n	8007c5e <UART_SetConfig+0x566>
 8007c24:	2b07      	cmp	r3, #7
 8007c26:	d01c      	beq.n	8007c62 <UART_SetConfig+0x56a>
 8007c28:	2b08      	cmp	r3, #8
 8007c2a:	d01c      	beq.n	8007c66 <UART_SetConfig+0x56e>
 8007c2c:	2b09      	cmp	r3, #9
 8007c2e:	d01c      	beq.n	8007c6a <UART_SetConfig+0x572>
 8007c30:	2b0a      	cmp	r3, #10
 8007c32:	d01c      	beq.n	8007c6e <UART_SetConfig+0x576>
 8007c34:	2b0b      	cmp	r3, #11
 8007c36:	d001      	beq.n	8007c3c <UART_SetConfig+0x544>
 8007c38:	2301      	movs	r3, #1
 8007c3a:	e003      	b.n	8007c44 <UART_SetConfig+0x54c>
 8007c3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007c40:	e000      	b.n	8007c44 <UART_SetConfig+0x54c>
 8007c42:	2301      	movs	r3, #1
 8007c44:	fbb0 f0f3 	udiv	r0, r0, r3
        break;
 8007c48:	e788      	b.n	8007b5c <UART_SetConfig+0x464>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007c4a:	2302      	movs	r3, #2
 8007c4c:	e7fa      	b.n	8007c44 <UART_SetConfig+0x54c>
 8007c4e:	2304      	movs	r3, #4
 8007c50:	e7f8      	b.n	8007c44 <UART_SetConfig+0x54c>
 8007c52:	2306      	movs	r3, #6
 8007c54:	e7f6      	b.n	8007c44 <UART_SetConfig+0x54c>
 8007c56:	2308      	movs	r3, #8
 8007c58:	e7f4      	b.n	8007c44 <UART_SetConfig+0x54c>
 8007c5a:	230a      	movs	r3, #10
 8007c5c:	e7f2      	b.n	8007c44 <UART_SetConfig+0x54c>
 8007c5e:	230c      	movs	r3, #12
 8007c60:	e7f0      	b.n	8007c44 <UART_SetConfig+0x54c>
 8007c62:	2310      	movs	r3, #16
 8007c64:	e7ee      	b.n	8007c44 <UART_SetConfig+0x54c>
 8007c66:	2320      	movs	r3, #32
 8007c68:	e7ec      	b.n	8007c44 <UART_SetConfig+0x54c>
 8007c6a:	2340      	movs	r3, #64	; 0x40
 8007c6c:	e7ea      	b.n	8007c44 <UART_SetConfig+0x54c>
 8007c6e:	2380      	movs	r3, #128	; 0x80
 8007c70:	e7e8      	b.n	8007c44 <UART_SetConfig+0x54c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c72:	4b9c      	ldr	r3, [pc, #624]	; (8007ee4 <UART_SetConfig+0x7ec>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f013 0f20 	tst.w	r3, #32
 8007c7a:	d03a      	beq.n	8007cf2 <UART_SetConfig+0x5fa>
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007c7c:	4b99      	ldr	r3, [pc, #612]	; (8007ee4 <UART_SetConfig+0x7ec>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8007c84:	4898      	ldr	r0, [pc, #608]	; (8007ee8 <UART_SetConfig+0x7f0>)
 8007c86:	40d8      	lsrs	r0, r3
 8007c88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c8a:	b1c3      	cbz	r3, 8007cbe <UART_SetConfig+0x5c6>
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	d01a      	beq.n	8007cc6 <UART_SetConfig+0x5ce>
 8007c90:	2b02      	cmp	r3, #2
 8007c92:	d01a      	beq.n	8007cca <UART_SetConfig+0x5d2>
 8007c94:	2b03      	cmp	r3, #3
 8007c96:	d01a      	beq.n	8007cce <UART_SetConfig+0x5d6>
 8007c98:	2b04      	cmp	r3, #4
 8007c9a:	d01a      	beq.n	8007cd2 <UART_SetConfig+0x5da>
 8007c9c:	2b05      	cmp	r3, #5
 8007c9e:	d01a      	beq.n	8007cd6 <UART_SetConfig+0x5de>
 8007ca0:	2b06      	cmp	r3, #6
 8007ca2:	d01a      	beq.n	8007cda <UART_SetConfig+0x5e2>
 8007ca4:	2b07      	cmp	r3, #7
 8007ca6:	d01a      	beq.n	8007cde <UART_SetConfig+0x5e6>
 8007ca8:	2b08      	cmp	r3, #8
 8007caa:	d01a      	beq.n	8007ce2 <UART_SetConfig+0x5ea>
 8007cac:	2b09      	cmp	r3, #9
 8007cae:	d01a      	beq.n	8007ce6 <UART_SetConfig+0x5ee>
 8007cb0:	2b0a      	cmp	r3, #10
 8007cb2:	d01a      	beq.n	8007cea <UART_SetConfig+0x5f2>
 8007cb4:	2b0b      	cmp	r3, #11
 8007cb6:	d11a      	bne.n	8007cee <UART_SetConfig+0x5f6>
 8007cb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007cbc:	e000      	b.n	8007cc0 <UART_SetConfig+0x5c8>
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	fbb0 f0f3 	udiv	r0, r0, r3
 8007cc4:	e74a      	b.n	8007b5c <UART_SetConfig+0x464>
 8007cc6:	2302      	movs	r3, #2
 8007cc8:	e7fa      	b.n	8007cc0 <UART_SetConfig+0x5c8>
 8007cca:	2304      	movs	r3, #4
 8007ccc:	e7f8      	b.n	8007cc0 <UART_SetConfig+0x5c8>
 8007cce:	2306      	movs	r3, #6
 8007cd0:	e7f6      	b.n	8007cc0 <UART_SetConfig+0x5c8>
 8007cd2:	2308      	movs	r3, #8
 8007cd4:	e7f4      	b.n	8007cc0 <UART_SetConfig+0x5c8>
 8007cd6:	230a      	movs	r3, #10
 8007cd8:	e7f2      	b.n	8007cc0 <UART_SetConfig+0x5c8>
 8007cda:	230c      	movs	r3, #12
 8007cdc:	e7f0      	b.n	8007cc0 <UART_SetConfig+0x5c8>
 8007cde:	2310      	movs	r3, #16
 8007ce0:	e7ee      	b.n	8007cc0 <UART_SetConfig+0x5c8>
 8007ce2:	2320      	movs	r3, #32
 8007ce4:	e7ec      	b.n	8007cc0 <UART_SetConfig+0x5c8>
 8007ce6:	2340      	movs	r3, #64	; 0x40
 8007ce8:	e7ea      	b.n	8007cc0 <UART_SetConfig+0x5c8>
 8007cea:	2380      	movs	r3, #128	; 0x80
 8007cec:	e7e8      	b.n	8007cc0 <UART_SetConfig+0x5c8>
 8007cee:	2301      	movs	r3, #1
 8007cf0:	e7e6      	b.n	8007cc0 <UART_SetConfig+0x5c8>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007cf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d053      	beq.n	8007da0 <UART_SetConfig+0x6a8>
 8007cf8:	2b01      	cmp	r3, #1
 8007cfa:	d053      	beq.n	8007da4 <UART_SetConfig+0x6ac>
 8007cfc:	2b02      	cmp	r3, #2
 8007cfe:	d053      	beq.n	8007da8 <UART_SetConfig+0x6b0>
 8007d00:	2b03      	cmp	r3, #3
 8007d02:	d053      	beq.n	8007dac <UART_SetConfig+0x6b4>
 8007d04:	2b04      	cmp	r3, #4
 8007d06:	d053      	beq.n	8007db0 <UART_SetConfig+0x6b8>
 8007d08:	2b05      	cmp	r3, #5
 8007d0a:	d053      	beq.n	8007db4 <UART_SetConfig+0x6bc>
 8007d0c:	2b06      	cmp	r3, #6
 8007d0e:	d053      	beq.n	8007db8 <UART_SetConfig+0x6c0>
 8007d10:	2b07      	cmp	r3, #7
 8007d12:	d053      	beq.n	8007dbc <UART_SetConfig+0x6c4>
 8007d14:	2b08      	cmp	r3, #8
 8007d16:	d053      	beq.n	8007dc0 <UART_SetConfig+0x6c8>
 8007d18:	2b09      	cmp	r3, #9
 8007d1a:	d053      	beq.n	8007dc4 <UART_SetConfig+0x6cc>
 8007d1c:	2b0a      	cmp	r3, #10
 8007d1e:	d053      	beq.n	8007dc8 <UART_SetConfig+0x6d0>
 8007d20:	2b0b      	cmp	r3, #11
 8007d22:	d153      	bne.n	8007dcc <UART_SetConfig+0x6d4>
 8007d24:	4871      	ldr	r0, [pc, #452]	; (8007eec <UART_SetConfig+0x7f4>)
 8007d26:	e719      	b.n	8007b5c <UART_SetConfig+0x464>
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007d28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d050      	beq.n	8007dd0 <UART_SetConfig+0x6d8>
 8007d2e:	2b01      	cmp	r3, #1
 8007d30:	d050      	beq.n	8007dd4 <UART_SetConfig+0x6dc>
 8007d32:	2b02      	cmp	r3, #2
 8007d34:	d050      	beq.n	8007dd8 <UART_SetConfig+0x6e0>
 8007d36:	2b03      	cmp	r3, #3
 8007d38:	d050      	beq.n	8007ddc <UART_SetConfig+0x6e4>
 8007d3a:	2b04      	cmp	r3, #4
 8007d3c:	d050      	beq.n	8007de0 <UART_SetConfig+0x6e8>
 8007d3e:	2b05      	cmp	r3, #5
 8007d40:	d050      	beq.n	8007de4 <UART_SetConfig+0x6ec>
 8007d42:	2b06      	cmp	r3, #6
 8007d44:	d050      	beq.n	8007de8 <UART_SetConfig+0x6f0>
 8007d46:	2b07      	cmp	r3, #7
 8007d48:	d050      	beq.n	8007dec <UART_SetConfig+0x6f4>
 8007d4a:	2b08      	cmp	r3, #8
 8007d4c:	d050      	beq.n	8007df0 <UART_SetConfig+0x6f8>
 8007d4e:	2b09      	cmp	r3, #9
 8007d50:	d050      	beq.n	8007df4 <UART_SetConfig+0x6fc>
 8007d52:	2b0a      	cmp	r3, #10
 8007d54:	d051      	beq.n	8007dfa <UART_SetConfig+0x702>
 8007d56:	2b0b      	cmp	r3, #11
 8007d58:	d001      	beq.n	8007d5e <UART_SetConfig+0x666>
 8007d5a:	4865      	ldr	r0, [pc, #404]	; (8007ef0 <UART_SetConfig+0x7f8>)
 8007d5c:	e6fe      	b.n	8007b5c <UART_SetConfig+0x464>
 8007d5e:	f643 5009 	movw	r0, #15625	; 0x3d09
 8007d62:	e6fb      	b.n	8007b5c <UART_SetConfig+0x464>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007d64:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d04a      	beq.n	8007e00 <UART_SetConfig+0x708>
 8007d6a:	2b01      	cmp	r3, #1
 8007d6c:	d04b      	beq.n	8007e06 <UART_SetConfig+0x70e>
 8007d6e:	2b02      	cmp	r3, #2
 8007d70:	d04c      	beq.n	8007e0c <UART_SetConfig+0x714>
 8007d72:	2b03      	cmp	r3, #3
 8007d74:	d04d      	beq.n	8007e12 <UART_SetConfig+0x71a>
 8007d76:	2b04      	cmp	r3, #4
 8007d78:	d04e      	beq.n	8007e18 <UART_SetConfig+0x720>
 8007d7a:	2b05      	cmp	r3, #5
 8007d7c:	d04f      	beq.n	8007e1e <UART_SetConfig+0x726>
 8007d7e:	2b06      	cmp	r3, #6
 8007d80:	d050      	beq.n	8007e24 <UART_SetConfig+0x72c>
 8007d82:	2b07      	cmp	r3, #7
 8007d84:	d051      	beq.n	8007e2a <UART_SetConfig+0x732>
 8007d86:	2b08      	cmp	r3, #8
 8007d88:	d052      	beq.n	8007e30 <UART_SetConfig+0x738>
 8007d8a:	2b09      	cmp	r3, #9
 8007d8c:	d053      	beq.n	8007e36 <UART_SetConfig+0x73e>
 8007d8e:	2b0a      	cmp	r3, #10
 8007d90:	d054      	beq.n	8007e3c <UART_SetConfig+0x744>
 8007d92:	2b0b      	cmp	r3, #11
 8007d94:	d002      	beq.n	8007d9c <UART_SetConfig+0x6a4>
 8007d96:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007d9a:	e6df      	b.n	8007b5c <UART_SetConfig+0x464>
 8007d9c:	2080      	movs	r0, #128	; 0x80
 8007d9e:	e6dd      	b.n	8007b5c <UART_SetConfig+0x464>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007da0:	4851      	ldr	r0, [pc, #324]	; (8007ee8 <UART_SetConfig+0x7f0>)
 8007da2:	e6db      	b.n	8007b5c <UART_SetConfig+0x464>
 8007da4:	4853      	ldr	r0, [pc, #332]	; (8007ef4 <UART_SetConfig+0x7fc>)
 8007da6:	e6d9      	b.n	8007b5c <UART_SetConfig+0x464>
 8007da8:	4853      	ldr	r0, [pc, #332]	; (8007ef8 <UART_SetConfig+0x800>)
 8007daa:	e6d7      	b.n	8007b5c <UART_SetConfig+0x464>
 8007dac:	4853      	ldr	r0, [pc, #332]	; (8007efc <UART_SetConfig+0x804>)
 8007dae:	e6d5      	b.n	8007b5c <UART_SetConfig+0x464>
 8007db0:	4853      	ldr	r0, [pc, #332]	; (8007f00 <UART_SetConfig+0x808>)
 8007db2:	e6d3      	b.n	8007b5c <UART_SetConfig+0x464>
 8007db4:	4853      	ldr	r0, [pc, #332]	; (8007f04 <UART_SetConfig+0x80c>)
 8007db6:	e6d1      	b.n	8007b5c <UART_SetConfig+0x464>
 8007db8:	4853      	ldr	r0, [pc, #332]	; (8007f08 <UART_SetConfig+0x810>)
 8007dba:	e6cf      	b.n	8007b5c <UART_SetConfig+0x464>
 8007dbc:	484c      	ldr	r0, [pc, #304]	; (8007ef0 <UART_SetConfig+0x7f8>)
 8007dbe:	e6cd      	b.n	8007b5c <UART_SetConfig+0x464>
 8007dc0:	4852      	ldr	r0, [pc, #328]	; (8007f0c <UART_SetConfig+0x814>)
 8007dc2:	e6cb      	b.n	8007b5c <UART_SetConfig+0x464>
 8007dc4:	4852      	ldr	r0, [pc, #328]	; (8007f10 <UART_SetConfig+0x818>)
 8007dc6:	e6c9      	b.n	8007b5c <UART_SetConfig+0x464>
 8007dc8:	4852      	ldr	r0, [pc, #328]	; (8007f14 <UART_SetConfig+0x81c>)
 8007dca:	e6c7      	b.n	8007b5c <UART_SetConfig+0x464>
 8007dcc:	4846      	ldr	r0, [pc, #280]	; (8007ee8 <UART_SetConfig+0x7f0>)
 8007dce:	e6c5      	b.n	8007b5c <UART_SetConfig+0x464>
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007dd0:	4847      	ldr	r0, [pc, #284]	; (8007ef0 <UART_SetConfig+0x7f8>)
 8007dd2:	e6c3      	b.n	8007b5c <UART_SetConfig+0x464>
 8007dd4:	484d      	ldr	r0, [pc, #308]	; (8007f0c <UART_SetConfig+0x814>)
 8007dd6:	e6c1      	b.n	8007b5c <UART_SetConfig+0x464>
 8007dd8:	484d      	ldr	r0, [pc, #308]	; (8007f10 <UART_SetConfig+0x818>)
 8007dda:	e6bf      	b.n	8007b5c <UART_SetConfig+0x464>
 8007ddc:	484e      	ldr	r0, [pc, #312]	; (8007f18 <UART_SetConfig+0x820>)
 8007dde:	e6bd      	b.n	8007b5c <UART_SetConfig+0x464>
 8007de0:	484c      	ldr	r0, [pc, #304]	; (8007f14 <UART_SetConfig+0x81c>)
 8007de2:	e6bb      	b.n	8007b5c <UART_SetConfig+0x464>
 8007de4:	484d      	ldr	r0, [pc, #308]	; (8007f1c <UART_SetConfig+0x824>)
 8007de6:	e6b9      	b.n	8007b5c <UART_SetConfig+0x464>
 8007de8:	484d      	ldr	r0, [pc, #308]	; (8007f20 <UART_SetConfig+0x828>)
 8007dea:	e6b7      	b.n	8007b5c <UART_SetConfig+0x464>
 8007dec:	483f      	ldr	r0, [pc, #252]	; (8007eec <UART_SetConfig+0x7f4>)
 8007dee:	e6b5      	b.n	8007b5c <UART_SetConfig+0x464>
 8007df0:	484c      	ldr	r0, [pc, #304]	; (8007f24 <UART_SetConfig+0x82c>)
 8007df2:	e6b3      	b.n	8007b5c <UART_SetConfig+0x464>
 8007df4:	f24f 4024 	movw	r0, #62500	; 0xf424
 8007df8:	e6b0      	b.n	8007b5c <UART_SetConfig+0x464>
 8007dfa:	f647 2012 	movw	r0, #31250	; 0x7a12
 8007dfe:	e6ad      	b.n	8007b5c <UART_SetConfig+0x464>
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007e00:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007e04:	e6aa      	b.n	8007b5c <UART_SetConfig+0x464>
 8007e06:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8007e0a:	e6a7      	b.n	8007b5c <UART_SetConfig+0x464>
 8007e0c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8007e10:	e6a4      	b.n	8007b5c <UART_SetConfig+0x464>
 8007e12:	f241 5055 	movw	r0, #5461	; 0x1555
 8007e16:	e6a1      	b.n	8007b5c <UART_SetConfig+0x464>
 8007e18:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007e1c:	e69e      	b.n	8007b5c <UART_SetConfig+0x464>
 8007e1e:	f640 40cc 	movw	r0, #3276	; 0xccc
 8007e22:	e69b      	b.n	8007b5c <UART_SetConfig+0x464>
 8007e24:	f640 20aa 	movw	r0, #2730	; 0xaaa
 8007e28:	e698      	b.n	8007b5c <UART_SetConfig+0x464>
 8007e2a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007e2e:	e695      	b.n	8007b5c <UART_SetConfig+0x464>
 8007e30:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8007e34:	e692      	b.n	8007b5c <UART_SetConfig+0x464>
 8007e36:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007e3a:	e68f      	b.n	8007b5c <UART_SetConfig+0x464>
 8007e3c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007e40:	e68c      	b.n	8007b5c <UART_SetConfig+0x464>
        switch (clocksource)
 8007e42:	2d02      	cmp	r5, #2
 8007e44:	d02f      	beq.n	8007ea6 <UART_SetConfig+0x7ae>
 8007e46:	2d04      	cmp	r5, #4
 8007e48:	f47f aea3 	bne.w	8007b92 <UART_SetConfig+0x49a>
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e4c:	a803      	add	r0, sp, #12
 8007e4e:	f7fe fd75 	bl	800693c <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e52:	9804      	ldr	r0, [sp, #16]
 8007e54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	f000 80a8 	beq.w	8007fac <UART_SetConfig+0x8b4>
 8007e5c:	2b01      	cmp	r3, #1
 8007e5e:	f000 80bd 	beq.w	8007fdc <UART_SetConfig+0x8e4>
 8007e62:	2b02      	cmp	r3, #2
 8007e64:	f000 80bd 	beq.w	8007fe2 <UART_SetConfig+0x8ea>
 8007e68:	2b03      	cmp	r3, #3
 8007e6a:	f000 80bd 	beq.w	8007fe8 <UART_SetConfig+0x8f0>
 8007e6e:	2b04      	cmp	r3, #4
 8007e70:	f000 80bd 	beq.w	8007fee <UART_SetConfig+0x8f6>
 8007e74:	2b05      	cmp	r3, #5
 8007e76:	f000 80bd 	beq.w	8007ff4 <UART_SetConfig+0x8fc>
 8007e7a:	2b06      	cmp	r3, #6
 8007e7c:	f000 80bd 	beq.w	8007ffa <UART_SetConfig+0x902>
 8007e80:	2b07      	cmp	r3, #7
 8007e82:	f000 80bd 	beq.w	8008000 <UART_SetConfig+0x908>
 8007e86:	2b08      	cmp	r3, #8
 8007e88:	f000 80bd 	beq.w	8008006 <UART_SetConfig+0x90e>
 8007e8c:	2b09      	cmp	r3, #9
 8007e8e:	f000 80bd 	beq.w	800800c <UART_SetConfig+0x914>
 8007e92:	2b0a      	cmp	r3, #10
 8007e94:	f000 80bd 	beq.w	8008012 <UART_SetConfig+0x91a>
 8007e98:	2b0b      	cmp	r3, #11
 8007e9a:	f040 80bd 	bne.w	8008018 <UART_SetConfig+0x920>
 8007e9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	e084      	b.n	8007fb0 <UART_SetConfig+0x8b8>
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007ea6:	f7fe fd37 	bl	8006918 <HAL_RCCEx_GetD3PCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007eaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007eac:	b3e3      	cbz	r3, 8007f28 <UART_SetConfig+0x830>
 8007eae:	2b01      	cmp	r3, #1
 8007eb0:	d05b      	beq.n	8007f6a <UART_SetConfig+0x872>
 8007eb2:	2b02      	cmp	r3, #2
 8007eb4:	d05c      	beq.n	8007f70 <UART_SetConfig+0x878>
 8007eb6:	2b03      	cmp	r3, #3
 8007eb8:	d05d      	beq.n	8007f76 <UART_SetConfig+0x87e>
 8007eba:	2b04      	cmp	r3, #4
 8007ebc:	d05e      	beq.n	8007f7c <UART_SetConfig+0x884>
 8007ebe:	2b05      	cmp	r3, #5
 8007ec0:	d05f      	beq.n	8007f82 <UART_SetConfig+0x88a>
 8007ec2:	2b06      	cmp	r3, #6
 8007ec4:	d060      	beq.n	8007f88 <UART_SetConfig+0x890>
 8007ec6:	2b07      	cmp	r3, #7
 8007ec8:	d061      	beq.n	8007f8e <UART_SetConfig+0x896>
 8007eca:	2b08      	cmp	r3, #8
 8007ecc:	d062      	beq.n	8007f94 <UART_SetConfig+0x89c>
 8007ece:	2b09      	cmp	r3, #9
 8007ed0:	d063      	beq.n	8007f9a <UART_SetConfig+0x8a2>
 8007ed2:	2b0a      	cmp	r3, #10
 8007ed4:	d064      	beq.n	8007fa0 <UART_SetConfig+0x8a8>
 8007ed6:	2b0b      	cmp	r3, #11
 8007ed8:	d165      	bne.n	8007fa6 <UART_SetConfig+0x8ae>
 8007eda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007ede:	2300      	movs	r3, #0
 8007ee0:	e024      	b.n	8007f2c <UART_SetConfig+0x834>
 8007ee2:	bf00      	nop
 8007ee4:	58024400 	.word	0x58024400
 8007ee8:	03d09000 	.word	0x03d09000
 8007eec:	0003d090 	.word	0x0003d090
 8007ef0:	003d0900 	.word	0x003d0900
 8007ef4:	01e84800 	.word	0x01e84800
 8007ef8:	00f42400 	.word	0x00f42400
 8007efc:	00a2c2aa 	.word	0x00a2c2aa
 8007f00:	007a1200 	.word	0x007a1200
 8007f04:	0061a800 	.word	0x0061a800
 8007f08:	00516155 	.word	0x00516155
 8007f0c:	001e8480 	.word	0x001e8480
 8007f10:	000f4240 	.word	0x000f4240
 8007f14:	0007a120 	.word	0x0007a120
 8007f18:	000a2c2a 	.word	0x000a2c2a
 8007f1c:	00061a80 	.word	0x00061a80
 8007f20:	00051615 	.word	0x00051615
 8007f24:	0001e848 	.word	0x0001e848
 8007f28:	2201      	movs	r2, #1
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	2100      	movs	r1, #0
 8007f2e:	f7f8 fa2f 	bl	8000390 <__aeabi_uldivmod>
 8007f32:	020f      	lsls	r7, r1, #8
 8007f34:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 8007f38:	0206      	lsls	r6, r0, #8
 8007f3a:	6862      	ldr	r2, [r4, #4]
 8007f3c:	0850      	lsrs	r0, r2, #1
 8007f3e:	2500      	movs	r5, #0
 8007f40:	462b      	mov	r3, r5
 8007f42:	eb16 0800 	adds.w	r8, r6, r0
 8007f46:	f147 0900 	adc.w	r9, r7, #0
 8007f4a:	4640      	mov	r0, r8
 8007f4c:	4649      	mov	r1, r9
 8007f4e:	f7f8 fa1f 	bl	8000390 <__aeabi_uldivmod>
 8007f52:	4603      	mov	r3, r0
            break;
 8007f54:	4628      	mov	r0, r5
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007f56:	f5a3 7140 	sub.w	r1, r3, #768	; 0x300
 8007f5a:	4ac1      	ldr	r2, [pc, #772]	; (8008260 <UART_SetConfig+0xb68>)
 8007f5c:	4291      	cmp	r1, r2
 8007f5e:	f200 8719 	bhi.w	8008d94 <UART_SetConfig+0x169c>
          huart->Instance->BRR = usartdiv;
 8007f62:	6822      	ldr	r2, [r4, #0]
 8007f64:	60d3      	str	r3, [r2, #12]
 8007f66:	f000 bcf1 	b.w	800894c <UART_SetConfig+0x1254>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f6a:	2202      	movs	r2, #2
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	e7dd      	b.n	8007f2c <UART_SetConfig+0x834>
 8007f70:	2204      	movs	r2, #4
 8007f72:	2300      	movs	r3, #0
 8007f74:	e7da      	b.n	8007f2c <UART_SetConfig+0x834>
 8007f76:	2206      	movs	r2, #6
 8007f78:	2300      	movs	r3, #0
 8007f7a:	e7d7      	b.n	8007f2c <UART_SetConfig+0x834>
 8007f7c:	2208      	movs	r2, #8
 8007f7e:	2300      	movs	r3, #0
 8007f80:	e7d4      	b.n	8007f2c <UART_SetConfig+0x834>
 8007f82:	220a      	movs	r2, #10
 8007f84:	2300      	movs	r3, #0
 8007f86:	e7d1      	b.n	8007f2c <UART_SetConfig+0x834>
 8007f88:	220c      	movs	r2, #12
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	e7ce      	b.n	8007f2c <UART_SetConfig+0x834>
 8007f8e:	2210      	movs	r2, #16
 8007f90:	2300      	movs	r3, #0
 8007f92:	e7cb      	b.n	8007f2c <UART_SetConfig+0x834>
 8007f94:	2220      	movs	r2, #32
 8007f96:	2300      	movs	r3, #0
 8007f98:	e7c8      	b.n	8007f2c <UART_SetConfig+0x834>
 8007f9a:	2240      	movs	r2, #64	; 0x40
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	e7c5      	b.n	8007f2c <UART_SetConfig+0x834>
 8007fa0:	2280      	movs	r2, #128	; 0x80
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	e7c2      	b.n	8007f2c <UART_SetConfig+0x834>
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	2300      	movs	r3, #0
 8007faa:	e7bf      	b.n	8007f2c <UART_SetConfig+0x834>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007fac:	2201      	movs	r2, #1
 8007fae:	2300      	movs	r3, #0
 8007fb0:	2100      	movs	r1, #0
 8007fb2:	f7f8 f9ed 	bl	8000390 <__aeabi_uldivmod>
 8007fb6:	020f      	lsls	r7, r1, #8
 8007fb8:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 8007fbc:	0206      	lsls	r6, r0, #8
 8007fbe:	6862      	ldr	r2, [r4, #4]
 8007fc0:	0850      	lsrs	r0, r2, #1
 8007fc2:	2500      	movs	r5, #0
 8007fc4:	462b      	mov	r3, r5
 8007fc6:	eb16 0800 	adds.w	r8, r6, r0
 8007fca:	f147 0900 	adc.w	r9, r7, #0
 8007fce:	4640      	mov	r0, r8
 8007fd0:	4649      	mov	r1, r9
 8007fd2:	f7f8 f9dd 	bl	8000390 <__aeabi_uldivmod>
 8007fd6:	4603      	mov	r3, r0
            break;
 8007fd8:	4628      	mov	r0, r5
 8007fda:	e7bc      	b.n	8007f56 <UART_SetConfig+0x85e>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007fdc:	2202      	movs	r2, #2
 8007fde:	2300      	movs	r3, #0
 8007fe0:	e7e6      	b.n	8007fb0 <UART_SetConfig+0x8b8>
 8007fe2:	2204      	movs	r2, #4
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	e7e3      	b.n	8007fb0 <UART_SetConfig+0x8b8>
 8007fe8:	2206      	movs	r2, #6
 8007fea:	2300      	movs	r3, #0
 8007fec:	e7e0      	b.n	8007fb0 <UART_SetConfig+0x8b8>
 8007fee:	2208      	movs	r2, #8
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	e7dd      	b.n	8007fb0 <UART_SetConfig+0x8b8>
 8007ff4:	220a      	movs	r2, #10
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	e7da      	b.n	8007fb0 <UART_SetConfig+0x8b8>
 8007ffa:	220c      	movs	r2, #12
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	e7d7      	b.n	8007fb0 <UART_SetConfig+0x8b8>
 8008000:	2210      	movs	r2, #16
 8008002:	2300      	movs	r3, #0
 8008004:	e7d4      	b.n	8007fb0 <UART_SetConfig+0x8b8>
 8008006:	2220      	movs	r2, #32
 8008008:	2300      	movs	r3, #0
 800800a:	e7d1      	b.n	8007fb0 <UART_SetConfig+0x8b8>
 800800c:	2240      	movs	r2, #64	; 0x40
 800800e:	2300      	movs	r3, #0
 8008010:	e7ce      	b.n	8007fb0 <UART_SetConfig+0x8b8>
 8008012:	2280      	movs	r2, #128	; 0x80
 8008014:	2300      	movs	r3, #0
 8008016:	e7cb      	b.n	8007fb0 <UART_SetConfig+0x8b8>
 8008018:	2201      	movs	r2, #1
 800801a:	2300      	movs	r3, #0
 800801c:	e7c8      	b.n	8007fb0 <UART_SetConfig+0x8b8>
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800801e:	4668      	mov	r0, sp
 8008020:	f7fe fd8a 	bl	8006b38 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008024:	9801      	ldr	r0, [sp, #4]
 8008026:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008028:	b1cb      	cbz	r3, 800805e <UART_SetConfig+0x966>
 800802a:	2b01      	cmp	r3, #1
 800802c:	d02f      	beq.n	800808e <UART_SetConfig+0x996>
 800802e:	2b02      	cmp	r3, #2
 8008030:	d030      	beq.n	8008094 <UART_SetConfig+0x99c>
 8008032:	2b03      	cmp	r3, #3
 8008034:	d031      	beq.n	800809a <UART_SetConfig+0x9a2>
 8008036:	2b04      	cmp	r3, #4
 8008038:	d032      	beq.n	80080a0 <UART_SetConfig+0x9a8>
 800803a:	2b05      	cmp	r3, #5
 800803c:	d033      	beq.n	80080a6 <UART_SetConfig+0x9ae>
 800803e:	2b06      	cmp	r3, #6
 8008040:	d034      	beq.n	80080ac <UART_SetConfig+0x9b4>
 8008042:	2b07      	cmp	r3, #7
 8008044:	d035      	beq.n	80080b2 <UART_SetConfig+0x9ba>
 8008046:	2b08      	cmp	r3, #8
 8008048:	d036      	beq.n	80080b8 <UART_SetConfig+0x9c0>
 800804a:	2b09      	cmp	r3, #9
 800804c:	d037      	beq.n	80080be <UART_SetConfig+0x9c6>
 800804e:	2b0a      	cmp	r3, #10
 8008050:	d038      	beq.n	80080c4 <UART_SetConfig+0x9cc>
 8008052:	2b0b      	cmp	r3, #11
 8008054:	d139      	bne.n	80080ca <UART_SetConfig+0x9d2>
 8008056:	f44f 7280 	mov.w	r2, #256	; 0x100
 800805a:	2300      	movs	r3, #0
 800805c:	e001      	b.n	8008062 <UART_SetConfig+0x96a>
 800805e:	2201      	movs	r2, #1
 8008060:	2300      	movs	r3, #0
 8008062:	2100      	movs	r1, #0
 8008064:	f7f8 f994 	bl	8000390 <__aeabi_uldivmod>
 8008068:	020f      	lsls	r7, r1, #8
 800806a:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 800806e:	0206      	lsls	r6, r0, #8
 8008070:	6862      	ldr	r2, [r4, #4]
 8008072:	0850      	lsrs	r0, r2, #1
 8008074:	2500      	movs	r5, #0
 8008076:	462b      	mov	r3, r5
 8008078:	eb16 0800 	adds.w	r8, r6, r0
 800807c:	f147 0900 	adc.w	r9, r7, #0
 8008080:	4640      	mov	r0, r8
 8008082:	4649      	mov	r1, r9
 8008084:	f7f8 f984 	bl	8000390 <__aeabi_uldivmod>
 8008088:	4603      	mov	r3, r0
            break;
 800808a:	4628      	mov	r0, r5
 800808c:	e763      	b.n	8007f56 <UART_SetConfig+0x85e>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800808e:	2202      	movs	r2, #2
 8008090:	2300      	movs	r3, #0
 8008092:	e7e6      	b.n	8008062 <UART_SetConfig+0x96a>
 8008094:	2204      	movs	r2, #4
 8008096:	2300      	movs	r3, #0
 8008098:	e7e3      	b.n	8008062 <UART_SetConfig+0x96a>
 800809a:	2206      	movs	r2, #6
 800809c:	2300      	movs	r3, #0
 800809e:	e7e0      	b.n	8008062 <UART_SetConfig+0x96a>
 80080a0:	2208      	movs	r2, #8
 80080a2:	2300      	movs	r3, #0
 80080a4:	e7dd      	b.n	8008062 <UART_SetConfig+0x96a>
 80080a6:	220a      	movs	r2, #10
 80080a8:	2300      	movs	r3, #0
 80080aa:	e7da      	b.n	8008062 <UART_SetConfig+0x96a>
 80080ac:	220c      	movs	r2, #12
 80080ae:	2300      	movs	r3, #0
 80080b0:	e7d7      	b.n	8008062 <UART_SetConfig+0x96a>
 80080b2:	2210      	movs	r2, #16
 80080b4:	2300      	movs	r3, #0
 80080b6:	e7d4      	b.n	8008062 <UART_SetConfig+0x96a>
 80080b8:	2220      	movs	r2, #32
 80080ba:	2300      	movs	r3, #0
 80080bc:	e7d1      	b.n	8008062 <UART_SetConfig+0x96a>
 80080be:	2240      	movs	r2, #64	; 0x40
 80080c0:	2300      	movs	r3, #0
 80080c2:	e7ce      	b.n	8008062 <UART_SetConfig+0x96a>
 80080c4:	2280      	movs	r2, #128	; 0x80
 80080c6:	2300      	movs	r3, #0
 80080c8:	e7cb      	b.n	8008062 <UART_SetConfig+0x96a>
 80080ca:	2201      	movs	r2, #1
 80080cc:	2300      	movs	r3, #0
 80080ce:	e7c8      	b.n	8008062 <UART_SetConfig+0x96a>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80080d0:	4b64      	ldr	r3, [pc, #400]	; (8008264 <UART_SetConfig+0xb6c>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f013 0f20 	tst.w	r3, #32
 80080d8:	d05c      	beq.n	8008194 <UART_SetConfig+0xa9c>
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80080da:	4b62      	ldr	r3, [pc, #392]	; (8008264 <UART_SetConfig+0xb6c>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80080e2:	4861      	ldr	r0, [pc, #388]	; (8008268 <UART_SetConfig+0xb70>)
 80080e4:	40d8      	lsrs	r0, r3
 80080e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080e8:	b1cb      	cbz	r3, 800811e <UART_SetConfig+0xa26>
 80080ea:	2b01      	cmp	r3, #1
 80080ec:	d031      	beq.n	8008152 <UART_SetConfig+0xa5a>
 80080ee:	2b02      	cmp	r3, #2
 80080f0:	d032      	beq.n	8008158 <UART_SetConfig+0xa60>
 80080f2:	2b03      	cmp	r3, #3
 80080f4:	d033      	beq.n	800815e <UART_SetConfig+0xa66>
 80080f6:	2b04      	cmp	r3, #4
 80080f8:	d034      	beq.n	8008164 <UART_SetConfig+0xa6c>
 80080fa:	2b05      	cmp	r3, #5
 80080fc:	d035      	beq.n	800816a <UART_SetConfig+0xa72>
 80080fe:	2b06      	cmp	r3, #6
 8008100:	d036      	beq.n	8008170 <UART_SetConfig+0xa78>
 8008102:	2b07      	cmp	r3, #7
 8008104:	d037      	beq.n	8008176 <UART_SetConfig+0xa7e>
 8008106:	2b08      	cmp	r3, #8
 8008108:	d038      	beq.n	800817c <UART_SetConfig+0xa84>
 800810a:	2b09      	cmp	r3, #9
 800810c:	d039      	beq.n	8008182 <UART_SetConfig+0xa8a>
 800810e:	2b0a      	cmp	r3, #10
 8008110:	d03a      	beq.n	8008188 <UART_SetConfig+0xa90>
 8008112:	2b0b      	cmp	r3, #11
 8008114:	d13b      	bne.n	800818e <UART_SetConfig+0xa96>
 8008116:	f44f 7280 	mov.w	r2, #256	; 0x100
 800811a:	2300      	movs	r3, #0
 800811c:	e001      	b.n	8008122 <UART_SetConfig+0xa2a>
 800811e:	2201      	movs	r2, #1
 8008120:	2300      	movs	r3, #0
 8008122:	2100      	movs	r1, #0
 8008124:	f7f8 f934 	bl	8000390 <__aeabi_uldivmod>
 8008128:	ea4f 2901 	mov.w	r9, r1, lsl #8
 800812c:	ea49 6910 	orr.w	r9, r9, r0, lsr #24
 8008130:	ea4f 2800 	mov.w	r8, r0, lsl #8
 8008134:	0870      	lsrs	r0, r6, #1
 8008136:	2500      	movs	r5, #0
 8008138:	4632      	mov	r2, r6
 800813a:	462b      	mov	r3, r5
 800813c:	eb18 0600 	adds.w	r6, r8, r0
 8008140:	f149 0700 	adc.w	r7, r9, #0
 8008144:	4630      	mov	r0, r6
 8008146:	4639      	mov	r1, r7
 8008148:	f7f8 f922 	bl	8000390 <__aeabi_uldivmod>
 800814c:	4603      	mov	r3, r0
 800814e:	4628      	mov	r0, r5
 8008150:	e701      	b.n	8007f56 <UART_SetConfig+0x85e>
 8008152:	2202      	movs	r2, #2
 8008154:	2300      	movs	r3, #0
 8008156:	e7e4      	b.n	8008122 <UART_SetConfig+0xa2a>
 8008158:	2204      	movs	r2, #4
 800815a:	2300      	movs	r3, #0
 800815c:	e7e1      	b.n	8008122 <UART_SetConfig+0xa2a>
 800815e:	2206      	movs	r2, #6
 8008160:	2300      	movs	r3, #0
 8008162:	e7de      	b.n	8008122 <UART_SetConfig+0xa2a>
 8008164:	2208      	movs	r2, #8
 8008166:	2300      	movs	r3, #0
 8008168:	e7db      	b.n	8008122 <UART_SetConfig+0xa2a>
 800816a:	220a      	movs	r2, #10
 800816c:	2300      	movs	r3, #0
 800816e:	e7d8      	b.n	8008122 <UART_SetConfig+0xa2a>
 8008170:	220c      	movs	r2, #12
 8008172:	2300      	movs	r3, #0
 8008174:	e7d5      	b.n	8008122 <UART_SetConfig+0xa2a>
 8008176:	2210      	movs	r2, #16
 8008178:	2300      	movs	r3, #0
 800817a:	e7d2      	b.n	8008122 <UART_SetConfig+0xa2a>
 800817c:	2220      	movs	r2, #32
 800817e:	2300      	movs	r3, #0
 8008180:	e7cf      	b.n	8008122 <UART_SetConfig+0xa2a>
 8008182:	2240      	movs	r2, #64	; 0x40
 8008184:	2300      	movs	r3, #0
 8008186:	e7cc      	b.n	8008122 <UART_SetConfig+0xa2a>
 8008188:	2280      	movs	r2, #128	; 0x80
 800818a:	2300      	movs	r3, #0
 800818c:	e7c9      	b.n	8008122 <UART_SetConfig+0xa2a>
 800818e:	2201      	movs	r2, #1
 8008190:	2300      	movs	r3, #0
 8008192:	e7c6      	b.n	8008122 <UART_SetConfig+0xa2a>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008194:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008196:	b1d3      	cbz	r3, 80081ce <UART_SetConfig+0xad6>
 8008198:	2b01      	cmp	r3, #1
 800819a:	d029      	beq.n	80081f0 <UART_SetConfig+0xaf8>
 800819c:	2b02      	cmp	r3, #2
 800819e:	d02c      	beq.n	80081fa <UART_SetConfig+0xb02>
 80081a0:	2b03      	cmp	r3, #3
 80081a2:	d02f      	beq.n	8008204 <UART_SetConfig+0xb0c>
 80081a4:	2b04      	cmp	r3, #4
 80081a6:	d032      	beq.n	800820e <UART_SetConfig+0xb16>
 80081a8:	2b05      	cmp	r3, #5
 80081aa:	d035      	beq.n	8008218 <UART_SetConfig+0xb20>
 80081ac:	2b06      	cmp	r3, #6
 80081ae:	d038      	beq.n	8008222 <UART_SetConfig+0xb2a>
 80081b0:	2b07      	cmp	r3, #7
 80081b2:	d03b      	beq.n	800822c <UART_SetConfig+0xb34>
 80081b4:	2b08      	cmp	r3, #8
 80081b6:	d03e      	beq.n	8008236 <UART_SetConfig+0xb3e>
 80081b8:	2b09      	cmp	r3, #9
 80081ba:	d041      	beq.n	8008240 <UART_SetConfig+0xb48>
 80081bc:	2b0a      	cmp	r3, #10
 80081be:	d065      	beq.n	800828c <UART_SetConfig+0xb94>
 80081c0:	2b0b      	cmp	r3, #11
 80081c2:	d168      	bne.n	8008296 <UART_SetConfig+0xb9e>
 80081c4:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8008268 <UART_SetConfig+0xb70>
 80081c8:	f04f 0900 	mov.w	r9, #0
 80081cc:	e003      	b.n	80081d6 <UART_SetConfig+0xade>
 80081ce:	f8df 809c 	ldr.w	r8, [pc, #156]	; 800826c <UART_SetConfig+0xb74>
 80081d2:	f04f 0903 	mov.w	r9, #3
 80081d6:	0877      	lsrs	r7, r6, #1
 80081d8:	2500      	movs	r5, #0
 80081da:	4632      	mov	r2, r6
 80081dc:	462b      	mov	r3, r5
 80081de:	eb18 0007 	adds.w	r0, r8, r7
 80081e2:	f149 0100 	adc.w	r1, r9, #0
 80081e6:	f7f8 f8d3 	bl	8000390 <__aeabi_uldivmod>
 80081ea:	4603      	mov	r3, r0
 80081ec:	4628      	mov	r0, r5
 80081ee:	e6b2      	b.n	8007f56 <UART_SetConfig+0x85e>
 80081f0:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8008270 <UART_SetConfig+0xb78>
 80081f4:	f04f 0901 	mov.w	r9, #1
 80081f8:	e7ed      	b.n	80081d6 <UART_SetConfig+0xade>
 80081fa:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8008274 <UART_SetConfig+0xb7c>
 80081fe:	f04f 0900 	mov.w	r9, #0
 8008202:	e7e8      	b.n	80081d6 <UART_SetConfig+0xade>
 8008204:	f20f 0948 	addw	r9, pc, #72	; 0x48
 8008208:	e9d9 8900 	ldrd	r8, r9, [r9]
 800820c:	e7e3      	b.n	80081d6 <UART_SetConfig+0xade>
 800820e:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8008278 <UART_SetConfig+0xb80>
 8008212:	f04f 0900 	mov.w	r9, #0
 8008216:	e7de      	b.n	80081d6 <UART_SetConfig+0xade>
 8008218:	f8df 8060 	ldr.w	r8, [pc, #96]	; 800827c <UART_SetConfig+0xb84>
 800821c:	f04f 0900 	mov.w	r9, #0
 8008220:	e7d9      	b.n	80081d6 <UART_SetConfig+0xade>
 8008222:	f20f 0934 	addw	r9, pc, #52	; 0x34
 8008226:	e9d9 8900 	ldrd	r8, r9, [r9]
 800822a:	e7d4      	b.n	80081d6 <UART_SetConfig+0xade>
 800822c:	f8df 8050 	ldr.w	r8, [pc, #80]	; 8008280 <UART_SetConfig+0xb88>
 8008230:	f04f 0900 	mov.w	r9, #0
 8008234:	e7cf      	b.n	80081d6 <UART_SetConfig+0xade>
 8008236:	f8df 804c 	ldr.w	r8, [pc, #76]	; 8008284 <UART_SetConfig+0xb8c>
 800823a:	f04f 0900 	mov.w	r9, #0
 800823e:	e7ca      	b.n	80081d6 <UART_SetConfig+0xade>
 8008240:	f8df 8044 	ldr.w	r8, [pc, #68]	; 8008288 <UART_SetConfig+0xb90>
 8008244:	f04f 0900 	mov.w	r9, #0
 8008248:	e7c5      	b.n	80081d6 <UART_SetConfig+0xade>
 800824a:	bf00      	nop
 800824c:	f3af 8000 	nop.w
 8008250:	a2c2aa00 	.word	0xa2c2aa00
 8008254:	00000000 	.word	0x00000000
 8008258:	51615500 	.word	0x51615500
 800825c:	00000000 	.word	0x00000000
 8008260:	000ffcff 	.word	0x000ffcff
 8008264:	58024400 	.word	0x58024400
 8008268:	03d09000 	.word	0x03d09000
 800826c:	d0900000 	.word	0xd0900000
 8008270:	e8480000 	.word	0xe8480000
 8008274:	f4240000 	.word	0xf4240000
 8008278:	7a120000 	.word	0x7a120000
 800827c:	61a80000 	.word	0x61a80000
 8008280:	3d090000 	.word	0x3d090000
 8008284:	1e848000 	.word	0x1e848000
 8008288:	0f424000 	.word	0x0f424000
 800828c:	f8df 86e8 	ldr.w	r8, [pc, #1768]	; 8008978 <UART_SetConfig+0x1280>
 8008290:	f04f 0900 	mov.w	r9, #0
 8008294:	e79f      	b.n	80081d6 <UART_SetConfig+0xade>
 8008296:	f8df 8730 	ldr.w	r8, [pc, #1840]	; 80089c8 <UART_SetConfig+0x12d0>
 800829a:	f04f 0903 	mov.w	r9, #3
 800829e:	e79a      	b.n	80081d6 <UART_SetConfig+0xade>
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80082a2:	b1d3      	cbz	r3, 80082da <UART_SetConfig+0xbe2>
 80082a4:	2b01      	cmp	r3, #1
 80082a6:	d029      	beq.n	80082fc <UART_SetConfig+0xc04>
 80082a8:	2b02      	cmp	r3, #2
 80082aa:	d02c      	beq.n	8008306 <UART_SetConfig+0xc0e>
 80082ac:	2b03      	cmp	r3, #3
 80082ae:	d02f      	beq.n	8008310 <UART_SetConfig+0xc18>
 80082b0:	2b04      	cmp	r3, #4
 80082b2:	d032      	beq.n	800831a <UART_SetConfig+0xc22>
 80082b4:	2b05      	cmp	r3, #5
 80082b6:	d035      	beq.n	8008324 <UART_SetConfig+0xc2c>
 80082b8:	2b06      	cmp	r3, #6
 80082ba:	d038      	beq.n	800832e <UART_SetConfig+0xc36>
 80082bc:	2b07      	cmp	r3, #7
 80082be:	d03b      	beq.n	8008338 <UART_SetConfig+0xc40>
 80082c0:	2b08      	cmp	r3, #8
 80082c2:	d03e      	beq.n	8008342 <UART_SetConfig+0xc4a>
 80082c4:	2b09      	cmp	r3, #9
 80082c6:	d041      	beq.n	800834c <UART_SetConfig+0xc54>
 80082c8:	2b0a      	cmp	r3, #10
 80082ca:	d044      	beq.n	8008356 <UART_SetConfig+0xc5e>
 80082cc:	2b0b      	cmp	r3, #11
 80082ce:	d147      	bne.n	8008360 <UART_SetConfig+0xc68>
 80082d0:	f8df 86c4 	ldr.w	r8, [pc, #1732]	; 8008998 <UART_SetConfig+0x12a0>
 80082d4:	f04f 0900 	mov.w	r9, #0
 80082d8:	e003      	b.n	80082e2 <UART_SetConfig+0xbea>
 80082da:	f8df 86f0 	ldr.w	r8, [pc, #1776]	; 80089cc <UART_SetConfig+0x12d4>
 80082de:	f04f 0900 	mov.w	r9, #0
 80082e2:	0877      	lsrs	r7, r6, #1
 80082e4:	2500      	movs	r5, #0
 80082e6:	4632      	mov	r2, r6
 80082e8:	462b      	mov	r3, r5
 80082ea:	eb18 0007 	adds.w	r0, r8, r7
 80082ee:	f149 0100 	adc.w	r1, r9, #0
 80082f2:	f7f8 f84d 	bl	8000390 <__aeabi_uldivmod>
 80082f6:	4603      	mov	r3, r0
            break;
 80082f8:	4628      	mov	r0, r5
 80082fa:	e62c      	b.n	8007f56 <UART_SetConfig+0x85e>
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082fc:	f8df 86d0 	ldr.w	r8, [pc, #1744]	; 80089d0 <UART_SetConfig+0x12d8>
 8008300:	f04f 0900 	mov.w	r9, #0
 8008304:	e7ed      	b.n	80082e2 <UART_SetConfig+0xbea>
 8008306:	f8df 86cc 	ldr.w	r8, [pc, #1740]	; 80089d4 <UART_SetConfig+0x12dc>
 800830a:	f04f 0900 	mov.w	r9, #0
 800830e:	e7e8      	b.n	80082e2 <UART_SetConfig+0xbea>
 8008310:	f20f 69a4 	addw	r9, pc, #1700	; 0x6a4
 8008314:	e9d9 8900 	ldrd	r8, r9, [r9]
 8008318:	e7e3      	b.n	80082e2 <UART_SetConfig+0xbea>
 800831a:	f8df 865c 	ldr.w	r8, [pc, #1628]	; 8008978 <UART_SetConfig+0x1280>
 800831e:	f04f 0900 	mov.w	r9, #0
 8008322:	e7de      	b.n	80082e2 <UART_SetConfig+0xbea>
 8008324:	f8df 86b0 	ldr.w	r8, [pc, #1712]	; 80089d8 <UART_SetConfig+0x12e0>
 8008328:	f04f 0900 	mov.w	r9, #0
 800832c:	e7d9      	b.n	80082e2 <UART_SetConfig+0xbea>
 800832e:	f20f 6990 	addw	r9, pc, #1680	; 0x690
 8008332:	e9d9 8900 	ldrd	r8, r9, [r9]
 8008336:	e7d4      	b.n	80082e2 <UART_SetConfig+0xbea>
 8008338:	f8df 8638 	ldr.w	r8, [pc, #1592]	; 8008974 <UART_SetConfig+0x127c>
 800833c:	f04f 0900 	mov.w	r9, #0
 8008340:	e7cf      	b.n	80082e2 <UART_SetConfig+0xbea>
 8008342:	f8df 863c 	ldr.w	r8, [pc, #1596]	; 8008980 <UART_SetConfig+0x1288>
 8008346:	f04f 0900 	mov.w	r9, #0
 800834a:	e7ca      	b.n	80082e2 <UART_SetConfig+0xbea>
 800834c:	f8df 8638 	ldr.w	r8, [pc, #1592]	; 8008988 <UART_SetConfig+0x1290>
 8008350:	f04f 0900 	mov.w	r9, #0
 8008354:	e7c5      	b.n	80082e2 <UART_SetConfig+0xbea>
 8008356:	f8df 863c 	ldr.w	r8, [pc, #1596]	; 8008994 <UART_SetConfig+0x129c>
 800835a:	f04f 0900 	mov.w	r9, #0
 800835e:	e7c0      	b.n	80082e2 <UART_SetConfig+0xbea>
 8008360:	f8df 8668 	ldr.w	r8, [pc, #1640]	; 80089cc <UART_SetConfig+0x12d4>
 8008364:	f04f 0900 	mov.w	r9, #0
 8008368:	e7bb      	b.n	80082e2 <UART_SetConfig+0xbea>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800836a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800836c:	b1d3      	cbz	r3, 80083a4 <UART_SetConfig+0xcac>
 800836e:	2b01      	cmp	r3, #1
 8008370:	d029      	beq.n	80083c6 <UART_SetConfig+0xcce>
 8008372:	2b02      	cmp	r3, #2
 8008374:	d02c      	beq.n	80083d0 <UART_SetConfig+0xcd8>
 8008376:	2b03      	cmp	r3, #3
 8008378:	d02f      	beq.n	80083da <UART_SetConfig+0xce2>
 800837a:	2b04      	cmp	r3, #4
 800837c:	d032      	beq.n	80083e4 <UART_SetConfig+0xcec>
 800837e:	2b05      	cmp	r3, #5
 8008380:	d035      	beq.n	80083ee <UART_SetConfig+0xcf6>
 8008382:	2b06      	cmp	r3, #6
 8008384:	d038      	beq.n	80083f8 <UART_SetConfig+0xd00>
 8008386:	2b07      	cmp	r3, #7
 8008388:	d03b      	beq.n	8008402 <UART_SetConfig+0xd0a>
 800838a:	2b08      	cmp	r3, #8
 800838c:	d03e      	beq.n	800840c <UART_SetConfig+0xd14>
 800838e:	2b09      	cmp	r3, #9
 8008390:	d041      	beq.n	8008416 <UART_SetConfig+0xd1e>
 8008392:	2b0a      	cmp	r3, #10
 8008394:	d044      	beq.n	8008420 <UART_SetConfig+0xd28>
 8008396:	2b0b      	cmp	r3, #11
 8008398:	d147      	bne.n	800842a <UART_SetConfig+0xd32>
 800839a:	f44f 4800 	mov.w	r8, #32768	; 0x8000
 800839e:	f04f 0900 	mov.w	r9, #0
 80083a2:	e003      	b.n	80083ac <UART_SetConfig+0xcb4>
 80083a4:	f44f 0800 	mov.w	r8, #8388608	; 0x800000
 80083a8:	f04f 0900 	mov.w	r9, #0
 80083ac:	0877      	lsrs	r7, r6, #1
 80083ae:	2500      	movs	r5, #0
 80083b0:	4632      	mov	r2, r6
 80083b2:	462b      	mov	r3, r5
 80083b4:	eb18 0007 	adds.w	r0, r8, r7
 80083b8:	f149 0100 	adc.w	r1, r9, #0
 80083bc:	f7f7 ffe8 	bl	8000390 <__aeabi_uldivmod>
 80083c0:	4603      	mov	r3, r0
            break;
 80083c2:	4628      	mov	r0, r5
 80083c4:	e5c7      	b.n	8007f56 <UART_SetConfig+0x85e>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80083c6:	f44f 0880 	mov.w	r8, #4194304	; 0x400000
 80083ca:	f04f 0900 	mov.w	r9, #0
 80083ce:	e7ed      	b.n	80083ac <UART_SetConfig+0xcb4>
 80083d0:	f44f 1800 	mov.w	r8, #2097152	; 0x200000
 80083d4:	f04f 0900 	mov.w	r9, #0
 80083d8:	e7e8      	b.n	80083ac <UART_SetConfig+0xcb4>
 80083da:	f8df 8600 	ldr.w	r8, [pc, #1536]	; 80089dc <UART_SetConfig+0x12e4>
 80083de:	f04f 0900 	mov.w	r9, #0
 80083e2:	e7e3      	b.n	80083ac <UART_SetConfig+0xcb4>
 80083e4:	f44f 1880 	mov.w	r8, #1048576	; 0x100000
 80083e8:	f04f 0900 	mov.w	r9, #0
 80083ec:	e7de      	b.n	80083ac <UART_SetConfig+0xcb4>
 80083ee:	f8df 85f0 	ldr.w	r8, [pc, #1520]	; 80089e0 <UART_SetConfig+0x12e8>
 80083f2:	f04f 0900 	mov.w	r9, #0
 80083f6:	e7d9      	b.n	80083ac <UART_SetConfig+0xcb4>
 80083f8:	f8df 85e8 	ldr.w	r8, [pc, #1512]	; 80089e4 <UART_SetConfig+0x12ec>
 80083fc:	f04f 0900 	mov.w	r9, #0
 8008400:	e7d4      	b.n	80083ac <UART_SetConfig+0xcb4>
 8008402:	f44f 2800 	mov.w	r8, #524288	; 0x80000
 8008406:	f04f 0900 	mov.w	r9, #0
 800840a:	e7cf      	b.n	80083ac <UART_SetConfig+0xcb4>
 800840c:	f44f 2880 	mov.w	r8, #262144	; 0x40000
 8008410:	f04f 0900 	mov.w	r9, #0
 8008414:	e7ca      	b.n	80083ac <UART_SetConfig+0xcb4>
 8008416:	f44f 3800 	mov.w	r8, #131072	; 0x20000
 800841a:	f04f 0900 	mov.w	r9, #0
 800841e:	e7c5      	b.n	80083ac <UART_SetConfig+0xcb4>
 8008420:	f44f 3880 	mov.w	r8, #65536	; 0x10000
 8008424:	f04f 0900 	mov.w	r9, #0
 8008428:	e7c0      	b.n	80083ac <UART_SetConfig+0xcb4>
 800842a:	f44f 0800 	mov.w	r8, #8388608	; 0x800000
 800842e:	f04f 0900 	mov.w	r9, #0
 8008432:	e7bb      	b.n	80083ac <UART_SetConfig+0xcb4>
    switch (clocksource)
 8008434:	2d40      	cmp	r5, #64	; 0x40
 8008436:	f200 8254 	bhi.w	80088e2 <UART_SetConfig+0x11ea>
 800843a:	e8df f015 	tbh	[pc, r5, lsl #1]
 800843e:	0041      	.short	0x0041
 8008440:	0252008f 	.word	0x0252008f
 8008444:	00ce0252 	.word	0x00ce0252
 8008448:	02520252 	.word	0x02520252
 800844c:	010f0252 	.word	0x010f0252
 8008450:	02520252 	.word	0x02520252
 8008454:	02520252 	.word	0x02520252
 8008458:	02520252 	.word	0x02520252
 800845c:	01500252 	.word	0x01500252
 8008460:	02520252 	.word	0x02520252
 8008464:	02520252 	.word	0x02520252
 8008468:	02520252 	.word	0x02520252
 800846c:	02520252 	.word	0x02520252
 8008470:	02520252 	.word	0x02520252
 8008474:	02520252 	.word	0x02520252
 8008478:	02520252 	.word	0x02520252
 800847c:	01d10252 	.word	0x01d10252
 8008480:	02520252 	.word	0x02520252
 8008484:	02520252 	.word	0x02520252
 8008488:	02520252 	.word	0x02520252
 800848c:	02520252 	.word	0x02520252
 8008490:	02520252 	.word	0x02520252
 8008494:	02520252 	.word	0x02520252
 8008498:	02520252 	.word	0x02520252
 800849c:	02520252 	.word	0x02520252
 80084a0:	02520252 	.word	0x02520252
 80084a4:	02520252 	.word	0x02520252
 80084a8:	02520252 	.word	0x02520252
 80084ac:	02520252 	.word	0x02520252
 80084b0:	02520252 	.word	0x02520252
 80084b4:	02520252 	.word	0x02520252
 80084b8:	02520252 	.word	0x02520252
 80084bc:	020c0252 	.word	0x020c0252
        pclk = HAL_RCC_GetPCLK1Freq();
 80084c0:	f7fd fc26 	bl	8005d10 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80084c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084c6:	b1c3      	cbz	r3, 80084fa <UART_SetConfig+0xe02>
 80084c8:	2b01      	cmp	r3, #1
 80084ca:	d031      	beq.n	8008530 <UART_SetConfig+0xe38>
 80084cc:	2b02      	cmp	r3, #2
 80084ce:	d031      	beq.n	8008534 <UART_SetConfig+0xe3c>
 80084d0:	2b03      	cmp	r3, #3
 80084d2:	d031      	beq.n	8008538 <UART_SetConfig+0xe40>
 80084d4:	2b04      	cmp	r3, #4
 80084d6:	d031      	beq.n	800853c <UART_SetConfig+0xe44>
 80084d8:	2b05      	cmp	r3, #5
 80084da:	d031      	beq.n	8008540 <UART_SetConfig+0xe48>
 80084dc:	2b06      	cmp	r3, #6
 80084de:	d031      	beq.n	8008544 <UART_SetConfig+0xe4c>
 80084e0:	2b07      	cmp	r3, #7
 80084e2:	d031      	beq.n	8008548 <UART_SetConfig+0xe50>
 80084e4:	2b08      	cmp	r3, #8
 80084e6:	d031      	beq.n	800854c <UART_SetConfig+0xe54>
 80084e8:	2b09      	cmp	r3, #9
 80084ea:	d031      	beq.n	8008550 <UART_SetConfig+0xe58>
 80084ec:	2b0a      	cmp	r3, #10
 80084ee:	d031      	beq.n	8008554 <UART_SetConfig+0xe5c>
 80084f0:	2b0b      	cmp	r3, #11
 80084f2:	d131      	bne.n	8008558 <UART_SetConfig+0xe60>
 80084f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80084f8:	e000      	b.n	80084fc <UART_SetConfig+0xe04>
 80084fa:	2301      	movs	r3, #1
 80084fc:	fbb0 f0f3 	udiv	r0, r0, r3
 8008500:	6862      	ldr	r2, [r4, #4]
 8008502:	0853      	lsrs	r3, r2, #1
 8008504:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8008508:	fbb3 f3f2 	udiv	r3, r3, r2
 800850c:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800850e:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008510:	f1a3 0110 	sub.w	r1, r3, #16
 8008514:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8008518:	4291      	cmp	r1, r2
 800851a:	f200 843d 	bhi.w	8008d98 <UART_SetConfig+0x16a0>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800851e:	b29a      	uxth	r2, r3
 8008520:	f022 020f 	bic.w	r2, r2, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008524:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8008528:	4313      	orrs	r3, r2
      huart->Instance->BRR = brrtemp;
 800852a:	6822      	ldr	r2, [r4, #0]
 800852c:	60d3      	str	r3, [r2, #12]
 800852e:	e20d      	b.n	800894c <UART_SetConfig+0x1254>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008530:	2302      	movs	r3, #2
 8008532:	e7e3      	b.n	80084fc <UART_SetConfig+0xe04>
 8008534:	2304      	movs	r3, #4
 8008536:	e7e1      	b.n	80084fc <UART_SetConfig+0xe04>
 8008538:	2306      	movs	r3, #6
 800853a:	e7df      	b.n	80084fc <UART_SetConfig+0xe04>
 800853c:	2308      	movs	r3, #8
 800853e:	e7dd      	b.n	80084fc <UART_SetConfig+0xe04>
 8008540:	230a      	movs	r3, #10
 8008542:	e7db      	b.n	80084fc <UART_SetConfig+0xe04>
 8008544:	230c      	movs	r3, #12
 8008546:	e7d9      	b.n	80084fc <UART_SetConfig+0xe04>
 8008548:	2310      	movs	r3, #16
 800854a:	e7d7      	b.n	80084fc <UART_SetConfig+0xe04>
 800854c:	2320      	movs	r3, #32
 800854e:	e7d5      	b.n	80084fc <UART_SetConfig+0xe04>
 8008550:	2340      	movs	r3, #64	; 0x40
 8008552:	e7d3      	b.n	80084fc <UART_SetConfig+0xe04>
 8008554:	2380      	movs	r3, #128	; 0x80
 8008556:	e7d1      	b.n	80084fc <UART_SetConfig+0xe04>
 8008558:	2301      	movs	r3, #1
 800855a:	e7cf      	b.n	80084fc <UART_SetConfig+0xe04>
        pclk = HAL_RCC_GetPCLK2Freq();
 800855c:	f7fd fbea 	bl	8005d34 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008560:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008562:	b1c3      	cbz	r3, 8008596 <UART_SetConfig+0xe9e>
 8008564:	2b01      	cmp	r3, #1
 8008566:	d022      	beq.n	80085ae <UART_SetConfig+0xeb6>
 8008568:	2b02      	cmp	r3, #2
 800856a:	d022      	beq.n	80085b2 <UART_SetConfig+0xeba>
 800856c:	2b03      	cmp	r3, #3
 800856e:	d022      	beq.n	80085b6 <UART_SetConfig+0xebe>
 8008570:	2b04      	cmp	r3, #4
 8008572:	d022      	beq.n	80085ba <UART_SetConfig+0xec2>
 8008574:	2b05      	cmp	r3, #5
 8008576:	d022      	beq.n	80085be <UART_SetConfig+0xec6>
 8008578:	2b06      	cmp	r3, #6
 800857a:	d022      	beq.n	80085c2 <UART_SetConfig+0xeca>
 800857c:	2b07      	cmp	r3, #7
 800857e:	d022      	beq.n	80085c6 <UART_SetConfig+0xece>
 8008580:	2b08      	cmp	r3, #8
 8008582:	d022      	beq.n	80085ca <UART_SetConfig+0xed2>
 8008584:	2b09      	cmp	r3, #9
 8008586:	d022      	beq.n	80085ce <UART_SetConfig+0xed6>
 8008588:	2b0a      	cmp	r3, #10
 800858a:	d022      	beq.n	80085d2 <UART_SetConfig+0xeda>
 800858c:	2b0b      	cmp	r3, #11
 800858e:	d122      	bne.n	80085d6 <UART_SetConfig+0xede>
 8008590:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008594:	e000      	b.n	8008598 <UART_SetConfig+0xea0>
 8008596:	2301      	movs	r3, #1
 8008598:	fbb0 f0f3 	udiv	r0, r0, r3
 800859c:	6862      	ldr	r2, [r4, #4]
 800859e:	0853      	lsrs	r3, r2, #1
 80085a0:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80085a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80085a8:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80085aa:	2000      	movs	r0, #0
        break;
 80085ac:	e7b0      	b.n	8008510 <UART_SetConfig+0xe18>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085ae:	2302      	movs	r3, #2
 80085b0:	e7f2      	b.n	8008598 <UART_SetConfig+0xea0>
 80085b2:	2304      	movs	r3, #4
 80085b4:	e7f0      	b.n	8008598 <UART_SetConfig+0xea0>
 80085b6:	2306      	movs	r3, #6
 80085b8:	e7ee      	b.n	8008598 <UART_SetConfig+0xea0>
 80085ba:	2308      	movs	r3, #8
 80085bc:	e7ec      	b.n	8008598 <UART_SetConfig+0xea0>
 80085be:	230a      	movs	r3, #10
 80085c0:	e7ea      	b.n	8008598 <UART_SetConfig+0xea0>
 80085c2:	230c      	movs	r3, #12
 80085c4:	e7e8      	b.n	8008598 <UART_SetConfig+0xea0>
 80085c6:	2310      	movs	r3, #16
 80085c8:	e7e6      	b.n	8008598 <UART_SetConfig+0xea0>
 80085ca:	2320      	movs	r3, #32
 80085cc:	e7e4      	b.n	8008598 <UART_SetConfig+0xea0>
 80085ce:	2340      	movs	r3, #64	; 0x40
 80085d0:	e7e2      	b.n	8008598 <UART_SetConfig+0xea0>
 80085d2:	2380      	movs	r3, #128	; 0x80
 80085d4:	e7e0      	b.n	8008598 <UART_SetConfig+0xea0>
 80085d6:	2301      	movs	r3, #1
 80085d8:	e7de      	b.n	8008598 <UART_SetConfig+0xea0>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085da:	a803      	add	r0, sp, #12
 80085dc:	f7fe f9ae 	bl	800693c <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085e0:	9b04      	ldr	r3, [sp, #16]
 80085e2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80085e4:	b1c2      	cbz	r2, 8008618 <UART_SetConfig+0xf20>
 80085e6:	2a01      	cmp	r2, #1
 80085e8:	d022      	beq.n	8008630 <UART_SetConfig+0xf38>
 80085ea:	2a02      	cmp	r2, #2
 80085ec:	d022      	beq.n	8008634 <UART_SetConfig+0xf3c>
 80085ee:	2a03      	cmp	r2, #3
 80085f0:	d022      	beq.n	8008638 <UART_SetConfig+0xf40>
 80085f2:	2a04      	cmp	r2, #4
 80085f4:	d022      	beq.n	800863c <UART_SetConfig+0xf44>
 80085f6:	2a05      	cmp	r2, #5
 80085f8:	d022      	beq.n	8008640 <UART_SetConfig+0xf48>
 80085fa:	2a06      	cmp	r2, #6
 80085fc:	d022      	beq.n	8008644 <UART_SetConfig+0xf4c>
 80085fe:	2a07      	cmp	r2, #7
 8008600:	d022      	beq.n	8008648 <UART_SetConfig+0xf50>
 8008602:	2a08      	cmp	r2, #8
 8008604:	d022      	beq.n	800864c <UART_SetConfig+0xf54>
 8008606:	2a09      	cmp	r2, #9
 8008608:	d022      	beq.n	8008650 <UART_SetConfig+0xf58>
 800860a:	2a0a      	cmp	r2, #10
 800860c:	d022      	beq.n	8008654 <UART_SetConfig+0xf5c>
 800860e:	2a0b      	cmp	r2, #11
 8008610:	d122      	bne.n	8008658 <UART_SetConfig+0xf60>
 8008612:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008616:	e000      	b.n	800861a <UART_SetConfig+0xf22>
 8008618:	2201      	movs	r2, #1
 800861a:	fbb3 f2f2 	udiv	r2, r3, r2
 800861e:	6861      	ldr	r1, [r4, #4]
 8008620:	084b      	lsrs	r3, r1, #1
 8008622:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8008626:	fbb3 f3f1 	udiv	r3, r3, r1
 800862a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800862c:	2000      	movs	r0, #0
        break;
 800862e:	e76f      	b.n	8008510 <UART_SetConfig+0xe18>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008630:	2202      	movs	r2, #2
 8008632:	e7f2      	b.n	800861a <UART_SetConfig+0xf22>
 8008634:	2204      	movs	r2, #4
 8008636:	e7f0      	b.n	800861a <UART_SetConfig+0xf22>
 8008638:	2206      	movs	r2, #6
 800863a:	e7ee      	b.n	800861a <UART_SetConfig+0xf22>
 800863c:	2208      	movs	r2, #8
 800863e:	e7ec      	b.n	800861a <UART_SetConfig+0xf22>
 8008640:	220a      	movs	r2, #10
 8008642:	e7ea      	b.n	800861a <UART_SetConfig+0xf22>
 8008644:	220c      	movs	r2, #12
 8008646:	e7e8      	b.n	800861a <UART_SetConfig+0xf22>
 8008648:	2210      	movs	r2, #16
 800864a:	e7e6      	b.n	800861a <UART_SetConfig+0xf22>
 800864c:	2220      	movs	r2, #32
 800864e:	e7e4      	b.n	800861a <UART_SetConfig+0xf22>
 8008650:	2240      	movs	r2, #64	; 0x40
 8008652:	e7e2      	b.n	800861a <UART_SetConfig+0xf22>
 8008654:	2280      	movs	r2, #128	; 0x80
 8008656:	e7e0      	b.n	800861a <UART_SetConfig+0xf22>
 8008658:	2201      	movs	r2, #1
 800865a:	e7de      	b.n	800861a <UART_SetConfig+0xf22>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800865c:	4668      	mov	r0, sp
 800865e:	f7fe fa6b 	bl	8006b38 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008662:	9b01      	ldr	r3, [sp, #4]
 8008664:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008666:	b1c2      	cbz	r2, 800869a <UART_SetConfig+0xfa2>
 8008668:	2a01      	cmp	r2, #1
 800866a:	d022      	beq.n	80086b2 <UART_SetConfig+0xfba>
 800866c:	2a02      	cmp	r2, #2
 800866e:	d022      	beq.n	80086b6 <UART_SetConfig+0xfbe>
 8008670:	2a03      	cmp	r2, #3
 8008672:	d022      	beq.n	80086ba <UART_SetConfig+0xfc2>
 8008674:	2a04      	cmp	r2, #4
 8008676:	d022      	beq.n	80086be <UART_SetConfig+0xfc6>
 8008678:	2a05      	cmp	r2, #5
 800867a:	d022      	beq.n	80086c2 <UART_SetConfig+0xfca>
 800867c:	2a06      	cmp	r2, #6
 800867e:	d022      	beq.n	80086c6 <UART_SetConfig+0xfce>
 8008680:	2a07      	cmp	r2, #7
 8008682:	d022      	beq.n	80086ca <UART_SetConfig+0xfd2>
 8008684:	2a08      	cmp	r2, #8
 8008686:	d022      	beq.n	80086ce <UART_SetConfig+0xfd6>
 8008688:	2a09      	cmp	r2, #9
 800868a:	d022      	beq.n	80086d2 <UART_SetConfig+0xfda>
 800868c:	2a0a      	cmp	r2, #10
 800868e:	d022      	beq.n	80086d6 <UART_SetConfig+0xfde>
 8008690:	2a0b      	cmp	r2, #11
 8008692:	d122      	bne.n	80086da <UART_SetConfig+0xfe2>
 8008694:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008698:	e000      	b.n	800869c <UART_SetConfig+0xfa4>
 800869a:	2201      	movs	r2, #1
 800869c:	fbb3 f2f2 	udiv	r2, r3, r2
 80086a0:	6861      	ldr	r1, [r4, #4]
 80086a2:	084b      	lsrs	r3, r1, #1
 80086a4:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80086a8:	fbb3 f3f1 	udiv	r3, r3, r1
 80086ac:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80086ae:	2000      	movs	r0, #0
        break;
 80086b0:	e72e      	b.n	8008510 <UART_SetConfig+0xe18>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80086b2:	2202      	movs	r2, #2
 80086b4:	e7f2      	b.n	800869c <UART_SetConfig+0xfa4>
 80086b6:	2204      	movs	r2, #4
 80086b8:	e7f0      	b.n	800869c <UART_SetConfig+0xfa4>
 80086ba:	2206      	movs	r2, #6
 80086bc:	e7ee      	b.n	800869c <UART_SetConfig+0xfa4>
 80086be:	2208      	movs	r2, #8
 80086c0:	e7ec      	b.n	800869c <UART_SetConfig+0xfa4>
 80086c2:	220a      	movs	r2, #10
 80086c4:	e7ea      	b.n	800869c <UART_SetConfig+0xfa4>
 80086c6:	220c      	movs	r2, #12
 80086c8:	e7e8      	b.n	800869c <UART_SetConfig+0xfa4>
 80086ca:	2210      	movs	r2, #16
 80086cc:	e7e6      	b.n	800869c <UART_SetConfig+0xfa4>
 80086ce:	2220      	movs	r2, #32
 80086d0:	e7e4      	b.n	800869c <UART_SetConfig+0xfa4>
 80086d2:	2240      	movs	r2, #64	; 0x40
 80086d4:	e7e2      	b.n	800869c <UART_SetConfig+0xfa4>
 80086d6:	2280      	movs	r2, #128	; 0x80
 80086d8:	e7e0      	b.n	800869c <UART_SetConfig+0xfa4>
 80086da:	2201      	movs	r2, #1
 80086dc:	e7de      	b.n	800869c <UART_SetConfig+0xfa4>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80086de:	4ba4      	ldr	r3, [pc, #656]	; (8008970 <UART_SetConfig+0x1278>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f013 0f20 	tst.w	r3, #32
 80086e6:	d042      	beq.n	800876e <UART_SetConfig+0x1076>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80086e8:	4ba1      	ldr	r3, [pc, #644]	; (8008970 <UART_SetConfig+0x1278>)
 80086ea:	681a      	ldr	r2, [r3, #0]
 80086ec:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80086f0:	4ba0      	ldr	r3, [pc, #640]	; (8008974 <UART_SetConfig+0x127c>)
 80086f2:	40d3      	lsrs	r3, r2
 80086f4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80086f6:	b1d2      	cbz	r2, 800872e <UART_SetConfig+0x1036>
 80086f8:	2a01      	cmp	r2, #1
 80086fa:	d024      	beq.n	8008746 <UART_SetConfig+0x104e>
 80086fc:	2a02      	cmp	r2, #2
 80086fe:	d024      	beq.n	800874a <UART_SetConfig+0x1052>
 8008700:	2a03      	cmp	r2, #3
 8008702:	d024      	beq.n	800874e <UART_SetConfig+0x1056>
 8008704:	2a04      	cmp	r2, #4
 8008706:	d024      	beq.n	8008752 <UART_SetConfig+0x105a>
 8008708:	2a05      	cmp	r2, #5
 800870a:	d024      	beq.n	8008756 <UART_SetConfig+0x105e>
 800870c:	2a06      	cmp	r2, #6
 800870e:	d024      	beq.n	800875a <UART_SetConfig+0x1062>
 8008710:	2a07      	cmp	r2, #7
 8008712:	d024      	beq.n	800875e <UART_SetConfig+0x1066>
 8008714:	2a08      	cmp	r2, #8
 8008716:	d024      	beq.n	8008762 <UART_SetConfig+0x106a>
 8008718:	2a09      	cmp	r2, #9
 800871a:	d024      	beq.n	8008766 <UART_SetConfig+0x106e>
 800871c:	2a0a      	cmp	r2, #10
 800871e:	d024      	beq.n	800876a <UART_SetConfig+0x1072>
 8008720:	2a0b      	cmp	r2, #11
 8008722:	d001      	beq.n	8008728 <UART_SetConfig+0x1030>
 8008724:	2201      	movs	r2, #1
 8008726:	e003      	b.n	8008730 <UART_SetConfig+0x1038>
 8008728:	f44f 7280 	mov.w	r2, #256	; 0x100
 800872c:	e000      	b.n	8008730 <UART_SetConfig+0x1038>
 800872e:	2201      	movs	r2, #1
 8008730:	fbb3 f2f2 	udiv	r2, r3, r2
 8008734:	6861      	ldr	r1, [r4, #4]
 8008736:	084b      	lsrs	r3, r1, #1
 8008738:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800873c:	fbb3 f3f1 	udiv	r3, r3, r1
 8008740:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8008742:	2000      	movs	r0, #0
 8008744:	e6e4      	b.n	8008510 <UART_SetConfig+0xe18>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008746:	2202      	movs	r2, #2
 8008748:	e7f2      	b.n	8008730 <UART_SetConfig+0x1038>
 800874a:	2204      	movs	r2, #4
 800874c:	e7f0      	b.n	8008730 <UART_SetConfig+0x1038>
 800874e:	2206      	movs	r2, #6
 8008750:	e7ee      	b.n	8008730 <UART_SetConfig+0x1038>
 8008752:	2208      	movs	r2, #8
 8008754:	e7ec      	b.n	8008730 <UART_SetConfig+0x1038>
 8008756:	220a      	movs	r2, #10
 8008758:	e7ea      	b.n	8008730 <UART_SetConfig+0x1038>
 800875a:	220c      	movs	r2, #12
 800875c:	e7e8      	b.n	8008730 <UART_SetConfig+0x1038>
 800875e:	2210      	movs	r2, #16
 8008760:	e7e6      	b.n	8008730 <UART_SetConfig+0x1038>
 8008762:	2220      	movs	r2, #32
 8008764:	e7e4      	b.n	8008730 <UART_SetConfig+0x1038>
 8008766:	2240      	movs	r2, #64	; 0x40
 8008768:	e7e2      	b.n	8008730 <UART_SetConfig+0x1038>
 800876a:	2280      	movs	r2, #128	; 0x80
 800876c:	e7e0      	b.n	8008730 <UART_SetConfig+0x1038>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800876e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008770:	b1cb      	cbz	r3, 80087a6 <UART_SetConfig+0x10ae>
 8008772:	2b01      	cmp	r3, #1
 8008774:	d020      	beq.n	80087b8 <UART_SetConfig+0x10c0>
 8008776:	2b02      	cmp	r3, #2
 8008778:	d020      	beq.n	80087bc <UART_SetConfig+0x10c4>
 800877a:	2b03      	cmp	r3, #3
 800877c:	d020      	beq.n	80087c0 <UART_SetConfig+0x10c8>
 800877e:	2b04      	cmp	r3, #4
 8008780:	d020      	beq.n	80087c4 <UART_SetConfig+0x10cc>
 8008782:	2b05      	cmp	r3, #5
 8008784:	d020      	beq.n	80087c8 <UART_SetConfig+0x10d0>
 8008786:	2b06      	cmp	r3, #6
 8008788:	d020      	beq.n	80087cc <UART_SetConfig+0x10d4>
 800878a:	2b07      	cmp	r3, #7
 800878c:	d020      	beq.n	80087d0 <UART_SetConfig+0x10d8>
 800878e:	2b08      	cmp	r3, #8
 8008790:	d020      	beq.n	80087d4 <UART_SetConfig+0x10dc>
 8008792:	2b09      	cmp	r3, #9
 8008794:	d020      	beq.n	80087d8 <UART_SetConfig+0x10e0>
 8008796:	2b0a      	cmp	r3, #10
 8008798:	d020      	beq.n	80087dc <UART_SetConfig+0x10e4>
 800879a:	2b0b      	cmp	r3, #11
 800879c:	d001      	beq.n	80087a2 <UART_SetConfig+0x10aa>
 800879e:	4b76      	ldr	r3, [pc, #472]	; (8008978 <UART_SetConfig+0x1280>)
 80087a0:	e002      	b.n	80087a8 <UART_SetConfig+0x10b0>
 80087a2:	4b76      	ldr	r3, [pc, #472]	; (800897c <UART_SetConfig+0x1284>)
 80087a4:	e000      	b.n	80087a8 <UART_SetConfig+0x10b0>
 80087a6:	4b74      	ldr	r3, [pc, #464]	; (8008978 <UART_SetConfig+0x1280>)
 80087a8:	6862      	ldr	r2, [r4, #4]
 80087aa:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80087ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80087b2:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80087b4:	2000      	movs	r0, #0
 80087b6:	e6ab      	b.n	8008510 <UART_SetConfig+0xe18>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80087b8:	4b6e      	ldr	r3, [pc, #440]	; (8008974 <UART_SetConfig+0x127c>)
 80087ba:	e7f5      	b.n	80087a8 <UART_SetConfig+0x10b0>
 80087bc:	4b70      	ldr	r3, [pc, #448]	; (8008980 <UART_SetConfig+0x1288>)
 80087be:	e7f3      	b.n	80087a8 <UART_SetConfig+0x10b0>
 80087c0:	4b70      	ldr	r3, [pc, #448]	; (8008984 <UART_SetConfig+0x128c>)
 80087c2:	e7f1      	b.n	80087a8 <UART_SetConfig+0x10b0>
 80087c4:	4b70      	ldr	r3, [pc, #448]	; (8008988 <UART_SetConfig+0x1290>)
 80087c6:	e7ef      	b.n	80087a8 <UART_SetConfig+0x10b0>
 80087c8:	4b70      	ldr	r3, [pc, #448]	; (800898c <UART_SetConfig+0x1294>)
 80087ca:	e7ed      	b.n	80087a8 <UART_SetConfig+0x10b0>
 80087cc:	4b70      	ldr	r3, [pc, #448]	; (8008990 <UART_SetConfig+0x1298>)
 80087ce:	e7eb      	b.n	80087a8 <UART_SetConfig+0x10b0>
 80087d0:	4b70      	ldr	r3, [pc, #448]	; (8008994 <UART_SetConfig+0x129c>)
 80087d2:	e7e9      	b.n	80087a8 <UART_SetConfig+0x10b0>
 80087d4:	4b70      	ldr	r3, [pc, #448]	; (8008998 <UART_SetConfig+0x12a0>)
 80087d6:	e7e7      	b.n	80087a8 <UART_SetConfig+0x10b0>
 80087d8:	4b70      	ldr	r3, [pc, #448]	; (800899c <UART_SetConfig+0x12a4>)
 80087da:	e7e5      	b.n	80087a8 <UART_SetConfig+0x10b0>
 80087dc:	4b70      	ldr	r3, [pc, #448]	; (80089a0 <UART_SetConfig+0x12a8>)
 80087de:	e7e3      	b.n	80087a8 <UART_SetConfig+0x10b0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80087e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80087e2:	b1c3      	cbz	r3, 8008816 <UART_SetConfig+0x111e>
 80087e4:	2b01      	cmp	r3, #1
 80087e6:	d01f      	beq.n	8008828 <UART_SetConfig+0x1130>
 80087e8:	2b02      	cmp	r3, #2
 80087ea:	d01f      	beq.n	800882c <UART_SetConfig+0x1134>
 80087ec:	2b03      	cmp	r3, #3
 80087ee:	d01f      	beq.n	8008830 <UART_SetConfig+0x1138>
 80087f0:	2b04      	cmp	r3, #4
 80087f2:	d01f      	beq.n	8008834 <UART_SetConfig+0x113c>
 80087f4:	2b05      	cmp	r3, #5
 80087f6:	d01f      	beq.n	8008838 <UART_SetConfig+0x1140>
 80087f8:	2b06      	cmp	r3, #6
 80087fa:	d01f      	beq.n	800883c <UART_SetConfig+0x1144>
 80087fc:	2b07      	cmp	r3, #7
 80087fe:	d01f      	beq.n	8008840 <UART_SetConfig+0x1148>
 8008800:	2b08      	cmp	r3, #8
 8008802:	d01f      	beq.n	8008844 <UART_SetConfig+0x114c>
 8008804:	2b09      	cmp	r3, #9
 8008806:	d01f      	beq.n	8008848 <UART_SetConfig+0x1150>
 8008808:	2b0a      	cmp	r3, #10
 800880a:	d01f      	beq.n	800884c <UART_SetConfig+0x1154>
 800880c:	2b0b      	cmp	r3, #11
 800880e:	d120      	bne.n	8008852 <UART_SetConfig+0x115a>
 8008810:	f647 2312 	movw	r3, #31250	; 0x7a12
 8008814:	e000      	b.n	8008818 <UART_SetConfig+0x1120>
 8008816:	4b5f      	ldr	r3, [pc, #380]	; (8008994 <UART_SetConfig+0x129c>)
 8008818:	6862      	ldr	r2, [r4, #4]
 800881a:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800881e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008822:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8008824:	2000      	movs	r0, #0
        break;
 8008826:	e673      	b.n	8008510 <UART_SetConfig+0xe18>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008828:	4b5b      	ldr	r3, [pc, #364]	; (8008998 <UART_SetConfig+0x12a0>)
 800882a:	e7f5      	b.n	8008818 <UART_SetConfig+0x1120>
 800882c:	4b5b      	ldr	r3, [pc, #364]	; (800899c <UART_SetConfig+0x12a4>)
 800882e:	e7f3      	b.n	8008818 <UART_SetConfig+0x1120>
 8008830:	4b5c      	ldr	r3, [pc, #368]	; (80089a4 <UART_SetConfig+0x12ac>)
 8008832:	e7f1      	b.n	8008818 <UART_SetConfig+0x1120>
 8008834:	4b5a      	ldr	r3, [pc, #360]	; (80089a0 <UART_SetConfig+0x12a8>)
 8008836:	e7ef      	b.n	8008818 <UART_SetConfig+0x1120>
 8008838:	4b5b      	ldr	r3, [pc, #364]	; (80089a8 <UART_SetConfig+0x12b0>)
 800883a:	e7ed      	b.n	8008818 <UART_SetConfig+0x1120>
 800883c:	4b5b      	ldr	r3, [pc, #364]	; (80089ac <UART_SetConfig+0x12b4>)
 800883e:	e7eb      	b.n	8008818 <UART_SetConfig+0x1120>
 8008840:	4b4e      	ldr	r3, [pc, #312]	; (800897c <UART_SetConfig+0x1284>)
 8008842:	e7e9      	b.n	8008818 <UART_SetConfig+0x1120>
 8008844:	4b5a      	ldr	r3, [pc, #360]	; (80089b0 <UART_SetConfig+0x12b8>)
 8008846:	e7e7      	b.n	8008818 <UART_SetConfig+0x1120>
 8008848:	4b5a      	ldr	r3, [pc, #360]	; (80089b4 <UART_SetConfig+0x12bc>)
 800884a:	e7e5      	b.n	8008818 <UART_SetConfig+0x1120>
 800884c:	f24f 4324 	movw	r3, #62500	; 0xf424
 8008850:	e7e2      	b.n	8008818 <UART_SetConfig+0x1120>
 8008852:	4b50      	ldr	r3, [pc, #320]	; (8008994 <UART_SetConfig+0x129c>)
 8008854:	e7e0      	b.n	8008818 <UART_SetConfig+0x1120>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008856:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008858:	b1c3      	cbz	r3, 800888c <UART_SetConfig+0x1194>
 800885a:	2b01      	cmp	r3, #1
 800885c:	d020      	beq.n	80088a0 <UART_SetConfig+0x11a8>
 800885e:	2b02      	cmp	r3, #2
 8008860:	d021      	beq.n	80088a6 <UART_SetConfig+0x11ae>
 8008862:	2b03      	cmp	r3, #3
 8008864:	d022      	beq.n	80088ac <UART_SetConfig+0x11b4>
 8008866:	2b04      	cmp	r3, #4
 8008868:	d023      	beq.n	80088b2 <UART_SetConfig+0x11ba>
 800886a:	2b05      	cmp	r3, #5
 800886c:	d024      	beq.n	80088b8 <UART_SetConfig+0x11c0>
 800886e:	2b06      	cmp	r3, #6
 8008870:	d025      	beq.n	80088be <UART_SetConfig+0x11c6>
 8008872:	2b07      	cmp	r3, #7
 8008874:	d026      	beq.n	80088c4 <UART_SetConfig+0x11cc>
 8008876:	2b08      	cmp	r3, #8
 8008878:	d027      	beq.n	80088ca <UART_SetConfig+0x11d2>
 800887a:	2b09      	cmp	r3, #9
 800887c:	d028      	beq.n	80088d0 <UART_SetConfig+0x11d8>
 800887e:	2b0a      	cmp	r3, #10
 8008880:	d029      	beq.n	80088d6 <UART_SetConfig+0x11de>
 8008882:	2b0b      	cmp	r3, #11
 8008884:	d12a      	bne.n	80088dc <UART_SetConfig+0x11e4>
 8008886:	f44f 7380 	mov.w	r3, #256	; 0x100
 800888a:	e001      	b.n	8008890 <UART_SetConfig+0x1198>
 800888c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008890:	6862      	ldr	r2, [r4, #4]
 8008892:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8008896:	fbb3 f3f2 	udiv	r3, r3, r2
 800889a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800889c:	2000      	movs	r0, #0
        break;
 800889e:	e637      	b.n	8008510 <UART_SetConfig+0xe18>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80088a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80088a4:	e7f4      	b.n	8008890 <UART_SetConfig+0x1198>
 80088a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80088aa:	e7f1      	b.n	8008890 <UART_SetConfig+0x1198>
 80088ac:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 80088b0:	e7ee      	b.n	8008890 <UART_SetConfig+0x1198>
 80088b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80088b6:	e7eb      	b.n	8008890 <UART_SetConfig+0x1198>
 80088b8:	f641 1398 	movw	r3, #6552	; 0x1998
 80088bc:	e7e8      	b.n	8008890 <UART_SetConfig+0x1198>
 80088be:	f241 5354 	movw	r3, #5460	; 0x1554
 80088c2:	e7e5      	b.n	8008890 <UART_SetConfig+0x1198>
 80088c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80088c8:	e7e2      	b.n	8008890 <UART_SetConfig+0x1198>
 80088ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80088ce:	e7df      	b.n	8008890 <UART_SetConfig+0x1198>
 80088d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80088d4:	e7dc      	b.n	8008890 <UART_SetConfig+0x1198>
 80088d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088da:	e7d9      	b.n	8008890 <UART_SetConfig+0x1198>
 80088dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80088e0:	e7d6      	b.n	8008890 <UART_SetConfig+0x1198>
        ret = HAL_ERROR;
 80088e2:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 80088e4:	2300      	movs	r3, #0
 80088e6:	e613      	b.n	8008510 <UART_SetConfig+0xe18>
        pclk = HAL_RCC_GetPCLK1Freq();
 80088e8:	f7fd fa12 	bl	8005d10 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80088ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80088ee:	b1d3      	cbz	r3, 8008926 <UART_SetConfig+0x122e>
 80088f0:	2b01      	cmp	r3, #1
 80088f2:	d036      	beq.n	8008962 <UART_SetConfig+0x126a>
 80088f4:	2b02      	cmp	r3, #2
 80088f6:	d036      	beq.n	8008966 <UART_SetConfig+0x126e>
 80088f8:	2b03      	cmp	r3, #3
 80088fa:	d036      	beq.n	800896a <UART_SetConfig+0x1272>
 80088fc:	2b04      	cmp	r3, #4
 80088fe:	d073      	beq.n	80089e8 <UART_SetConfig+0x12f0>
 8008900:	2b05      	cmp	r3, #5
 8008902:	d073      	beq.n	80089ec <UART_SetConfig+0x12f4>
 8008904:	2b06      	cmp	r3, #6
 8008906:	d073      	beq.n	80089f0 <UART_SetConfig+0x12f8>
 8008908:	2b07      	cmp	r3, #7
 800890a:	d073      	beq.n	80089f4 <UART_SetConfig+0x12fc>
 800890c:	2b08      	cmp	r3, #8
 800890e:	d073      	beq.n	80089f8 <UART_SetConfig+0x1300>
 8008910:	2b09      	cmp	r3, #9
 8008912:	d073      	beq.n	80089fc <UART_SetConfig+0x1304>
 8008914:	2b0a      	cmp	r3, #10
 8008916:	d073      	beq.n	8008a00 <UART_SetConfig+0x1308>
 8008918:	2b0b      	cmp	r3, #11
 800891a:	d001      	beq.n	8008920 <UART_SetConfig+0x1228>
 800891c:	2301      	movs	r3, #1
 800891e:	e003      	b.n	8008928 <UART_SetConfig+0x1230>
 8008920:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008924:	e000      	b.n	8008928 <UART_SetConfig+0x1230>
 8008926:	2301      	movs	r3, #1
 8008928:	fbb0 f3f3 	udiv	r3, r0, r3
 800892c:	6862      	ldr	r2, [r4, #4]
 800892e:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8008932:	fbb3 f3f2 	udiv	r3, r3, r2
 8008936:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8008938:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800893a:	f1a3 0110 	sub.w	r1, r3, #16
 800893e:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8008942:	4291      	cmp	r1, r2
 8008944:	f200 822a 	bhi.w	8008d9c <UART_SetConfig+0x16a4>
      huart->Instance->BRR = usartdiv;
 8008948:	6822      	ldr	r2, [r4, #0]
 800894a:	60d3      	str	r3, [r2, #12]
  huart->NbTxDataToProcess = 1;
 800894c:	2301      	movs	r3, #1
 800894e:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008952:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 8008956:	2300      	movs	r3, #0
 8008958:	66e3      	str	r3, [r4, #108]	; 0x6c
  huart->TxISR = NULL;
 800895a:	6723      	str	r3, [r4, #112]	; 0x70
}
 800895c:	b007      	add	sp, #28
 800895e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008962:	2302      	movs	r3, #2
 8008964:	e7e0      	b.n	8008928 <UART_SetConfig+0x1230>
 8008966:	2304      	movs	r3, #4
 8008968:	e7de      	b.n	8008928 <UART_SetConfig+0x1230>
 800896a:	2306      	movs	r3, #6
 800896c:	e7dc      	b.n	8008928 <UART_SetConfig+0x1230>
 800896e:	bf00      	nop
 8008970:	58024400 	.word	0x58024400
 8008974:	03d09000 	.word	0x03d09000
 8008978:	07a12000 	.word	0x07a12000
 800897c:	0007a120 	.word	0x0007a120
 8008980:	01e84800 	.word	0x01e84800
 8008984:	01458554 	.word	0x01458554
 8008988:	00f42400 	.word	0x00f42400
 800898c:	00c35000 	.word	0x00c35000
 8008990:	00a2c2aa 	.word	0x00a2c2aa
 8008994:	007a1200 	.word	0x007a1200
 8008998:	003d0900 	.word	0x003d0900
 800899c:	001e8480 	.word	0x001e8480
 80089a0:	000f4240 	.word	0x000f4240
 80089a4:	00145854 	.word	0x00145854
 80089a8:	000c3500 	.word	0x000c3500
 80089ac:	000a2c2a 	.word	0x000a2c2a
 80089b0:	0003d090 	.word	0x0003d090
 80089b4:	0001e848 	.word	0x0001e848
 80089b8:	0a2c2a00 	.word	0x0a2c2a00
 80089bc:	00000000 	.word	0x00000000
 80089c0:	05161500 	.word	0x05161500
 80089c4:	00000000 	.word	0x00000000
 80089c8:	d0900000 	.word	0xd0900000
 80089cc:	3d090000 	.word	0x3d090000
 80089d0:	1e848000 	.word	0x1e848000
 80089d4:	0f424000 	.word	0x0f424000
 80089d8:	061a8000 	.word	0x061a8000
 80089dc:	00155500 	.word	0x00155500
 80089e0:	000ccc00 	.word	0x000ccc00
 80089e4:	000aaa00 	.word	0x000aaa00
 80089e8:	2308      	movs	r3, #8
 80089ea:	e79d      	b.n	8008928 <UART_SetConfig+0x1230>
 80089ec:	230a      	movs	r3, #10
 80089ee:	e79b      	b.n	8008928 <UART_SetConfig+0x1230>
 80089f0:	230c      	movs	r3, #12
 80089f2:	e799      	b.n	8008928 <UART_SetConfig+0x1230>
 80089f4:	2310      	movs	r3, #16
 80089f6:	e797      	b.n	8008928 <UART_SetConfig+0x1230>
 80089f8:	2320      	movs	r3, #32
 80089fa:	e795      	b.n	8008928 <UART_SetConfig+0x1230>
 80089fc:	2340      	movs	r3, #64	; 0x40
 80089fe:	e793      	b.n	8008928 <UART_SetConfig+0x1230>
 8008a00:	2380      	movs	r3, #128	; 0x80
 8008a02:	e791      	b.n	8008928 <UART_SetConfig+0x1230>
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a04:	f7fd f996 	bl	8005d34 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a0a:	b1d3      	cbz	r3, 8008a42 <UART_SetConfig+0x134a>
 8008a0c:	2b01      	cmp	r3, #1
 8008a0e:	d023      	beq.n	8008a58 <UART_SetConfig+0x1360>
 8008a10:	2b02      	cmp	r3, #2
 8008a12:	d023      	beq.n	8008a5c <UART_SetConfig+0x1364>
 8008a14:	2b03      	cmp	r3, #3
 8008a16:	d023      	beq.n	8008a60 <UART_SetConfig+0x1368>
 8008a18:	2b04      	cmp	r3, #4
 8008a1a:	d023      	beq.n	8008a64 <UART_SetConfig+0x136c>
 8008a1c:	2b05      	cmp	r3, #5
 8008a1e:	d023      	beq.n	8008a68 <UART_SetConfig+0x1370>
 8008a20:	2b06      	cmp	r3, #6
 8008a22:	d023      	beq.n	8008a6c <UART_SetConfig+0x1374>
 8008a24:	2b07      	cmp	r3, #7
 8008a26:	d023      	beq.n	8008a70 <UART_SetConfig+0x1378>
 8008a28:	2b08      	cmp	r3, #8
 8008a2a:	d023      	beq.n	8008a74 <UART_SetConfig+0x137c>
 8008a2c:	2b09      	cmp	r3, #9
 8008a2e:	d023      	beq.n	8008a78 <UART_SetConfig+0x1380>
 8008a30:	2b0a      	cmp	r3, #10
 8008a32:	d023      	beq.n	8008a7c <UART_SetConfig+0x1384>
 8008a34:	2b0b      	cmp	r3, #11
 8008a36:	d001      	beq.n	8008a3c <UART_SetConfig+0x1344>
 8008a38:	2301      	movs	r3, #1
 8008a3a:	e003      	b.n	8008a44 <UART_SetConfig+0x134c>
 8008a3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008a40:	e000      	b.n	8008a44 <UART_SetConfig+0x134c>
 8008a42:	2301      	movs	r3, #1
 8008a44:	fbb0 f3f3 	udiv	r3, r0, r3
 8008a48:	6862      	ldr	r2, [r4, #4]
 8008a4a:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8008a4e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a52:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8008a54:	2000      	movs	r0, #0
        break;
 8008a56:	e770      	b.n	800893a <UART_SetConfig+0x1242>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a58:	2302      	movs	r3, #2
 8008a5a:	e7f3      	b.n	8008a44 <UART_SetConfig+0x134c>
 8008a5c:	2304      	movs	r3, #4
 8008a5e:	e7f1      	b.n	8008a44 <UART_SetConfig+0x134c>
 8008a60:	2306      	movs	r3, #6
 8008a62:	e7ef      	b.n	8008a44 <UART_SetConfig+0x134c>
 8008a64:	2308      	movs	r3, #8
 8008a66:	e7ed      	b.n	8008a44 <UART_SetConfig+0x134c>
 8008a68:	230a      	movs	r3, #10
 8008a6a:	e7eb      	b.n	8008a44 <UART_SetConfig+0x134c>
 8008a6c:	230c      	movs	r3, #12
 8008a6e:	e7e9      	b.n	8008a44 <UART_SetConfig+0x134c>
 8008a70:	2310      	movs	r3, #16
 8008a72:	e7e7      	b.n	8008a44 <UART_SetConfig+0x134c>
 8008a74:	2320      	movs	r3, #32
 8008a76:	e7e5      	b.n	8008a44 <UART_SetConfig+0x134c>
 8008a78:	2340      	movs	r3, #64	; 0x40
 8008a7a:	e7e3      	b.n	8008a44 <UART_SetConfig+0x134c>
 8008a7c:	2380      	movs	r3, #128	; 0x80
 8008a7e:	e7e1      	b.n	8008a44 <UART_SetConfig+0x134c>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a80:	a803      	add	r0, sp, #12
 8008a82:	f7fd ff5b 	bl	800693c <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a86:	9b04      	ldr	r3, [sp, #16]
 8008a88:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008a8a:	b1d2      	cbz	r2, 8008ac2 <UART_SetConfig+0x13ca>
 8008a8c:	2a01      	cmp	r2, #1
 8008a8e:	d023      	beq.n	8008ad8 <UART_SetConfig+0x13e0>
 8008a90:	2a02      	cmp	r2, #2
 8008a92:	d023      	beq.n	8008adc <UART_SetConfig+0x13e4>
 8008a94:	2a03      	cmp	r2, #3
 8008a96:	d023      	beq.n	8008ae0 <UART_SetConfig+0x13e8>
 8008a98:	2a04      	cmp	r2, #4
 8008a9a:	d023      	beq.n	8008ae4 <UART_SetConfig+0x13ec>
 8008a9c:	2a05      	cmp	r2, #5
 8008a9e:	d023      	beq.n	8008ae8 <UART_SetConfig+0x13f0>
 8008aa0:	2a06      	cmp	r2, #6
 8008aa2:	d023      	beq.n	8008aec <UART_SetConfig+0x13f4>
 8008aa4:	2a07      	cmp	r2, #7
 8008aa6:	d023      	beq.n	8008af0 <UART_SetConfig+0x13f8>
 8008aa8:	2a08      	cmp	r2, #8
 8008aaa:	d023      	beq.n	8008af4 <UART_SetConfig+0x13fc>
 8008aac:	2a09      	cmp	r2, #9
 8008aae:	d023      	beq.n	8008af8 <UART_SetConfig+0x1400>
 8008ab0:	2a0a      	cmp	r2, #10
 8008ab2:	d023      	beq.n	8008afc <UART_SetConfig+0x1404>
 8008ab4:	2a0b      	cmp	r2, #11
 8008ab6:	d001      	beq.n	8008abc <UART_SetConfig+0x13c4>
 8008ab8:	2201      	movs	r2, #1
 8008aba:	e003      	b.n	8008ac4 <UART_SetConfig+0x13cc>
 8008abc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008ac0:	e000      	b.n	8008ac4 <UART_SetConfig+0x13cc>
 8008ac2:	2201      	movs	r2, #1
 8008ac4:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ac8:	6862      	ldr	r2, [r4, #4]
 8008aca:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8008ace:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ad2:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8008ad4:	2000      	movs	r0, #0
        break;
 8008ad6:	e730      	b.n	800893a <UART_SetConfig+0x1242>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ad8:	2202      	movs	r2, #2
 8008ada:	e7f3      	b.n	8008ac4 <UART_SetConfig+0x13cc>
 8008adc:	2204      	movs	r2, #4
 8008ade:	e7f1      	b.n	8008ac4 <UART_SetConfig+0x13cc>
 8008ae0:	2206      	movs	r2, #6
 8008ae2:	e7ef      	b.n	8008ac4 <UART_SetConfig+0x13cc>
 8008ae4:	2208      	movs	r2, #8
 8008ae6:	e7ed      	b.n	8008ac4 <UART_SetConfig+0x13cc>
 8008ae8:	220a      	movs	r2, #10
 8008aea:	e7eb      	b.n	8008ac4 <UART_SetConfig+0x13cc>
 8008aec:	220c      	movs	r2, #12
 8008aee:	e7e9      	b.n	8008ac4 <UART_SetConfig+0x13cc>
 8008af0:	2210      	movs	r2, #16
 8008af2:	e7e7      	b.n	8008ac4 <UART_SetConfig+0x13cc>
 8008af4:	2220      	movs	r2, #32
 8008af6:	e7e5      	b.n	8008ac4 <UART_SetConfig+0x13cc>
 8008af8:	2240      	movs	r2, #64	; 0x40
 8008afa:	e7e3      	b.n	8008ac4 <UART_SetConfig+0x13cc>
 8008afc:	2280      	movs	r2, #128	; 0x80
 8008afe:	e7e1      	b.n	8008ac4 <UART_SetConfig+0x13cc>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008b00:	4668      	mov	r0, sp
 8008b02:	f7fe f819 	bl	8006b38 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b06:	9b01      	ldr	r3, [sp, #4]
 8008b08:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008b0a:	b1d2      	cbz	r2, 8008b42 <UART_SetConfig+0x144a>
 8008b0c:	2a01      	cmp	r2, #1
 8008b0e:	d023      	beq.n	8008b58 <UART_SetConfig+0x1460>
 8008b10:	2a02      	cmp	r2, #2
 8008b12:	d023      	beq.n	8008b5c <UART_SetConfig+0x1464>
 8008b14:	2a03      	cmp	r2, #3
 8008b16:	d023      	beq.n	8008b60 <UART_SetConfig+0x1468>
 8008b18:	2a04      	cmp	r2, #4
 8008b1a:	d023      	beq.n	8008b64 <UART_SetConfig+0x146c>
 8008b1c:	2a05      	cmp	r2, #5
 8008b1e:	d023      	beq.n	8008b68 <UART_SetConfig+0x1470>
 8008b20:	2a06      	cmp	r2, #6
 8008b22:	d023      	beq.n	8008b6c <UART_SetConfig+0x1474>
 8008b24:	2a07      	cmp	r2, #7
 8008b26:	d023      	beq.n	8008b70 <UART_SetConfig+0x1478>
 8008b28:	2a08      	cmp	r2, #8
 8008b2a:	d023      	beq.n	8008b74 <UART_SetConfig+0x147c>
 8008b2c:	2a09      	cmp	r2, #9
 8008b2e:	d023      	beq.n	8008b78 <UART_SetConfig+0x1480>
 8008b30:	2a0a      	cmp	r2, #10
 8008b32:	d023      	beq.n	8008b7c <UART_SetConfig+0x1484>
 8008b34:	2a0b      	cmp	r2, #11
 8008b36:	d001      	beq.n	8008b3c <UART_SetConfig+0x1444>
 8008b38:	2201      	movs	r2, #1
 8008b3a:	e003      	b.n	8008b44 <UART_SetConfig+0x144c>
 8008b3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008b40:	e000      	b.n	8008b44 <UART_SetConfig+0x144c>
 8008b42:	2201      	movs	r2, #1
 8008b44:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b48:	6862      	ldr	r2, [r4, #4]
 8008b4a:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8008b4e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b52:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8008b54:	2000      	movs	r0, #0
        break;
 8008b56:	e6f0      	b.n	800893a <UART_SetConfig+0x1242>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b58:	2202      	movs	r2, #2
 8008b5a:	e7f3      	b.n	8008b44 <UART_SetConfig+0x144c>
 8008b5c:	2204      	movs	r2, #4
 8008b5e:	e7f1      	b.n	8008b44 <UART_SetConfig+0x144c>
 8008b60:	2206      	movs	r2, #6
 8008b62:	e7ef      	b.n	8008b44 <UART_SetConfig+0x144c>
 8008b64:	2208      	movs	r2, #8
 8008b66:	e7ed      	b.n	8008b44 <UART_SetConfig+0x144c>
 8008b68:	220a      	movs	r2, #10
 8008b6a:	e7eb      	b.n	8008b44 <UART_SetConfig+0x144c>
 8008b6c:	220c      	movs	r2, #12
 8008b6e:	e7e9      	b.n	8008b44 <UART_SetConfig+0x144c>
 8008b70:	2210      	movs	r2, #16
 8008b72:	e7e7      	b.n	8008b44 <UART_SetConfig+0x144c>
 8008b74:	2220      	movs	r2, #32
 8008b76:	e7e5      	b.n	8008b44 <UART_SetConfig+0x144c>
 8008b78:	2240      	movs	r2, #64	; 0x40
 8008b7a:	e7e3      	b.n	8008b44 <UART_SetConfig+0x144c>
 8008b7c:	2280      	movs	r2, #128	; 0x80
 8008b7e:	e7e1      	b.n	8008b44 <UART_SetConfig+0x144c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008b80:	4b87      	ldr	r3, [pc, #540]	; (8008da0 <UART_SetConfig+0x16a8>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f013 0f20 	tst.w	r3, #32
 8008b88:	d041      	beq.n	8008c0e <UART_SetConfig+0x1516>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b8a:	4b85      	ldr	r3, [pc, #532]	; (8008da0 <UART_SetConfig+0x16a8>)
 8008b8c:	681a      	ldr	r2, [r3, #0]
 8008b8e:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8008b92:	4b84      	ldr	r3, [pc, #528]	; (8008da4 <UART_SetConfig+0x16ac>)
 8008b94:	40d3      	lsrs	r3, r2
 8008b96:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008b98:	b1c2      	cbz	r2, 8008bcc <UART_SetConfig+0x14d4>
 8008b9a:	2a01      	cmp	r2, #1
 8008b9c:	d021      	beq.n	8008be2 <UART_SetConfig+0x14ea>
 8008b9e:	2a02      	cmp	r2, #2
 8008ba0:	d021      	beq.n	8008be6 <UART_SetConfig+0x14ee>
 8008ba2:	2a03      	cmp	r2, #3
 8008ba4:	d021      	beq.n	8008bea <UART_SetConfig+0x14f2>
 8008ba6:	2a04      	cmp	r2, #4
 8008ba8:	d021      	beq.n	8008bee <UART_SetConfig+0x14f6>
 8008baa:	2a05      	cmp	r2, #5
 8008bac:	d021      	beq.n	8008bf2 <UART_SetConfig+0x14fa>
 8008bae:	2a06      	cmp	r2, #6
 8008bb0:	d021      	beq.n	8008bf6 <UART_SetConfig+0x14fe>
 8008bb2:	2a07      	cmp	r2, #7
 8008bb4:	d021      	beq.n	8008bfa <UART_SetConfig+0x1502>
 8008bb6:	2a08      	cmp	r2, #8
 8008bb8:	d021      	beq.n	8008bfe <UART_SetConfig+0x1506>
 8008bba:	2a09      	cmp	r2, #9
 8008bbc:	d021      	beq.n	8008c02 <UART_SetConfig+0x150a>
 8008bbe:	2a0a      	cmp	r2, #10
 8008bc0:	d021      	beq.n	8008c06 <UART_SetConfig+0x150e>
 8008bc2:	2a0b      	cmp	r2, #11
 8008bc4:	d121      	bne.n	8008c0a <UART_SetConfig+0x1512>
 8008bc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008bca:	e000      	b.n	8008bce <UART_SetConfig+0x14d6>
 8008bcc:	2201      	movs	r2, #1
 8008bce:	fbb3 f3f2 	udiv	r3, r3, r2
 8008bd2:	6862      	ldr	r2, [r4, #4]
 8008bd4:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8008bd8:	fbb3 f3f2 	udiv	r3, r3, r2
 8008bdc:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8008bde:	2000      	movs	r0, #0
 8008be0:	e6ab      	b.n	800893a <UART_SetConfig+0x1242>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008be2:	2202      	movs	r2, #2
 8008be4:	e7f3      	b.n	8008bce <UART_SetConfig+0x14d6>
 8008be6:	2204      	movs	r2, #4
 8008be8:	e7f1      	b.n	8008bce <UART_SetConfig+0x14d6>
 8008bea:	2206      	movs	r2, #6
 8008bec:	e7ef      	b.n	8008bce <UART_SetConfig+0x14d6>
 8008bee:	2208      	movs	r2, #8
 8008bf0:	e7ed      	b.n	8008bce <UART_SetConfig+0x14d6>
 8008bf2:	220a      	movs	r2, #10
 8008bf4:	e7eb      	b.n	8008bce <UART_SetConfig+0x14d6>
 8008bf6:	220c      	movs	r2, #12
 8008bf8:	e7e9      	b.n	8008bce <UART_SetConfig+0x14d6>
 8008bfa:	2210      	movs	r2, #16
 8008bfc:	e7e7      	b.n	8008bce <UART_SetConfig+0x14d6>
 8008bfe:	2220      	movs	r2, #32
 8008c00:	e7e5      	b.n	8008bce <UART_SetConfig+0x14d6>
 8008c02:	2240      	movs	r2, #64	; 0x40
 8008c04:	e7e3      	b.n	8008bce <UART_SetConfig+0x14d6>
 8008c06:	2280      	movs	r2, #128	; 0x80
 8008c08:	e7e1      	b.n	8008bce <UART_SetConfig+0x14d6>
 8008c0a:	2201      	movs	r2, #1
 8008c0c:	e7df      	b.n	8008bce <UART_SetConfig+0x14d6>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c10:	b1bb      	cbz	r3, 8008c42 <UART_SetConfig+0x154a>
 8008c12:	2b01      	cmp	r3, #1
 8008c14:	d01e      	beq.n	8008c54 <UART_SetConfig+0x155c>
 8008c16:	2b02      	cmp	r3, #2
 8008c18:	d01e      	beq.n	8008c58 <UART_SetConfig+0x1560>
 8008c1a:	2b03      	cmp	r3, #3
 8008c1c:	d01e      	beq.n	8008c5c <UART_SetConfig+0x1564>
 8008c1e:	2b04      	cmp	r3, #4
 8008c20:	d01e      	beq.n	8008c60 <UART_SetConfig+0x1568>
 8008c22:	2b05      	cmp	r3, #5
 8008c24:	d01e      	beq.n	8008c64 <UART_SetConfig+0x156c>
 8008c26:	2b06      	cmp	r3, #6
 8008c28:	d01e      	beq.n	8008c68 <UART_SetConfig+0x1570>
 8008c2a:	2b07      	cmp	r3, #7
 8008c2c:	d01e      	beq.n	8008c6c <UART_SetConfig+0x1574>
 8008c2e:	2b08      	cmp	r3, #8
 8008c30:	d01e      	beq.n	8008c70 <UART_SetConfig+0x1578>
 8008c32:	2b09      	cmp	r3, #9
 8008c34:	d01e      	beq.n	8008c74 <UART_SetConfig+0x157c>
 8008c36:	2b0a      	cmp	r3, #10
 8008c38:	d01e      	beq.n	8008c78 <UART_SetConfig+0x1580>
 8008c3a:	2b0b      	cmp	r3, #11
 8008c3c:	d11e      	bne.n	8008c7c <UART_SetConfig+0x1584>
 8008c3e:	4b5a      	ldr	r3, [pc, #360]	; (8008da8 <UART_SetConfig+0x16b0>)
 8008c40:	e000      	b.n	8008c44 <UART_SetConfig+0x154c>
 8008c42:	4b58      	ldr	r3, [pc, #352]	; (8008da4 <UART_SetConfig+0x16ac>)
 8008c44:	6862      	ldr	r2, [r4, #4]
 8008c46:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8008c4a:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c4e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8008c50:	2000      	movs	r0, #0
 8008c52:	e672      	b.n	800893a <UART_SetConfig+0x1242>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c54:	4b55      	ldr	r3, [pc, #340]	; (8008dac <UART_SetConfig+0x16b4>)
 8008c56:	e7f5      	b.n	8008c44 <UART_SetConfig+0x154c>
 8008c58:	4b55      	ldr	r3, [pc, #340]	; (8008db0 <UART_SetConfig+0x16b8>)
 8008c5a:	e7f3      	b.n	8008c44 <UART_SetConfig+0x154c>
 8008c5c:	4b55      	ldr	r3, [pc, #340]	; (8008db4 <UART_SetConfig+0x16bc>)
 8008c5e:	e7f1      	b.n	8008c44 <UART_SetConfig+0x154c>
 8008c60:	4b55      	ldr	r3, [pc, #340]	; (8008db8 <UART_SetConfig+0x16c0>)
 8008c62:	e7ef      	b.n	8008c44 <UART_SetConfig+0x154c>
 8008c64:	4b55      	ldr	r3, [pc, #340]	; (8008dbc <UART_SetConfig+0x16c4>)
 8008c66:	e7ed      	b.n	8008c44 <UART_SetConfig+0x154c>
 8008c68:	4b55      	ldr	r3, [pc, #340]	; (8008dc0 <UART_SetConfig+0x16c8>)
 8008c6a:	e7eb      	b.n	8008c44 <UART_SetConfig+0x154c>
 8008c6c:	4b55      	ldr	r3, [pc, #340]	; (8008dc4 <UART_SetConfig+0x16cc>)
 8008c6e:	e7e9      	b.n	8008c44 <UART_SetConfig+0x154c>
 8008c70:	4b55      	ldr	r3, [pc, #340]	; (8008dc8 <UART_SetConfig+0x16d0>)
 8008c72:	e7e7      	b.n	8008c44 <UART_SetConfig+0x154c>
 8008c74:	4b55      	ldr	r3, [pc, #340]	; (8008dcc <UART_SetConfig+0x16d4>)
 8008c76:	e7e5      	b.n	8008c44 <UART_SetConfig+0x154c>
 8008c78:	4b55      	ldr	r3, [pc, #340]	; (8008dd0 <UART_SetConfig+0x16d8>)
 8008c7a:	e7e3      	b.n	8008c44 <UART_SetConfig+0x154c>
 8008c7c:	4b49      	ldr	r3, [pc, #292]	; (8008da4 <UART_SetConfig+0x16ac>)
 8008c7e:	e7e1      	b.n	8008c44 <UART_SetConfig+0x154c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c82:	b1d3      	cbz	r3, 8008cba <UART_SetConfig+0x15c2>
 8008c84:	2b01      	cmp	r3, #1
 8008c86:	d021      	beq.n	8008ccc <UART_SetConfig+0x15d4>
 8008c88:	2b02      	cmp	r3, #2
 8008c8a:	d021      	beq.n	8008cd0 <UART_SetConfig+0x15d8>
 8008c8c:	2b03      	cmp	r3, #3
 8008c8e:	d021      	beq.n	8008cd4 <UART_SetConfig+0x15dc>
 8008c90:	2b04      	cmp	r3, #4
 8008c92:	d021      	beq.n	8008cd8 <UART_SetConfig+0x15e0>
 8008c94:	2b05      	cmp	r3, #5
 8008c96:	d021      	beq.n	8008cdc <UART_SetConfig+0x15e4>
 8008c98:	2b06      	cmp	r3, #6
 8008c9a:	d021      	beq.n	8008ce0 <UART_SetConfig+0x15e8>
 8008c9c:	2b07      	cmp	r3, #7
 8008c9e:	d021      	beq.n	8008ce4 <UART_SetConfig+0x15ec>
 8008ca0:	2b08      	cmp	r3, #8
 8008ca2:	d021      	beq.n	8008ce8 <UART_SetConfig+0x15f0>
 8008ca4:	2b09      	cmp	r3, #9
 8008ca6:	d021      	beq.n	8008cec <UART_SetConfig+0x15f4>
 8008ca8:	2b0a      	cmp	r3, #10
 8008caa:	d022      	beq.n	8008cf2 <UART_SetConfig+0x15fa>
 8008cac:	2b0b      	cmp	r3, #11
 8008cae:	d001      	beq.n	8008cb4 <UART_SetConfig+0x15bc>
 8008cb0:	4b44      	ldr	r3, [pc, #272]	; (8008dc4 <UART_SetConfig+0x16cc>)
 8008cb2:	e003      	b.n	8008cbc <UART_SetConfig+0x15c4>
 8008cb4:	f643 5309 	movw	r3, #15625	; 0x3d09
 8008cb8:	e000      	b.n	8008cbc <UART_SetConfig+0x15c4>
 8008cba:	4b42      	ldr	r3, [pc, #264]	; (8008dc4 <UART_SetConfig+0x16cc>)
 8008cbc:	6862      	ldr	r2, [r4, #4]
 8008cbe:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8008cc2:	fbb3 f3f2 	udiv	r3, r3, r2
 8008cc6:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8008cc8:	2000      	movs	r0, #0
        break;
 8008cca:	e636      	b.n	800893a <UART_SetConfig+0x1242>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ccc:	4b3e      	ldr	r3, [pc, #248]	; (8008dc8 <UART_SetConfig+0x16d0>)
 8008cce:	e7f5      	b.n	8008cbc <UART_SetConfig+0x15c4>
 8008cd0:	4b3e      	ldr	r3, [pc, #248]	; (8008dcc <UART_SetConfig+0x16d4>)
 8008cd2:	e7f3      	b.n	8008cbc <UART_SetConfig+0x15c4>
 8008cd4:	4b3f      	ldr	r3, [pc, #252]	; (8008dd4 <UART_SetConfig+0x16dc>)
 8008cd6:	e7f1      	b.n	8008cbc <UART_SetConfig+0x15c4>
 8008cd8:	4b3d      	ldr	r3, [pc, #244]	; (8008dd0 <UART_SetConfig+0x16d8>)
 8008cda:	e7ef      	b.n	8008cbc <UART_SetConfig+0x15c4>
 8008cdc:	4b3e      	ldr	r3, [pc, #248]	; (8008dd8 <UART_SetConfig+0x16e0>)
 8008cde:	e7ed      	b.n	8008cbc <UART_SetConfig+0x15c4>
 8008ce0:	4b3e      	ldr	r3, [pc, #248]	; (8008ddc <UART_SetConfig+0x16e4>)
 8008ce2:	e7eb      	b.n	8008cbc <UART_SetConfig+0x15c4>
 8008ce4:	4b30      	ldr	r3, [pc, #192]	; (8008da8 <UART_SetConfig+0x16b0>)
 8008ce6:	e7e9      	b.n	8008cbc <UART_SetConfig+0x15c4>
 8008ce8:	4b3d      	ldr	r3, [pc, #244]	; (8008de0 <UART_SetConfig+0x16e8>)
 8008cea:	e7e7      	b.n	8008cbc <UART_SetConfig+0x15c4>
 8008cec:	f24f 4324 	movw	r3, #62500	; 0xf424
 8008cf0:	e7e4      	b.n	8008cbc <UART_SetConfig+0x15c4>
 8008cf2:	f647 2312 	movw	r3, #31250	; 0x7a12
 8008cf6:	e7e1      	b.n	8008cbc <UART_SetConfig+0x15c4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008cf8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008cfa:	b1d3      	cbz	r3, 8008d32 <UART_SetConfig+0x163a>
 8008cfc:	2b01      	cmp	r3, #1
 8008cfe:	d022      	beq.n	8008d46 <UART_SetConfig+0x164e>
 8008d00:	2b02      	cmp	r3, #2
 8008d02:	d023      	beq.n	8008d4c <UART_SetConfig+0x1654>
 8008d04:	2b03      	cmp	r3, #3
 8008d06:	d024      	beq.n	8008d52 <UART_SetConfig+0x165a>
 8008d08:	2b04      	cmp	r3, #4
 8008d0a:	d025      	beq.n	8008d58 <UART_SetConfig+0x1660>
 8008d0c:	2b05      	cmp	r3, #5
 8008d0e:	d026      	beq.n	8008d5e <UART_SetConfig+0x1666>
 8008d10:	2b06      	cmp	r3, #6
 8008d12:	d027      	beq.n	8008d64 <UART_SetConfig+0x166c>
 8008d14:	2b07      	cmp	r3, #7
 8008d16:	d028      	beq.n	8008d6a <UART_SetConfig+0x1672>
 8008d18:	2b08      	cmp	r3, #8
 8008d1a:	d029      	beq.n	8008d70 <UART_SetConfig+0x1678>
 8008d1c:	2b09      	cmp	r3, #9
 8008d1e:	d02a      	beq.n	8008d76 <UART_SetConfig+0x167e>
 8008d20:	2b0a      	cmp	r3, #10
 8008d22:	d02b      	beq.n	8008d7c <UART_SetConfig+0x1684>
 8008d24:	2b0b      	cmp	r3, #11
 8008d26:	d002      	beq.n	8008d2e <UART_SetConfig+0x1636>
 8008d28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d2c:	e003      	b.n	8008d36 <UART_SetConfig+0x163e>
 8008d2e:	2380      	movs	r3, #128	; 0x80
 8008d30:	e001      	b.n	8008d36 <UART_SetConfig+0x163e>
 8008d32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d36:	6862      	ldr	r2, [r4, #4]
 8008d38:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8008d3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d40:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8008d42:	2000      	movs	r0, #0
        break;
 8008d44:	e5f9      	b.n	800893a <UART_SetConfig+0x1242>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d46:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008d4a:	e7f4      	b.n	8008d36 <UART_SetConfig+0x163e>
 8008d4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008d50:	e7f1      	b.n	8008d36 <UART_SetConfig+0x163e>
 8008d52:	f241 5355 	movw	r3, #5461	; 0x1555
 8008d56:	e7ee      	b.n	8008d36 <UART_SetConfig+0x163e>
 8008d58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d5c:	e7eb      	b.n	8008d36 <UART_SetConfig+0x163e>
 8008d5e:	f640 43cc 	movw	r3, #3276	; 0xccc
 8008d62:	e7e8      	b.n	8008d36 <UART_SetConfig+0x163e>
 8008d64:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8008d68:	e7e5      	b.n	8008d36 <UART_SetConfig+0x163e>
 8008d6a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008d6e:	e7e2      	b.n	8008d36 <UART_SetConfig+0x163e>
 8008d70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d74:	e7df      	b.n	8008d36 <UART_SetConfig+0x163e>
 8008d76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d7a:	e7dc      	b.n	8008d36 <UART_SetConfig+0x163e>
 8008d7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d80:	e7d9      	b.n	8008d36 <UART_SetConfig+0x163e>
        ret = HAL_ERROR;
 8008d82:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8008d84:	2300      	movs	r3, #0
 8008d86:	e5d8      	b.n	800893a <UART_SetConfig+0x1242>
 8008d88:	2000      	movs	r0, #0
 8008d8a:	e5df      	b.n	800894c <UART_SetConfig+0x1254>
        ret = HAL_ERROR;
 8008d8c:	2001      	movs	r0, #1
 8008d8e:	e5dd      	b.n	800894c <UART_SetConfig+0x1254>
 8008d90:	2001      	movs	r0, #1
 8008d92:	e5db      	b.n	800894c <UART_SetConfig+0x1254>
          ret = HAL_ERROR;
 8008d94:	2001      	movs	r0, #1
 8008d96:	e5d9      	b.n	800894c <UART_SetConfig+0x1254>
      ret = HAL_ERROR;
 8008d98:	2001      	movs	r0, #1
 8008d9a:	e5d7      	b.n	800894c <UART_SetConfig+0x1254>
      ret = HAL_ERROR;
 8008d9c:	2001      	movs	r0, #1
 8008d9e:	e5d5      	b.n	800894c <UART_SetConfig+0x1254>
 8008da0:	58024400 	.word	0x58024400
 8008da4:	03d09000 	.word	0x03d09000
 8008da8:	0003d090 	.word	0x0003d090
 8008dac:	01e84800 	.word	0x01e84800
 8008db0:	00f42400 	.word	0x00f42400
 8008db4:	00a2c2aa 	.word	0x00a2c2aa
 8008db8:	007a1200 	.word	0x007a1200
 8008dbc:	0061a800 	.word	0x0061a800
 8008dc0:	00516155 	.word	0x00516155
 8008dc4:	003d0900 	.word	0x003d0900
 8008dc8:	001e8480 	.word	0x001e8480
 8008dcc:	000f4240 	.word	0x000f4240
 8008dd0:	0007a120 	.word	0x0007a120
 8008dd4:	000a2c2a 	.word	0x000a2c2a
 8008dd8:	00061a80 	.word	0x00061a80
 8008ddc:	00051615 	.word	0x00051615
 8008de0:	0001e848 	.word	0x0001e848

08008de4 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008de4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008de6:	f013 0f01 	tst.w	r3, #1
 8008dea:	d006      	beq.n	8008dfa <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008dec:	6802      	ldr	r2, [r0, #0]
 8008dee:	6853      	ldr	r3, [r2, #4]
 8008df0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008df4:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8008df6:	430b      	orrs	r3, r1
 8008df8:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008dfa:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008dfc:	f013 0f02 	tst.w	r3, #2
 8008e00:	d006      	beq.n	8008e10 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008e02:	6802      	ldr	r2, [r0, #0]
 8008e04:	6853      	ldr	r3, [r2, #4]
 8008e06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008e0a:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8008e0c:	430b      	orrs	r3, r1
 8008e0e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008e10:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008e12:	f013 0f04 	tst.w	r3, #4
 8008e16:	d006      	beq.n	8008e26 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008e18:	6802      	ldr	r2, [r0, #0]
 8008e1a:	6853      	ldr	r3, [r2, #4]
 8008e1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008e20:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8008e22:	430b      	orrs	r3, r1
 8008e24:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008e26:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008e28:	f013 0f08 	tst.w	r3, #8
 8008e2c:	d006      	beq.n	8008e3c <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008e2e:	6802      	ldr	r2, [r0, #0]
 8008e30:	6853      	ldr	r3, [r2, #4]
 8008e32:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008e36:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8008e38:	430b      	orrs	r3, r1
 8008e3a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008e3c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008e3e:	f013 0f10 	tst.w	r3, #16
 8008e42:	d006      	beq.n	8008e52 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008e44:	6802      	ldr	r2, [r0, #0]
 8008e46:	6893      	ldr	r3, [r2, #8]
 8008e48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008e4c:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8008e4e:	430b      	orrs	r3, r1
 8008e50:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008e52:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008e54:	f013 0f20 	tst.w	r3, #32
 8008e58:	d006      	beq.n	8008e68 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008e5a:	6802      	ldr	r2, [r0, #0]
 8008e5c:	6893      	ldr	r3, [r2, #8]
 8008e5e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008e62:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8008e64:	430b      	orrs	r3, r1
 8008e66:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008e68:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008e6a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008e6e:	d00a      	beq.n	8008e86 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008e70:	6802      	ldr	r2, [r0, #0]
 8008e72:	6853      	ldr	r3, [r2, #4]
 8008e74:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008e78:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8008e7a:	430b      	orrs	r3, r1
 8008e7c:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008e7e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8008e80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e84:	d00b      	beq.n	8008e9e <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008e86:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008e88:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008e8c:	d006      	beq.n	8008e9c <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008e8e:	6802      	ldr	r2, [r0, #0]
 8008e90:	6853      	ldr	r3, [r2, #4]
 8008e92:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8008e96:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8008e98:	430b      	orrs	r3, r1
 8008e9a:	6053      	str	r3, [r2, #4]
}
 8008e9c:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008e9e:	6802      	ldr	r2, [r0, #0]
 8008ea0:	6853      	ldr	r3, [r2, #4]
 8008ea2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8008ea6:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8008ea8:	430b      	orrs	r3, r1
 8008eaa:	6053      	str	r3, [r2, #4]
 8008eac:	e7eb      	b.n	8008e86 <UART_AdvFeatureConfig+0xa2>

08008eae <UART_WaitOnFlagUntilTimeout>:
{
 8008eae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008eb2:	4604      	mov	r4, r0
 8008eb4:	460f      	mov	r7, r1
 8008eb6:	4616      	mov	r6, r2
 8008eb8:	4698      	mov	r8, r3
 8008eba:	9d06      	ldr	r5, [sp, #24]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ebc:	6823      	ldr	r3, [r4, #0]
 8008ebe:	69db      	ldr	r3, [r3, #28]
 8008ec0:	ea37 0303 	bics.w	r3, r7, r3
 8008ec4:	bf0c      	ite	eq
 8008ec6:	2301      	moveq	r3, #1
 8008ec8:	2300      	movne	r3, #0
 8008eca:	42b3      	cmp	r3, r6
 8008ecc:	d13f      	bne.n	8008f4e <UART_WaitOnFlagUntilTimeout+0xa0>
    if (Timeout != HAL_MAX_DELAY)
 8008ece:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8008ed2:	d0f3      	beq.n	8008ebc <UART_WaitOnFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ed4:	f7f9 fc3e 	bl	8002754 <HAL_GetTick>
 8008ed8:	eba0 0008 	sub.w	r0, r0, r8
 8008edc:	42a8      	cmp	r0, r5
 8008ede:	d822      	bhi.n	8008f26 <UART_WaitOnFlagUntilTimeout+0x78>
 8008ee0:	b30d      	cbz	r5, 8008f26 <UART_WaitOnFlagUntilTimeout+0x78>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008ee2:	6823      	ldr	r3, [r4, #0]
 8008ee4:	681a      	ldr	r2, [r3, #0]
 8008ee6:	f012 0f04 	tst.w	r2, #4
 8008eea:	d0e7      	beq.n	8008ebc <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008eec:	69da      	ldr	r2, [r3, #28]
 8008eee:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8008ef2:	d0e3      	beq.n	8008ebc <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008ef4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008ef8:	621a      	str	r2, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008efa:	6822      	ldr	r2, [r4, #0]
 8008efc:	6813      	ldr	r3, [r2, #0]
 8008efe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008f02:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f04:	6822      	ldr	r2, [r4, #0]
 8008f06:	6893      	ldr	r3, [r2, #8]
 8008f08:	f023 0301 	bic.w	r3, r3, #1
 8008f0c:	6093      	str	r3, [r2, #8]
          huart->gState = HAL_UART_STATE_READY;
 8008f0e:	2320      	movs	r3, #32
 8008f10:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8008f14:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008f18:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          __HAL_UNLOCK(huart);
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
          return HAL_TIMEOUT;
 8008f22:	2003      	movs	r0, #3
 8008f24:	e014      	b.n	8008f50 <UART_WaitOnFlagUntilTimeout+0xa2>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8008f26:	6822      	ldr	r2, [r4, #0]
 8008f28:	6813      	ldr	r3, [r2, #0]
 8008f2a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008f2e:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f30:	6822      	ldr	r2, [r4, #0]
 8008f32:	6893      	ldr	r3, [r2, #8]
 8008f34:	f023 0301 	bic.w	r3, r3, #1
 8008f38:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 8008f3a:	2320      	movs	r3, #32
 8008f3c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8008f40:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        __HAL_UNLOCK(huart);
 8008f44:	2300      	movs	r3, #0
 8008f46:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
        return HAL_TIMEOUT;
 8008f4a:	2003      	movs	r0, #3
 8008f4c:	e000      	b.n	8008f50 <UART_WaitOnFlagUntilTimeout+0xa2>
  return HAL_OK;
 8008f4e:	2000      	movs	r0, #0
}
 8008f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008f54 <HAL_UART_Transmit>:
{
 8008f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f58:	b082      	sub	sp, #8
 8008f5a:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8008f5c:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8008f60:	2b20      	cmp	r3, #32
 8008f62:	d15c      	bne.n	800901e <HAL_UART_Transmit+0xca>
 8008f64:	4604      	mov	r4, r0
 8008f66:	460d      	mov	r5, r1
 8008f68:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8008f6a:	fab2 f382 	clz	r3, r2
 8008f6e:	095b      	lsrs	r3, r3, #5
 8008f70:	2900      	cmp	r1, #0
 8008f72:	bf08      	it	eq
 8008f74:	2301      	moveq	r3, #1
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d156      	bne.n	8009028 <HAL_UART_Transmit+0xd4>
    __HAL_LOCK(huart);
 8008f7a:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8008f7e:	2b01      	cmp	r3, #1
 8008f80:	d054      	beq.n	800902c <HAL_UART_Transmit+0xd8>
 8008f82:	2301      	movs	r3, #1
 8008f84:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f88:	2300      	movs	r3, #0
 8008f8a:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008f8e:	2321      	movs	r3, #33	; 0x21
 8008f90:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
    tickstart = HAL_GetTick();
 8008f94:	f7f9 fbde 	bl	8002754 <HAL_GetTick>
 8008f98:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 8008f9a:	f8a4 8054 	strh.w	r8, [r4, #84]	; 0x54
    huart->TxXferCount = Size;
 8008f9e:	f8a4 8056 	strh.w	r8, [r4, #86]	; 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008fa2:	68a3      	ldr	r3, [r4, #8]
 8008fa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fa8:	d002      	beq.n	8008fb0 <HAL_UART_Transmit+0x5c>
      pdata16bits = NULL;
 8008faa:	f04f 0800 	mov.w	r8, #0
 8008fae:	e010      	b.n	8008fd2 <HAL_UART_Transmit+0x7e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008fb0:	6923      	ldr	r3, [r4, #16]
 8008fb2:	b30b      	cbz	r3, 8008ff8 <HAL_UART_Transmit+0xa4>
      pdata16bits = NULL;
 8008fb4:	f04f 0800 	mov.w	r8, #0
 8008fb8:	e00b      	b.n	8008fd2 <HAL_UART_Transmit+0x7e>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008fba:	f838 3b02 	ldrh.w	r3, [r8], #2
 8008fbe:	6822      	ldr	r2, [r4, #0]
 8008fc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fc4:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8008fc6:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
 8008fca:	3b01      	subs	r3, #1
 8008fcc:	b29b      	uxth	r3, r3
 8008fce:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008fd2:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
 8008fd6:	b29b      	uxth	r3, r3
 8008fd8:	b18b      	cbz	r3, 8008ffe <HAL_UART_Transmit+0xaa>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008fda:	9600      	str	r6, [sp, #0]
 8008fdc:	463b      	mov	r3, r7
 8008fde:	2200      	movs	r2, #0
 8008fe0:	2180      	movs	r1, #128	; 0x80
 8008fe2:	4620      	mov	r0, r4
 8008fe4:	f7ff ff63 	bl	8008eae <UART_WaitOnFlagUntilTimeout>
 8008fe8:	bb10      	cbnz	r0, 8009030 <HAL_UART_Transmit+0xdc>
      if (pdata8bits == NULL)
 8008fea:	2d00      	cmp	r5, #0
 8008fec:	d0e5      	beq.n	8008fba <HAL_UART_Transmit+0x66>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008fee:	f815 2b01 	ldrb.w	r2, [r5], #1
 8008ff2:	6823      	ldr	r3, [r4, #0]
 8008ff4:	629a      	str	r2, [r3, #40]	; 0x28
 8008ff6:	e7e6      	b.n	8008fc6 <HAL_UART_Transmit+0x72>
      pdata16bits = (uint16_t *) pData;
 8008ff8:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8008ffa:	2500      	movs	r5, #0
 8008ffc:	e7e9      	b.n	8008fd2 <HAL_UART_Transmit+0x7e>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008ffe:	9600      	str	r6, [sp, #0]
 8009000:	463b      	mov	r3, r7
 8009002:	2200      	movs	r2, #0
 8009004:	2140      	movs	r1, #64	; 0x40
 8009006:	4620      	mov	r0, r4
 8009008:	f7ff ff51 	bl	8008eae <UART_WaitOnFlagUntilTimeout>
 800900c:	4603      	mov	r3, r0
 800900e:	b988      	cbnz	r0, 8009034 <HAL_UART_Transmit+0xe0>
    huart->gState = HAL_UART_STATE_READY;
 8009010:	2220      	movs	r2, #32
 8009012:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
    __HAL_UNLOCK(huart);
 8009016:	2200      	movs	r2, #0
 8009018:	f884 207c 	strb.w	r2, [r4, #124]	; 0x7c
    return HAL_OK;
 800901c:	e000      	b.n	8009020 <HAL_UART_Transmit+0xcc>
    return HAL_BUSY;
 800901e:	2302      	movs	r3, #2
}
 8009020:	4618      	mov	r0, r3
 8009022:	b002      	add	sp, #8
 8009024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8009028:	2301      	movs	r3, #1
 800902a:	e7f9      	b.n	8009020 <HAL_UART_Transmit+0xcc>
    __HAL_LOCK(huart);
 800902c:	2302      	movs	r3, #2
 800902e:	e7f7      	b.n	8009020 <HAL_UART_Transmit+0xcc>
        return HAL_TIMEOUT;
 8009030:	2303      	movs	r3, #3
 8009032:	e7f5      	b.n	8009020 <HAL_UART_Transmit+0xcc>
      return HAL_TIMEOUT;
 8009034:	2303      	movs	r3, #3
 8009036:	e7f3      	b.n	8009020 <HAL_UART_Transmit+0xcc>

08009038 <UART_CheckIdleState>:
{
 8009038:	b530      	push	{r4, r5, lr}
 800903a:	b083      	sub	sp, #12
 800903c:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800903e:	2300      	movs	r3, #0
 8009040:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tickstart = HAL_GetTick();
 8009044:	f7f9 fb86 	bl	8002754 <HAL_GetTick>
 8009048:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800904a:	6823      	ldr	r3, [r4, #0]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f013 0f08 	tst.w	r3, #8
 8009052:	d10e      	bne.n	8009072 <UART_CheckIdleState+0x3a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009054:	6823      	ldr	r3, [r4, #0]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	f013 0f04 	tst.w	r3, #4
 800905c:	d117      	bne.n	800908e <UART_CheckIdleState+0x56>
  huart->gState = HAL_UART_STATE_READY;
 800905e:	2320      	movs	r3, #32
 8009060:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8009064:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8009068:	2000      	movs	r0, #0
 800906a:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 800906e:	b003      	add	sp, #12
 8009070:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009072:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009076:	9300      	str	r3, [sp, #0]
 8009078:	4603      	mov	r3, r0
 800907a:	2200      	movs	r2, #0
 800907c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009080:	4620      	mov	r0, r4
 8009082:	f7ff ff14 	bl	8008eae <UART_WaitOnFlagUntilTimeout>
 8009086:	2800      	cmp	r0, #0
 8009088:	d0e4      	beq.n	8009054 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 800908a:	2003      	movs	r0, #3
 800908c:	e7ef      	b.n	800906e <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800908e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009092:	9300      	str	r3, [sp, #0]
 8009094:	462b      	mov	r3, r5
 8009096:	2200      	movs	r2, #0
 8009098:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800909c:	4620      	mov	r0, r4
 800909e:	f7ff ff06 	bl	8008eae <UART_WaitOnFlagUntilTimeout>
 80090a2:	2800      	cmp	r0, #0
 80090a4:	d0db      	beq.n	800905e <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 80090a6:	2003      	movs	r0, #3
 80090a8:	e7e1      	b.n	800906e <UART_CheckIdleState+0x36>

080090aa <HAL_UART_Init>:
  if (huart == NULL)
 80090aa:	b378      	cbz	r0, 800910c <HAL_UART_Init+0x62>
{
 80090ac:	b510      	push	{r4, lr}
 80090ae:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80090b0:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 80090b4:	b30b      	cbz	r3, 80090fa <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 80090b6:	2324      	movs	r3, #36	; 0x24
 80090b8:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UART_DISABLE(huart);
 80090bc:	6822      	ldr	r2, [r4, #0]
 80090be:	6813      	ldr	r3, [r2, #0]
 80090c0:	f023 0301 	bic.w	r3, r3, #1
 80090c4:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80090c6:	4620      	mov	r0, r4
 80090c8:	f7fe fb16 	bl	80076f8 <UART_SetConfig>
 80090cc:	2801      	cmp	r0, #1
 80090ce:	d013      	beq.n	80090f8 <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80090d0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80090d2:	b9bb      	cbnz	r3, 8009104 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80090d4:	6822      	ldr	r2, [r4, #0]
 80090d6:	6853      	ldr	r3, [r2, #4]
 80090d8:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80090dc:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80090de:	6822      	ldr	r2, [r4, #0]
 80090e0:	6893      	ldr	r3, [r2, #8]
 80090e2:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80090e6:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 80090e8:	6822      	ldr	r2, [r4, #0]
 80090ea:	6813      	ldr	r3, [r2, #0]
 80090ec:	f043 0301 	orr.w	r3, r3, #1
 80090f0:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 80090f2:	4620      	mov	r0, r4
 80090f4:	f7ff ffa0 	bl	8009038 <UART_CheckIdleState>
}
 80090f8:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80090fa:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
    HAL_UART_MspInit(huart);
 80090fe:	f7f8 fda9 	bl	8001c54 <HAL_UART_MspInit>
 8009102:	e7d8      	b.n	80090b6 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8009104:	4620      	mov	r0, r4
 8009106:	f7ff fe6d 	bl	8008de4 <UART_AdvFeatureConfig>
 800910a:	e7e3      	b.n	80090d4 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 800910c:	2001      	movs	r0, #1
}
 800910e:	4770      	bx	lr

08009110 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009110:	b410      	push	{r4}
 8009112:	b085      	sub	sp, #20
 8009114:	4602      	mov	r2, r0
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8009116:	4b1a      	ldr	r3, [pc, #104]	; (8009180 <UARTEx_SetNbDataToProcess+0x70>)
 8009118:	e893 0003 	ldmia.w	r3, {r0, r1}
 800911c:	ac04      	add	r4, sp, #16
 800911e:	e904 0003 	stmdb	r4, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8009122:	466c      	mov	r4, sp
 8009124:	3308      	adds	r3, #8
 8009126:	e893 0003 	ldmia.w	r3, {r0, r1}
 800912a:	e884 0003 	stmia.w	r4, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800912e:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8009130:	b1fb      	cbz	r3, 8009172 <UARTEx_SetNbDataToProcess+0x62>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009132:	6811      	ldr	r1, [r2, #0]
 8009134:	688b      	ldr	r3, [r1, #8]
 8009136:	f3c3 6342 	ubfx	r3, r3, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800913a:	6888      	ldr	r0, [r1, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800913c:	a904      	add	r1, sp, #16
 800913e:	eb01 7050 	add.w	r0, r1, r0, lsr #29
 8009142:	f810 1c08 	ldrb.w	r1, [r0, #-8]
 8009146:	00c9      	lsls	r1, r1, #3
 8009148:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 800914c:	fb91 f1f0 	sdiv	r1, r1, r0
 8009150:	f8a2 106a 	strh.w	r1, [r2, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8009154:	a904      	add	r1, sp, #16
 8009156:	440b      	add	r3, r1
 8009158:	f813 1c08 	ldrb.w	r1, [r3, #-8]
 800915c:	00c9      	lsls	r1, r1, #3
 800915e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8009162:	fb91 f3f3 	sdiv	r3, r1, r3
 8009166:	f8a2 3068 	strh.w	r3, [r2, #104]	; 0x68
  }
}
 800916a:	b005      	add	sp, #20
 800916c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009170:	4770      	bx	lr
    huart->NbTxDataToProcess = 1U;
 8009172:	2301      	movs	r3, #1
 8009174:	f8a2 306a 	strh.w	r3, [r2, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009178:	f8a2 3068 	strh.w	r3, [r2, #104]	; 0x68
 800917c:	e7f5      	b.n	800916a <UARTEx_SetNbDataToProcess+0x5a>
 800917e:	bf00      	nop
 8009180:	0800cf28 	.word	0x0800cf28

08009184 <HAL_UARTEx_WakeupCallback>:
}
 8009184:	4770      	bx	lr

08009186 <HAL_UARTEx_RxFifoFullCallback>:
}
 8009186:	4770      	bx	lr

08009188 <HAL_UARTEx_TxFifoEmptyCallback>:
}
 8009188:	4770      	bx	lr

0800918a <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 800918a:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 800918e:	2b01      	cmp	r3, #1
 8009190:	d018      	beq.n	80091c4 <HAL_UARTEx_DisableFifoMode+0x3a>
 8009192:	2301      	movs	r3, #1
 8009194:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 8009198:	2324      	movs	r3, #36	; 0x24
 800919a:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800919e:	6803      	ldr	r3, [r0, #0]
 80091a0:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80091a2:	6819      	ldr	r1, [r3, #0]
 80091a4:	f021 0101 	bic.w	r1, r1, #1
 80091a8:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80091aa:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80091ae:	2300      	movs	r3, #0
 80091b0:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80091b2:	6801      	ldr	r1, [r0, #0]
 80091b4:	600a      	str	r2, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 80091b6:	2220      	movs	r2, #32
 80091b8:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
  __HAL_UNLOCK(huart);
 80091bc:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  return HAL_OK;
 80091c0:	4618      	mov	r0, r3
 80091c2:	4770      	bx	lr
  __HAL_LOCK(huart);
 80091c4:	2002      	movs	r0, #2
}
 80091c6:	4770      	bx	lr

080091c8 <HAL_UARTEx_SetTxFifoThreshold>:
{
 80091c8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 80091ca:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 80091ce:	2b01      	cmp	r3, #1
 80091d0:	d01d      	beq.n	800920e <HAL_UARTEx_SetTxFifoThreshold+0x46>
 80091d2:	4604      	mov	r4, r0
 80091d4:	2301      	movs	r3, #1
 80091d6:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 80091da:	2324      	movs	r3, #36	; 0x24
 80091dc:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80091e0:	6803      	ldr	r3, [r0, #0]
 80091e2:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 80091e4:	681a      	ldr	r2, [r3, #0]
 80091e6:	f022 0201 	bic.w	r2, r2, #1
 80091ea:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80091ec:	6802      	ldr	r2, [r0, #0]
 80091ee:	6893      	ldr	r3, [r2, #8]
 80091f0:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 80091f4:	4319      	orrs	r1, r3
 80091f6:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 80091f8:	f7ff ff8a 	bl	8009110 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80091fc:	6823      	ldr	r3, [r4, #0]
 80091fe:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8009200:	2320      	movs	r3, #32
 8009202:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8009206:	2000      	movs	r0, #0
 8009208:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 800920c:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800920e:	2002      	movs	r0, #2
 8009210:	e7fc      	b.n	800920c <HAL_UARTEx_SetTxFifoThreshold+0x44>

08009212 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8009212:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8009214:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8009218:	2b01      	cmp	r3, #1
 800921a:	d01d      	beq.n	8009258 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 800921c:	4604      	mov	r4, r0
 800921e:	2301      	movs	r3, #1
 8009220:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
  huart->gState = HAL_UART_STATE_BUSY;
 8009224:	2324      	movs	r3, #36	; 0x24
 8009226:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800922a:	6803      	ldr	r3, [r0, #0]
 800922c:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800922e:	681a      	ldr	r2, [r3, #0]
 8009230:	f022 0201 	bic.w	r2, r2, #1
 8009234:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009236:	6802      	ldr	r2, [r0, #0]
 8009238:	6893      	ldr	r3, [r2, #8]
 800923a:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 800923e:	4319      	orrs	r1, r3
 8009240:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8009242:	f7ff ff65 	bl	8009110 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009246:	6823      	ldr	r3, [r4, #0]
 8009248:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800924a:	2320      	movs	r3, #32
 800924c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  __HAL_UNLOCK(huart);
 8009250:	2000      	movs	r0, #0
 8009252:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
}
 8009256:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8009258:	2002      	movs	r0, #2
 800925a:	e7fc      	b.n	8009256 <HAL_UARTEx_SetRxFifoThreshold+0x44>

0800925c <FMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device, FMC_NORSRAM_InitTypeDef *Init)
{
 800925c:	b430      	push	{r4, r5}
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800925e:	680a      	ldr	r2, [r1, #0]
 8009260:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 8009264:	f023 0301 	bic.w	r3, r3, #1
 8009268:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800926c:	688b      	ldr	r3, [r1, #8]
 800926e:	2b08      	cmp	r3, #8
 8009270:	d030      	beq.n	80092d4 <FMC_NORSRAM_Init+0x78>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8009272:	2400      	movs	r4, #0
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8009274:	684a      	ldr	r2, [r1, #4]
  btcr_reg = (flashaccess                   | \
 8009276:	4322      	orrs	r2, r4
              Init->DataAddressMux          | \
 8009278:	4313      	orrs	r3, r2
              Init->MemoryType              | \
              Init->MemoryDataWidth         | \
 800927a:	68ca      	ldr	r2, [r1, #12]
              Init->MemoryType              | \
 800927c:	4313      	orrs	r3, r2
              Init->BurstAccessMode         | \
 800927e:	690a      	ldr	r2, [r1, #16]
              Init->MemoryDataWidth         | \
 8009280:	4313      	orrs	r3, r2
              Init->WaitSignalPolarity      | \
 8009282:	694a      	ldr	r2, [r1, #20]
              Init->BurstAccessMode         | \
 8009284:	4313      	orrs	r3, r2
              Init->WaitSignalActive        | \
 8009286:	698a      	ldr	r2, [r1, #24]
              Init->WaitSignalPolarity      | \
 8009288:	4313      	orrs	r3, r2
              Init->WriteOperation          | \
 800928a:	69ca      	ldr	r2, [r1, #28]
              Init->WaitSignalActive        | \
 800928c:	4313      	orrs	r3, r2
              Init->WaitSignal              | \
 800928e:	6a0a      	ldr	r2, [r1, #32]
              Init->WriteOperation          | \
 8009290:	4313      	orrs	r3, r2
              Init->ExtendedMode            | \
 8009292:	6a4a      	ldr	r2, [r1, #36]	; 0x24
              Init->WaitSignal              | \
 8009294:	4313      	orrs	r3, r2
              Init->AsynchronousWait        | \
 8009296:	6a8a      	ldr	r2, [r1, #40]	; 0x28
              Init->ExtendedMode            | \
 8009298:	4313      	orrs	r3, r2
              Init->WriteBurst);
 800929a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 800929c:	4313      	orrs	r3, r2

  btcr_reg |= Init->ContinuousClock;
 800929e:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80092a0:	4313      	orrs	r3, r2
  btcr_reg |= Init->WriteFifo;
 80092a2:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 80092a4:	4313      	orrs	r3, r2
  btcr_reg |= Init->PageSize;
 80092a6:	6b8a      	ldr	r2, [r1, #56]	; 0x38
 80092a8:	4313      	orrs	r3, r2

  mask |= FMC_BCR1_CCLKEN;
  mask |= FMC_BCR1_WFDIS;
  mask |= FMC_BCRx_CPSIZE;

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80092aa:	680c      	ldr	r4, [r1, #0]
 80092ac:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
 80092b0:	4a0e      	ldr	r2, [pc, #56]	; (80092ec <FMC_NORSRAM_Init+0x90>)
 80092b2:	402a      	ands	r2, r5
 80092b4:	431a      	orrs	r2, r3
 80092b6:	f840 2024 	str.w	r2, [r0, r4, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 80092ba:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80092bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80092c0:	d00a      	beq.n	80092d8 <FMC_NORSRAM_Init+0x7c>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 80092c2:	680b      	ldr	r3, [r1, #0]
 80092c4:	b11b      	cbz	r3, 80092ce <FMC_NORSRAM_Init+0x72>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 80092c6:	6803      	ldr	r3, [r0, #0]
 80092c8:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 80092ca:	4313      	orrs	r3, r2
 80092cc:	6003      	str	r3, [r0, #0]
  }

  return HAL_OK;
}
 80092ce:	2000      	movs	r0, #0
 80092d0:	bc30      	pop	{r4, r5}
 80092d2:	4770      	bx	lr
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80092d4:	2440      	movs	r4, #64	; 0x40
 80092d6:	e7cd      	b.n	8009274 <FMC_NORSRAM_Init+0x18>
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 80092d8:	680a      	ldr	r2, [r1, #0]
 80092da:	2a00      	cmp	r2, #0
 80092dc:	d0f1      	beq.n	80092c2 <FMC_NORSRAM_Init+0x66>
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 80092de:	6802      	ldr	r2, [r0, #0]
 80092e0:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80092e4:	4313      	orrs	r3, r2
 80092e6:	6003      	str	r3, [r0, #0]
 80092e8:	e7eb      	b.n	80092c2 <FMC_NORSRAM_Init+0x66>
 80092ea:	bf00      	nop
 80092ec:	ffc00480 	.word	0xffc00480

080092f0 <FMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device, FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80092f0:	b430      	push	{r4, r5}
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 80092f2:	3201      	adds	r2, #1
 80092f4:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
 80092f8:	f004 4440 	and.w	r4, r4, #3221225472	; 0xc0000000
 80092fc:	680b      	ldr	r3, [r1, #0]
 80092fe:	684d      	ldr	r5, [r1, #4]
 8009300:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 8009304:	688d      	ldr	r5, [r1, #8]
 8009306:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800930a:	68cd      	ldr	r5, [r1, #12]
 800930c:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8009310:	690d      	ldr	r5, [r1, #16]
 8009312:	3d01      	subs	r5, #1
 8009314:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
 8009318:	694d      	ldr	r5, [r1, #20]
 800931a:	3d02      	subs	r5, #2
 800931c:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8009320:	698d      	ldr	r5, [r1, #24]
 8009322:	432b      	orrs	r3, r5
 8009324:	4323      	orrs	r3, r4
 8009326:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
                                                      (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                      (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                      (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800932a:	6803      	ldr	r3, [r0, #0]
 800932c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8009330:	d00b      	beq.n	800934a <FMC_NORSRAM_Timing_Init+0x5a>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~(((uint32_t)0x0F) << FMC_BTRx_CLKDIV_Pos));
 8009332:	6843      	ldr	r3, [r0, #4]
 8009334:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 8009338:	690a      	ldr	r2, [r1, #16]
 800933a:	3a01      	subs	r2, #1
 800933c:	ea43 5202 	orr.w	r2, r3, r2, lsl #20
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 8009340:	6843      	ldr	r3, [r0, #4]
 8009342:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009346:	4313      	orrs	r3, r2
 8009348:	6043      	str	r3, [r0, #4]
  }

  return HAL_OK;
}
 800934a:	2000      	movs	r0, #0
 800934c:	bc30      	pop	{r4, r5}
 800934e:	4770      	bx	lr

08009350 <FMC_NORSRAM_Extended_Timing_Init>:
{
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 8009350:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009354:	d005      	beq.n	8009362 <FMC_NORSRAM_Extended_Timing_Init+0x12>
                                                     Timing->AccessMode));
#endif /* FMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8009356:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800935a:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 800935e:	2000      	movs	r0, #0
 8009360:	4770      	bx	lr
{
 8009362:	b430      	push	{r4, r5}
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8009364:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 8009368:	4c09      	ldr	r4, [pc, #36]	; (8009390 <FMC_NORSRAM_Extended_Timing_Init+0x40>)
 800936a:	401c      	ands	r4, r3
 800936c:	680b      	ldr	r3, [r1, #0]
 800936e:	684d      	ldr	r5, [r1, #4]
 8009370:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 8009374:	688d      	ldr	r5, [r1, #8]
 8009376:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800937a:	698d      	ldr	r5, [r1, #24]
 800937c:	432b      	orrs	r3, r5
 800937e:	68c9      	ldr	r1, [r1, #12]
 8009380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8009384:	4323      	orrs	r3, r4
 8009386:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
}
 800938a:	2000      	movs	r0, #0
 800938c:	bc30      	pop	{r4, r5}
 800938e:	4770      	bx	lr
 8009390:	cff00000 	.word	0xcff00000

08009394 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8009394:	b410      	push	{r4}
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8009396:	680b      	ldr	r3, [r1, #0]
 8009398:	b1eb      	cbz	r3, 80093d6 <FMC_SDRAM_Init+0x42>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800939a:	6803      	ldr	r3, [r0, #0]
 800939c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80093a0:	69ca      	ldr	r2, [r1, #28]
 80093a2:	6a0c      	ldr	r4, [r1, #32]
 80093a4:	4322      	orrs	r2, r4
 80093a6:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 80093a8:	4322      	orrs	r2, r4
 80093aa:	4313      	orrs	r3, r2
 80093ac:	6003      	str	r3, [r0, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80093ae:	6843      	ldr	r3, [r0, #4]
 80093b0:	4a14      	ldr	r2, [pc, #80]	; (8009404 <FMC_SDRAM_Init+0x70>)
 80093b2:	401a      	ands	r2, r3
 80093b4:	684b      	ldr	r3, [r1, #4]
 80093b6:	688c      	ldr	r4, [r1, #8]
 80093b8:	4323      	orrs	r3, r4
 80093ba:	68cc      	ldr	r4, [r1, #12]
 80093bc:	4323      	orrs	r3, r4
 80093be:	690c      	ldr	r4, [r1, #16]
 80093c0:	4323      	orrs	r3, r4
 80093c2:	694c      	ldr	r4, [r1, #20]
 80093c4:	4323      	orrs	r3, r4
 80093c6:	6989      	ldr	r1, [r1, #24]
 80093c8:	430b      	orrs	r3, r1
 80093ca:	4313      	orrs	r3, r2
 80093cc:	6043      	str	r3, [r0, #4]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 80093ce:	2000      	movs	r0, #0
 80093d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80093d4:	4770      	bx	lr
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80093d6:	6803      	ldr	r3, [r0, #0]
 80093d8:	4a0a      	ldr	r2, [pc, #40]	; (8009404 <FMC_SDRAM_Init+0x70>)
 80093da:	401a      	ands	r2, r3
 80093dc:	684b      	ldr	r3, [r1, #4]
 80093de:	688c      	ldr	r4, [r1, #8]
 80093e0:	4323      	orrs	r3, r4
 80093e2:	68cc      	ldr	r4, [r1, #12]
 80093e4:	4323      	orrs	r3, r4
 80093e6:	690c      	ldr	r4, [r1, #16]
 80093e8:	4323      	orrs	r3, r4
 80093ea:	694c      	ldr	r4, [r1, #20]
 80093ec:	4323      	orrs	r3, r4
 80093ee:	698c      	ldr	r4, [r1, #24]
 80093f0:	4323      	orrs	r3, r4
 80093f2:	69cc      	ldr	r4, [r1, #28]
 80093f4:	4323      	orrs	r3, r4
 80093f6:	6a0c      	ldr	r4, [r1, #32]
 80093f8:	4323      	orrs	r3, r4
 80093fa:	6a49      	ldr	r1, [r1, #36]	; 0x24
 80093fc:	430b      	orrs	r3, r1
 80093fe:	4313      	orrs	r3, r2
 8009400:	6003      	str	r3, [r0, #0]
 8009402:	e7e4      	b.n	80093ce <FMC_SDRAM_Init+0x3a>
 8009404:	ffff8000 	.word	0xffff8000

08009408 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009408:	b410      	push	{r4}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800940a:	b332      	cbz	r2, 800945a <FMC_SDRAM_Timing_Init+0x52>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800940c:	6883      	ldr	r3, [r0, #8]
 800940e:	4a23      	ldr	r2, [pc, #140]	; (800949c <FMC_SDRAM_Timing_Init+0x94>)
 8009410:	401a      	ands	r2, r3
 8009412:	68cb      	ldr	r3, [r1, #12]
 8009414:	1e5c      	subs	r4, r3, #1
 8009416:	694b      	ldr	r3, [r1, #20]
 8009418:	3b01      	subs	r3, #1
 800941a:	051b      	lsls	r3, r3, #20
 800941c:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
 8009420:	4313      	orrs	r3, r2
 8009422:	6083      	str	r3, [r0, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8009424:	68c2      	ldr	r2, [r0, #12]
 8009426:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 800942a:	680b      	ldr	r3, [r1, #0]
 800942c:	3b01      	subs	r3, #1
 800942e:	684c      	ldr	r4, [r1, #4]
 8009430:	3c01      	subs	r4, #1
 8009432:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8009436:	688c      	ldr	r4, [r1, #8]
 8009438:	3c01      	subs	r4, #1
 800943a:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 800943e:	690c      	ldr	r4, [r1, #16]
 8009440:	3c01      	subs	r4, #1
 8009442:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009446:	6989      	ldr	r1, [r1, #24]
 8009448:	3901      	subs	r1, #1
 800944a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800944e:	4313      	orrs	r3, r2
 8009450:	60c3      	str	r3, [r0, #12]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 8009452:	2000      	movs	r0, #0
 8009454:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009458:	4770      	bx	lr
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800945a:	6882      	ldr	r2, [r0, #8]
 800945c:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8009460:	680b      	ldr	r3, [r1, #0]
 8009462:	3b01      	subs	r3, #1
 8009464:	684c      	ldr	r4, [r1, #4]
 8009466:	3c01      	subs	r4, #1
 8009468:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 800946c:	688c      	ldr	r4, [r1, #8]
 800946e:	3c01      	subs	r4, #1
 8009470:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8009474:	68cc      	ldr	r4, [r1, #12]
 8009476:	3c01      	subs	r4, #1
 8009478:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
 800947c:	690c      	ldr	r4, [r1, #16]
 800947e:	3c01      	subs	r4, #1
 8009480:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009484:	694c      	ldr	r4, [r1, #20]
 8009486:	3c01      	subs	r4, #1
 8009488:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
 800948c:	6989      	ldr	r1, [r1, #24]
 800948e:	3901      	subs	r1, #1
 8009490:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8009494:	4313      	orrs	r3, r2
 8009496:	6083      	str	r3, [r0, #8]
 8009498:	e7db      	b.n	8009452 <FMC_SDRAM_Timing_Init+0x4a>
 800949a:	bf00      	nop
 800949c:	ff0f0fff 	.word	0xff0f0fff

080094a0 <USB_CoreReset>:
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t count = 0U;
 80094a0:	2300      	movs	r3, #0

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80094a2:	3301      	adds	r3, #1
 80094a4:	4a0c      	ldr	r2, [pc, #48]	; (80094d8 <USB_CoreReset+0x38>)
 80094a6:	4293      	cmp	r3, r2
 80094a8:	d811      	bhi.n	80094ce <USB_CoreReset+0x2e>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80094aa:	6902      	ldr	r2, [r0, #16]
 80094ac:	2a00      	cmp	r2, #0
 80094ae:	daf8      	bge.n	80094a2 <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80094b0:	6903      	ldr	r3, [r0, #16]
 80094b2:	f043 0301 	orr.w	r3, r3, #1
 80094b6:	6103      	str	r3, [r0, #16]
  count = 0U;
 80094b8:	2300      	movs	r3, #0

  do
  {
    if (++count > 200000U)
 80094ba:	3301      	adds	r3, #1
 80094bc:	4a06      	ldr	r2, [pc, #24]	; (80094d8 <USB_CoreReset+0x38>)
 80094be:	4293      	cmp	r3, r2
 80094c0:	d807      	bhi.n	80094d2 <USB_CoreReset+0x32>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80094c2:	6902      	ldr	r2, [r0, #16]
 80094c4:	f012 0f01 	tst.w	r2, #1
 80094c8:	d1f7      	bne.n	80094ba <USB_CoreReset+0x1a>

  return HAL_OK;
 80094ca:	2000      	movs	r0, #0
 80094cc:	4770      	bx	lr
      return HAL_TIMEOUT;
 80094ce:	2003      	movs	r0, #3
 80094d0:	4770      	bx	lr
      return HAL_TIMEOUT;
 80094d2:	2003      	movs	r0, #3
}
 80094d4:	4770      	bx	lr
 80094d6:	bf00      	nop
 80094d8:	00030d40 	.word	0x00030d40

080094dc <USB_CoreInit>:
{
 80094dc:	b084      	sub	sp, #16
 80094de:	b510      	push	{r4, lr}
 80094e0:	4604      	mov	r4, r0
 80094e2:	a803      	add	r0, sp, #12
 80094e4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80094e8:	9b08      	ldr	r3, [sp, #32]
 80094ea:	2b01      	cmp	r3, #1
 80094ec:	d11d      	bne.n	800952a <USB_CoreInit+0x4e>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80094ee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80094f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80094f4:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80094f6:	68e2      	ldr	r2, [r4, #12]
 80094f8:	4b1a      	ldr	r3, [pc, #104]	; (8009564 <USB_CoreInit+0x88>)
 80094fa:	4013      	ands	r3, r2
 80094fc:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80094fe:	68e3      	ldr	r3, [r4, #12]
 8009500:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009504:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 8009506:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009508:	2b01      	cmp	r3, #1
 800950a:	d009      	beq.n	8009520 <USB_CoreInit+0x44>
    ret = USB_CoreReset(USBx);
 800950c:	4620      	mov	r0, r4
 800950e:	f7ff ffc7 	bl	80094a0 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8009512:	9b06      	ldr	r3, [sp, #24]
 8009514:	2b01      	cmp	r3, #1
 8009516:	d01b      	beq.n	8009550 <USB_CoreInit+0x74>
}
 8009518:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800951c:	b004      	add	sp, #16
 800951e:	4770      	bx	lr
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009520:	68e3      	ldr	r3, [r4, #12]
 8009522:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009526:	60e3      	str	r3, [r4, #12]
 8009528:	e7f0      	b.n	800950c <USB_CoreInit+0x30>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800952a:	68e3      	ldr	r3, [r4, #12]
 800952c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009530:	60e3      	str	r3, [r4, #12]
    ret = USB_CoreReset(USBx);
 8009532:	4620      	mov	r0, r4
 8009534:	f7ff ffb4 	bl	80094a0 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 8009538:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800953a:	b923      	cbnz	r3, 8009546 <USB_CoreInit+0x6a>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800953c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800953e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009542:	63a3      	str	r3, [r4, #56]	; 0x38
 8009544:	e7e5      	b.n	8009512 <USB_CoreInit+0x36>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009546:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009548:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800954c:	63a3      	str	r3, [r4, #56]	; 0x38
 800954e:	e7e0      	b.n	8009512 <USB_CoreInit+0x36>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009550:	68a3      	ldr	r3, [r4, #8]
 8009552:	f043 0306 	orr.w	r3, r3, #6
 8009556:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009558:	68a3      	ldr	r3, [r4, #8]
 800955a:	f043 0320 	orr.w	r3, r3, #32
 800955e:	60a3      	str	r3, [r4, #8]
 8009560:	e7da      	b.n	8009518 <USB_CoreInit+0x3c>
 8009562:	bf00      	nop
 8009564:	ffbdffbf 	.word	0xffbdffbf

08009568 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009568:	6883      	ldr	r3, [r0, #8]
 800956a:	f023 0301 	bic.w	r3, r3, #1
 800956e:	6083      	str	r3, [r0, #8]
}
 8009570:	2000      	movs	r0, #0
 8009572:	4770      	bx	lr

08009574 <USB_SetCurrentMode>:
{
 8009574:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009576:	68c3      	ldr	r3, [r0, #12]
 8009578:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800957c:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800957e:	2901      	cmp	r1, #1
 8009580:	d009      	beq.n	8009596 <USB_SetCurrentMode+0x22>
  else if (mode == USB_DEVICE_MODE)
 8009582:	b969      	cbnz	r1, 80095a0 <USB_SetCurrentMode+0x2c>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009584:	68c3      	ldr	r3, [r0, #12]
 8009586:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800958a:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 800958c:	2032      	movs	r0, #50	; 0x32
 800958e:	f7f9 f8e7 	bl	8002760 <HAL_Delay>
  return HAL_OK;
 8009592:	2000      	movs	r0, #0
}
 8009594:	bd08      	pop	{r3, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009596:	68c3      	ldr	r3, [r0, #12]
 8009598:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800959c:	60c3      	str	r3, [r0, #12]
 800959e:	e7f5      	b.n	800958c <USB_SetCurrentMode+0x18>
    return HAL_ERROR;
 80095a0:	2001      	movs	r0, #1
 80095a2:	e7f7      	b.n	8009594 <USB_SetCurrentMode+0x20>

080095a4 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80095a4:	0189      	lsls	r1, r1, #6
 80095a6:	f041 0120 	orr.w	r1, r1, #32
 80095aa:	6101      	str	r1, [r0, #16]
  uint32_t count = 0U;
 80095ac:	2300      	movs	r3, #0
    if (++count > 200000U)
 80095ae:	3301      	adds	r3, #1
 80095b0:	4a05      	ldr	r2, [pc, #20]	; (80095c8 <USB_FlushTxFifo+0x24>)
 80095b2:	4293      	cmp	r3, r2
 80095b4:	d805      	bhi.n	80095c2 <USB_FlushTxFifo+0x1e>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80095b6:	6902      	ldr	r2, [r0, #16]
 80095b8:	f012 0f20 	tst.w	r2, #32
 80095bc:	d1f7      	bne.n	80095ae <USB_FlushTxFifo+0xa>
  return HAL_OK;
 80095be:	2000      	movs	r0, #0
 80095c0:	4770      	bx	lr
      return HAL_TIMEOUT;
 80095c2:	2003      	movs	r0, #3
}
 80095c4:	4770      	bx	lr
 80095c6:	bf00      	nop
 80095c8:	00030d40 	.word	0x00030d40

080095cc <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80095cc:	2310      	movs	r3, #16
 80095ce:	6103      	str	r3, [r0, #16]
  uint32_t count = 0;
 80095d0:	2300      	movs	r3, #0
    if (++count > 200000U)
 80095d2:	3301      	adds	r3, #1
 80095d4:	4a05      	ldr	r2, [pc, #20]	; (80095ec <USB_FlushRxFifo+0x20>)
 80095d6:	4293      	cmp	r3, r2
 80095d8:	d805      	bhi.n	80095e6 <USB_FlushRxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80095da:	6902      	ldr	r2, [r0, #16]
 80095dc:	f012 0f10 	tst.w	r2, #16
 80095e0:	d1f7      	bne.n	80095d2 <USB_FlushRxFifo+0x6>
  return HAL_OK;
 80095e2:	2000      	movs	r0, #0
 80095e4:	4770      	bx	lr
      return HAL_TIMEOUT;
 80095e6:	2003      	movs	r0, #3
}
 80095e8:	4770      	bx	lr
 80095ea:	bf00      	nop
 80095ec:	00030d40 	.word	0x00030d40

080095f0 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 80095f0:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80095f4:	4319      	orrs	r1, r3
 80095f6:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 80095fa:	2000      	movs	r0, #0
 80095fc:	4770      	bx	lr
	...

08009600 <USB_DevInit>:
{
 8009600:	b084      	sub	sp, #16
 8009602:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009606:	4604      	mov	r4, r0
 8009608:	a807      	add	r0, sp, #28
 800960a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800960e:	4625      	mov	r5, r4
  for (i = 0U; i < 15U; i++)
 8009610:	2300      	movs	r3, #0
 8009612:	e006      	b.n	8009622 <USB_DevInit+0x22>
    USBx->DIEPTXF[i] = 0U;
 8009614:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8009618:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800961c:	2100      	movs	r1, #0
 800961e:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8009620:	3301      	adds	r3, #1
 8009622:	2b0e      	cmp	r3, #14
 8009624:	d9f6      	bls.n	8009614 <USB_DevInit+0x14>
  if (cfg.vbus_sensing_enable == 0U)
 8009626:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009628:	bb23      	cbnz	r3, 8009674 <USB_DevInit+0x74>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800962a:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
 800962e:	f043 0302 	orr.w	r3, r3, #2
 8009632:	f8c4 3804 	str.w	r3, [r4, #2052]	; 0x804
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009636:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009638:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800963c:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800963e:	6823      	ldr	r3, [r4, #0]
 8009640:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009644:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009646:	6823      	ldr	r3, [r4, #0]
 8009648:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800964c:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 800964e:	2300      	movs	r3, #0
 8009650:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009654:	f504 6600 	add.w	r6, r4, #2048	; 0x800
 8009658:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 800965c:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009660:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009662:	2b01      	cmp	r3, #1
 8009664:	d110      	bne.n	8009688 <USB_DevInit+0x88>
    if (cfg.speed == USBD_HS_SPEED)
 8009666:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009668:	b94b      	cbnz	r3, 800967e <USB_DevInit+0x7e>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800966a:	2100      	movs	r1, #0
 800966c:	4620      	mov	r0, r4
 800966e:	f7ff ffbf 	bl	80095f0 <USB_SetDevSpeed>
 8009672:	e00d      	b.n	8009690 <USB_DevInit+0x90>
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009674:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009676:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800967a:	63a3      	str	r3, [r4, #56]	; 0x38
 800967c:	e7e7      	b.n	800964e <USB_DevInit+0x4e>
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800967e:	2101      	movs	r1, #1
 8009680:	4620      	mov	r0, r4
 8009682:	f7ff ffb5 	bl	80095f0 <USB_SetDevSpeed>
 8009686:	e003      	b.n	8009690 <USB_DevInit+0x90>
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009688:	2103      	movs	r1, #3
 800968a:	4620      	mov	r0, r4
 800968c:	f7ff ffb0 	bl	80095f0 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009690:	2110      	movs	r1, #16
 8009692:	4620      	mov	r0, r4
 8009694:	f7ff ff86 	bl	80095a4 <USB_FlushTxFifo>
 8009698:	4680      	mov	r8, r0
 800969a:	b108      	cbz	r0, 80096a0 <USB_DevInit+0xa0>
    ret = HAL_ERROR;
 800969c:	f04f 0801 	mov.w	r8, #1
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80096a0:	4620      	mov	r0, r4
 80096a2:	f7ff ff93 	bl	80095cc <USB_FlushRxFifo>
 80096a6:	b108      	cbz	r0, 80096ac <USB_DevInit+0xac>
    ret = HAL_ERROR;
 80096a8:	f04f 0801 	mov.w	r8, #1
  USBx_DEVICE->DIEPMSK = 0U;
 80096ac:	2300      	movs	r3, #0
 80096ae:	6133      	str	r3, [r6, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80096b0:	6173      	str	r3, [r6, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80096b2:	61f3      	str	r3, [r6, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80096b4:	e00a      	b.n	80096cc <USB_DevInit+0xcc>
      if (i == 0U)
 80096b6:	b9c3      	cbnz	r3, 80096ea <USB_DevInit+0xea>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80096b8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80096bc:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
    USBx_INEP(i)->DIEPTSIZ = 0U;
 80096c0:	2200      	movs	r2, #0
 80096c2:	610a      	str	r2, [r1, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80096c4:	f64f 327f 	movw	r2, #64383	; 0xfb7f
 80096c8:	608a      	str	r2, [r1, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80096ca:	3301      	adds	r3, #1
 80096cc:	9907      	ldr	r1, [sp, #28]
 80096ce:	4299      	cmp	r1, r3
 80096d0:	d910      	bls.n	80096f4 <USB_DevInit+0xf4>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80096d2:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 80096d6:	f502 6110 	add.w	r1, r2, #2304	; 0x900
 80096da:	f8d2 0900 	ldr.w	r0, [r2, #2304]	; 0x900
 80096de:	2800      	cmp	r0, #0
 80096e0:	dbe9      	blt.n	80096b6 <USB_DevInit+0xb6>
      USBx_INEP(i)->DIEPCTL = 0U;
 80096e2:	2000      	movs	r0, #0
 80096e4:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
 80096e8:	e7ea      	b.n	80096c0 <USB_DevInit+0xc0>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80096ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80096ee:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
 80096f2:	e7e5      	b.n	80096c0 <USB_DevInit+0xc0>
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80096f4:	2300      	movs	r3, #0
 80096f6:	e00a      	b.n	800970e <USB_DevInit+0x10e>
      if (i == 0U)
 80096f8:	b1bb      	cbz	r3, 800972a <USB_DevInit+0x12a>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80096fa:	f04f 4790 	mov.w	r7, #1207959552	; 0x48000000
 80096fe:	f8c2 7b00 	str.w	r7, [r2, #2816]	; 0xb00
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009702:	2200      	movs	r2, #0
 8009704:	6102      	str	r2, [r0, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009706:	f64f 327f 	movw	r2, #64383	; 0xfb7f
 800970a:	6082      	str	r2, [r0, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800970c:	3301      	adds	r3, #1
 800970e:	4299      	cmp	r1, r3
 8009710:	d910      	bls.n	8009734 <USB_DevInit+0x134>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009712:	eb05 1243 	add.w	r2, r5, r3, lsl #5
 8009716:	f502 6030 	add.w	r0, r2, #2816	; 0xb00
 800971a:	f8d2 7b00 	ldr.w	r7, [r2, #2816]	; 0xb00
 800971e:	2f00      	cmp	r7, #0
 8009720:	dbea      	blt.n	80096f8 <USB_DevInit+0xf8>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009722:	2700      	movs	r7, #0
 8009724:	f8c2 7b00 	str.w	r7, [r2, #2816]	; 0xb00
 8009728:	e7eb      	b.n	8009702 <USB_DevInit+0x102>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800972a:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
 800972e:	f8c2 7b00 	str.w	r7, [r2, #2816]	; 0xb00
 8009732:	e7e6      	b.n	8009702 <USB_DevInit+0x102>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009734:	6933      	ldr	r3, [r6, #16]
 8009736:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800973a:	6133      	str	r3, [r6, #16]
  USBx->GINTMSK = 0U;
 800973c:	2300      	movs	r3, #0
 800973e:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009740:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8009744:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 8009746:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009748:	b91b      	cbnz	r3, 8009752 <USB_DevInit+0x152>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800974a:	69a3      	ldr	r3, [r4, #24]
 800974c:	f043 0310 	orr.w	r3, r3, #16
 8009750:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009752:	69a2      	ldr	r2, [r4, #24]
 8009754:	4b0a      	ldr	r3, [pc, #40]	; (8009780 <USB_DevInit+0x180>)
 8009756:	4313      	orrs	r3, r2
 8009758:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 800975a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800975c:	b11b      	cbz	r3, 8009766 <USB_DevInit+0x166>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800975e:	69a3      	ldr	r3, [r4, #24]
 8009760:	f043 0308 	orr.w	r3, r3, #8
 8009764:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8009766:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009768:	2b01      	cmp	r3, #1
 800976a:	d004      	beq.n	8009776 <USB_DevInit+0x176>
}
 800976c:	4640      	mov	r0, r8
 800976e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009772:	b004      	add	sp, #16
 8009774:	4770      	bx	lr
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009776:	69a2      	ldr	r2, [r4, #24]
 8009778:	4b02      	ldr	r3, [pc, #8]	; (8009784 <USB_DevInit+0x184>)
 800977a:	4313      	orrs	r3, r2
 800977c:	61a3      	str	r3, [r4, #24]
 800977e:	e7f5      	b.n	800976c <USB_DevInit+0x16c>
 8009780:	803c3800 	.word	0x803c3800
 8009784:	40000004 	.word	0x40000004

08009788 <USB_DevDisconnect>:
{
 8009788:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800978a:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800978e:	f043 0302 	orr.w	r3, r3, #2
 8009792:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8009796:	2003      	movs	r0, #3
 8009798:	f7f8 ffe2 	bl	8002760 <HAL_Delay>
}
 800979c:	2000      	movs	r0, #0
 800979e:	bd08      	pop	{r3, pc}

080097a0 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80097a0:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 80097a4:	b98b      	cbnz	r3, 80097ca <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80097a6:	f3ef 8310 	mrs	r3, PRIMASK
 80097aa:	b913      	cbnz	r3, 80097b2 <osKernelInitialize+0x12>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80097ac:	f3ef 8311 	mrs	r3, BASEPRI
 80097b0:	b11b      	cbz	r3, 80097ba <osKernelInitialize+0x1a>
 80097b2:	4b0a      	ldr	r3, [pc, #40]	; (80097dc <osKernelInitialize+0x3c>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	2b02      	cmp	r3, #2
 80097b8:	d00a      	beq.n	80097d0 <osKernelInitialize+0x30>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 80097ba:	4b08      	ldr	r3, [pc, #32]	; (80097dc <osKernelInitialize+0x3c>)
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	b953      	cbnz	r3, 80097d6 <osKernelInitialize+0x36>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80097c0:	4b06      	ldr	r3, [pc, #24]	; (80097dc <osKernelInitialize+0x3c>)
 80097c2:	2201      	movs	r2, #1
 80097c4:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80097c6:	2000      	movs	r0, #0
 80097c8:	4770      	bx	lr
    stat = osErrorISR;
 80097ca:	f06f 0005 	mvn.w	r0, #5
 80097ce:	4770      	bx	lr
 80097d0:	f06f 0005 	mvn.w	r0, #5
 80097d4:	4770      	bx	lr
    } else {
      stat = osError;
 80097d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
  }

  return (stat);
}
 80097da:	4770      	bx	lr
 80097dc:	20000498 	.word	0x20000498

080097e0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80097e0:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80097e2:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 80097e6:	b9a3      	cbnz	r3, 8009812 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80097e8:	f3ef 8310 	mrs	r3, PRIMASK
 80097ec:	b913      	cbnz	r3, 80097f4 <osKernelStart+0x14>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80097ee:	f3ef 8311 	mrs	r3, BASEPRI
 80097f2:	b11b      	cbz	r3, 80097fc <osKernelStart+0x1c>
 80097f4:	4b0b      	ldr	r3, [pc, #44]	; (8009824 <osKernelStart+0x44>)
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	2b02      	cmp	r3, #2
 80097fa:	d00d      	beq.n	8009818 <osKernelStart+0x38>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 80097fc:	4b09      	ldr	r3, [pc, #36]	; (8009824 <osKernelStart+0x44>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	2b01      	cmp	r3, #1
 8009802:	d10c      	bne.n	800981e <osKernelStart+0x3e>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009804:	4b07      	ldr	r3, [pc, #28]	; (8009824 <osKernelStart+0x44>)
 8009806:	2202      	movs	r2, #2
 8009808:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800980a:	f001 fc8b 	bl	800b124 <vTaskStartScheduler>
      stat = osOK;
 800980e:	2000      	movs	r0, #0
      stat = osError;
    }
  }

  return (stat);
}
 8009810:	bd08      	pop	{r3, pc}
    stat = osErrorISR;
 8009812:	f06f 0005 	mvn.w	r0, #5
 8009816:	e7fb      	b.n	8009810 <osKernelStart+0x30>
 8009818:	f06f 0005 	mvn.w	r0, #5
 800981c:	e7f8      	b.n	8009810 <osKernelStart+0x30>
      stat = osError;
 800981e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  return (stat);
 8009822:	e7f5      	b.n	8009810 <osKernelStart+0x30>
 8009824:	20000498 	.word	0x20000498

08009828 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009828:	b5f0      	push	{r4, r5, r6, r7, lr}
 800982a:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800982c:	2400      	movs	r4, #0
 800982e:	9405      	str	r4, [sp, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009830:	f3ef 8405 	mrs	r4, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8009834:	bb44      	cbnz	r4, 8009888 <osThreadNew+0x60>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009836:	f3ef 8310 	mrs	r3, PRIMASK
 800983a:	b913      	cbnz	r3, 8009842 <osThreadNew+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800983c:	f3ef 8311 	mrs	r3, BASEPRI
 8009840:	b11b      	cbz	r3, 800984a <osThreadNew+0x22>
 8009842:	4b2d      	ldr	r3, [pc, #180]	; (80098f8 <osThreadNew+0xd0>)
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	2b02      	cmp	r3, #2
 8009848:	d01e      	beq.n	8009888 <osThreadNew+0x60>
 800984a:	b1e8      	cbz	r0, 8009888 <osThreadNew+0x60>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 800984c:	b34a      	cbz	r2, 80098a2 <osThreadNew+0x7a>
      if (attr->name != NULL) {
 800984e:	6816      	ldr	r6, [r2, #0]
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 8009850:	6994      	ldr	r4, [r2, #24]
 8009852:	b904      	cbnz	r4, 8009856 <osThreadNew+0x2e>
    prio  = (UBaseType_t)osPriorityNormal;
 8009854:	2418      	movs	r4, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009856:	1e63      	subs	r3, r4, #1
 8009858:	2b37      	cmp	r3, #55	; 0x37
 800985a:	d849      	bhi.n	80098f0 <osThreadNew+0xc8>
 800985c:	6853      	ldr	r3, [r2, #4]
 800985e:	f013 0f01 	tst.w	r3, #1
 8009862:	d147      	bne.n	80098f4 <osThreadNew+0xcc>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8009864:	6955      	ldr	r5, [r2, #20]
 8009866:	b195      	cbz	r5, 800988e <osThreadNew+0x66>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009868:	ea4f 0c95 	mov.w	ip, r5, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800986c:	6893      	ldr	r3, [r2, #8]
 800986e:	b12b      	cbz	r3, 800987c <osThreadNew+0x54>
 8009870:	68d7      	ldr	r7, [r2, #12]
 8009872:	2f5b      	cmp	r7, #91	; 0x5b
 8009874:	d902      	bls.n	800987c <osThreadNew+0x54>
 8009876:	6917      	ldr	r7, [r2, #16]
 8009878:	b107      	cbz	r7, 800987c <osThreadNew+0x54>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800987a:	b9c5      	cbnz	r5, 80098ae <osThreadNew+0x86>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800987c:	b153      	cbz	r3, 8009894 <osThreadNew+0x6c>
    mem  = -1;
 800987e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    }
    else {
      mem = 0;
    }

    if (mem == 1) {
 8009882:	2d01      	cmp	r5, #1
 8009884:	d01a      	beq.n	80098bc <osThreadNew+0x94>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
                                                                                    (StaticTask_t *)attr->cb_mem);
    }
    else {
      if (mem == 0) {
 8009886:	b32d      	cbz	r5, 80098d4 <osThreadNew+0xac>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009888:	9805      	ldr	r0, [sp, #20]
}
 800988a:	b007      	add	sp, #28
 800988c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 800988e:	f04f 0c80 	mov.w	ip, #128	; 0x80
 8009892:	e7eb      	b.n	800986c <osThreadNew+0x44>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009894:	68d3      	ldr	r3, [r2, #12]
 8009896:	b963      	cbnz	r3, 80098b2 <osThreadNew+0x8a>
 8009898:	6913      	ldr	r3, [r2, #16]
 800989a:	b16b      	cbz	r3, 80098b8 <osThreadNew+0x90>
    mem  = -1;
 800989c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80098a0:	e7ef      	b.n	8009882 <osThreadNew+0x5a>
      mem = 0;
 80098a2:	2500      	movs	r5, #0
    prio  = (UBaseType_t)osPriorityNormal;
 80098a4:	2418      	movs	r4, #24
    stack = configMINIMAL_STACK_SIZE;
 80098a6:	f04f 0c80 	mov.w	ip, #128	; 0x80
    name = NULL;
 80098aa:	462e      	mov	r6, r5
 80098ac:	e7e9      	b.n	8009882 <osThreadNew+0x5a>
        mem = 1;
 80098ae:	2501      	movs	r5, #1
 80098b0:	e7e7      	b.n	8009882 <osThreadNew+0x5a>
    mem  = -1;
 80098b2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80098b6:	e7e4      	b.n	8009882 <osThreadNew+0x5a>
          mem = 0;
 80098b8:	2500      	movs	r5, #0
 80098ba:	e7e2      	b.n	8009882 <osThreadNew+0x5a>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80098bc:	6913      	ldr	r3, [r2, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80098be:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80098c0:	9202      	str	r2, [sp, #8]
 80098c2:	9301      	str	r3, [sp, #4]
 80098c4:	9400      	str	r4, [sp, #0]
 80098c6:	460b      	mov	r3, r1
 80098c8:	4662      	mov	r2, ip
 80098ca:	4631      	mov	r1, r6
 80098cc:	f001 fbbc 	bl	800b048 <xTaskCreateStatic>
 80098d0:	9005      	str	r0, [sp, #20]
 80098d2:	e7d9      	b.n	8009888 <osThreadNew+0x60>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80098d4:	aa05      	add	r2, sp, #20
 80098d6:	9201      	str	r2, [sp, #4]
 80098d8:	9400      	str	r4, [sp, #0]
 80098da:	460b      	mov	r3, r1
 80098dc:	fa1f f28c 	uxth.w	r2, ip
 80098e0:	4631      	mov	r1, r6
 80098e2:	f001 fbeb 	bl	800b0bc <xTaskCreate>
 80098e6:	2801      	cmp	r0, #1
 80098e8:	d0ce      	beq.n	8009888 <osThreadNew+0x60>
          hTask = NULL;
 80098ea:	2300      	movs	r3, #0
 80098ec:	9305      	str	r3, [sp, #20]
 80098ee:	e7cb      	b.n	8009888 <osThreadNew+0x60>
        return (NULL);
 80098f0:	2000      	movs	r0, #0
 80098f2:	e7ca      	b.n	800988a <osThreadNew+0x62>
 80098f4:	2000      	movs	r0, #0
 80098f6:	e7c8      	b.n	800988a <osThreadNew+0x62>
 80098f8:	20000498 	.word	0x20000498

080098fc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80098fc:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80098fe:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8009902:	b983      	cbnz	r3, 8009926 <osDelay+0x2a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009904:	f3ef 8310 	mrs	r3, PRIMASK
 8009908:	b913      	cbnz	r3, 8009910 <osDelay+0x14>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800990a:	f3ef 8311 	mrs	r3, BASEPRI
 800990e:	b11b      	cbz	r3, 8009918 <osDelay+0x1c>
 8009910:	4b08      	ldr	r3, [pc, #32]	; (8009934 <osDelay+0x38>)
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	2b02      	cmp	r3, #2
 8009916:	d009      	beq.n	800992c <osDelay+0x30>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8009918:	b908      	cbnz	r0, 800991e <osDelay+0x22>
    stat = osOK;
 800991a:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 800991c:	bd08      	pop	{r3, pc}
      vTaskDelay(ticks);
 800991e:	f001 fd5f 	bl	800b3e0 <vTaskDelay>
    stat = osOK;
 8009922:	2000      	movs	r0, #0
 8009924:	e7fa      	b.n	800991c <osDelay+0x20>
    stat = osErrorISR;
 8009926:	f06f 0005 	mvn.w	r0, #5
 800992a:	e7f7      	b.n	800991c <osDelay+0x20>
 800992c:	f06f 0005 	mvn.w	r0, #5
 8009930:	e7f4      	b.n	800991c <osDelay+0x20>
 8009932:	bf00      	nop
 8009934:	20000498 	.word	0x20000498

08009938 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8009938:	b570      	push	{r4, r5, r6, lr}
 800993a:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800993c:	f3ef 8305 	mrs	r3, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8009940:	2b00      	cmp	r3, #0
 8009942:	d15d      	bne.n	8009a00 <osSemaphoreNew+0xc8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009944:	f3ef 8310 	mrs	r3, PRIMASK
 8009948:	b913      	cbnz	r3, 8009950 <osSemaphoreNew+0x18>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800994a:	f3ef 8311 	mrs	r3, BASEPRI
 800994e:	b11b      	cbz	r3, 8009958 <osSemaphoreNew+0x20>
 8009950:	4b30      	ldr	r3, [pc, #192]	; (8009a14 <osSemaphoreNew+0xdc>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	2b02      	cmp	r3, #2
 8009956:	d055      	beq.n	8009a04 <osSemaphoreNew+0xcc>
 8009958:	4288      	cmp	r0, r1
 800995a:	bf34      	ite	cc
 800995c:	2300      	movcc	r3, #0
 800995e:	2301      	movcs	r3, #1
 8009960:	2800      	cmp	r0, #0
 8009962:	d051      	beq.n	8009a08 <osSemaphoreNew+0xd0>
 8009964:	2b00      	cmp	r3, #0
 8009966:	d04f      	beq.n	8009a08 <osSemaphoreNew+0xd0>
    mem = -1;

    if (attr != NULL) {
 8009968:	b1d2      	cbz	r2, 80099a0 <osSemaphoreNew+0x68>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800996a:	6893      	ldr	r3, [r2, #8]
 800996c:	b113      	cbz	r3, 8009974 <osSemaphoreNew+0x3c>
 800996e:	68d4      	ldr	r4, [r2, #12]
 8009970:	2c4f      	cmp	r4, #79	; 0x4f
 8009972:	d817      	bhi.n	80099a4 <osSemaphoreNew+0x6c>
        mem = 1;
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009974:	2b00      	cmp	r3, #0
 8009976:	d149      	bne.n	8009a0c <osSemaphoreNew+0xd4>
 8009978:	68d3      	ldr	r3, [r2, #12]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d148      	bne.n	8009a10 <osSemaphoreNew+0xd8>
 800997e:	4615      	mov	r5, r2
 8009980:	460c      	mov	r4, r1
    else {
      mem = 0;
    }

    if (mem != -1) {
      if (max_count == 1U) {
 8009982:	2801      	cmp	r0, #1
 8009984:	d010      	beq.n	80099a8 <osSemaphoreNew+0x70>
            hSemaphore = NULL;
          }
        }
      }
      else {
        if (mem == 1) {
 8009986:	bba3      	cbnz	r3, 80099f2 <osSemaphoreNew+0xba>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8009988:	f000 fe00 	bl	800a58c <xQueueCreateCountingSemaphore>
 800998c:	4606      	mov	r6, r0
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800998e:	b126      	cbz	r6, 800999a <osSemaphoreNew+0x62>
        if (attr != NULL) {
 8009990:	b3a5      	cbz	r5, 80099fc <osSemaphoreNew+0xc4>
          name = attr->name;
 8009992:	6829      	ldr	r1, [r5, #0]
        } else {
          name = NULL;
        }
        vQueueAddToRegistry (hSemaphore, name);
 8009994:	4630      	mov	r0, r6
 8009996:	f001 f967 	bl	800ac68 <vQueueAddToRegistry>
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 800999a:	4630      	mov	r0, r6
 800999c:	b002      	add	sp, #8
 800999e:	bd70      	pop	{r4, r5, r6, pc}
      mem = 0;
 80099a0:	2300      	movs	r3, #0
 80099a2:	e7ec      	b.n	800997e <osSemaphoreNew+0x46>
        mem = 1;
 80099a4:	2301      	movs	r3, #1
 80099a6:	e7ea      	b.n	800997e <osSemaphoreNew+0x46>
        if (mem == 1) {
 80099a8:	b9d3      	cbnz	r3, 80099e0 <osSemaphoreNew+0xa8>
          hSemaphore = xSemaphoreCreateBinary();
 80099aa:	2203      	movs	r2, #3
 80099ac:	2100      	movs	r1, #0
 80099ae:	2001      	movs	r0, #1
 80099b0:	f000 fda0 	bl	800a4f4 <xQueueGenericCreate>
 80099b4:	4606      	mov	r6, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80099b6:	1c21      	adds	r1, r4, #0
 80099b8:	bf18      	it	ne
 80099ba:	2101      	movne	r1, #1
 80099bc:	2e00      	cmp	r6, #0
 80099be:	bf08      	it	eq
 80099c0:	2100      	moveq	r1, #0
 80099c2:	2900      	cmp	r1, #0
 80099c4:	d0e3      	beq.n	800998e <osSemaphoreNew+0x56>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80099c6:	2300      	movs	r3, #0
 80099c8:	461a      	mov	r2, r3
 80099ca:	4619      	mov	r1, r3
 80099cc:	4630      	mov	r0, r6
 80099ce:	f000 fdfd 	bl	800a5cc <xQueueGenericSend>
 80099d2:	2801      	cmp	r0, #1
 80099d4:	d0db      	beq.n	800998e <osSemaphoreNew+0x56>
            vSemaphoreDelete (hSemaphore);
 80099d6:	4630      	mov	r0, r6
 80099d8:	f001 f970 	bl	800acbc <vQueueDelete>
            hSemaphore = NULL;
 80099dc:	2600      	movs	r6, #0
 80099de:	e7dc      	b.n	800999a <osSemaphoreNew+0x62>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80099e0:	2303      	movs	r3, #3
 80099e2:	9300      	str	r3, [sp, #0]
 80099e4:	6893      	ldr	r3, [r2, #8]
 80099e6:	2200      	movs	r2, #0
 80099e8:	4611      	mov	r1, r2
 80099ea:	f000 fd30 	bl	800a44e <xQueueGenericCreateStatic>
 80099ee:	4606      	mov	r6, r0
 80099f0:	e7e1      	b.n	80099b6 <osSemaphoreNew+0x7e>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80099f2:	6892      	ldr	r2, [r2, #8]
 80099f4:	f000 fda5 	bl	800a542 <xQueueCreateCountingSemaphoreStatic>
 80099f8:	4606      	mov	r6, r0
 80099fa:	e7c8      	b.n	800998e <osSemaphoreNew+0x56>
          name = NULL;
 80099fc:	2100      	movs	r1, #0
 80099fe:	e7c9      	b.n	8009994 <osSemaphoreNew+0x5c>
  hSemaphore = NULL;
 8009a00:	2600      	movs	r6, #0
 8009a02:	e7ca      	b.n	800999a <osSemaphoreNew+0x62>
 8009a04:	2600      	movs	r6, #0
 8009a06:	e7c8      	b.n	800999a <osSemaphoreNew+0x62>
 8009a08:	2600      	movs	r6, #0
 8009a0a:	e7c6      	b.n	800999a <osSemaphoreNew+0x62>
 8009a0c:	2600      	movs	r6, #0
 8009a0e:	e7c4      	b.n	800999a <osSemaphoreNew+0x62>
 8009a10:	2600      	movs	r6, #0
  return ((osSemaphoreId_t)hSemaphore);
 8009a12:	e7c2      	b.n	800999a <osSemaphoreNew+0x62>
 8009a14:	20000498 	.word	0x20000498

08009a18 <osSemaphoreAcquire>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8009a18:	b370      	cbz	r0, 8009a78 <osSemaphoreAcquire+0x60>
osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8009a1a:	b510      	push	{r4, lr}
 8009a1c:	b082      	sub	sp, #8
 8009a1e:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a20:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8009a24:	b993      	cbnz	r3, 8009a4c <osSemaphoreAcquire+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009a26:	f3ef 8310 	mrs	r3, PRIMASK
 8009a2a:	b913      	cbnz	r3, 8009a32 <osSemaphoreAcquire+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009a2c:	f3ef 8311 	mrs	r3, BASEPRI
 8009a30:	b11b      	cbz	r3, 8009a3a <osSemaphoreAcquire+0x22>
 8009a32:	4b19      	ldr	r3, [pc, #100]	; (8009a98 <osSemaphoreAcquire+0x80>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	2b02      	cmp	r3, #2
 8009a38:	d008      	beq.n	8009a4c <osSemaphoreAcquire+0x34>
        portYIELD_FROM_ISR (yield);
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8009a3a:	4621      	mov	r1, r4
 8009a3c:	f000 fff0 	bl	800aa20 <xQueueSemaphoreTake>
 8009a40:	2801      	cmp	r0, #1
 8009a42:	d024      	beq.n	8009a8e <osSemaphoreAcquire+0x76>
      if (timeout != 0U) {
 8009a44:	b32c      	cbz	r4, 8009a92 <osSemaphoreAcquire+0x7a>
        stat = osErrorTimeout;
 8009a46:	f06f 0001 	mvn.w	r0, #1
 8009a4a:	e013      	b.n	8009a74 <osSemaphoreAcquire+0x5c>
    if (timeout != 0U) {
 8009a4c:	b9bc      	cbnz	r4, 8009a7e <osSemaphoreAcquire+0x66>
      yield = pdFALSE;
 8009a4e:	2100      	movs	r1, #0
 8009a50:	aa02      	add	r2, sp, #8
 8009a52:	f842 1d04 	str.w	r1, [r2, #-4]!
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8009a56:	f001 f8b1 	bl	800abbc <xQueueReceiveFromISR>
 8009a5a:	2801      	cmp	r0, #1
 8009a5c:	d112      	bne.n	8009a84 <osSemaphoreAcquire+0x6c>
        portYIELD_FROM_ISR (yield);
 8009a5e:	9b01      	ldr	r3, [sp, #4]
 8009a60:	b19b      	cbz	r3, 8009a8a <osSemaphoreAcquire+0x72>
 8009a62:	4b0e      	ldr	r3, [pc, #56]	; (8009a9c <osSemaphoreAcquire+0x84>)
 8009a64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a68:	601a      	str	r2, [r3, #0]
 8009a6a:	f3bf 8f4f 	dsb	sy
 8009a6e:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8009a72:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8009a74:	b002      	add	sp, #8
 8009a76:	bd10      	pop	{r4, pc}
    stat = osErrorParameter;
 8009a78:	f06f 0003 	mvn.w	r0, #3
}
 8009a7c:	4770      	bx	lr
      stat = osErrorParameter;
 8009a7e:	f06f 0003 	mvn.w	r0, #3
 8009a82:	e7f7      	b.n	8009a74 <osSemaphoreAcquire+0x5c>
        stat = osErrorResource;
 8009a84:	f06f 0002 	mvn.w	r0, #2
 8009a88:	e7f4      	b.n	8009a74 <osSemaphoreAcquire+0x5c>
  stat = osOK;
 8009a8a:	2000      	movs	r0, #0
 8009a8c:	e7f2      	b.n	8009a74 <osSemaphoreAcquire+0x5c>
 8009a8e:	2000      	movs	r0, #0
 8009a90:	e7f0      	b.n	8009a74 <osSemaphoreAcquire+0x5c>
        stat = osErrorResource;
 8009a92:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8009a96:	e7ed      	b.n	8009a74 <osSemaphoreAcquire+0x5c>
 8009a98:	20000498 	.word	0x20000498
 8009a9c:	e000ed04 	.word	0xe000ed04

08009aa0 <osSemaphoreRelease>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 8009aa0:	b368      	cbz	r0, 8009afe <osSemaphoreRelease+0x5e>
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8009aa2:	b500      	push	{lr}
 8009aa4:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009aa6:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 8009aaa:	b9a3      	cbnz	r3, 8009ad6 <osSemaphoreRelease+0x36>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009aac:	f3ef 8310 	mrs	r3, PRIMASK
 8009ab0:	b913      	cbnz	r3, 8009ab8 <osSemaphoreRelease+0x18>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009ab2:	f3ef 8311 	mrs	r3, BASEPRI
 8009ab6:	b11b      	cbz	r3, 8009ac0 <osSemaphoreRelease+0x20>
 8009ab8:	4b16      	ldr	r3, [pc, #88]	; (8009b14 <osSemaphoreRelease+0x74>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	2b02      	cmp	r3, #2
 8009abe:	d00a      	beq.n	8009ad6 <osSemaphoreRelease+0x36>
    } else {
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	461a      	mov	r2, r3
 8009ac4:	4619      	mov	r1, r3
 8009ac6:	f000 fd81 	bl	800a5cc <xQueueGenericSend>
 8009aca:	2801      	cmp	r0, #1
 8009acc:	d11f      	bne.n	8009b0e <osSemaphoreRelease+0x6e>
  stat = osOK;
 8009ace:	2000      	movs	r0, #0
      stat = osErrorResource;
    }
  }

  return (stat);
}
 8009ad0:	b003      	add	sp, #12
 8009ad2:	f85d fb04 	ldr.w	pc, [sp], #4
    yield = pdFALSE;
 8009ad6:	a902      	add	r1, sp, #8
 8009ad8:	2300      	movs	r3, #0
 8009ada:	f841 3d04 	str.w	r3, [r1, #-4]!
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8009ade:	f000 fe99 	bl	800a814 <xQueueGiveFromISR>
 8009ae2:	2801      	cmp	r0, #1
 8009ae4:	d10e      	bne.n	8009b04 <osSemaphoreRelease+0x64>
      portYIELD_FROM_ISR (yield);
 8009ae6:	9b01      	ldr	r3, [sp, #4]
 8009ae8:	b17b      	cbz	r3, 8009b0a <osSemaphoreRelease+0x6a>
 8009aea:	4b0b      	ldr	r3, [pc, #44]	; (8009b18 <osSemaphoreRelease+0x78>)
 8009aec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009af0:	601a      	str	r2, [r3, #0]
 8009af2:	f3bf 8f4f 	dsb	sy
 8009af6:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8009afa:	2000      	movs	r0, #0
 8009afc:	e7e8      	b.n	8009ad0 <osSemaphoreRelease+0x30>
    stat = osErrorParameter;
 8009afe:	f06f 0003 	mvn.w	r0, #3
}
 8009b02:	4770      	bx	lr
      stat = osErrorResource;
 8009b04:	f06f 0002 	mvn.w	r0, #2
 8009b08:	e7e2      	b.n	8009ad0 <osSemaphoreRelease+0x30>
  stat = osOK;
 8009b0a:	2000      	movs	r0, #0
 8009b0c:	e7e0      	b.n	8009ad0 <osSemaphoreRelease+0x30>
      stat = osErrorResource;
 8009b0e:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8009b12:	e7dd      	b.n	8009ad0 <osSemaphoreRelease+0x30>
 8009b14:	20000498 	.word	0x20000498
 8009b18:	e000ed04 	.word	0xe000ed04

08009b1c <osMessageQueuePut>:
  }

  return ((osMessageQueueId_t)hQueue);
}

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8009b1c:	b510      	push	{r4, lr}
 8009b1e:	b082      	sub	sp, #8
 8009b20:	461c      	mov	r4, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b22:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 8009b26:	b9cb      	cbnz	r3, 8009b5c <osMessageQueuePut+0x40>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009b28:	f3ef 8310 	mrs	r3, PRIMASK
 8009b2c:	b913      	cbnz	r3, 8009b34 <osMessageQueuePut+0x18>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009b2e:	f3ef 8311 	mrs	r3, BASEPRI
 8009b32:	b11b      	cbz	r3, 8009b3c <osMessageQueuePut+0x20>
 8009b34:	4b21      	ldr	r3, [pc, #132]	; (8009bbc <osMessageQueuePut+0xa0>)
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	2b02      	cmp	r3, #2
 8009b3a:	d00f      	beq.n	8009b5c <osMessageQueuePut+0x40>
        portYIELD_FROM_ISR (yield);
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009b3c:	fab1 f381 	clz	r3, r1
 8009b40:	095b      	lsrs	r3, r3, #5
 8009b42:	2800      	cmp	r0, #0
 8009b44:	bf08      	it	eq
 8009b46:	2301      	moveq	r3, #1
 8009b48:	bb7b      	cbnz	r3, 8009baa <osMessageQueuePut+0x8e>
      stat = osErrorParameter;
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009b4a:	4622      	mov	r2, r4
 8009b4c:	f000 fd3e 	bl	800a5cc <xQueueGenericSend>
 8009b50:	2801      	cmp	r0, #1
 8009b52:	d02d      	beq.n	8009bb0 <osMessageQueuePut+0x94>
        if (timeout != 0U) {
 8009b54:	b374      	cbz	r4, 8009bb4 <osMessageQueuePut+0x98>
          stat = osErrorTimeout;
 8009b56:	f06f 0001 	mvn.w	r0, #1
 8009b5a:	e019      	b.n	8009b90 <osMessageQueuePut+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009b5c:	fab1 f381 	clz	r3, r1
 8009b60:	095b      	lsrs	r3, r3, #5
 8009b62:	2800      	cmp	r0, #0
 8009b64:	bf08      	it	eq
 8009b66:	2301      	moveq	r3, #1
 8009b68:	b9a3      	cbnz	r3, 8009b94 <osMessageQueuePut+0x78>
 8009b6a:	b9b4      	cbnz	r4, 8009b9a <osMessageQueuePut+0x7e>
      yield = pdFALSE;
 8009b6c:	aa02      	add	r2, sp, #8
 8009b6e:	f842 3d04 	str.w	r3, [r2, #-4]!
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8009b72:	f000 fde9 	bl	800a748 <xQueueGenericSendFromISR>
 8009b76:	2801      	cmp	r0, #1
 8009b78:	d112      	bne.n	8009ba0 <osMessageQueuePut+0x84>
        portYIELD_FROM_ISR (yield);
 8009b7a:	9b01      	ldr	r3, [sp, #4]
 8009b7c:	b19b      	cbz	r3, 8009ba6 <osMessageQueuePut+0x8a>
 8009b7e:	4b10      	ldr	r3, [pc, #64]	; (8009bc0 <osMessageQueuePut+0xa4>)
 8009b80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b84:	601a      	str	r2, [r3, #0]
 8009b86:	f3bf 8f4f 	dsb	sy
 8009b8a:	f3bf 8f6f 	isb	sy
  stat = osOK;
 8009b8e:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 8009b90:	b002      	add	sp, #8
 8009b92:	bd10      	pop	{r4, pc}
      stat = osErrorParameter;
 8009b94:	f06f 0003 	mvn.w	r0, #3
 8009b98:	e7fa      	b.n	8009b90 <osMessageQueuePut+0x74>
 8009b9a:	f06f 0003 	mvn.w	r0, #3
 8009b9e:	e7f7      	b.n	8009b90 <osMessageQueuePut+0x74>
        stat = osErrorResource;
 8009ba0:	f06f 0002 	mvn.w	r0, #2
 8009ba4:	e7f4      	b.n	8009b90 <osMessageQueuePut+0x74>
  stat = osOK;
 8009ba6:	2000      	movs	r0, #0
 8009ba8:	e7f2      	b.n	8009b90 <osMessageQueuePut+0x74>
      stat = osErrorParameter;
 8009baa:	f06f 0003 	mvn.w	r0, #3
 8009bae:	e7ef      	b.n	8009b90 <osMessageQueuePut+0x74>
  stat = osOK;
 8009bb0:	2000      	movs	r0, #0
 8009bb2:	e7ed      	b.n	8009b90 <osMessageQueuePut+0x74>
          stat = osErrorResource;
 8009bb4:	f06f 0002 	mvn.w	r0, #2
  return (stat);
 8009bb8:	e7ea      	b.n	8009b90 <osMessageQueuePut+0x74>
 8009bba:	bf00      	nop
 8009bbc:	20000498 	.word	0x20000498
 8009bc0:	e000ed04 	.word	0xe000ed04

08009bc4 <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009bc4:	4b03      	ldr	r3, [pc, #12]	; (8009bd4 <vApplicationGetIdleTaskMemory+0x10>)
 8009bc6:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009bc8:	4b03      	ldr	r3, [pc, #12]	; (8009bd8 <vApplicationGetIdleTaskMemory+0x14>)
 8009bca:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009bcc:	2380      	movs	r3, #128	; 0x80
 8009bce:	6013      	str	r3, [r2, #0]
}
 8009bd0:	4770      	bx	lr
 8009bd2:	bf00      	nop
 8009bd4:	2000043c 	.word	0x2000043c
 8009bd8:	2000023c 	.word	0x2000023c

08009bdc <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009bdc:	4b03      	ldr	r3, [pc, #12]	; (8009bec <vApplicationGetTimerTaskMemory+0x10>)
 8009bde:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009be0:	4b03      	ldr	r3, [pc, #12]	; (8009bf0 <vApplicationGetTimerTaskMemory+0x14>)
 8009be2:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009be4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009be8:	6013      	str	r3, [r2, #0]
}
 8009bea:	4770      	bx	lr
 8009bec:	2000089c 	.word	0x2000089c
 8009bf0:	2000049c 	.word	0x2000049c

08009bf4 <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009bf4:	4a12      	ldr	r2, [pc, #72]	; (8009c40 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009bf6:	f012 0f07 	tst.w	r2, #7
 8009bfa:	d01e      	beq.n	8009c3a <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009bfc:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009bfe:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009c02:	f5c1 5370 	rsb	r3, r1, #15360	; 0x3c00
 8009c06:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009c08:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009c0a:	480e      	ldr	r0, [pc, #56]	; (8009c44 <prvHeapInit+0x50>)
 8009c0c:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009c0e:	2100      	movs	r1, #0
 8009c10:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009c12:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8009c14:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009c16:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 8009c1a:	480b      	ldr	r0, [pc, #44]	; (8009c48 <prvHeapInit+0x54>)
 8009c1c:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 8009c1e:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009c20:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009c22:	1a99      	subs	r1, r3, r2
 8009c24:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009c26:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009c28:	4b08      	ldr	r3, [pc, #32]	; (8009c4c <prvHeapInit+0x58>)
 8009c2a:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009c2c:	4b08      	ldr	r3, [pc, #32]	; (8009c50 <prvHeapInit+0x5c>)
 8009c2e:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009c30:	4b08      	ldr	r3, [pc, #32]	; (8009c54 <prvHeapInit+0x60>)
 8009c32:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009c36:	601a      	str	r2, [r3, #0]
}
 8009c38:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009c3a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009c3e:	e7e4      	b.n	8009c0a <prvHeapInit+0x16>
 8009c40:	200008fc 	.word	0x200008fc
 8009c44:	20004508 	.word	0x20004508
 8009c48:	200008f8 	.word	0x200008f8
 8009c4c:	20004504 	.word	0x20004504
 8009c50:	20004500 	.word	0x20004500
 8009c54:	200044fc 	.word	0x200044fc

08009c58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009c58:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009c5a:	4b13      	ldr	r3, [pc, #76]	; (8009ca8 <prvInsertBlockIntoFreeList+0x50>)
 8009c5c:	681a      	ldr	r2, [r3, #0]
 8009c5e:	4282      	cmp	r2, r0
 8009c60:	d31b      	bcc.n	8009c9a <prvInsertBlockIntoFreeList+0x42>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009c62:	6859      	ldr	r1, [r3, #4]
 8009c64:	185c      	adds	r4, r3, r1
 8009c66:	4284      	cmp	r4, r0
 8009c68:	d103      	bne.n	8009c72 <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009c6a:	6840      	ldr	r0, [r0, #4]
 8009c6c:	4401      	add	r1, r0
 8009c6e:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009c70:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009c72:	6841      	ldr	r1, [r0, #4]
 8009c74:	1844      	adds	r4, r0, r1
 8009c76:	42a2      	cmp	r2, r4
 8009c78:	d113      	bne.n	8009ca2 <prvInsertBlockIntoFreeList+0x4a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009c7a:	4c0c      	ldr	r4, [pc, #48]	; (8009cac <prvInsertBlockIntoFreeList+0x54>)
 8009c7c:	6824      	ldr	r4, [r4, #0]
 8009c7e:	42a2      	cmp	r2, r4
 8009c80:	d00d      	beq.n	8009c9e <prvInsertBlockIntoFreeList+0x46>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009c82:	6852      	ldr	r2, [r2, #4]
 8009c84:	4411      	add	r1, r2
 8009c86:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009c88:	681a      	ldr	r2, [r3, #0]
 8009c8a:	6812      	ldr	r2, [r2, #0]
 8009c8c:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009c8e:	4298      	cmp	r0, r3
 8009c90:	d000      	beq.n	8009c94 <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009c92:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009c94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c98:	4770      	bx	lr
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009c9a:	4613      	mov	r3, r2
 8009c9c:	e7de      	b.n	8009c5c <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009c9e:	6004      	str	r4, [r0, #0]
 8009ca0:	e7f5      	b.n	8009c8e <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009ca2:	6002      	str	r2, [r0, #0]
 8009ca4:	e7f3      	b.n	8009c8e <prvInsertBlockIntoFreeList+0x36>
 8009ca6:	bf00      	nop
 8009ca8:	20004508 	.word	0x20004508
 8009cac:	200008f8 	.word	0x200008f8

08009cb0 <pvPortMalloc>:
{
 8009cb0:	b570      	push	{r4, r5, r6, lr}
 8009cb2:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8009cb4:	f001 fa80 	bl	800b1b8 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8009cb8:	4b3f      	ldr	r3, [pc, #252]	; (8009db8 <pvPortMalloc+0x108>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	b1a3      	cbz	r3, 8009ce8 <pvPortMalloc+0x38>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009cbe:	4b3f      	ldr	r3, [pc, #252]	; (8009dbc <pvPortMalloc+0x10c>)
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	421c      	tst	r4, r3
 8009cc4:	d013      	beq.n	8009cee <pvPortMalloc+0x3e>
	( void ) xTaskResumeAll();
 8009cc6:	f001 fb11 	bl	800b2ec <xTaskResumeAll>
void *pvReturn = NULL;
 8009cca:	2600      	movs	r6, #0
			vApplicationMallocFailedHook();
 8009ccc:	f7f6 fd0e 	bl	80006ec <vApplicationMallocFailedHook>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009cd0:	f016 0f07 	tst.w	r6, #7
 8009cd4:	d06e      	beq.n	8009db4 <pvPortMalloc+0x104>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cda:	f383 8811 	msr	BASEPRI, r3
 8009cde:	f3bf 8f6f 	isb	sy
 8009ce2:	f3bf 8f4f 	dsb	sy
 8009ce6:	e7fe      	b.n	8009ce6 <pvPortMalloc+0x36>
			prvHeapInit();
 8009ce8:	f7ff ff84 	bl	8009bf4 <prvHeapInit>
 8009cec:	e7e7      	b.n	8009cbe <pvPortMalloc+0xe>
			if( xWantedSize > 0 )
 8009cee:	b194      	cbz	r4, 8009d16 <pvPortMalloc+0x66>
				xWantedSize += xHeapStructSize;
 8009cf0:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009cf2:	f014 0f07 	tst.w	r4, #7
 8009cf6:	d00e      	beq.n	8009d16 <pvPortMalloc+0x66>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009cf8:	f024 0407 	bic.w	r4, r4, #7
 8009cfc:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009cfe:	f004 0307 	and.w	r3, r4, #7
 8009d02:	b143      	cbz	r3, 8009d16 <pvPortMalloc+0x66>
 8009d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d08:	f383 8811 	msr	BASEPRI, r3
 8009d0c:	f3bf 8f6f 	isb	sy
 8009d10:	f3bf 8f4f 	dsb	sy
 8009d14:	e7fe      	b.n	8009d14 <pvPortMalloc+0x64>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009d16:	b134      	cbz	r4, 8009d26 <pvPortMalloc+0x76>
 8009d18:	4b29      	ldr	r3, [pc, #164]	; (8009dc0 <pvPortMalloc+0x110>)
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	42a3      	cmp	r3, r4
 8009d1e:	d306      	bcc.n	8009d2e <pvPortMalloc+0x7e>
				pxBlock = xStart.pxNextFreeBlock;
 8009d20:	4b28      	ldr	r3, [pc, #160]	; (8009dc4 <pvPortMalloc+0x114>)
 8009d22:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009d24:	e009      	b.n	8009d3a <pvPortMalloc+0x8a>
	( void ) xTaskResumeAll();
 8009d26:	f001 fae1 	bl	800b2ec <xTaskResumeAll>
void *pvReturn = NULL;
 8009d2a:	2600      	movs	r6, #0
 8009d2c:	e7ce      	b.n	8009ccc <pvPortMalloc+0x1c>
	( void ) xTaskResumeAll();
 8009d2e:	f001 fadd 	bl	800b2ec <xTaskResumeAll>
void *pvReturn = NULL;
 8009d32:	2600      	movs	r6, #0
 8009d34:	e7ca      	b.n	8009ccc <pvPortMalloc+0x1c>
					pxPreviousBlock = pxBlock;
 8009d36:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
 8009d38:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009d3a:	686a      	ldr	r2, [r5, #4]
 8009d3c:	42a2      	cmp	r2, r4
 8009d3e:	d202      	bcs.n	8009d46 <pvPortMalloc+0x96>
 8009d40:	682a      	ldr	r2, [r5, #0]
 8009d42:	2a00      	cmp	r2, #0
 8009d44:	d1f7      	bne.n	8009d36 <pvPortMalloc+0x86>
				if( pxBlock != pxEnd )
 8009d46:	4a1c      	ldr	r2, [pc, #112]	; (8009db8 <pvPortMalloc+0x108>)
 8009d48:	6812      	ldr	r2, [r2, #0]
 8009d4a:	42aa      	cmp	r2, r5
 8009d4c:	d014      	beq.n	8009d78 <pvPortMalloc+0xc8>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009d4e:	681e      	ldr	r6, [r3, #0]
 8009d50:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009d52:	682a      	ldr	r2, [r5, #0]
 8009d54:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009d56:	686b      	ldr	r3, [r5, #4]
 8009d58:	1b1b      	subs	r3, r3, r4
 8009d5a:	2b10      	cmp	r3, #16
 8009d5c:	d914      	bls.n	8009d88 <pvPortMalloc+0xd8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009d5e:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d60:	f010 0f07 	tst.w	r0, #7
 8009d64:	d00c      	beq.n	8009d80 <pvPortMalloc+0xd0>
 8009d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d6a:	f383 8811 	msr	BASEPRI, r3
 8009d6e:	f3bf 8f6f 	isb	sy
 8009d72:	f3bf 8f4f 	dsb	sy
 8009d76:	e7fe      	b.n	8009d76 <pvPortMalloc+0xc6>
	( void ) xTaskResumeAll();
 8009d78:	f001 fab8 	bl	800b2ec <xTaskResumeAll>
void *pvReturn = NULL;
 8009d7c:	2600      	movs	r6, #0
 8009d7e:	e7a5      	b.n	8009ccc <pvPortMalloc+0x1c>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009d80:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009d82:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009d84:	f7ff ff68 	bl	8009c58 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009d88:	686a      	ldr	r2, [r5, #4]
 8009d8a:	490d      	ldr	r1, [pc, #52]	; (8009dc0 <pvPortMalloc+0x110>)
 8009d8c:	680b      	ldr	r3, [r1, #0]
 8009d8e:	1a9b      	subs	r3, r3, r2
 8009d90:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009d92:	490d      	ldr	r1, [pc, #52]	; (8009dc8 <pvPortMalloc+0x118>)
 8009d94:	6809      	ldr	r1, [r1, #0]
 8009d96:	428b      	cmp	r3, r1
 8009d98:	d201      	bcs.n	8009d9e <pvPortMalloc+0xee>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009d9a:	490b      	ldr	r1, [pc, #44]	; (8009dc8 <pvPortMalloc+0x118>)
 8009d9c:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009d9e:	4b07      	ldr	r3, [pc, #28]	; (8009dbc <pvPortMalloc+0x10c>)
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	4313      	orrs	r3, r2
 8009da4:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009da6:	2300      	movs	r3, #0
 8009da8:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8009daa:	f001 fa9f 	bl	800b2ec <xTaskResumeAll>
		if( pvReturn == NULL )
 8009dae:	2e00      	cmp	r6, #0
 8009db0:	d18e      	bne.n	8009cd0 <pvPortMalloc+0x20>
 8009db2:	e78b      	b.n	8009ccc <pvPortMalloc+0x1c>
}
 8009db4:	4630      	mov	r0, r6
 8009db6:	bd70      	pop	{r4, r5, r6, pc}
 8009db8:	200008f8 	.word	0x200008f8
 8009dbc:	200044fc 	.word	0x200044fc
 8009dc0:	20004500 	.word	0x20004500
 8009dc4:	20004508 	.word	0x20004508
 8009dc8:	20004504 	.word	0x20004504

08009dcc <vPortFree>:
	if( pv != NULL )
 8009dcc:	b380      	cbz	r0, 8009e30 <vPortFree+0x64>
{
 8009dce:	b538      	push	{r3, r4, r5, lr}
 8009dd0:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
 8009dd2:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009dd6:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8009dda:	4916      	ldr	r1, [pc, #88]	; (8009e34 <vPortFree+0x68>)
 8009ddc:	6809      	ldr	r1, [r1, #0]
 8009dde:	420a      	tst	r2, r1
 8009de0:	d108      	bne.n	8009df4 <vPortFree+0x28>
 8009de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009de6:	f383 8811 	msr	BASEPRI, r3
 8009dea:	f3bf 8f6f 	isb	sy
 8009dee:	f3bf 8f4f 	dsb	sy
 8009df2:	e7fe      	b.n	8009df2 <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009df4:	f850 0c08 	ldr.w	r0, [r0, #-8]
 8009df8:	b140      	cbz	r0, 8009e0c <vPortFree+0x40>
 8009dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dfe:	f383 8811 	msr	BASEPRI, r3
 8009e02:	f3bf 8f6f 	isb	sy
 8009e06:	f3bf 8f4f 	dsb	sy
 8009e0a:	e7fe      	b.n	8009e0a <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009e0c:	ea22 0201 	bic.w	r2, r2, r1
 8009e10:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
 8009e14:	f001 f9d0 	bl	800b1b8 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009e18:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8009e1c:	4a06      	ldr	r2, [pc, #24]	; (8009e38 <vPortFree+0x6c>)
 8009e1e:	6813      	ldr	r3, [r2, #0]
 8009e20:	440b      	add	r3, r1
 8009e22:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009e24:	4628      	mov	r0, r5
 8009e26:	f7ff ff17 	bl	8009c58 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
 8009e2a:	f001 fa5f 	bl	800b2ec <xTaskResumeAll>
}
 8009e2e:	bd38      	pop	{r3, r4, r5, pc}
 8009e30:	4770      	bx	lr
 8009e32:	bf00      	nop
 8009e34:	200044fc 	.word	0x200044fc
 8009e38:	20004500 	.word	0x20004500

08009e3c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e3c:	f100 0308 	add.w	r3, r0, #8
 8009e40:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009e42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009e46:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e48:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e4a:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009e50:	4770      	bx	lr

08009e52 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009e52:	2300      	movs	r3, #0
 8009e54:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009e56:	4770      	bx	lr

08009e58 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8009e58:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009e5a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009e5c:	689a      	ldr	r2, [r3, #8]
 8009e5e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009e60:	689a      	ldr	r2, [r3, #8]
 8009e62:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009e64:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009e66:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8009e68:	6803      	ldr	r3, [r0, #0]
 8009e6a:	3301      	adds	r3, #1
 8009e6c:	6003      	str	r3, [r0, #0]
}
 8009e6e:	4770      	bx	lr

08009e70 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009e70:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009e72:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009e74:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8009e78:	d002      	beq.n	8009e80 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009e7a:	f100 0208 	add.w	r2, r0, #8
 8009e7e:	e002      	b.n	8009e86 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
 8009e80:	6902      	ldr	r2, [r0, #16]
 8009e82:	e004      	b.n	8009e8e <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009e84:	461a      	mov	r2, r3
 8009e86:	6853      	ldr	r3, [r2, #4]
 8009e88:	681c      	ldr	r4, [r3, #0]
 8009e8a:	42ac      	cmp	r4, r5
 8009e8c:	d9fa      	bls.n	8009e84 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009e8e:	6853      	ldr	r3, [r2, #4]
 8009e90:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009e92:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009e94:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8009e96:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009e98:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8009e9a:	6803      	ldr	r3, [r0, #0]
 8009e9c:	3301      	adds	r3, #1
 8009e9e:	6003      	str	r3, [r0, #0]
}
 8009ea0:	bc30      	pop	{r4, r5}
 8009ea2:	4770      	bx	lr

08009ea4 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009ea4:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009ea6:	6842      	ldr	r2, [r0, #4]
 8009ea8:	6881      	ldr	r1, [r0, #8]
 8009eaa:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009eac:	6882      	ldr	r2, [r0, #8]
 8009eae:	6841      	ldr	r1, [r0, #4]
 8009eb0:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009eb2:	685a      	ldr	r2, [r3, #4]
 8009eb4:	4282      	cmp	r2, r0
 8009eb6:	d006      	beq.n	8009ec6 <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009eb8:	2200      	movs	r2, #0
 8009eba:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8009ebc:	681a      	ldr	r2, [r3, #0]
 8009ebe:	3a01      	subs	r2, #1
 8009ec0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009ec2:	6818      	ldr	r0, [r3, #0]
}
 8009ec4:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009ec6:	6882      	ldr	r2, [r0, #8]
 8009ec8:	605a      	str	r2, [r3, #4]
 8009eca:	e7f5      	b.n	8009eb8 <uxListRemove+0x14>

08009ecc <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009ecc:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8009ece:	2300      	movs	r3, #0
 8009ed0:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009ed2:	4b0d      	ldr	r3, [pc, #52]	; (8009f08 <prvTaskExitError+0x3c>)
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009eda:	d008      	beq.n	8009eee <prvTaskExitError+0x22>
 8009edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ee0:	f383 8811 	msr	BASEPRI, r3
 8009ee4:	f3bf 8f6f 	isb	sy
 8009ee8:	f3bf 8f4f 	dsb	sy
 8009eec:	e7fe      	b.n	8009eec <prvTaskExitError+0x20>
 8009eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ef2:	f383 8811 	msr	BASEPRI, r3
 8009ef6:	f3bf 8f6f 	isb	sy
 8009efa:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009efe:	9b01      	ldr	r3, [sp, #4]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d0fc      	beq.n	8009efe <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009f04:	b002      	add	sp, #8
 8009f06:	4770      	bx	lr
 8009f08:	200000e8 	.word	0x200000e8

08009f0c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009f0c:	4808      	ldr	r0, [pc, #32]	; (8009f30 <prvPortStartFirstTask+0x24>)
 8009f0e:	6800      	ldr	r0, [r0, #0]
 8009f10:	6800      	ldr	r0, [r0, #0]
 8009f12:	f380 8808 	msr	MSP, r0
 8009f16:	f04f 0000 	mov.w	r0, #0
 8009f1a:	f380 8814 	msr	CONTROL, r0
 8009f1e:	b662      	cpsie	i
 8009f20:	b661      	cpsie	f
 8009f22:	f3bf 8f4f 	dsb	sy
 8009f26:	f3bf 8f6f 	isb	sy
 8009f2a:	df00      	svc	0
 8009f2c:	bf00      	nop
 8009f2e:	0000      	.short	0x0000
 8009f30:	e000ed08 	.word	0xe000ed08

08009f34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009f34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009f44 <vPortEnableVFP+0x10>
 8009f38:	6801      	ldr	r1, [r0, #0]
 8009f3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009f3e:	6001      	str	r1, [r0, #0]
 8009f40:	4770      	bx	lr
 8009f42:	0000      	.short	0x0000
 8009f44:	e000ed88 	.word	0xe000ed88

08009f48 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009f48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009f4c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009f50:	f021 0101 	bic.w	r1, r1, #1
 8009f54:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009f58:	4b05      	ldr	r3, [pc, #20]	; (8009f70 <pxPortInitialiseStack+0x28>)
 8009f5a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009f5e:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009f62:	f06f 0302 	mvn.w	r3, #2
 8009f66:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8009f6a:	3844      	subs	r0, #68	; 0x44
 8009f6c:	4770      	bx	lr
 8009f6e:	bf00      	nop
 8009f70:	08009ecd 	.word	0x08009ecd
	...

08009f80 <SVC_Handler>:
	__asm volatile (
 8009f80:	4b07      	ldr	r3, [pc, #28]	; (8009fa0 <pxCurrentTCBConst2>)
 8009f82:	6819      	ldr	r1, [r3, #0]
 8009f84:	6808      	ldr	r0, [r1, #0]
 8009f86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f8a:	f380 8809 	msr	PSP, r0
 8009f8e:	f3bf 8f6f 	isb	sy
 8009f92:	f04f 0000 	mov.w	r0, #0
 8009f96:	f380 8811 	msr	BASEPRI, r0
 8009f9a:	4770      	bx	lr
 8009f9c:	f3af 8000 	nop.w

08009fa0 <pxCurrentTCBConst2>:
 8009fa0:	20004518 	.word	0x20004518

08009fa4 <vPortEnterCritical>:
 8009fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fa8:	f383 8811 	msr	BASEPRI, r3
 8009fac:	f3bf 8f6f 	isb	sy
 8009fb0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8009fb4:	4a0a      	ldr	r2, [pc, #40]	; (8009fe0 <vPortEnterCritical+0x3c>)
 8009fb6:	6813      	ldr	r3, [r2, #0]
 8009fb8:	3301      	adds	r3, #1
 8009fba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8009fbc:	2b01      	cmp	r3, #1
 8009fbe:	d000      	beq.n	8009fc2 <vPortEnterCritical+0x1e>
}
 8009fc0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009fc2:	4b08      	ldr	r3, [pc, #32]	; (8009fe4 <vPortEnterCritical+0x40>)
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009fca:	d0f9      	beq.n	8009fc0 <vPortEnterCritical+0x1c>
 8009fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fd0:	f383 8811 	msr	BASEPRI, r3
 8009fd4:	f3bf 8f6f 	isb	sy
 8009fd8:	f3bf 8f4f 	dsb	sy
 8009fdc:	e7fe      	b.n	8009fdc <vPortEnterCritical+0x38>
 8009fde:	bf00      	nop
 8009fe0:	200000e8 	.word	0x200000e8
 8009fe4:	e000ed04 	.word	0xe000ed04

08009fe8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8009fe8:	4b09      	ldr	r3, [pc, #36]	; (800a010 <vPortExitCritical+0x28>)
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	b943      	cbnz	r3, 800a000 <vPortExitCritical+0x18>
 8009fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ff2:	f383 8811 	msr	BASEPRI, r3
 8009ff6:	f3bf 8f6f 	isb	sy
 8009ffa:	f3bf 8f4f 	dsb	sy
 8009ffe:	e7fe      	b.n	8009ffe <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800a000:	3b01      	subs	r3, #1
 800a002:	4a03      	ldr	r2, [pc, #12]	; (800a010 <vPortExitCritical+0x28>)
 800a004:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a006:	b90b      	cbnz	r3, 800a00c <vPortExitCritical+0x24>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a008:	f383 8811 	msr	BASEPRI, r3
}
 800a00c:	4770      	bx	lr
 800a00e:	bf00      	nop
 800a010:	200000e8 	.word	0x200000e8
	...

0800a020 <PendSV_Handler>:
	__asm volatile
 800a020:	f3ef 8009 	mrs	r0, PSP
 800a024:	f3bf 8f6f 	isb	sy
 800a028:	4b15      	ldr	r3, [pc, #84]	; (800a080 <pxCurrentTCBConst>)
 800a02a:	681a      	ldr	r2, [r3, #0]
 800a02c:	f01e 0f10 	tst.w	lr, #16
 800a030:	bf08      	it	eq
 800a032:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a036:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a03a:	6010      	str	r0, [r2, #0]
 800a03c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a040:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a044:	f380 8811 	msr	BASEPRI, r0
 800a048:	f3bf 8f4f 	dsb	sy
 800a04c:	f3bf 8f6f 	isb	sy
 800a050:	f001 f9ec 	bl	800b42c <vTaskSwitchContext>
 800a054:	f04f 0000 	mov.w	r0, #0
 800a058:	f380 8811 	msr	BASEPRI, r0
 800a05c:	bc09      	pop	{r0, r3}
 800a05e:	6819      	ldr	r1, [r3, #0]
 800a060:	6808      	ldr	r0, [r1, #0]
 800a062:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a066:	f01e 0f10 	tst.w	lr, #16
 800a06a:	bf08      	it	eq
 800a06c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a070:	f380 8809 	msr	PSP, r0
 800a074:	f3bf 8f6f 	isb	sy
 800a078:	4770      	bx	lr
 800a07a:	bf00      	nop
 800a07c:	f3af 8000 	nop.w

0800a080 <pxCurrentTCBConst>:
 800a080:	20004518 	.word	0x20004518

0800a084 <SysTick_Handler>:
{
 800a084:	b508      	push	{r3, lr}
	__asm volatile
 800a086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a08a:	f383 8811 	msr	BASEPRI, r3
 800a08e:	f3bf 8f6f 	isb	sy
 800a092:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800a096:	f001 f89d 	bl	800b1d4 <xTaskIncrementTick>
 800a09a:	b118      	cbz	r0, 800a0a4 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a09c:	4b03      	ldr	r3, [pc, #12]	; (800a0ac <SysTick_Handler+0x28>)
 800a09e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0a2:	601a      	str	r2, [r3, #0]
	__asm volatile
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	f383 8811 	msr	BASEPRI, r3
}
 800a0aa:	bd08      	pop	{r3, pc}
 800a0ac:	e000ed04 	.word	0xe000ed04

0800a0b0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a0b0:	4a08      	ldr	r2, [pc, #32]	; (800a0d4 <vPortSetupTimerInterrupt+0x24>)
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a0b6:	4908      	ldr	r1, [pc, #32]	; (800a0d8 <vPortSetupTimerInterrupt+0x28>)
 800a0b8:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a0ba:	4b08      	ldr	r3, [pc, #32]	; (800a0dc <vPortSetupTimerInterrupt+0x2c>)
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	4908      	ldr	r1, [pc, #32]	; (800a0e0 <vPortSetupTimerInterrupt+0x30>)
 800a0c0:	fba1 1303 	umull	r1, r3, r1, r3
 800a0c4:	099b      	lsrs	r3, r3, #6
 800a0c6:	3b01      	subs	r3, #1
 800a0c8:	4906      	ldr	r1, [pc, #24]	; (800a0e4 <vPortSetupTimerInterrupt+0x34>)
 800a0ca:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a0cc:	2307      	movs	r3, #7
 800a0ce:	6013      	str	r3, [r2, #0]
}
 800a0d0:	4770      	bx	lr
 800a0d2:	bf00      	nop
 800a0d4:	e000e010 	.word	0xe000e010
 800a0d8:	e000e018 	.word	0xe000e018
 800a0dc:	200000d8 	.word	0x200000d8
 800a0e0:	10624dd3 	.word	0x10624dd3
 800a0e4:	e000e014 	.word	0xe000e014

0800a0e8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a0e8:	4b3a      	ldr	r3, [pc, #232]	; (800a1d4 <xPortStartScheduler+0xec>)
 800a0ea:	681a      	ldr	r2, [r3, #0]
 800a0ec:	4b3a      	ldr	r3, [pc, #232]	; (800a1d8 <xPortStartScheduler+0xf0>)
 800a0ee:	429a      	cmp	r2, r3
 800a0f0:	d00d      	beq.n	800a10e <xPortStartScheduler+0x26>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a0f2:	4b38      	ldr	r3, [pc, #224]	; (800a1d4 <xPortStartScheduler+0xec>)
 800a0f4:	681a      	ldr	r2, [r3, #0]
 800a0f6:	4b39      	ldr	r3, [pc, #228]	; (800a1dc <xPortStartScheduler+0xf4>)
 800a0f8:	429a      	cmp	r2, r3
 800a0fa:	d111      	bne.n	800a120 <xPortStartScheduler+0x38>
	__asm volatile
 800a0fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a100:	f383 8811 	msr	BASEPRI, r3
 800a104:	f3bf 8f6f 	isb	sy
 800a108:	f3bf 8f4f 	dsb	sy
 800a10c:	e7fe      	b.n	800a10c <xPortStartScheduler+0x24>
 800a10e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a112:	f383 8811 	msr	BASEPRI, r3
 800a116:	f3bf 8f6f 	isb	sy
 800a11a:	f3bf 8f4f 	dsb	sy
 800a11e:	e7fe      	b.n	800a11e <xPortStartScheduler+0x36>
{
 800a120:	b510      	push	{r4, lr}
 800a122:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a124:	4b2e      	ldr	r3, [pc, #184]	; (800a1e0 <xPortStartScheduler+0xf8>)
 800a126:	781a      	ldrb	r2, [r3, #0]
 800a128:	b2d2      	uxtb	r2, r2
 800a12a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a12c:	22ff      	movs	r2, #255	; 0xff
 800a12e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a130:	781b      	ldrb	r3, [r3, #0]
 800a132:	b2db      	uxtb	r3, r3
 800a134:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a138:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800a13c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a140:	4a28      	ldr	r2, [pc, #160]	; (800a1e4 <xPortStartScheduler+0xfc>)
 800a142:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a144:	4b28      	ldr	r3, [pc, #160]	; (800a1e8 <xPortStartScheduler+0x100>)
 800a146:	2207      	movs	r2, #7
 800a148:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a14a:	e009      	b.n	800a160 <xPortStartScheduler+0x78>
			ulMaxPRIGROUPValue--;
 800a14c:	4a26      	ldr	r2, [pc, #152]	; (800a1e8 <xPortStartScheduler+0x100>)
 800a14e:	6813      	ldr	r3, [r2, #0]
 800a150:	3b01      	subs	r3, #1
 800a152:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a154:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800a158:	005b      	lsls	r3, r3, #1
 800a15a:	b2db      	uxtb	r3, r3
 800a15c:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a160:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800a164:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a168:	d1f0      	bne.n	800a14c <xPortStartScheduler+0x64>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a16a:	4b1f      	ldr	r3, [pc, #124]	; (800a1e8 <xPortStartScheduler+0x100>)
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	2b03      	cmp	r3, #3
 800a170:	d008      	beq.n	800a184 <xPortStartScheduler+0x9c>
 800a172:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a176:	f383 8811 	msr	BASEPRI, r3
 800a17a:	f3bf 8f6f 	isb	sy
 800a17e:	f3bf 8f4f 	dsb	sy
 800a182:	e7fe      	b.n	800a182 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a184:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a186:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a18a:	4a17      	ldr	r2, [pc, #92]	; (800a1e8 <xPortStartScheduler+0x100>)
 800a18c:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a18e:	9b01      	ldr	r3, [sp, #4]
 800a190:	b2db      	uxtb	r3, r3
 800a192:	4a13      	ldr	r2, [pc, #76]	; (800a1e0 <xPortStartScheduler+0xf8>)
 800a194:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a196:	4b15      	ldr	r3, [pc, #84]	; (800a1ec <xPortStartScheduler+0x104>)
 800a198:	681a      	ldr	r2, [r3, #0]
 800a19a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800a19e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a1a0:	681a      	ldr	r2, [r3, #0]
 800a1a2:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800a1a6:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 800a1a8:	f7ff ff82 	bl	800a0b0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800a1ac:	2400      	movs	r4, #0
 800a1ae:	4b10      	ldr	r3, [pc, #64]	; (800a1f0 <xPortStartScheduler+0x108>)
 800a1b0:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 800a1b2:	f7ff febf 	bl	8009f34 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a1b6:	4a0f      	ldr	r2, [pc, #60]	; (800a1f4 <xPortStartScheduler+0x10c>)
 800a1b8:	6813      	ldr	r3, [r2, #0]
 800a1ba:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a1be:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 800a1c0:	f7ff fea4 	bl	8009f0c <prvPortStartFirstTask>
	vTaskSwitchContext();
 800a1c4:	f001 f932 	bl	800b42c <vTaskSwitchContext>
	prvTaskExitError();
 800a1c8:	f7ff fe80 	bl	8009ecc <prvTaskExitError>
}
 800a1cc:	4620      	mov	r0, r4
 800a1ce:	b002      	add	sp, #8
 800a1d0:	bd10      	pop	{r4, pc}
 800a1d2:	bf00      	nop
 800a1d4:	e000ed00 	.word	0xe000ed00
 800a1d8:	410fc271 	.word	0x410fc271
 800a1dc:	410fc270 	.word	0x410fc270
 800a1e0:	e000e400 	.word	0xe000e400
 800a1e4:	20004510 	.word	0x20004510
 800a1e8:	20004514 	.word	0x20004514
 800a1ec:	e000ed20 	.word	0xe000ed20
 800a1f0:	200000e8 	.word	0x200000e8
 800a1f4:	e000ef34 	.word	0xe000ef34

0800a1f8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a1f8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a1fc:	2b0f      	cmp	r3, #15
 800a1fe:	d90f      	bls.n	800a220 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a200:	4a10      	ldr	r2, [pc, #64]	; (800a244 <vPortValidateInterruptPriority+0x4c>)
 800a202:	5c9b      	ldrb	r3, [r3, r2]
 800a204:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a206:	4a10      	ldr	r2, [pc, #64]	; (800a248 <vPortValidateInterruptPriority+0x50>)
 800a208:	7812      	ldrb	r2, [r2, #0]
 800a20a:	429a      	cmp	r2, r3
 800a20c:	d908      	bls.n	800a220 <vPortValidateInterruptPriority+0x28>
 800a20e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a212:	f383 8811 	msr	BASEPRI, r3
 800a216:	f3bf 8f6f 	isb	sy
 800a21a:	f3bf 8f4f 	dsb	sy
 800a21e:	e7fe      	b.n	800a21e <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a220:	4b0a      	ldr	r3, [pc, #40]	; (800a24c <vPortValidateInterruptPriority+0x54>)
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a228:	4a09      	ldr	r2, [pc, #36]	; (800a250 <vPortValidateInterruptPriority+0x58>)
 800a22a:	6812      	ldr	r2, [r2, #0]
 800a22c:	4293      	cmp	r3, r2
 800a22e:	d908      	bls.n	800a242 <vPortValidateInterruptPriority+0x4a>
 800a230:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a234:	f383 8811 	msr	BASEPRI, r3
 800a238:	f3bf 8f6f 	isb	sy
 800a23c:	f3bf 8f4f 	dsb	sy
 800a240:	e7fe      	b.n	800a240 <vPortValidateInterruptPriority+0x48>
	}
 800a242:	4770      	bx	lr
 800a244:	e000e3f0 	.word	0xe000e3f0
 800a248:	20004510 	.word	0x20004510
 800a24c:	e000ed0c 	.word	0xe000ed0c
 800a250:	20004514 	.word	0x20004514

0800a254 <prvGetDisinheritPriorityAfterTimeout>:
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a254:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a256:	b123      	cbz	r3, 800a262 <prvGetDisinheritPriorityAfterTimeout+0xe>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a258:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800a25a:	6818      	ldr	r0, [r3, #0]
 800a25c:	f1c0 0038 	rsb	r0, r0, #56	; 0x38
 800a260:	4770      	bx	lr
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a262:	2000      	movs	r0, #0
		}

		return uxHighestPriorityOfWaitingTasks;
	}
 800a264:	4770      	bx	lr

0800a266 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a266:	b510      	push	{r4, lr}
 800a268:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a26a:	f7ff fe9b 	bl	8009fa4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a26e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a270:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a272:	429a      	cmp	r2, r3
 800a274:	d004      	beq.n	800a280 <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
 800a276:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
 800a278:	f7ff feb6 	bl	8009fe8 <vPortExitCritical>

	return xReturn;
}
 800a27c:	4620      	mov	r0, r4
 800a27e:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 800a280:	2401      	movs	r4, #1
 800a282:	e7f9      	b.n	800a278 <prvIsQueueFull+0x12>

0800a284 <prvIsQueueEmpty>:
{
 800a284:	b510      	push	{r4, lr}
 800a286:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800a288:	f7ff fe8c 	bl	8009fa4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a28c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a28e:	b123      	cbz	r3, 800a29a <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
 800a290:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800a292:	f7ff fea9 	bl	8009fe8 <vPortExitCritical>
}
 800a296:	4620      	mov	r0, r4
 800a298:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
 800a29a:	2401      	movs	r4, #1
 800a29c:	e7f9      	b.n	800a292 <prvIsQueueEmpty+0xe>

0800a29e <prvCopyDataToQueue>:
{
 800a29e:	b570      	push	{r4, r5, r6, lr}
 800a2a0:	4604      	mov	r4, r0
 800a2a2:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a2a4:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a2a6:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800a2a8:	b95a      	cbnz	r2, 800a2c2 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a2aa:	6803      	ldr	r3, [r0, #0]
 800a2ac:	b11b      	cbz	r3, 800a2b6 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 800a2ae:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a2b0:	3501      	adds	r5, #1
 800a2b2:	63a5      	str	r5, [r4, #56]	; 0x38
}
 800a2b4:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a2b6:	6880      	ldr	r0, [r0, #8]
 800a2b8:	f001 fa2c 	bl	800b714 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a2bc:	2300      	movs	r3, #0
 800a2be:	60a3      	str	r3, [r4, #8]
 800a2c0:	e7f6      	b.n	800a2b0 <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 800a2c2:	b96e      	cbnz	r6, 800a2e0 <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a2c4:	6840      	ldr	r0, [r0, #4]
 800a2c6:	f001 fd63 	bl	800bd90 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a2ca:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800a2cc:	6863      	ldr	r3, [r4, #4]
 800a2ce:	4413      	add	r3, r2
 800a2d0:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a2d2:	68a2      	ldr	r2, [r4, #8]
 800a2d4:	4293      	cmp	r3, r2
 800a2d6:	d319      	bcc.n	800a30c <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a2d8:	6823      	ldr	r3, [r4, #0]
 800a2da:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 800a2dc:	2000      	movs	r0, #0
 800a2de:	e7e7      	b.n	800a2b0 <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a2e0:	68c0      	ldr	r0, [r0, #12]
 800a2e2:	f001 fd55 	bl	800bd90 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a2e6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800a2e8:	4252      	negs	r2, r2
 800a2ea:	68e3      	ldr	r3, [r4, #12]
 800a2ec:	4413      	add	r3, r2
 800a2ee:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a2f0:	6821      	ldr	r1, [r4, #0]
 800a2f2:	428b      	cmp	r3, r1
 800a2f4:	d202      	bcs.n	800a2fc <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a2f6:	68a3      	ldr	r3, [r4, #8]
 800a2f8:	441a      	add	r2, r3
 800a2fa:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800a2fc:	2e02      	cmp	r6, #2
 800a2fe:	d001      	beq.n	800a304 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 800a300:	2000      	movs	r0, #0
 800a302:	e7d5      	b.n	800a2b0 <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a304:	b125      	cbz	r5, 800a310 <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 800a306:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
 800a308:	2000      	movs	r0, #0
 800a30a:	e7d1      	b.n	800a2b0 <prvCopyDataToQueue+0x12>
 800a30c:	2000      	movs	r0, #0
 800a30e:	e7cf      	b.n	800a2b0 <prvCopyDataToQueue+0x12>
 800a310:	2000      	movs	r0, #0
 800a312:	e7cd      	b.n	800a2b0 <prvCopyDataToQueue+0x12>

0800a314 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a314:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800a316:	b172      	cbz	r2, 800a336 <prvCopyDataFromQueue+0x22>
{
 800a318:	b510      	push	{r4, lr}
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a31a:	68c3      	ldr	r3, [r0, #12]
 800a31c:	4413      	add	r3, r2
 800a31e:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a320:	6884      	ldr	r4, [r0, #8]
 800a322:	42a3      	cmp	r3, r4
 800a324:	d301      	bcc.n	800a32a <prvCopyDataFromQueue+0x16>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a326:	6803      	ldr	r3, [r0, #0]
 800a328:	60c3      	str	r3, [r0, #12]
 800a32a:	460c      	mov	r4, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a32c:	68c1      	ldr	r1, [r0, #12]
 800a32e:	4620      	mov	r0, r4
 800a330:	f001 fd2e 	bl	800bd90 <memcpy>
}
 800a334:	bd10      	pop	{r4, pc}
 800a336:	4770      	bx	lr

0800a338 <prvUnlockQueue>:
{
 800a338:	b538      	push	{r3, r4, r5, lr}
 800a33a:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 800a33c:	f7ff fe32 	bl	8009fa4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800a340:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
 800a344:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a346:	e003      	b.n	800a350 <prvUnlockQueue+0x18>
						vTaskMissedYield();
 800a348:	f001 f982 	bl	800b650 <vTaskMissedYield>
			--cTxLock;
 800a34c:	3c01      	subs	r4, #1
 800a34e:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a350:	2c00      	cmp	r4, #0
 800a352:	dd08      	ble.n	800a366 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a354:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a356:	b133      	cbz	r3, 800a366 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a358:	f105 0024 	add.w	r0, r5, #36	; 0x24
 800a35c:	f001 f8e6 	bl	800b52c <xTaskRemoveFromEventList>
 800a360:	2800      	cmp	r0, #0
 800a362:	d0f3      	beq.n	800a34c <prvUnlockQueue+0x14>
 800a364:	e7f0      	b.n	800a348 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
 800a366:	23ff      	movs	r3, #255	; 0xff
 800a368:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
 800a36c:	f7ff fe3c 	bl	8009fe8 <vPortExitCritical>
	taskENTER_CRITICAL();
 800a370:	f7ff fe18 	bl	8009fa4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800a374:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
 800a378:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a37a:	e003      	b.n	800a384 <prvUnlockQueue+0x4c>
					vTaskMissedYield();
 800a37c:	f001 f968 	bl	800b650 <vTaskMissedYield>
				--cRxLock;
 800a380:	3c01      	subs	r4, #1
 800a382:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a384:	2c00      	cmp	r4, #0
 800a386:	dd08      	ble.n	800a39a <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a388:	692b      	ldr	r3, [r5, #16]
 800a38a:	b133      	cbz	r3, 800a39a <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a38c:	f105 0010 	add.w	r0, r5, #16
 800a390:	f001 f8cc 	bl	800b52c <xTaskRemoveFromEventList>
 800a394:	2800      	cmp	r0, #0
 800a396:	d0f3      	beq.n	800a380 <prvUnlockQueue+0x48>
 800a398:	e7f0      	b.n	800a37c <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
 800a39a:	23ff      	movs	r3, #255	; 0xff
 800a39c:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
 800a3a0:	f7ff fe22 	bl	8009fe8 <vPortExitCritical>
}
 800a3a4:	bd38      	pop	{r3, r4, r5, pc}
	...

0800a3a8 <xQueueGenericReset>:
{
 800a3a8:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 800a3aa:	b940      	cbnz	r0, 800a3be <xQueueGenericReset+0x16>
 800a3ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3b0:	f383 8811 	msr	BASEPRI, r3
 800a3b4:	f3bf 8f6f 	isb	sy
 800a3b8:	f3bf 8f4f 	dsb	sy
 800a3bc:	e7fe      	b.n	800a3bc <xQueueGenericReset+0x14>
 800a3be:	4604      	mov	r4, r0
 800a3c0:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 800a3c2:	f7ff fdef 	bl	8009fa4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a3c6:	6821      	ldr	r1, [r4, #0]
 800a3c8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800a3ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a3cc:	fb03 1002 	mla	r0, r3, r2, r1
 800a3d0:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a3d2:	2000      	movs	r0, #0
 800a3d4:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a3d6:	6061      	str	r1, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a3d8:	3a01      	subs	r2, #1
 800a3da:	fb02 1303 	mla	r3, r2, r3, r1
 800a3de:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a3e0:	23ff      	movs	r3, #255	; 0xff
 800a3e2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a3e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 800a3ea:	b9a5      	cbnz	r5, 800a416 <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a3ec:	6923      	ldr	r3, [r4, #16]
 800a3ee:	b91b      	cbnz	r3, 800a3f8 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 800a3f0:	f7ff fdfa 	bl	8009fe8 <vPortExitCritical>
}
 800a3f4:	2001      	movs	r0, #1
 800a3f6:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a3f8:	f104 0010 	add.w	r0, r4, #16
 800a3fc:	f001 f896 	bl	800b52c <xTaskRemoveFromEventList>
 800a400:	2800      	cmp	r0, #0
 800a402:	d0f5      	beq.n	800a3f0 <xQueueGenericReset+0x48>
					queueYIELD_IF_USING_PREEMPTION();
 800a404:	4b08      	ldr	r3, [pc, #32]	; (800a428 <xQueueGenericReset+0x80>)
 800a406:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a40a:	601a      	str	r2, [r3, #0]
 800a40c:	f3bf 8f4f 	dsb	sy
 800a410:	f3bf 8f6f 	isb	sy
 800a414:	e7ec      	b.n	800a3f0 <xQueueGenericReset+0x48>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a416:	f104 0010 	add.w	r0, r4, #16
 800a41a:	f7ff fd0f 	bl	8009e3c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a41e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a422:	f7ff fd0b 	bl	8009e3c <vListInitialise>
 800a426:	e7e3      	b.n	800a3f0 <xQueueGenericReset+0x48>
 800a428:	e000ed04 	.word	0xe000ed04

0800a42c <prvInitialiseNewQueue>:
{
 800a42c:	b538      	push	{r3, r4, r5, lr}
 800a42e:	461d      	mov	r5, r3
 800a430:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
 800a432:	460b      	mov	r3, r1
 800a434:	b149      	cbz	r1, 800a44a <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a436:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 800a438:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a43a:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a43c:	2101      	movs	r1, #1
 800a43e:	4620      	mov	r0, r4
 800a440:	f7ff ffb2 	bl	800a3a8 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800a444:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
 800a448:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a44a:	6024      	str	r4, [r4, #0]
 800a44c:	e7f4      	b.n	800a438 <prvInitialiseNewQueue+0xc>

0800a44e <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a44e:	b940      	cbnz	r0, 800a462 <xQueueGenericCreateStatic+0x14>
 800a450:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a454:	f383 8811 	msr	BASEPRI, r3
 800a458:	f3bf 8f6f 	isb	sy
 800a45c:	f3bf 8f4f 	dsb	sy
 800a460:	e7fe      	b.n	800a460 <xQueueGenericCreateStatic+0x12>
	{
 800a462:	b510      	push	{r4, lr}
 800a464:	b084      	sub	sp, #16
 800a466:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
 800a468:	b17b      	cbz	r3, 800a48a <xQueueGenericCreateStatic+0x3c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a46a:	1c08      	adds	r0, r1, #0
 800a46c:	bf18      	it	ne
 800a46e:	2001      	movne	r0, #1
 800a470:	2a00      	cmp	r2, #0
 800a472:	bf08      	it	eq
 800a474:	2001      	moveq	r0, #1
 800a476:	b988      	cbnz	r0, 800a49c <xQueueGenericCreateStatic+0x4e>
 800a478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a47c:	f383 8811 	msr	BASEPRI, r3
 800a480:	f3bf 8f6f 	isb	sy
 800a484:	f3bf 8f4f 	dsb	sy
 800a488:	e7fe      	b.n	800a488 <xQueueGenericCreateStatic+0x3a>
 800a48a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a48e:	f383 8811 	msr	BASEPRI, r3
 800a492:	f3bf 8f6f 	isb	sy
 800a496:	f3bf 8f4f 	dsb	sy
 800a49a:	e7fe      	b.n	800a49a <xQueueGenericCreateStatic+0x4c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a49c:	fab1 f081 	clz	r0, r1
 800a4a0:	0940      	lsrs	r0, r0, #5
 800a4a2:	2a00      	cmp	r2, #0
 800a4a4:	bf18      	it	ne
 800a4a6:	2001      	movne	r0, #1
 800a4a8:	b940      	cbnz	r0, 800a4bc <xQueueGenericCreateStatic+0x6e>
 800a4aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ae:	f383 8811 	msr	BASEPRI, r3
 800a4b2:	f3bf 8f6f 	isb	sy
 800a4b6:	f3bf 8f4f 	dsb	sy
 800a4ba:	e7fe      	b.n	800a4ba <xQueueGenericCreateStatic+0x6c>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a4bc:	2050      	movs	r0, #80	; 0x50
 800a4be:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a4c0:	9803      	ldr	r0, [sp, #12]
 800a4c2:	2850      	cmp	r0, #80	; 0x50
 800a4c4:	d008      	beq.n	800a4d8 <xQueueGenericCreateStatic+0x8a>
 800a4c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ca:	f383 8811 	msr	BASEPRI, r3
 800a4ce:	f3bf 8f6f 	isb	sy
 800a4d2:	f3bf 8f4f 	dsb	sy
 800a4d6:	e7fe      	b.n	800a4d6 <xQueueGenericCreateStatic+0x88>
 800a4d8:	4620      	mov	r0, r4
 800a4da:	461c      	mov	r4, r3
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a4dc:	9b03      	ldr	r3, [sp, #12]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a4de:	2301      	movs	r3, #1
 800a4e0:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a4e4:	9400      	str	r4, [sp, #0]
 800a4e6:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800a4ea:	f7ff ff9f 	bl	800a42c <prvInitialiseNewQueue>
	}
 800a4ee:	4620      	mov	r0, r4
 800a4f0:	b004      	add	sp, #16
 800a4f2:	bd10      	pop	{r4, pc}

0800a4f4 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a4f4:	b940      	cbnz	r0, 800a508 <xQueueGenericCreate+0x14>
 800a4f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4fa:	f383 8811 	msr	BASEPRI, r3
 800a4fe:	f3bf 8f6f 	isb	sy
 800a502:	f3bf 8f4f 	dsb	sy
 800a506:	e7fe      	b.n	800a506 <xQueueGenericCreate+0x12>
	{
 800a508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a50a:	b083      	sub	sp, #12
 800a50c:	4606      	mov	r6, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
 800a50e:	b111      	cbz	r1, 800a516 <xQueueGenericCreate+0x22>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a510:	fb01 f000 	mul.w	r0, r1, r0
 800a514:	e000      	b.n	800a518 <xQueueGenericCreate+0x24>
			xQueueSizeInBytes = ( size_t ) 0;
 800a516:	2000      	movs	r0, #0
 800a518:	4617      	mov	r7, r2
 800a51a:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a51c:	3050      	adds	r0, #80	; 0x50
 800a51e:	f7ff fbc7 	bl	8009cb0 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800a522:	4605      	mov	r5, r0
 800a524:	b150      	cbz	r0, 800a53c <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a526:	2300      	movs	r3, #0
 800a528:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a52c:	9000      	str	r0, [sp, #0]
 800a52e:	463b      	mov	r3, r7
 800a530:	f100 0250 	add.w	r2, r0, #80	; 0x50
 800a534:	4621      	mov	r1, r4
 800a536:	4630      	mov	r0, r6
 800a538:	f7ff ff78 	bl	800a42c <prvInitialiseNewQueue>
	}
 800a53c:	4628      	mov	r0, r5
 800a53e:	b003      	add	sp, #12
 800a540:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a542 <xQueueCreateCountingSemaphoreStatic>:
		configASSERT( uxMaxCount != 0 );
 800a542:	b940      	cbnz	r0, 800a556 <xQueueCreateCountingSemaphoreStatic+0x14>
 800a544:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a548:	f383 8811 	msr	BASEPRI, r3
 800a54c:	f3bf 8f6f 	isb	sy
 800a550:	f3bf 8f4f 	dsb	sy
 800a554:	e7fe      	b.n	800a554 <xQueueCreateCountingSemaphoreStatic+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a556:	4288      	cmp	r0, r1
 800a558:	d208      	bcs.n	800a56c <xQueueCreateCountingSemaphoreStatic+0x2a>
 800a55a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a55e:	f383 8811 	msr	BASEPRI, r3
 800a562:	f3bf 8f6f 	isb	sy
 800a566:	f3bf 8f4f 	dsb	sy
 800a56a:	e7fe      	b.n	800a56a <xQueueCreateCountingSemaphoreStatic+0x28>
	{
 800a56c:	b510      	push	{r4, lr}
 800a56e:	b082      	sub	sp, #8
 800a570:	4613      	mov	r3, r2
 800a572:	460c      	mov	r4, r1
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a574:	2202      	movs	r2, #2
 800a576:	9200      	str	r2, [sp, #0]
 800a578:	2200      	movs	r2, #0
 800a57a:	4611      	mov	r1, r2
 800a57c:	f7ff ff67 	bl	800a44e <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 800a580:	4603      	mov	r3, r0
 800a582:	b100      	cbz	r0, 800a586 <xQueueCreateCountingSemaphoreStatic+0x44>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a584:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800a586:	4618      	mov	r0, r3
 800a588:	b002      	add	sp, #8
 800a58a:	bd10      	pop	{r4, pc}

0800a58c <xQueueCreateCountingSemaphore>:
		configASSERT( uxMaxCount != 0 );
 800a58c:	b940      	cbnz	r0, 800a5a0 <xQueueCreateCountingSemaphore+0x14>
 800a58e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a592:	f383 8811 	msr	BASEPRI, r3
 800a596:	f3bf 8f6f 	isb	sy
 800a59a:	f3bf 8f4f 	dsb	sy
 800a59e:	e7fe      	b.n	800a59e <xQueueCreateCountingSemaphore+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a5a0:	4288      	cmp	r0, r1
 800a5a2:	d208      	bcs.n	800a5b6 <xQueueCreateCountingSemaphore+0x2a>
 800a5a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5a8:	f383 8811 	msr	BASEPRI, r3
 800a5ac:	f3bf 8f6f 	isb	sy
 800a5b0:	f3bf 8f4f 	dsb	sy
 800a5b4:	e7fe      	b.n	800a5b4 <xQueueCreateCountingSemaphore+0x28>
	{
 800a5b6:	b510      	push	{r4, lr}
 800a5b8:	460c      	mov	r4, r1
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a5ba:	2202      	movs	r2, #2
 800a5bc:	2100      	movs	r1, #0
 800a5be:	f7ff ff99 	bl	800a4f4 <xQueueGenericCreate>
		if( xHandle != NULL )
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	b100      	cbz	r0, 800a5c8 <xQueueCreateCountingSemaphore+0x3c>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a5c6:	6384      	str	r4, [r0, #56]	; 0x38
	}
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	bd10      	pop	{r4, pc}

0800a5cc <xQueueGenericSend>:
{
 800a5cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a5ce:	b085      	sub	sp, #20
 800a5d0:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800a5d2:	b160      	cbz	r0, 800a5ee <xQueueGenericSend+0x22>
 800a5d4:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a5d6:	b999      	cbnz	r1, 800a600 <xQueueGenericSend+0x34>
 800a5d8:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800a5da:	b18a      	cbz	r2, 800a600 <xQueueGenericSend+0x34>
 800a5dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5e0:	f383 8811 	msr	BASEPRI, r3
 800a5e4:	f3bf 8f6f 	isb	sy
 800a5e8:	f3bf 8f4f 	dsb	sy
 800a5ec:	e7fe      	b.n	800a5ec <xQueueGenericSend+0x20>
 800a5ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5f2:	f383 8811 	msr	BASEPRI, r3
 800a5f6:	f3bf 8f6f 	isb	sy
 800a5fa:	f3bf 8f4f 	dsb	sy
 800a5fe:	e7fe      	b.n	800a5fe <xQueueGenericSend+0x32>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a600:	2b02      	cmp	r3, #2
 800a602:	d10b      	bne.n	800a61c <xQueueGenericSend+0x50>
 800a604:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800a606:	2a01      	cmp	r2, #1
 800a608:	d008      	beq.n	800a61c <xQueueGenericSend+0x50>
 800a60a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a60e:	f383 8811 	msr	BASEPRI, r3
 800a612:	f3bf 8f6f 	isb	sy
 800a616:	f3bf 8f4f 	dsb	sy
 800a61a:	e7fe      	b.n	800a61a <xQueueGenericSend+0x4e>
 800a61c:	461e      	mov	r6, r3
 800a61e:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a620:	f001 f81c 	bl	800b65c <xTaskGetSchedulerState>
 800a624:	b950      	cbnz	r0, 800a63c <xQueueGenericSend+0x70>
 800a626:	9b01      	ldr	r3, [sp, #4]
 800a628:	b153      	cbz	r3, 800a640 <xQueueGenericSend+0x74>
 800a62a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a62e:	f383 8811 	msr	BASEPRI, r3
 800a632:	f3bf 8f6f 	isb	sy
 800a636:	f3bf 8f4f 	dsb	sy
 800a63a:	e7fe      	b.n	800a63a <xQueueGenericSend+0x6e>
 800a63c:	2500      	movs	r5, #0
 800a63e:	e03a      	b.n	800a6b6 <xQueueGenericSend+0xea>
 800a640:	2500      	movs	r5, #0
 800a642:	e038      	b.n	800a6b6 <xQueueGenericSend+0xea>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a644:	4632      	mov	r2, r6
 800a646:	4639      	mov	r1, r7
 800a648:	4620      	mov	r0, r4
 800a64a:	f7ff fe28 	bl	800a29e <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a64e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a650:	b94b      	cbnz	r3, 800a666 <xQueueGenericSend+0x9a>
					else if( xYieldRequired != pdFALSE )
 800a652:	b1a8      	cbz	r0, 800a680 <xQueueGenericSend+0xb4>
						queueYIELD_IF_USING_PREEMPTION();
 800a654:	4b3b      	ldr	r3, [pc, #236]	; (800a744 <xQueueGenericSend+0x178>)
 800a656:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a65a:	601a      	str	r2, [r3, #0]
 800a65c:	f3bf 8f4f 	dsb	sy
 800a660:	f3bf 8f6f 	isb	sy
 800a664:	e00c      	b.n	800a680 <xQueueGenericSend+0xb4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a666:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a66a:	f000 ff5f 	bl	800b52c <xTaskRemoveFromEventList>
 800a66e:	b138      	cbz	r0, 800a680 <xQueueGenericSend+0xb4>
							queueYIELD_IF_USING_PREEMPTION();
 800a670:	4b34      	ldr	r3, [pc, #208]	; (800a744 <xQueueGenericSend+0x178>)
 800a672:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a676:	601a      	str	r2, [r3, #0]
 800a678:	f3bf 8f4f 	dsb	sy
 800a67c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800a680:	f7ff fcb2 	bl	8009fe8 <vPortExitCritical>
				return pdPASS;
 800a684:	2001      	movs	r0, #1
}
 800a686:	b005      	add	sp, #20
 800a688:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
 800a68a:	f7ff fcad 	bl	8009fe8 <vPortExitCritical>
					return errQUEUE_FULL;
 800a68e:	2000      	movs	r0, #0
 800a690:	e7f9      	b.n	800a686 <xQueueGenericSend+0xba>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a692:	a802      	add	r0, sp, #8
 800a694:	f000 ff90 	bl	800b5b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a698:	2501      	movs	r5, #1
 800a69a:	e019      	b.n	800a6d0 <xQueueGenericSend+0x104>
		prvLockQueue( pxQueue );
 800a69c:	2300      	movs	r3, #0
 800a69e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800a6a2:	e021      	b.n	800a6e8 <xQueueGenericSend+0x11c>
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a6aa:	e023      	b.n	800a6f4 <xQueueGenericSend+0x128>
				prvUnlockQueue( pxQueue );
 800a6ac:	4620      	mov	r0, r4
 800a6ae:	f7ff fe43 	bl	800a338 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a6b2:	f000 fe1b 	bl	800b2ec <xTaskResumeAll>
		taskENTER_CRITICAL();
 800a6b6:	f7ff fc75 	bl	8009fa4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a6ba:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a6bc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a6be:	429a      	cmp	r2, r3
 800a6c0:	d3c0      	bcc.n	800a644 <xQueueGenericSend+0x78>
 800a6c2:	2e02      	cmp	r6, #2
 800a6c4:	d0be      	beq.n	800a644 <xQueueGenericSend+0x78>
				if( xTicksToWait == ( TickType_t ) 0 )
 800a6c6:	9b01      	ldr	r3, [sp, #4]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d0de      	beq.n	800a68a <xQueueGenericSend+0xbe>
				else if( xEntryTimeSet == pdFALSE )
 800a6cc:	2d00      	cmp	r5, #0
 800a6ce:	d0e0      	beq.n	800a692 <xQueueGenericSend+0xc6>
		taskEXIT_CRITICAL();
 800a6d0:	f7ff fc8a 	bl	8009fe8 <vPortExitCritical>
		vTaskSuspendAll();
 800a6d4:	f000 fd70 	bl	800b1b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a6d8:	f7ff fc64 	bl	8009fa4 <vPortEnterCritical>
 800a6dc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a6e0:	b25b      	sxtb	r3, r3
 800a6e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a6e6:	d0d9      	beq.n	800a69c <xQueueGenericSend+0xd0>
 800a6e8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a6ec:	b25b      	sxtb	r3, r3
 800a6ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a6f2:	d0d7      	beq.n	800a6a4 <xQueueGenericSend+0xd8>
 800a6f4:	f7ff fc78 	bl	8009fe8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a6f8:	a901      	add	r1, sp, #4
 800a6fa:	a802      	add	r0, sp, #8
 800a6fc:	f000 ff68 	bl	800b5d0 <xTaskCheckForTimeOut>
 800a700:	b9c8      	cbnz	r0, 800a736 <xQueueGenericSend+0x16a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a702:	4620      	mov	r0, r4
 800a704:	f7ff fdaf 	bl	800a266 <prvIsQueueFull>
 800a708:	2800      	cmp	r0, #0
 800a70a:	d0cf      	beq.n	800a6ac <xQueueGenericSend+0xe0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a70c:	9901      	ldr	r1, [sp, #4]
 800a70e:	f104 0010 	add.w	r0, r4, #16
 800a712:	f000 fed7 	bl	800b4c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a716:	4620      	mov	r0, r4
 800a718:	f7ff fe0e 	bl	800a338 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a71c:	f000 fde6 	bl	800b2ec <xTaskResumeAll>
 800a720:	2800      	cmp	r0, #0
 800a722:	d1c8      	bne.n	800a6b6 <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
 800a724:	4b07      	ldr	r3, [pc, #28]	; (800a744 <xQueueGenericSend+0x178>)
 800a726:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a72a:	601a      	str	r2, [r3, #0]
 800a72c:	f3bf 8f4f 	dsb	sy
 800a730:	f3bf 8f6f 	isb	sy
 800a734:	e7bf      	b.n	800a6b6 <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
 800a736:	4620      	mov	r0, r4
 800a738:	f7ff fdfe 	bl	800a338 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a73c:	f000 fdd6 	bl	800b2ec <xTaskResumeAll>
			return errQUEUE_FULL;
 800a740:	2000      	movs	r0, #0
 800a742:	e7a0      	b.n	800a686 <xQueueGenericSend+0xba>
 800a744:	e000ed04 	.word	0xe000ed04

0800a748 <xQueueGenericSendFromISR>:
{
 800a748:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 800a74c:	b160      	cbz	r0, 800a768 <xQueueGenericSendFromISR+0x20>
 800a74e:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a750:	b999      	cbnz	r1, 800a77a <xQueueGenericSendFromISR+0x32>
 800a752:	6c00      	ldr	r0, [r0, #64]	; 0x40
 800a754:	b188      	cbz	r0, 800a77a <xQueueGenericSendFromISR+0x32>
 800a756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a75a:	f383 8811 	msr	BASEPRI, r3
 800a75e:	f3bf 8f6f 	isb	sy
 800a762:	f3bf 8f4f 	dsb	sy
 800a766:	e7fe      	b.n	800a766 <xQueueGenericSendFromISR+0x1e>
 800a768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a76c:	f383 8811 	msr	BASEPRI, r3
 800a770:	f3bf 8f6f 	isb	sy
 800a774:	f3bf 8f4f 	dsb	sy
 800a778:	e7fe      	b.n	800a778 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a77a:	2b02      	cmp	r3, #2
 800a77c:	d10b      	bne.n	800a796 <xQueueGenericSendFromISR+0x4e>
 800a77e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800a780:	2801      	cmp	r0, #1
 800a782:	d008      	beq.n	800a796 <xQueueGenericSendFromISR+0x4e>
 800a784:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a788:	f383 8811 	msr	BASEPRI, r3
 800a78c:	f3bf 8f6f 	isb	sy
 800a790:	f3bf 8f4f 	dsb	sy
 800a794:	e7fe      	b.n	800a794 <xQueueGenericSendFromISR+0x4c>
 800a796:	461f      	mov	r7, r3
 800a798:	4690      	mov	r8, r2
 800a79a:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a79c:	f7ff fd2c 	bl	800a1f8 <vPortValidateInterruptPriority>
	__asm volatile
 800a7a0:	f3ef 8611 	mrs	r6, BASEPRI
 800a7a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7a8:	f383 8811 	msr	BASEPRI, r3
 800a7ac:	f3bf 8f6f 	isb	sy
 800a7b0:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a7b4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a7b6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a7b8:	429a      	cmp	r2, r3
 800a7ba:	d303      	bcc.n	800a7c4 <xQueueGenericSendFromISR+0x7c>
 800a7bc:	2f02      	cmp	r7, #2
 800a7be:	d001      	beq.n	800a7c4 <xQueueGenericSendFromISR+0x7c>
			xReturn = errQUEUE_FULL;
 800a7c0:	2000      	movs	r0, #0
 800a7c2:	e00f      	b.n	800a7e4 <xQueueGenericSendFromISR+0x9c>
			const int8_t cTxLock = pxQueue->cTxLock;
 800a7c4:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 800a7c8:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a7ca:	463a      	mov	r2, r7
 800a7cc:	4649      	mov	r1, r9
 800a7ce:	4620      	mov	r0, r4
 800a7d0:	f7ff fd65 	bl	800a29e <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800a7d4:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800a7d8:	d008      	beq.n	800a7ec <xQueueGenericSendFromISR+0xa4>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a7da:	1c6b      	adds	r3, r5, #1
 800a7dc:	b25b      	sxtb	r3, r3
 800a7de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 800a7e2:	2001      	movs	r0, #1
	__asm volatile
 800a7e4:	f386 8811 	msr	BASEPRI, r6
}
 800a7e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a7ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a7ee:	b15b      	cbz	r3, 800a808 <xQueueGenericSendFromISR+0xc0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a7f0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a7f4:	f000 fe9a 	bl	800b52c <xTaskRemoveFromEventList>
 800a7f8:	b140      	cbz	r0, 800a80c <xQueueGenericSendFromISR+0xc4>
							if( pxHigherPriorityTaskWoken != NULL )
 800a7fa:	f1b8 0f00 	cmp.w	r8, #0
 800a7fe:	d007      	beq.n	800a810 <xQueueGenericSendFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a800:	2001      	movs	r0, #1
 800a802:	f8c8 0000 	str.w	r0, [r8]
 800a806:	e7ed      	b.n	800a7e4 <xQueueGenericSendFromISR+0x9c>
			xReturn = pdPASS;
 800a808:	2001      	movs	r0, #1
 800a80a:	e7eb      	b.n	800a7e4 <xQueueGenericSendFromISR+0x9c>
 800a80c:	2001      	movs	r0, #1
 800a80e:	e7e9      	b.n	800a7e4 <xQueueGenericSendFromISR+0x9c>
 800a810:	2001      	movs	r0, #1
 800a812:	e7e7      	b.n	800a7e4 <xQueueGenericSendFromISR+0x9c>

0800a814 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 800a814:	b160      	cbz	r0, 800a830 <xQueueGiveFromISR+0x1c>
{
 800a816:	b570      	push	{r4, r5, r6, lr}
 800a818:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 800a81a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800a81c:	b18b      	cbz	r3, 800a842 <xQueueGiveFromISR+0x2e>
	__asm volatile
 800a81e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a822:	f383 8811 	msr	BASEPRI, r3
 800a826:	f3bf 8f6f 	isb	sy
 800a82a:	f3bf 8f4f 	dsb	sy
 800a82e:	e7fe      	b.n	800a82e <xQueueGiveFromISR+0x1a>
 800a830:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a834:	f383 8811 	msr	BASEPRI, r3
 800a838:	f3bf 8f6f 	isb	sy
 800a83c:	f3bf 8f4f 	dsb	sy
 800a840:	e7fe      	b.n	800a840 <xQueueGiveFromISR+0x2c>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a842:	6803      	ldr	r3, [r0, #0]
 800a844:	b32b      	cbz	r3, 800a892 <xQueueGiveFromISR+0x7e>
 800a846:	460e      	mov	r6, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a848:	f7ff fcd6 	bl	800a1f8 <vPortValidateInterruptPriority>
	__asm volatile
 800a84c:	f3ef 8511 	mrs	r5, BASEPRI
 800a850:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a854:	f383 8811 	msr	BASEPRI, r3
 800a858:	f3bf 8f6f 	isb	sy
 800a85c:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a860:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a862:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a864:	4293      	cmp	r3, r2
 800a866:	d926      	bls.n	800a8b6 <xQueueGiveFromISR+0xa2>
			const int8_t cTxLock = pxQueue->cTxLock;
 800a868:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a86c:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a86e:	3201      	adds	r2, #1
 800a870:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 800a872:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a876:	d118      	bne.n	800a8aa <xQueueGiveFromISR+0x96>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a878:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a87a:	b1f3      	cbz	r3, 800a8ba <xQueueGiveFromISR+0xa6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a87c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a880:	f000 fe54 	bl	800b52c <xTaskRemoveFromEventList>
 800a884:	b1d8      	cbz	r0, 800a8be <xQueueGiveFromISR+0xaa>
							if( pxHigherPriorityTaskWoken != NULL )
 800a886:	b1e6      	cbz	r6, 800a8c2 <xQueueGiveFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a888:	2001      	movs	r0, #1
 800a88a:	6030      	str	r0, [r6, #0]
	__asm volatile
 800a88c:	f385 8811 	msr	BASEPRI, r5
}
 800a890:	bd70      	pop	{r4, r5, r6, pc}
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a892:	6883      	ldr	r3, [r0, #8]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d0d6      	beq.n	800a846 <xQueueGiveFromISR+0x32>
	__asm volatile
 800a898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a89c:	f383 8811 	msr	BASEPRI, r3
 800a8a0:	f3bf 8f6f 	isb	sy
 800a8a4:	f3bf 8f4f 	dsb	sy
 800a8a8:	e7fe      	b.n	800a8a8 <xQueueGiveFromISR+0x94>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a8aa:	3301      	adds	r3, #1
 800a8ac:	b25b      	sxtb	r3, r3
 800a8ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
 800a8b2:	2001      	movs	r0, #1
 800a8b4:	e7ea      	b.n	800a88c <xQueueGiveFromISR+0x78>
			xReturn = errQUEUE_FULL;
 800a8b6:	2000      	movs	r0, #0
 800a8b8:	e7e8      	b.n	800a88c <xQueueGiveFromISR+0x78>
			xReturn = pdPASS;
 800a8ba:	2001      	movs	r0, #1
 800a8bc:	e7e6      	b.n	800a88c <xQueueGiveFromISR+0x78>
 800a8be:	2001      	movs	r0, #1
 800a8c0:	e7e4      	b.n	800a88c <xQueueGiveFromISR+0x78>
 800a8c2:	2001      	movs	r0, #1
 800a8c4:	e7e2      	b.n	800a88c <xQueueGiveFromISR+0x78>
	...

0800a8c8 <xQueueReceive>:
{
 800a8c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8ca:	b085      	sub	sp, #20
 800a8cc:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800a8ce:	b160      	cbz	r0, 800a8ea <xQueueReceive+0x22>
 800a8d0:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a8d2:	b999      	cbnz	r1, 800a8fc <xQueueReceive+0x34>
 800a8d4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800a8d6:	b18b      	cbz	r3, 800a8fc <xQueueReceive+0x34>
 800a8d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8dc:	f383 8811 	msr	BASEPRI, r3
 800a8e0:	f3bf 8f6f 	isb	sy
 800a8e4:	f3bf 8f4f 	dsb	sy
 800a8e8:	e7fe      	b.n	800a8e8 <xQueueReceive+0x20>
 800a8ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ee:	f383 8811 	msr	BASEPRI, r3
 800a8f2:	f3bf 8f6f 	isb	sy
 800a8f6:	f3bf 8f4f 	dsb	sy
 800a8fa:	e7fe      	b.n	800a8fa <xQueueReceive+0x32>
 800a8fc:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a8fe:	f000 fead 	bl	800b65c <xTaskGetSchedulerState>
 800a902:	b950      	cbnz	r0, 800a91a <xQueueReceive+0x52>
 800a904:	9b01      	ldr	r3, [sp, #4]
 800a906:	b153      	cbz	r3, 800a91e <xQueueReceive+0x56>
 800a908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a90c:	f383 8811 	msr	BASEPRI, r3
 800a910:	f3bf 8f6f 	isb	sy
 800a914:	f3bf 8f4f 	dsb	sy
 800a918:	e7fe      	b.n	800a918 <xQueueReceive+0x50>
 800a91a:	2600      	movs	r6, #0
 800a91c:	e03e      	b.n	800a99c <xQueueReceive+0xd4>
 800a91e:	2600      	movs	r6, #0
 800a920:	e03c      	b.n	800a99c <xQueueReceive+0xd4>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a922:	4639      	mov	r1, r7
 800a924:	4620      	mov	r0, r4
 800a926:	f7ff fcf5 	bl	800a314 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a92a:	3d01      	subs	r5, #1
 800a92c:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a92e:	6923      	ldr	r3, [r4, #16]
 800a930:	b923      	cbnz	r3, 800a93c <xQueueReceive+0x74>
				taskEXIT_CRITICAL();
 800a932:	f7ff fb59 	bl	8009fe8 <vPortExitCritical>
				return pdPASS;
 800a936:	2001      	movs	r0, #1
}
 800a938:	b005      	add	sp, #20
 800a93a:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a93c:	f104 0010 	add.w	r0, r4, #16
 800a940:	f000 fdf4 	bl	800b52c <xTaskRemoveFromEventList>
 800a944:	2800      	cmp	r0, #0
 800a946:	d0f4      	beq.n	800a932 <xQueueReceive+0x6a>
						queueYIELD_IF_USING_PREEMPTION();
 800a948:	4b34      	ldr	r3, [pc, #208]	; (800aa1c <xQueueReceive+0x154>)
 800a94a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a94e:	601a      	str	r2, [r3, #0]
 800a950:	f3bf 8f4f 	dsb	sy
 800a954:	f3bf 8f6f 	isb	sy
 800a958:	e7eb      	b.n	800a932 <xQueueReceive+0x6a>
					taskEXIT_CRITICAL();
 800a95a:	f7ff fb45 	bl	8009fe8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800a95e:	2000      	movs	r0, #0
 800a960:	e7ea      	b.n	800a938 <xQueueReceive+0x70>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a962:	a802      	add	r0, sp, #8
 800a964:	f000 fe28 	bl	800b5b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a968:	2601      	movs	r6, #1
 800a96a:	e021      	b.n	800a9b0 <xQueueReceive+0xe8>
		prvLockQueue( pxQueue );
 800a96c:	2300      	movs	r3, #0
 800a96e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800a972:	e029      	b.n	800a9c8 <xQueueReceive+0x100>
 800a974:	2300      	movs	r3, #0
 800a976:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a97a:	e02b      	b.n	800a9d4 <xQueueReceive+0x10c>
				prvUnlockQueue( pxQueue );
 800a97c:	4620      	mov	r0, r4
 800a97e:	f7ff fcdb 	bl	800a338 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a982:	f000 fcb3 	bl	800b2ec <xTaskResumeAll>
 800a986:	e009      	b.n	800a99c <xQueueReceive+0xd4>
			prvUnlockQueue( pxQueue );
 800a988:	4620      	mov	r0, r4
 800a98a:	f7ff fcd5 	bl	800a338 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a98e:	f000 fcad 	bl	800b2ec <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a992:	4620      	mov	r0, r4
 800a994:	f7ff fc76 	bl	800a284 <prvIsQueueEmpty>
 800a998:	2800      	cmp	r0, #0
 800a99a:	d13d      	bne.n	800aa18 <xQueueReceive+0x150>
		taskENTER_CRITICAL();
 800a99c:	f7ff fb02 	bl	8009fa4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a9a0:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a9a2:	2d00      	cmp	r5, #0
 800a9a4:	d1bd      	bne.n	800a922 <xQueueReceive+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800a9a6:	9b01      	ldr	r3, [sp, #4]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d0d6      	beq.n	800a95a <xQueueReceive+0x92>
				else if( xEntryTimeSet == pdFALSE )
 800a9ac:	2e00      	cmp	r6, #0
 800a9ae:	d0d8      	beq.n	800a962 <xQueueReceive+0x9a>
		taskEXIT_CRITICAL();
 800a9b0:	f7ff fb1a 	bl	8009fe8 <vPortExitCritical>
		vTaskSuspendAll();
 800a9b4:	f000 fc00 	bl	800b1b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a9b8:	f7ff faf4 	bl	8009fa4 <vPortEnterCritical>
 800a9bc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a9c0:	b25b      	sxtb	r3, r3
 800a9c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a9c6:	d0d1      	beq.n	800a96c <xQueueReceive+0xa4>
 800a9c8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a9cc:	b25b      	sxtb	r3, r3
 800a9ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a9d2:	d0cf      	beq.n	800a974 <xQueueReceive+0xac>
 800a9d4:	f7ff fb08 	bl	8009fe8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a9d8:	a901      	add	r1, sp, #4
 800a9da:	a802      	add	r0, sp, #8
 800a9dc:	f000 fdf8 	bl	800b5d0 <xTaskCheckForTimeOut>
 800a9e0:	2800      	cmp	r0, #0
 800a9e2:	d1d1      	bne.n	800a988 <xQueueReceive+0xc0>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a9e4:	4620      	mov	r0, r4
 800a9e6:	f7ff fc4d 	bl	800a284 <prvIsQueueEmpty>
 800a9ea:	2800      	cmp	r0, #0
 800a9ec:	d0c6      	beq.n	800a97c <xQueueReceive+0xb4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a9ee:	9901      	ldr	r1, [sp, #4]
 800a9f0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800a9f4:	f000 fd66 	bl	800b4c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a9f8:	4620      	mov	r0, r4
 800a9fa:	f7ff fc9d 	bl	800a338 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a9fe:	f000 fc75 	bl	800b2ec <xTaskResumeAll>
 800aa02:	2800      	cmp	r0, #0
 800aa04:	d1ca      	bne.n	800a99c <xQueueReceive+0xd4>
					portYIELD_WITHIN_API();
 800aa06:	4b05      	ldr	r3, [pc, #20]	; (800aa1c <xQueueReceive+0x154>)
 800aa08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa0c:	601a      	str	r2, [r3, #0]
 800aa0e:	f3bf 8f4f 	dsb	sy
 800aa12:	f3bf 8f6f 	isb	sy
 800aa16:	e7c1      	b.n	800a99c <xQueueReceive+0xd4>
				return errQUEUE_EMPTY;
 800aa18:	2000      	movs	r0, #0
 800aa1a:	e78d      	b.n	800a938 <xQueueReceive+0x70>
 800aa1c:	e000ed04 	.word	0xe000ed04

0800aa20 <xQueueSemaphoreTake>:
{
 800aa20:	b570      	push	{r4, r5, r6, lr}
 800aa22:	b084      	sub	sp, #16
 800aa24:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800aa26:	b940      	cbnz	r0, 800aa3a <xQueueSemaphoreTake+0x1a>
 800aa28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa2c:	f383 8811 	msr	BASEPRI, r3
 800aa30:	f3bf 8f6f 	isb	sy
 800aa34:	f3bf 8f4f 	dsb	sy
 800aa38:	e7fe      	b.n	800aa38 <xQueueSemaphoreTake+0x18>
 800aa3a:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 800aa3c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800aa3e:	b143      	cbz	r3, 800aa52 <xQueueSemaphoreTake+0x32>
 800aa40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa44:	f383 8811 	msr	BASEPRI, r3
 800aa48:	f3bf 8f6f 	isb	sy
 800aa4c:	f3bf 8f4f 	dsb	sy
 800aa50:	e7fe      	b.n	800aa50 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aa52:	f000 fe03 	bl	800b65c <xTaskGetSchedulerState>
 800aa56:	b950      	cbnz	r0, 800aa6e <xQueueSemaphoreTake+0x4e>
 800aa58:	9b01      	ldr	r3, [sp, #4]
 800aa5a:	b15b      	cbz	r3, 800aa74 <xQueueSemaphoreTake+0x54>
 800aa5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa60:	f383 8811 	msr	BASEPRI, r3
 800aa64:	f3bf 8f6f 	isb	sy
 800aa68:	f3bf 8f4f 	dsb	sy
 800aa6c:	e7fe      	b.n	800aa6c <xQueueSemaphoreTake+0x4c>
 800aa6e:	2500      	movs	r5, #0
 800aa70:	462e      	mov	r6, r5
 800aa72:	e051      	b.n	800ab18 <xQueueSemaphoreTake+0xf8>
 800aa74:	2500      	movs	r5, #0
 800aa76:	462e      	mov	r6, r5
 800aa78:	e04e      	b.n	800ab18 <xQueueSemaphoreTake+0xf8>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800aa7a:	3b01      	subs	r3, #1
 800aa7c:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aa7e:	6823      	ldr	r3, [r4, #0]
 800aa80:	b913      	cbnz	r3, 800aa88 <xQueueSemaphoreTake+0x68>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800aa82:	f000 fedf 	bl	800b844 <pvTaskIncrementMutexHeldCount>
 800aa86:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aa88:	6923      	ldr	r3, [r4, #16]
 800aa8a:	b163      	cbz	r3, 800aaa6 <xQueueSemaphoreTake+0x86>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aa8c:	f104 0010 	add.w	r0, r4, #16
 800aa90:	f000 fd4c 	bl	800b52c <xTaskRemoveFromEventList>
 800aa94:	b138      	cbz	r0, 800aaa6 <xQueueSemaphoreTake+0x86>
						queueYIELD_IF_USING_PREEMPTION();
 800aa96:	4b48      	ldr	r3, [pc, #288]	; (800abb8 <xQueueSemaphoreTake+0x198>)
 800aa98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa9c:	601a      	str	r2, [r3, #0]
 800aa9e:	f3bf 8f4f 	dsb	sy
 800aaa2:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800aaa6:	f7ff fa9f 	bl	8009fe8 <vPortExitCritical>
				return pdPASS;
 800aaaa:	2501      	movs	r5, #1
}
 800aaac:	4628      	mov	r0, r5
 800aaae:	b004      	add	sp, #16
 800aab0:	bd70      	pop	{r4, r5, r6, pc}
						configASSERT( xInheritanceOccurred == pdFALSE );
 800aab2:	b145      	cbz	r5, 800aac6 <xQueueSemaphoreTake+0xa6>
 800aab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aab8:	f383 8811 	msr	BASEPRI, r3
 800aabc:	f3bf 8f6f 	isb	sy
 800aac0:	f3bf 8f4f 	dsb	sy
 800aac4:	e7fe      	b.n	800aac4 <xQueueSemaphoreTake+0xa4>
					taskEXIT_CRITICAL();
 800aac6:	f7ff fa8f 	bl	8009fe8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800aaca:	e7ef      	b.n	800aaac <xQueueSemaphoreTake+0x8c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aacc:	a802      	add	r0, sp, #8
 800aace:	f000 fd73 	bl	800b5b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aad2:	2601      	movs	r6, #1
 800aad4:	e02a      	b.n	800ab2c <xQueueSemaphoreTake+0x10c>
		prvLockQueue( pxQueue );
 800aad6:	2300      	movs	r3, #0
 800aad8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800aadc:	e032      	b.n	800ab44 <xQueueSemaphoreTake+0x124>
 800aade:	2300      	movs	r3, #0
 800aae0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800aae4:	e034      	b.n	800ab50 <xQueueSemaphoreTake+0x130>
						taskENTER_CRITICAL();
 800aae6:	f7ff fa5d 	bl	8009fa4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800aaea:	68a0      	ldr	r0, [r4, #8]
 800aaec:	f000 fdc6 	bl	800b67c <xTaskPriorityInherit>
 800aaf0:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 800aaf2:	f7ff fa79 	bl	8009fe8 <vPortExitCritical>
 800aaf6:	e03b      	b.n	800ab70 <xQueueSemaphoreTake+0x150>
				prvUnlockQueue( pxQueue );
 800aaf8:	4620      	mov	r0, r4
 800aafa:	f7ff fc1d 	bl	800a338 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aafe:	f000 fbf5 	bl	800b2ec <xTaskResumeAll>
 800ab02:	e009      	b.n	800ab18 <xQueueSemaphoreTake+0xf8>
			prvUnlockQueue( pxQueue );
 800ab04:	4620      	mov	r0, r4
 800ab06:	f7ff fc17 	bl	800a338 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ab0a:	f000 fbef 	bl	800b2ec <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ab0e:	4620      	mov	r0, r4
 800ab10:	f7ff fbb8 	bl	800a284 <prvIsQueueEmpty>
 800ab14:	2800      	cmp	r0, #0
 800ab16:	d140      	bne.n	800ab9a <xQueueSemaphoreTake+0x17a>
		taskENTER_CRITICAL();
 800ab18:	f7ff fa44 	bl	8009fa4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ab1c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d1ab      	bne.n	800aa7a <xQueueSemaphoreTake+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800ab22:	9b01      	ldr	r3, [sp, #4]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d0c4      	beq.n	800aab2 <xQueueSemaphoreTake+0x92>
				else if( xEntryTimeSet == pdFALSE )
 800ab28:	2e00      	cmp	r6, #0
 800ab2a:	d0cf      	beq.n	800aacc <xQueueSemaphoreTake+0xac>
		taskEXIT_CRITICAL();
 800ab2c:	f7ff fa5c 	bl	8009fe8 <vPortExitCritical>
		vTaskSuspendAll();
 800ab30:	f000 fb42 	bl	800b1b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ab34:	f7ff fa36 	bl	8009fa4 <vPortEnterCritical>
 800ab38:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800ab3c:	b25b      	sxtb	r3, r3
 800ab3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ab42:	d0c8      	beq.n	800aad6 <xQueueSemaphoreTake+0xb6>
 800ab44:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800ab48:	b25b      	sxtb	r3, r3
 800ab4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ab4e:	d0c6      	beq.n	800aade <xQueueSemaphoreTake+0xbe>
 800ab50:	f7ff fa4a 	bl	8009fe8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ab54:	a901      	add	r1, sp, #4
 800ab56:	a802      	add	r0, sp, #8
 800ab58:	f000 fd3a 	bl	800b5d0 <xTaskCheckForTimeOut>
 800ab5c:	2800      	cmp	r0, #0
 800ab5e:	d1d1      	bne.n	800ab04 <xQueueSemaphoreTake+0xe4>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ab60:	4620      	mov	r0, r4
 800ab62:	f7ff fb8f 	bl	800a284 <prvIsQueueEmpty>
 800ab66:	2800      	cmp	r0, #0
 800ab68:	d0c6      	beq.n	800aaf8 <xQueueSemaphoreTake+0xd8>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ab6a:	6823      	ldr	r3, [r4, #0]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d0ba      	beq.n	800aae6 <xQueueSemaphoreTake+0xc6>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ab70:	9901      	ldr	r1, [sp, #4]
 800ab72:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800ab76:	f000 fca5 	bl	800b4c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ab7a:	4620      	mov	r0, r4
 800ab7c:	f7ff fbdc 	bl	800a338 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ab80:	f000 fbb4 	bl	800b2ec <xTaskResumeAll>
 800ab84:	2800      	cmp	r0, #0
 800ab86:	d1c7      	bne.n	800ab18 <xQueueSemaphoreTake+0xf8>
					portYIELD_WITHIN_API();
 800ab88:	4b0b      	ldr	r3, [pc, #44]	; (800abb8 <xQueueSemaphoreTake+0x198>)
 800ab8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab8e:	601a      	str	r2, [r3, #0]
 800ab90:	f3bf 8f4f 	dsb	sy
 800ab94:	f3bf 8f6f 	isb	sy
 800ab98:	e7be      	b.n	800ab18 <xQueueSemaphoreTake+0xf8>
					if( xInheritanceOccurred != pdFALSE )
 800ab9a:	2d00      	cmp	r5, #0
 800ab9c:	d086      	beq.n	800aaac <xQueueSemaphoreTake+0x8c>
						taskENTER_CRITICAL();
 800ab9e:	f7ff fa01 	bl	8009fa4 <vPortEnterCritical>
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800aba2:	4620      	mov	r0, r4
 800aba4:	f7ff fb56 	bl	800a254 <prvGetDisinheritPriorityAfterTimeout>
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800aba8:	4601      	mov	r1, r0
 800abaa:	68a0      	ldr	r0, [r4, #8]
 800abac:	f000 fdfa 	bl	800b7a4 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800abb0:	f7ff fa1a 	bl	8009fe8 <vPortExitCritical>
				return errQUEUE_EMPTY;
 800abb4:	2500      	movs	r5, #0
 800abb6:	e779      	b.n	800aaac <xQueueSemaphoreTake+0x8c>
 800abb8:	e000ed04 	.word	0xe000ed04

0800abbc <xQueueReceiveFromISR>:
{
 800abbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 800abc0:	b160      	cbz	r0, 800abdc <xQueueReceiveFromISR+0x20>
 800abc2:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800abc4:	b999      	cbnz	r1, 800abee <xQueueReceiveFromISR+0x32>
 800abc6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800abc8:	b18b      	cbz	r3, 800abee <xQueueReceiveFromISR+0x32>
 800abca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abce:	f383 8811 	msr	BASEPRI, r3
 800abd2:	f3bf 8f6f 	isb	sy
 800abd6:	f3bf 8f4f 	dsb	sy
 800abda:	e7fe      	b.n	800abda <xQueueReceiveFromISR+0x1e>
 800abdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abe0:	f383 8811 	msr	BASEPRI, r3
 800abe4:	f3bf 8f6f 	isb	sy
 800abe8:	f3bf 8f4f 	dsb	sy
 800abec:	e7fe      	b.n	800abec <xQueueReceiveFromISR+0x30>
 800abee:	4617      	mov	r7, r2
 800abf0:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800abf2:	f7ff fb01 	bl	800a1f8 <vPortValidateInterruptPriority>
	__asm volatile
 800abf6:	f3ef 8611 	mrs	r6, BASEPRI
 800abfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abfe:	f383 8811 	msr	BASEPRI, r3
 800ac02:	f3bf 8f6f 	isb	sy
 800ac06:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ac0a:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ac0e:	f1b8 0f00 	cmp.w	r8, #0
 800ac12:	d01d      	beq.n	800ac50 <xQueueReceiveFromISR+0x94>
			const int8_t cRxLock = pxQueue->cRxLock;
 800ac14:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800ac18:	b26d      	sxtb	r5, r5
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ac1a:	4649      	mov	r1, r9
 800ac1c:	4620      	mov	r0, r4
 800ac1e:	f7ff fb79 	bl	800a314 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ac22:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800ac26:	63a3      	str	r3, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 800ac28:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800ac2c:	d005      	beq.n	800ac3a <xQueueReceiveFromISR+0x7e>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ac2e:	1c6b      	adds	r3, r5, #1
 800ac30:	b25b      	sxtb	r3, r3
 800ac32:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
			xReturn = pdPASS;
 800ac36:	2001      	movs	r0, #1
 800ac38:	e00b      	b.n	800ac52 <xQueueReceiveFromISR+0x96>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac3a:	6923      	ldr	r3, [r4, #16]
 800ac3c:	b16b      	cbz	r3, 800ac5a <xQueueReceiveFromISR+0x9e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac3e:	f104 0010 	add.w	r0, r4, #16
 800ac42:	f000 fc73 	bl	800b52c <xTaskRemoveFromEventList>
 800ac46:	b150      	cbz	r0, 800ac5e <xQueueReceiveFromISR+0xa2>
						if( pxHigherPriorityTaskWoken != NULL )
 800ac48:	b15f      	cbz	r7, 800ac62 <xQueueReceiveFromISR+0xa6>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ac4a:	2001      	movs	r0, #1
 800ac4c:	6038      	str	r0, [r7, #0]
 800ac4e:	e000      	b.n	800ac52 <xQueueReceiveFromISR+0x96>
			xReturn = pdFAIL;
 800ac50:	2000      	movs	r0, #0
	__asm volatile
 800ac52:	f386 8811 	msr	BASEPRI, r6
}
 800ac56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			xReturn = pdPASS;
 800ac5a:	2001      	movs	r0, #1
 800ac5c:	e7f9      	b.n	800ac52 <xQueueReceiveFromISR+0x96>
 800ac5e:	2001      	movs	r0, #1
 800ac60:	e7f7      	b.n	800ac52 <xQueueReceiveFromISR+0x96>
 800ac62:	2001      	movs	r0, #1
 800ac64:	e7f5      	b.n	800ac52 <xQueueReceiveFromISR+0x96>
	...

0800ac68 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ac68:	2300      	movs	r3, #0
 800ac6a:	2b07      	cmp	r3, #7
 800ac6c:	d80c      	bhi.n	800ac88 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ac6e:	4a07      	ldr	r2, [pc, #28]	; (800ac8c <vQueueAddToRegistry+0x24>)
 800ac70:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800ac74:	b10a      	cbz	r2, 800ac7a <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ac76:	3301      	adds	r3, #1
 800ac78:	e7f7      	b.n	800ac6a <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ac7a:	4a04      	ldr	r2, [pc, #16]	; (800ac8c <vQueueAddToRegistry+0x24>)
 800ac7c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ac80:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ac84:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ac86:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ac88:	4770      	bx	lr
 800ac8a:	bf00      	nop
 800ac8c:	20005f8c 	.word	0x20005f8c

0800ac90 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ac90:	2300      	movs	r3, #0
 800ac92:	2b07      	cmp	r3, #7
 800ac94:	d80f      	bhi.n	800acb6 <vQueueUnregisterQueue+0x26>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800ac96:	4a08      	ldr	r2, [pc, #32]	; (800acb8 <vQueueUnregisterQueue+0x28>)
 800ac98:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800ac9c:	6852      	ldr	r2, [r2, #4]
 800ac9e:	4282      	cmp	r2, r0
 800aca0:	d001      	beq.n	800aca6 <vQueueUnregisterQueue+0x16>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aca2:	3301      	adds	r3, #1
 800aca4:	e7f5      	b.n	800ac92 <vQueueUnregisterQueue+0x2>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800aca6:	4a04      	ldr	r2, [pc, #16]	; (800acb8 <vQueueUnregisterQueue+0x28>)
 800aca8:	2100      	movs	r1, #0
 800acaa:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800acae:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800acb2:	6059      	str	r1, [r3, #4]
				break;
 800acb4:	4770      	bx	lr
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800acb6:	4770      	bx	lr
 800acb8:	20005f8c 	.word	0x20005f8c

0800acbc <vQueueDelete>:
	configASSERT( pxQueue );
 800acbc:	b940      	cbnz	r0, 800acd0 <vQueueDelete+0x14>
	__asm volatile
 800acbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acc2:	f383 8811 	msr	BASEPRI, r3
 800acc6:	f3bf 8f6f 	isb	sy
 800acca:	f3bf 8f4f 	dsb	sy
 800acce:	e7fe      	b.n	800acce <vQueueDelete+0x12>
{
 800acd0:	b510      	push	{r4, lr}
 800acd2:	4604      	mov	r4, r0
		vQueueUnregisterQueue( pxQueue );
 800acd4:	f7ff ffdc 	bl	800ac90 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800acd8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800acdc:	b103      	cbz	r3, 800ace0 <vQueueDelete+0x24>
}
 800acde:	bd10      	pop	{r4, pc}
			vPortFree( pxQueue );
 800ace0:	4620      	mov	r0, r4
 800ace2:	f7ff f873 	bl	8009dcc <vPortFree>
}
 800ace6:	e7fa      	b.n	800acde <vQueueDelete+0x22>

0800ace8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ace8:	b570      	push	{r4, r5, r6, lr}
 800acea:	4604      	mov	r4, r0
 800acec:	460d      	mov	r5, r1
 800acee:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800acf0:	f7ff f958 	bl	8009fa4 <vPortEnterCritical>
 800acf4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800acf8:	b25b      	sxtb	r3, r3
 800acfa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800acfe:	d00d      	beq.n	800ad1c <vQueueWaitForMessageRestricted+0x34>
 800ad00:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800ad04:	b25b      	sxtb	r3, r3
 800ad06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ad0a:	d00b      	beq.n	800ad24 <vQueueWaitForMessageRestricted+0x3c>
 800ad0c:	f7ff f96c 	bl	8009fe8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ad10:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ad12:	b15b      	cbz	r3, 800ad2c <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ad14:	4620      	mov	r0, r4
 800ad16:	f7ff fb0f 	bl	800a338 <prvUnlockQueue>
	}
 800ad1a:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800ad22:	e7ed      	b.n	800ad00 <vQueueWaitForMessageRestricted+0x18>
 800ad24:	2300      	movs	r3, #0
 800ad26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ad2a:	e7ef      	b.n	800ad0c <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ad2c:	4632      	mov	r2, r6
 800ad2e:	4629      	mov	r1, r5
 800ad30:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800ad34:	f000 fbde 	bl	800b4f4 <vTaskPlaceOnEventListRestricted>
 800ad38:	e7ec      	b.n	800ad14 <vQueueWaitForMessageRestricted+0x2c>
	...

0800ad3c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ad3c:	4b08      	ldr	r3, [pc, #32]	; (800ad60 <prvResetNextTaskUnblockTime+0x24>)
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	b13b      	cbz	r3, 800ad54 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad44:	4b06      	ldr	r3, [pc, #24]	; (800ad60 <prvResetNextTaskUnblockTime+0x24>)
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	68db      	ldr	r3, [r3, #12]
 800ad4a:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ad4c:	685a      	ldr	r2, [r3, #4]
 800ad4e:	4b05      	ldr	r3, [pc, #20]	; (800ad64 <prvResetNextTaskUnblockTime+0x28>)
 800ad50:	601a      	str	r2, [r3, #0]
	}
}
 800ad52:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
 800ad54:	4b03      	ldr	r3, [pc, #12]	; (800ad64 <prvResetNextTaskUnblockTime+0x28>)
 800ad56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ad5a:	601a      	str	r2, [r3, #0]
 800ad5c:	4770      	bx	lr
 800ad5e:	bf00      	nop
 800ad60:	2000451c 	.word	0x2000451c
 800ad64:	200049c4 	.word	0x200049c4

0800ad68 <prvInitialiseNewTask>:
{
 800ad68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad6c:	4681      	mov	r9, r0
 800ad6e:	460d      	mov	r5, r1
 800ad70:	4693      	mov	fp, r2
 800ad72:	469a      	mov	sl, r3
 800ad74:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800ad76:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800ad7a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ad7c:	0092      	lsls	r2, r2, #2
 800ad7e:	21a5      	movs	r1, #165	; 0xa5
 800ad80:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800ad82:	f001 f810 	bl	800bda6 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ad86:	6b27      	ldr	r7, [r4, #48]	; 0x30
 800ad88:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800ad8c:	445b      	add	r3, fp
 800ad8e:	eb07 0783 	add.w	r7, r7, r3, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ad92:	f027 0707 	bic.w	r7, r7, #7
	if( pcName != NULL )
 800ad96:	b385      	cbz	r5, 800adfa <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ad98:	2300      	movs	r3, #0
 800ad9a:	2b0f      	cmp	r3, #15
 800ad9c:	d807      	bhi.n	800adae <prvInitialiseNewTask+0x46>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ad9e:	5ce9      	ldrb	r1, [r5, r3]
 800ada0:	18e2      	adds	r2, r4, r3
 800ada2:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 800ada6:	5cea      	ldrb	r2, [r5, r3]
 800ada8:	b10a      	cbz	r2, 800adae <prvInitialiseNewTask+0x46>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800adaa:	3301      	adds	r3, #1
 800adac:	e7f5      	b.n	800ad9a <prvInitialiseNewTask+0x32>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800adae:	2300      	movs	r3, #0
 800adb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800adb4:	2e37      	cmp	r6, #55	; 0x37
 800adb6:	d900      	bls.n	800adba <prvInitialiseNewTask+0x52>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800adb8:	2637      	movs	r6, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
 800adba:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800adbc:	64e6      	str	r6, [r4, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800adbe:	2500      	movs	r5, #0
 800adc0:	6525      	str	r5, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800adc2:	1d20      	adds	r0, r4, #4
 800adc4:	f7ff f845 	bl	8009e52 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800adc8:	f104 0018 	add.w	r0, r4, #24
 800adcc:	f7ff f841 	bl	8009e52 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800add0:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800add2:	f1c6 0638 	rsb	r6, r6, #56	; 0x38
 800add6:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800add8:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
 800adda:	6565      	str	r5, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800addc:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ade0:	4652      	mov	r2, sl
 800ade2:	4649      	mov	r1, r9
 800ade4:	4638      	mov	r0, r7
 800ade6:	f7ff f8af 	bl	8009f48 <pxPortInitialiseStack>
 800adea:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800adec:	f1b8 0f00 	cmp.w	r8, #0
 800adf0:	d001      	beq.n	800adf6 <prvInitialiseNewTask+0x8e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800adf2:	f8c8 4000 	str.w	r4, [r8]
}
 800adf6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800adfa:	2300      	movs	r3, #0
 800adfc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 800ae00:	e7d8      	b.n	800adb4 <prvInitialiseNewTask+0x4c>
	...

0800ae04 <prvInitialiseTaskLists>:
{
 800ae04:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ae06:	2400      	movs	r4, #0
 800ae08:	e007      	b.n	800ae1a <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ae0a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800ae0e:	0093      	lsls	r3, r2, #2
 800ae10:	480e      	ldr	r0, [pc, #56]	; (800ae4c <prvInitialiseTaskLists+0x48>)
 800ae12:	4418      	add	r0, r3
 800ae14:	f7ff f812 	bl	8009e3c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ae18:	3401      	adds	r4, #1
 800ae1a:	2c37      	cmp	r4, #55	; 0x37
 800ae1c:	d9f5      	bls.n	800ae0a <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
 800ae1e:	4d0c      	ldr	r5, [pc, #48]	; (800ae50 <prvInitialiseTaskLists+0x4c>)
 800ae20:	4628      	mov	r0, r5
 800ae22:	f7ff f80b 	bl	8009e3c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ae26:	4c0b      	ldr	r4, [pc, #44]	; (800ae54 <prvInitialiseTaskLists+0x50>)
 800ae28:	4620      	mov	r0, r4
 800ae2a:	f7ff f807 	bl	8009e3c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ae2e:	480a      	ldr	r0, [pc, #40]	; (800ae58 <prvInitialiseTaskLists+0x54>)
 800ae30:	f7ff f804 	bl	8009e3c <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800ae34:	4809      	ldr	r0, [pc, #36]	; (800ae5c <prvInitialiseTaskLists+0x58>)
 800ae36:	f7ff f801 	bl	8009e3c <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800ae3a:	4809      	ldr	r0, [pc, #36]	; (800ae60 <prvInitialiseTaskLists+0x5c>)
 800ae3c:	f7fe fffe 	bl	8009e3c <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800ae40:	4b08      	ldr	r3, [pc, #32]	; (800ae64 <prvInitialiseTaskLists+0x60>)
 800ae42:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ae44:	4b08      	ldr	r3, [pc, #32]	; (800ae68 <prvInitialiseTaskLists+0x64>)
 800ae46:	601c      	str	r4, [r3, #0]
}
 800ae48:	bd38      	pop	{r3, r4, r5, pc}
 800ae4a:	bf00      	nop
 800ae4c:	20004524 	.word	0x20004524
 800ae50:	2000499c 	.word	0x2000499c
 800ae54:	200049b0 	.word	0x200049b0
 800ae58:	200049cc 	.word	0x200049cc
 800ae5c:	200049f8 	.word	0x200049f8
 800ae60:	200049e4 	.word	0x200049e4
 800ae64:	2000451c 	.word	0x2000451c
 800ae68:	20004520 	.word	0x20004520

0800ae6c <prvAddNewTaskToReadyList>:
{
 800ae6c:	b510      	push	{r4, lr}
 800ae6e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800ae70:	f7ff f898 	bl	8009fa4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 800ae74:	4a21      	ldr	r2, [pc, #132]	; (800aefc <prvAddNewTaskToReadyList+0x90>)
 800ae76:	6813      	ldr	r3, [r2, #0]
 800ae78:	3301      	adds	r3, #1
 800ae7a:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ae7c:	4b20      	ldr	r3, [pc, #128]	; (800af00 <prvAddNewTaskToReadyList+0x94>)
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	b15b      	cbz	r3, 800ae9a <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
 800ae82:	4b20      	ldr	r3, [pc, #128]	; (800af04 <prvAddNewTaskToReadyList+0x98>)
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	b96b      	cbnz	r3, 800aea4 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ae88:	4b1d      	ldr	r3, [pc, #116]	; (800af00 <prvAddNewTaskToReadyList+0x94>)
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae8e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ae90:	429a      	cmp	r2, r3
 800ae92:	d807      	bhi.n	800aea4 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
 800ae94:	4b1a      	ldr	r3, [pc, #104]	; (800af00 <prvAddNewTaskToReadyList+0x94>)
 800ae96:	601c      	str	r4, [r3, #0]
 800ae98:	e004      	b.n	800aea4 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
 800ae9a:	4b19      	ldr	r3, [pc, #100]	; (800af00 <prvAddNewTaskToReadyList+0x94>)
 800ae9c:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ae9e:	6813      	ldr	r3, [r2, #0]
 800aea0:	2b01      	cmp	r3, #1
 800aea2:	d027      	beq.n	800aef4 <prvAddNewTaskToReadyList+0x88>
		uxTaskNumber++;
 800aea4:	4a18      	ldr	r2, [pc, #96]	; (800af08 <prvAddNewTaskToReadyList+0x9c>)
 800aea6:	6813      	ldr	r3, [r2, #0]
 800aea8:	3301      	adds	r3, #1
 800aeaa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800aeac:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 800aeae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800aeb0:	4a16      	ldr	r2, [pc, #88]	; (800af0c <prvAddNewTaskToReadyList+0xa0>)
 800aeb2:	6812      	ldr	r2, [r2, #0]
 800aeb4:	4293      	cmp	r3, r2
 800aeb6:	d901      	bls.n	800aebc <prvAddNewTaskToReadyList+0x50>
 800aeb8:	4a14      	ldr	r2, [pc, #80]	; (800af0c <prvAddNewTaskToReadyList+0xa0>)
 800aeba:	6013      	str	r3, [r2, #0]
 800aebc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800aec0:	009a      	lsls	r2, r3, #2
 800aec2:	1d21      	adds	r1, r4, #4
 800aec4:	4812      	ldr	r0, [pc, #72]	; (800af10 <prvAddNewTaskToReadyList+0xa4>)
 800aec6:	4410      	add	r0, r2
 800aec8:	f7fe ffc6 	bl	8009e58 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800aecc:	f7ff f88c 	bl	8009fe8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800aed0:	4b0c      	ldr	r3, [pc, #48]	; (800af04 <prvAddNewTaskToReadyList+0x98>)
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	b16b      	cbz	r3, 800aef2 <prvAddNewTaskToReadyList+0x86>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800aed6:	4b0a      	ldr	r3, [pc, #40]	; (800af00 <prvAddNewTaskToReadyList+0x94>)
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aedc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800aede:	429a      	cmp	r2, r3
 800aee0:	d207      	bcs.n	800aef2 <prvAddNewTaskToReadyList+0x86>
			taskYIELD_IF_USING_PREEMPTION();
 800aee2:	4b0c      	ldr	r3, [pc, #48]	; (800af14 <prvAddNewTaskToReadyList+0xa8>)
 800aee4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aee8:	601a      	str	r2, [r3, #0]
 800aeea:	f3bf 8f4f 	dsb	sy
 800aeee:	f3bf 8f6f 	isb	sy
}
 800aef2:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
 800aef4:	f7ff ff86 	bl	800ae04 <prvInitialiseTaskLists>
 800aef8:	e7d4      	b.n	800aea4 <prvAddNewTaskToReadyList+0x38>
 800aefa:	bf00      	nop
 800aefc:	20004984 	.word	0x20004984
 800af00:	20004518 	.word	0x20004518
 800af04:	200049e0 	.word	0x200049e0
 800af08:	20004994 	.word	0x20004994
 800af0c:	20004998 	.word	0x20004998
 800af10:	20004524 	.word	0x20004524
 800af14:	e000ed04 	.word	0xe000ed04

0800af18 <prvDeleteTCB>:
	{
 800af18:	b510      	push	{r4, lr}
 800af1a:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800af1c:	f890 3059 	ldrb.w	r3, [r0, #89]	; 0x59
 800af20:	b933      	cbnz	r3, 800af30 <prvDeleteTCB+0x18>
				vPortFree( pxTCB->pxStack );
 800af22:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800af24:	f7fe ff52 	bl	8009dcc <vPortFree>
				vPortFree( pxTCB );
 800af28:	4620      	mov	r0, r4
 800af2a:	f7fe ff4f 	bl	8009dcc <vPortFree>
	}
 800af2e:	bd10      	pop	{r4, pc}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800af30:	2b01      	cmp	r3, #1
 800af32:	d00a      	beq.n	800af4a <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800af34:	2b02      	cmp	r3, #2
 800af36:	d0fa      	beq.n	800af2e <prvDeleteTCB+0x16>
 800af38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af3c:	f383 8811 	msr	BASEPRI, r3
 800af40:	f3bf 8f6f 	isb	sy
 800af44:	f3bf 8f4f 	dsb	sy
 800af48:	e7fe      	b.n	800af48 <prvDeleteTCB+0x30>
				vPortFree( pxTCB );
 800af4a:	f7fe ff3f 	bl	8009dcc <vPortFree>
 800af4e:	e7ee      	b.n	800af2e <prvDeleteTCB+0x16>

0800af50 <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800af50:	4b0f      	ldr	r3, [pc, #60]	; (800af90 <prvCheckTasksWaitingTermination+0x40>)
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	b1d3      	cbz	r3, 800af8c <prvCheckTasksWaitingTermination+0x3c>
{
 800af56:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
 800af58:	f7ff f824 	bl	8009fa4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af5c:	4b0d      	ldr	r3, [pc, #52]	; (800af94 <prvCheckTasksWaitingTermination+0x44>)
 800af5e:	68db      	ldr	r3, [r3, #12]
 800af60:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800af62:	1d20      	adds	r0, r4, #4
 800af64:	f7fe ff9e 	bl	8009ea4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800af68:	4a0b      	ldr	r2, [pc, #44]	; (800af98 <prvCheckTasksWaitingTermination+0x48>)
 800af6a:	6813      	ldr	r3, [r2, #0]
 800af6c:	3b01      	subs	r3, #1
 800af6e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800af70:	4a07      	ldr	r2, [pc, #28]	; (800af90 <prvCheckTasksWaitingTermination+0x40>)
 800af72:	6813      	ldr	r3, [r2, #0]
 800af74:	3b01      	subs	r3, #1
 800af76:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
 800af78:	f7ff f836 	bl	8009fe8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800af7c:	4620      	mov	r0, r4
 800af7e:	f7ff ffcb 	bl	800af18 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800af82:	4b03      	ldr	r3, [pc, #12]	; (800af90 <prvCheckTasksWaitingTermination+0x40>)
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d1e6      	bne.n	800af58 <prvCheckTasksWaitingTermination+0x8>
}
 800af8a:	bd10      	pop	{r4, pc}
 800af8c:	4770      	bx	lr
 800af8e:	bf00      	nop
 800af90:	20004988 	.word	0x20004988
 800af94:	200049f8 	.word	0x200049f8
 800af98:	20004984 	.word	0x20004984

0800af9c <prvIdleTask>:
{
 800af9c:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
 800af9e:	f7ff ffd7 	bl	800af50 <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800afa2:	4b06      	ldr	r3, [pc, #24]	; (800afbc <prvIdleTask+0x20>)
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	2b01      	cmp	r3, #1
 800afa8:	d9f9      	bls.n	800af9e <prvIdleTask+0x2>
				taskYIELD();
 800afaa:	4b05      	ldr	r3, [pc, #20]	; (800afc0 <prvIdleTask+0x24>)
 800afac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afb0:	601a      	str	r2, [r3, #0]
 800afb2:	f3bf 8f4f 	dsb	sy
 800afb6:	f3bf 8f6f 	isb	sy
 800afba:	e7f0      	b.n	800af9e <prvIdleTask+0x2>
 800afbc:	20004524 	.word	0x20004524
 800afc0:	e000ed04 	.word	0xe000ed04

0800afc4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800afc4:	b570      	push	{r4, r5, r6, lr}
 800afc6:	4604      	mov	r4, r0
 800afc8:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800afca:	4b19      	ldr	r3, [pc, #100]	; (800b030 <prvAddCurrentTaskToDelayedList+0x6c>)
 800afcc:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800afce:	4b19      	ldr	r3, [pc, #100]	; (800b034 <prvAddCurrentTaskToDelayedList+0x70>)
 800afd0:	6818      	ldr	r0, [r3, #0]
 800afd2:	3004      	adds	r0, #4
 800afd4:	f7fe ff66 	bl	8009ea4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800afd8:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800afdc:	bf14      	ite	ne
 800afde:	2300      	movne	r3, #0
 800afe0:	2301      	moveq	r3, #1
 800afe2:	2e00      	cmp	r6, #0
 800afe4:	bf08      	it	eq
 800afe6:	2300      	moveq	r3, #0
 800afe8:	b99b      	cbnz	r3, 800b012 <prvAddCurrentTaskToDelayedList+0x4e>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 800afea:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800afec:	4b11      	ldr	r3, [pc, #68]	; (800b034 <prvAddCurrentTaskToDelayedList+0x70>)
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800aff2:	42a5      	cmp	r5, r4
 800aff4:	d814      	bhi.n	800b020 <prvAddCurrentTaskToDelayedList+0x5c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aff6:	4b10      	ldr	r3, [pc, #64]	; (800b038 <prvAddCurrentTaskToDelayedList+0x74>)
 800aff8:	6818      	ldr	r0, [r3, #0]
 800affa:	4b0e      	ldr	r3, [pc, #56]	; (800b034 <prvAddCurrentTaskToDelayedList+0x70>)
 800affc:	6819      	ldr	r1, [r3, #0]
 800affe:	3104      	adds	r1, #4
 800b000:	f7fe ff36 	bl	8009e70 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 800b004:	4b0d      	ldr	r3, [pc, #52]	; (800b03c <prvAddCurrentTaskToDelayedList+0x78>)
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	42a3      	cmp	r3, r4
 800b00a:	d910      	bls.n	800b02e <prvAddCurrentTaskToDelayedList+0x6a>
				{
					xNextTaskUnblockTime = xTimeToWake;
 800b00c:	4b0b      	ldr	r3, [pc, #44]	; (800b03c <prvAddCurrentTaskToDelayedList+0x78>)
 800b00e:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b010:	e00d      	b.n	800b02e <prvAddCurrentTaskToDelayedList+0x6a>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b012:	4b08      	ldr	r3, [pc, #32]	; (800b034 <prvAddCurrentTaskToDelayedList+0x70>)
 800b014:	6819      	ldr	r1, [r3, #0]
 800b016:	3104      	adds	r1, #4
 800b018:	4809      	ldr	r0, [pc, #36]	; (800b040 <prvAddCurrentTaskToDelayedList+0x7c>)
 800b01a:	f7fe ff1d 	bl	8009e58 <vListInsertEnd>
 800b01e:	e006      	b.n	800b02e <prvAddCurrentTaskToDelayedList+0x6a>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b020:	4b08      	ldr	r3, [pc, #32]	; (800b044 <prvAddCurrentTaskToDelayedList+0x80>)
 800b022:	6818      	ldr	r0, [r3, #0]
 800b024:	4b03      	ldr	r3, [pc, #12]	; (800b034 <prvAddCurrentTaskToDelayedList+0x70>)
 800b026:	6819      	ldr	r1, [r3, #0]
 800b028:	3104      	adds	r1, #4
 800b02a:	f7fe ff21 	bl	8009e70 <vListInsert>
}
 800b02e:	bd70      	pop	{r4, r5, r6, pc}
 800b030:	20004a0c 	.word	0x20004a0c
 800b034:	20004518 	.word	0x20004518
 800b038:	2000451c 	.word	0x2000451c
 800b03c:	200049c4 	.word	0x200049c4
 800b040:	200049e4 	.word	0x200049e4
 800b044:	20004520 	.word	0x20004520

0800b048 <xTaskCreateStatic>:
	{
 800b048:	b570      	push	{r4, r5, r6, lr}
 800b04a:	b086      	sub	sp, #24
 800b04c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800b04e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 800b050:	b945      	cbnz	r5, 800b064 <xTaskCreateStatic+0x1c>
 800b052:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b056:	f383 8811 	msr	BASEPRI, r3
 800b05a:	f3bf 8f6f 	isb	sy
 800b05e:	f3bf 8f4f 	dsb	sy
 800b062:	e7fe      	b.n	800b062 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 800b064:	b944      	cbnz	r4, 800b078 <xTaskCreateStatic+0x30>
 800b066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b06a:	f383 8811 	msr	BASEPRI, r3
 800b06e:	f3bf 8f6f 	isb	sy
 800b072:	f3bf 8f4f 	dsb	sy
 800b076:	e7fe      	b.n	800b076 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 800b078:	265c      	movs	r6, #92	; 0x5c
 800b07a:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b07c:	9e04      	ldr	r6, [sp, #16]
 800b07e:	2e5c      	cmp	r6, #92	; 0x5c
 800b080:	d008      	beq.n	800b094 <xTaskCreateStatic+0x4c>
 800b082:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b086:	f383 8811 	msr	BASEPRI, r3
 800b08a:	f3bf 8f6f 	isb	sy
 800b08e:	f3bf 8f4f 	dsb	sy
 800b092:	e7fe      	b.n	800b092 <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b094:	9e04      	ldr	r6, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b096:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b098:	2502      	movs	r5, #2
 800b09a:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b09e:	2500      	movs	r5, #0
 800b0a0:	9503      	str	r5, [sp, #12]
 800b0a2:	9402      	str	r4, [sp, #8]
 800b0a4:	ad05      	add	r5, sp, #20
 800b0a6:	9501      	str	r5, [sp, #4]
 800b0a8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800b0aa:	9500      	str	r5, [sp, #0]
 800b0ac:	f7ff fe5c 	bl	800ad68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b0b0:	4620      	mov	r0, r4
 800b0b2:	f7ff fedb 	bl	800ae6c <prvAddNewTaskToReadyList>
	}
 800b0b6:	9805      	ldr	r0, [sp, #20]
 800b0b8:	b006      	add	sp, #24
 800b0ba:	bd70      	pop	{r4, r5, r6, pc}

0800b0bc <xTaskCreate>:
	{
 800b0bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b0c0:	b085      	sub	sp, #20
 800b0c2:	4607      	mov	r7, r0
 800b0c4:	4688      	mov	r8, r1
 800b0c6:	4615      	mov	r5, r2
 800b0c8:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b0ca:	0090      	lsls	r0, r2, #2
 800b0cc:	f7fe fdf0 	bl	8009cb0 <pvPortMalloc>
			if( pxStack != NULL )
 800b0d0:	b308      	cbz	r0, 800b116 <xTaskCreate+0x5a>
 800b0d2:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b0d4:	205c      	movs	r0, #92	; 0x5c
 800b0d6:	f7fe fdeb 	bl	8009cb0 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800b0da:	4604      	mov	r4, r0
 800b0dc:	b1b8      	cbz	r0, 800b10e <xTaskCreate+0x52>
					pxNewTCB->pxStack = pxStack;
 800b0de:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
 800b0e0:	b1e4      	cbz	r4, 800b11c <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b0e8:	9303      	str	r3, [sp, #12]
 800b0ea:	9402      	str	r4, [sp, #8]
 800b0ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b0ee:	9301      	str	r3, [sp, #4]
 800b0f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b0f2:	9300      	str	r3, [sp, #0]
 800b0f4:	464b      	mov	r3, r9
 800b0f6:	462a      	mov	r2, r5
 800b0f8:	4641      	mov	r1, r8
 800b0fa:	4638      	mov	r0, r7
 800b0fc:	f7ff fe34 	bl	800ad68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b100:	4620      	mov	r0, r4
 800b102:	f7ff feb3 	bl	800ae6c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b106:	2001      	movs	r0, #1
	}
 800b108:	b005      	add	sp, #20
 800b10a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 800b10e:	4630      	mov	r0, r6
 800b110:	f7fe fe5c 	bl	8009dcc <vPortFree>
 800b114:	e7e4      	b.n	800b0e0 <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b116:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b11a:	e7f5      	b.n	800b108 <xTaskCreate+0x4c>
 800b11c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
 800b120:	e7f2      	b.n	800b108 <xTaskCreate+0x4c>
	...

0800b124 <vTaskStartScheduler>:
{
 800b124:	b510      	push	{r4, lr}
 800b126:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b128:	2400      	movs	r4, #0
 800b12a:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b12c:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b12e:	aa07      	add	r2, sp, #28
 800b130:	a906      	add	r1, sp, #24
 800b132:	a805      	add	r0, sp, #20
 800b134:	f7fe fd46 	bl	8009bc4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b138:	9b05      	ldr	r3, [sp, #20]
 800b13a:	9302      	str	r3, [sp, #8]
 800b13c:	9b06      	ldr	r3, [sp, #24]
 800b13e:	9301      	str	r3, [sp, #4]
 800b140:	9400      	str	r4, [sp, #0]
 800b142:	4623      	mov	r3, r4
 800b144:	9a07      	ldr	r2, [sp, #28]
 800b146:	4917      	ldr	r1, [pc, #92]	; (800b1a4 <vTaskStartScheduler+0x80>)
 800b148:	4817      	ldr	r0, [pc, #92]	; (800b1a8 <vTaskStartScheduler+0x84>)
 800b14a:	f7ff ff7d 	bl	800b048 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800b14e:	b140      	cbz	r0, 800b162 <vTaskStartScheduler+0x3e>
			xReturn = xTimerCreateTimerTask();
 800b150:	f000 fbf6 	bl	800b940 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800b154:	2801      	cmp	r0, #1
 800b156:	d006      	beq.n	800b166 <vTaskStartScheduler+0x42>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b158:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800b15c:	d018      	beq.n	800b190 <vTaskStartScheduler+0x6c>
}
 800b15e:	b008      	add	sp, #32
 800b160:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
 800b162:	2000      	movs	r0, #0
 800b164:	e7f6      	b.n	800b154 <vTaskStartScheduler+0x30>
 800b166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b16a:	f383 8811 	msr	BASEPRI, r3
 800b16e:	f3bf 8f6f 	isb	sy
 800b172:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800b176:	4b0d      	ldr	r3, [pc, #52]	; (800b1ac <vTaskStartScheduler+0x88>)
 800b178:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b17c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b17e:	4b0c      	ldr	r3, [pc, #48]	; (800b1b0 <vTaskStartScheduler+0x8c>)
 800b180:	2201      	movs	r2, #1
 800b182:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b184:	4b0b      	ldr	r3, [pc, #44]	; (800b1b4 <vTaskStartScheduler+0x90>)
 800b186:	2200      	movs	r2, #0
 800b188:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 800b18a:	f7fe ffad 	bl	800a0e8 <xPortStartScheduler>
 800b18e:	e7e6      	b.n	800b15e <vTaskStartScheduler+0x3a>
 800b190:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b194:	f383 8811 	msr	BASEPRI, r3
 800b198:	f3bf 8f6f 	isb	sy
 800b19c:	f3bf 8f4f 	dsb	sy
 800b1a0:	e7fe      	b.n	800b1a0 <vTaskStartScheduler+0x7c>
 800b1a2:	bf00      	nop
 800b1a4:	0800cfc8 	.word	0x0800cfc8
 800b1a8:	0800af9d 	.word	0x0800af9d
 800b1ac:	200049c4 	.word	0x200049c4
 800b1b0:	200049e0 	.word	0x200049e0
 800b1b4:	20004a0c 	.word	0x20004a0c

0800b1b8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800b1b8:	4a02      	ldr	r2, [pc, #8]	; (800b1c4 <vTaskSuspendAll+0xc>)
 800b1ba:	6813      	ldr	r3, [r2, #0]
 800b1bc:	3301      	adds	r3, #1
 800b1be:	6013      	str	r3, [r2, #0]
}
 800b1c0:	4770      	bx	lr
 800b1c2:	bf00      	nop
 800b1c4:	20004990 	.word	0x20004990

0800b1c8 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800b1c8:	4b01      	ldr	r3, [pc, #4]	; (800b1d0 <xTaskGetTickCount+0x8>)
 800b1ca:	6818      	ldr	r0, [r3, #0]
}
 800b1cc:	4770      	bx	lr
 800b1ce:	bf00      	nop
 800b1d0:	20004a0c 	.word	0x20004a0c

0800b1d4 <xTaskIncrementTick>:
{
 800b1d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b1d6:	4b3a      	ldr	r3, [pc, #232]	; (800b2c0 <xTaskIncrementTick+0xec>)
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d164      	bne.n	800b2a8 <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b1de:	4b39      	ldr	r3, [pc, #228]	; (800b2c4 <xTaskIncrementTick+0xf0>)
 800b1e0:	681d      	ldr	r5, [r3, #0]
 800b1e2:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 800b1e4:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b1e6:	b9c5      	cbnz	r5, 800b21a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800b1e8:	4b37      	ldr	r3, [pc, #220]	; (800b2c8 <xTaskIncrementTick+0xf4>)
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	b143      	cbz	r3, 800b202 <xTaskIncrementTick+0x2e>
 800b1f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1f4:	f383 8811 	msr	BASEPRI, r3
 800b1f8:	f3bf 8f6f 	isb	sy
 800b1fc:	f3bf 8f4f 	dsb	sy
 800b200:	e7fe      	b.n	800b200 <xTaskIncrementTick+0x2c>
 800b202:	4a31      	ldr	r2, [pc, #196]	; (800b2c8 <xTaskIncrementTick+0xf4>)
 800b204:	6811      	ldr	r1, [r2, #0]
 800b206:	4b31      	ldr	r3, [pc, #196]	; (800b2cc <xTaskIncrementTick+0xf8>)
 800b208:	6818      	ldr	r0, [r3, #0]
 800b20a:	6010      	str	r0, [r2, #0]
 800b20c:	6019      	str	r1, [r3, #0]
 800b20e:	4a30      	ldr	r2, [pc, #192]	; (800b2d0 <xTaskIncrementTick+0xfc>)
 800b210:	6813      	ldr	r3, [r2, #0]
 800b212:	3301      	adds	r3, #1
 800b214:	6013      	str	r3, [r2, #0]
 800b216:	f7ff fd91 	bl	800ad3c <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b21a:	4b2e      	ldr	r3, [pc, #184]	; (800b2d4 <xTaskIncrementTick+0x100>)
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	42ab      	cmp	r3, r5
 800b220:	d938      	bls.n	800b294 <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
 800b222:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b224:	4b2c      	ldr	r3, [pc, #176]	; (800b2d8 <xTaskIncrementTick+0x104>)
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b22a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800b22e:	009a      	lsls	r2, r3, #2
 800b230:	4b2a      	ldr	r3, [pc, #168]	; (800b2dc <xTaskIncrementTick+0x108>)
 800b232:	589b      	ldr	r3, [r3, r2]
 800b234:	2b01      	cmp	r3, #1
 800b236:	d93c      	bls.n	800b2b2 <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
 800b238:	2401      	movs	r4, #1
 800b23a:	e03a      	b.n	800b2b2 <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
 800b23c:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b23e:	4b22      	ldr	r3, [pc, #136]	; (800b2c8 <xTaskIncrementTick+0xf4>)
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	b343      	cbz	r3, 800b298 <xTaskIncrementTick+0xc4>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b246:	4b20      	ldr	r3, [pc, #128]	; (800b2c8 <xTaskIncrementTick+0xf4>)
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	68db      	ldr	r3, [r3, #12]
 800b24c:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b24e:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 800b250:	429d      	cmp	r5, r3
 800b252:	d326      	bcc.n	800b2a2 <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b254:	1d37      	adds	r7, r6, #4
 800b256:	4638      	mov	r0, r7
 800b258:	f7fe fe24 	bl	8009ea4 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b25c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 800b25e:	b11b      	cbz	r3, 800b268 <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b260:	f106 0018 	add.w	r0, r6, #24
 800b264:	f7fe fe1e 	bl	8009ea4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b268:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800b26a:	4a1d      	ldr	r2, [pc, #116]	; (800b2e0 <xTaskIncrementTick+0x10c>)
 800b26c:	6812      	ldr	r2, [r2, #0]
 800b26e:	4293      	cmp	r3, r2
 800b270:	d901      	bls.n	800b276 <xTaskIncrementTick+0xa2>
 800b272:	4a1b      	ldr	r2, [pc, #108]	; (800b2e0 <xTaskIncrementTick+0x10c>)
 800b274:	6013      	str	r3, [r2, #0]
 800b276:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800b27a:	009a      	lsls	r2, r3, #2
 800b27c:	4639      	mov	r1, r7
 800b27e:	4817      	ldr	r0, [pc, #92]	; (800b2dc <xTaskIncrementTick+0x108>)
 800b280:	4410      	add	r0, r2
 800b282:	f7fe fde9 	bl	8009e58 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b286:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 800b288:	4b13      	ldr	r3, [pc, #76]	; (800b2d8 <xTaskIncrementTick+0x104>)
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b28e:	429a      	cmp	r2, r3
 800b290:	d2d4      	bcs.n	800b23c <xTaskIncrementTick+0x68>
 800b292:	e7d4      	b.n	800b23e <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
 800b294:	2400      	movs	r4, #0
 800b296:	e7d2      	b.n	800b23e <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b298:	4b0e      	ldr	r3, [pc, #56]	; (800b2d4 <xTaskIncrementTick+0x100>)
 800b29a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b29e:	601a      	str	r2, [r3, #0]
					break;
 800b2a0:	e7c0      	b.n	800b224 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
 800b2a2:	4a0c      	ldr	r2, [pc, #48]	; (800b2d4 <xTaskIncrementTick+0x100>)
 800b2a4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b2a6:	e7bd      	b.n	800b224 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
 800b2a8:	4a0e      	ldr	r2, [pc, #56]	; (800b2e4 <xTaskIncrementTick+0x110>)
 800b2aa:	6813      	ldr	r3, [r2, #0]
 800b2ac:	3301      	adds	r3, #1
 800b2ae:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800b2b0:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
 800b2b2:	4b0d      	ldr	r3, [pc, #52]	; (800b2e8 <xTaskIncrementTick+0x114>)
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	b103      	cbz	r3, 800b2ba <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
 800b2b8:	2401      	movs	r4, #1
}
 800b2ba:	4620      	mov	r0, r4
 800b2bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2be:	bf00      	nop
 800b2c0:	20004990 	.word	0x20004990
 800b2c4:	20004a0c 	.word	0x20004a0c
 800b2c8:	2000451c 	.word	0x2000451c
 800b2cc:	20004520 	.word	0x20004520
 800b2d0:	200049c8 	.word	0x200049c8
 800b2d4:	200049c4 	.word	0x200049c4
 800b2d8:	20004518 	.word	0x20004518
 800b2dc:	20004524 	.word	0x20004524
 800b2e0:	20004998 	.word	0x20004998
 800b2e4:	2000498c 	.word	0x2000498c
 800b2e8:	20004a10 	.word	0x20004a10

0800b2ec <xTaskResumeAll>:
{
 800b2ec:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
 800b2ee:	4b33      	ldr	r3, [pc, #204]	; (800b3bc <xTaskResumeAll+0xd0>)
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	b943      	cbnz	r3, 800b306 <xTaskResumeAll+0x1a>
 800b2f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2f8:	f383 8811 	msr	BASEPRI, r3
 800b2fc:	f3bf 8f6f 	isb	sy
 800b300:	f3bf 8f4f 	dsb	sy
 800b304:	e7fe      	b.n	800b304 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
 800b306:	f7fe fe4d 	bl	8009fa4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800b30a:	4b2c      	ldr	r3, [pc, #176]	; (800b3bc <xTaskResumeAll+0xd0>)
 800b30c:	681a      	ldr	r2, [r3, #0]
 800b30e:	3a01      	subs	r2, #1
 800b310:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d14d      	bne.n	800b3b4 <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b318:	4b29      	ldr	r3, [pc, #164]	; (800b3c0 <xTaskResumeAll+0xd4>)
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	b923      	cbnz	r3, 800b328 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
 800b31e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800b320:	f7fe fe62 	bl	8009fe8 <vPortExitCritical>
}
 800b324:	4620      	mov	r0, r4
 800b326:	bd38      	pop	{r3, r4, r5, pc}
TCB_t *pxTCB = NULL;
 800b328:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b32a:	4b26      	ldr	r3, [pc, #152]	; (800b3c4 <xTaskResumeAll+0xd8>)
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	b31b      	cbz	r3, 800b378 <xTaskResumeAll+0x8c>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b330:	4b24      	ldr	r3, [pc, #144]	; (800b3c4 <xTaskResumeAll+0xd8>)
 800b332:	68db      	ldr	r3, [r3, #12]
 800b334:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b336:	f104 0018 	add.w	r0, r4, #24
 800b33a:	f7fe fdb3 	bl	8009ea4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b33e:	1d25      	adds	r5, r4, #4
 800b340:	4628      	mov	r0, r5
 800b342:	f7fe fdaf 	bl	8009ea4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b346:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b348:	4a1f      	ldr	r2, [pc, #124]	; (800b3c8 <xTaskResumeAll+0xdc>)
 800b34a:	6812      	ldr	r2, [r2, #0]
 800b34c:	4293      	cmp	r3, r2
 800b34e:	d901      	bls.n	800b354 <xTaskResumeAll+0x68>
 800b350:	4a1d      	ldr	r2, [pc, #116]	; (800b3c8 <xTaskResumeAll+0xdc>)
 800b352:	6013      	str	r3, [r2, #0]
 800b354:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800b358:	009a      	lsls	r2, r3, #2
 800b35a:	4629      	mov	r1, r5
 800b35c:	481b      	ldr	r0, [pc, #108]	; (800b3cc <xTaskResumeAll+0xe0>)
 800b35e:	4410      	add	r0, r2
 800b360:	f7fe fd7a 	bl	8009e58 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b364:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800b366:	4b1a      	ldr	r3, [pc, #104]	; (800b3d0 <xTaskResumeAll+0xe4>)
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b36c:	429a      	cmp	r2, r3
 800b36e:	d3dc      	bcc.n	800b32a <xTaskResumeAll+0x3e>
						xYieldPending = pdTRUE;
 800b370:	4b18      	ldr	r3, [pc, #96]	; (800b3d4 <xTaskResumeAll+0xe8>)
 800b372:	2201      	movs	r2, #1
 800b374:	601a      	str	r2, [r3, #0]
 800b376:	e7d8      	b.n	800b32a <xTaskResumeAll+0x3e>
				if( pxTCB != NULL )
 800b378:	b10c      	cbz	r4, 800b37e <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
 800b37a:	f7ff fcdf 	bl	800ad3c <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b37e:	4b16      	ldr	r3, [pc, #88]	; (800b3d8 <xTaskResumeAll+0xec>)
 800b380:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b382:	b154      	cbz	r4, 800b39a <xTaskResumeAll+0xae>
							if( xTaskIncrementTick() != pdFALSE )
 800b384:	f7ff ff26 	bl	800b1d4 <xTaskIncrementTick>
 800b388:	b110      	cbz	r0, 800b390 <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
 800b38a:	4b12      	ldr	r3, [pc, #72]	; (800b3d4 <xTaskResumeAll+0xe8>)
 800b38c:	2201      	movs	r2, #1
 800b38e:	601a      	str	r2, [r3, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b390:	3c01      	subs	r4, #1
 800b392:	d1f7      	bne.n	800b384 <xTaskResumeAll+0x98>
						uxPendedTicks = 0;
 800b394:	4b10      	ldr	r3, [pc, #64]	; (800b3d8 <xTaskResumeAll+0xec>)
 800b396:	2200      	movs	r2, #0
 800b398:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
 800b39a:	4b0e      	ldr	r3, [pc, #56]	; (800b3d4 <xTaskResumeAll+0xe8>)
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	b15b      	cbz	r3, 800b3b8 <xTaskResumeAll+0xcc>
					taskYIELD_IF_USING_PREEMPTION();
 800b3a0:	4b0e      	ldr	r3, [pc, #56]	; (800b3dc <xTaskResumeAll+0xf0>)
 800b3a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3a6:	601a      	str	r2, [r3, #0]
 800b3a8:	f3bf 8f4f 	dsb	sy
 800b3ac:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800b3b0:	2401      	movs	r4, #1
 800b3b2:	e7b5      	b.n	800b320 <xTaskResumeAll+0x34>
BaseType_t xAlreadyYielded = pdFALSE;
 800b3b4:	2400      	movs	r4, #0
 800b3b6:	e7b3      	b.n	800b320 <xTaskResumeAll+0x34>
 800b3b8:	2400      	movs	r4, #0
 800b3ba:	e7b1      	b.n	800b320 <xTaskResumeAll+0x34>
 800b3bc:	20004990 	.word	0x20004990
 800b3c0:	20004984 	.word	0x20004984
 800b3c4:	200049cc 	.word	0x200049cc
 800b3c8:	20004998 	.word	0x20004998
 800b3cc:	20004524 	.word	0x20004524
 800b3d0:	20004518 	.word	0x20004518
 800b3d4:	20004a10 	.word	0x20004a10
 800b3d8:	2000498c 	.word	0x2000498c
 800b3dc:	e000ed04 	.word	0xe000ed04

0800b3e0 <vTaskDelay>:
	{
 800b3e0:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b3e2:	b1a8      	cbz	r0, 800b410 <vTaskDelay+0x30>
 800b3e4:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 800b3e6:	4b0f      	ldr	r3, [pc, #60]	; (800b424 <vTaskDelay+0x44>)
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	b143      	cbz	r3, 800b3fe <vTaskDelay+0x1e>
 800b3ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3f0:	f383 8811 	msr	BASEPRI, r3
 800b3f4:	f3bf 8f6f 	isb	sy
 800b3f8:	f3bf 8f4f 	dsb	sy
 800b3fc:	e7fe      	b.n	800b3fc <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800b3fe:	f7ff fedb 	bl	800b1b8 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b402:	2100      	movs	r1, #0
 800b404:	4620      	mov	r0, r4
 800b406:	f7ff fddd 	bl	800afc4 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 800b40a:	f7ff ff6f 	bl	800b2ec <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800b40e:	b938      	cbnz	r0, 800b420 <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
 800b410:	4b05      	ldr	r3, [pc, #20]	; (800b428 <vTaskDelay+0x48>)
 800b412:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b416:	601a      	str	r2, [r3, #0]
 800b418:	f3bf 8f4f 	dsb	sy
 800b41c:	f3bf 8f6f 	isb	sy
	}
 800b420:	bd10      	pop	{r4, pc}
 800b422:	bf00      	nop
 800b424:	20004990 	.word	0x20004990
 800b428:	e000ed04 	.word	0xe000ed04

0800b42c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b42c:	4b20      	ldr	r3, [pc, #128]	; (800b4b0 <vTaskSwitchContext+0x84>)
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	b11b      	cbz	r3, 800b43a <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 800b432:	4b20      	ldr	r3, [pc, #128]	; (800b4b4 <vTaskSwitchContext+0x88>)
 800b434:	2201      	movs	r2, #1
 800b436:	601a      	str	r2, [r3, #0]
 800b438:	4770      	bx	lr
		xYieldPending = pdFALSE;
 800b43a:	4b1e      	ldr	r3, [pc, #120]	; (800b4b4 <vTaskSwitchContext+0x88>)
 800b43c:	2200      	movs	r2, #0
 800b43e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b440:	4b1d      	ldr	r3, [pc, #116]	; (800b4b8 <vTaskSwitchContext+0x8c>)
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800b448:	008a      	lsls	r2, r1, #2
 800b44a:	491c      	ldr	r1, [pc, #112]	; (800b4bc <vTaskSwitchContext+0x90>)
 800b44c:	588a      	ldr	r2, [r1, r2]
 800b44e:	b95a      	cbnz	r2, 800b468 <vTaskSwitchContext+0x3c>
 800b450:	b10b      	cbz	r3, 800b456 <vTaskSwitchContext+0x2a>
 800b452:	3b01      	subs	r3, #1
 800b454:	e7f6      	b.n	800b444 <vTaskSwitchContext+0x18>
 800b456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b45a:	f383 8811 	msr	BASEPRI, r3
 800b45e:	f3bf 8f6f 	isb	sy
 800b462:	f3bf 8f4f 	dsb	sy
 800b466:	e7fe      	b.n	800b466 <vTaskSwitchContext+0x3a>
{
 800b468:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b46a:	4608      	mov	r0, r1
 800b46c:	009a      	lsls	r2, r3, #2
 800b46e:	18d4      	adds	r4, r2, r3
 800b470:	00a1      	lsls	r1, r4, #2
 800b472:	4401      	add	r1, r0
 800b474:	684c      	ldr	r4, [r1, #4]
 800b476:	6864      	ldr	r4, [r4, #4]
 800b478:	604c      	str	r4, [r1, #4]
 800b47a:	441a      	add	r2, r3
 800b47c:	0091      	lsls	r1, r2, #2
 800b47e:	3108      	adds	r1, #8
 800b480:	4408      	add	r0, r1
 800b482:	4284      	cmp	r4, r0
 800b484:	d00d      	beq.n	800b4a2 <vTaskSwitchContext+0x76>
 800b486:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800b48a:	0091      	lsls	r1, r2, #2
 800b48c:	4a0b      	ldr	r2, [pc, #44]	; (800b4bc <vTaskSwitchContext+0x90>)
 800b48e:	440a      	add	r2, r1
 800b490:	6852      	ldr	r2, [r2, #4]
 800b492:	68d1      	ldr	r1, [r2, #12]
 800b494:	4a0a      	ldr	r2, [pc, #40]	; (800b4c0 <vTaskSwitchContext+0x94>)
 800b496:	6011      	str	r1, [r2, #0]
 800b498:	4a07      	ldr	r2, [pc, #28]	; (800b4b8 <vTaskSwitchContext+0x8c>)
 800b49a:	6013      	str	r3, [r2, #0]
}
 800b49c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b4a0:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b4a2:	6861      	ldr	r1, [r4, #4]
 800b4a4:	4805      	ldr	r0, [pc, #20]	; (800b4bc <vTaskSwitchContext+0x90>)
 800b4a6:	2214      	movs	r2, #20
 800b4a8:	fb02 0203 	mla	r2, r2, r3, r0
 800b4ac:	6051      	str	r1, [r2, #4]
 800b4ae:	e7ea      	b.n	800b486 <vTaskSwitchContext+0x5a>
 800b4b0:	20004990 	.word	0x20004990
 800b4b4:	20004a10 	.word	0x20004a10
 800b4b8:	20004998 	.word	0x20004998
 800b4bc:	20004524 	.word	0x20004524
 800b4c0:	20004518 	.word	0x20004518

0800b4c4 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 800b4c4:	b940      	cbnz	r0, 800b4d8 <vTaskPlaceOnEventList+0x14>
 800b4c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4ca:	f383 8811 	msr	BASEPRI, r3
 800b4ce:	f3bf 8f6f 	isb	sy
 800b4d2:	f3bf 8f4f 	dsb	sy
 800b4d6:	e7fe      	b.n	800b4d6 <vTaskPlaceOnEventList+0x12>
{
 800b4d8:	b510      	push	{r4, lr}
 800b4da:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b4dc:	4b04      	ldr	r3, [pc, #16]	; (800b4f0 <vTaskPlaceOnEventList+0x2c>)
 800b4de:	6819      	ldr	r1, [r3, #0]
 800b4e0:	3118      	adds	r1, #24
 800b4e2:	f7fe fcc5 	bl	8009e70 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b4e6:	2101      	movs	r1, #1
 800b4e8:	4620      	mov	r0, r4
 800b4ea:	f7ff fd6b 	bl	800afc4 <prvAddCurrentTaskToDelayedList>
}
 800b4ee:	bd10      	pop	{r4, pc}
 800b4f0:	20004518 	.word	0x20004518

0800b4f4 <vTaskPlaceOnEventListRestricted>:
	{
 800b4f4:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 800b4f6:	b940      	cbnz	r0, 800b50a <vTaskPlaceOnEventListRestricted+0x16>
 800b4f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4fc:	f383 8811 	msr	BASEPRI, r3
 800b500:	f3bf 8f6f 	isb	sy
 800b504:	f3bf 8f4f 	dsb	sy
 800b508:	e7fe      	b.n	800b508 <vTaskPlaceOnEventListRestricted+0x14>
 800b50a:	460c      	mov	r4, r1
 800b50c:	4615      	mov	r5, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b50e:	4a06      	ldr	r2, [pc, #24]	; (800b528 <vTaskPlaceOnEventListRestricted+0x34>)
 800b510:	6811      	ldr	r1, [r2, #0]
 800b512:	3118      	adds	r1, #24
 800b514:	f7fe fca0 	bl	8009e58 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
 800b518:	b10d      	cbz	r5, 800b51e <vTaskPlaceOnEventListRestricted+0x2a>
			xTicksToWait = portMAX_DELAY;
 800b51a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b51e:	4629      	mov	r1, r5
 800b520:	4620      	mov	r0, r4
 800b522:	f7ff fd4f 	bl	800afc4 <prvAddCurrentTaskToDelayedList>
	}
 800b526:	bd38      	pop	{r3, r4, r5, pc}
 800b528:	20004518 	.word	0x20004518

0800b52c <xTaskRemoveFromEventList>:
{
 800b52c:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b52e:	68c3      	ldr	r3, [r0, #12]
 800b530:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800b532:	b944      	cbnz	r4, 800b546 <xTaskRemoveFromEventList+0x1a>
 800b534:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b538:	f383 8811 	msr	BASEPRI, r3
 800b53c:	f3bf 8f6f 	isb	sy
 800b540:	f3bf 8f4f 	dsb	sy
 800b544:	e7fe      	b.n	800b544 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b546:	f104 0518 	add.w	r5, r4, #24
 800b54a:	4628      	mov	r0, r5
 800b54c:	f7fe fcaa 	bl	8009ea4 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b550:	4b13      	ldr	r3, [pc, #76]	; (800b5a0 <xTaskRemoveFromEventList+0x74>)
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	b9e3      	cbnz	r3, 800b590 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b556:	1d25      	adds	r5, r4, #4
 800b558:	4628      	mov	r0, r5
 800b55a:	f7fe fca3 	bl	8009ea4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b55e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b560:	4a10      	ldr	r2, [pc, #64]	; (800b5a4 <xTaskRemoveFromEventList+0x78>)
 800b562:	6812      	ldr	r2, [r2, #0]
 800b564:	4293      	cmp	r3, r2
 800b566:	d901      	bls.n	800b56c <xTaskRemoveFromEventList+0x40>
 800b568:	4a0e      	ldr	r2, [pc, #56]	; (800b5a4 <xTaskRemoveFromEventList+0x78>)
 800b56a:	6013      	str	r3, [r2, #0]
 800b56c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800b570:	009a      	lsls	r2, r3, #2
 800b572:	4629      	mov	r1, r5
 800b574:	480c      	ldr	r0, [pc, #48]	; (800b5a8 <xTaskRemoveFromEventList+0x7c>)
 800b576:	4410      	add	r0, r2
 800b578:	f7fe fc6e 	bl	8009e58 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b57c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800b57e:	4b0b      	ldr	r3, [pc, #44]	; (800b5ac <xTaskRemoveFromEventList+0x80>)
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b584:	429a      	cmp	r2, r3
 800b586:	d908      	bls.n	800b59a <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
 800b588:	2001      	movs	r0, #1
 800b58a:	4b09      	ldr	r3, [pc, #36]	; (800b5b0 <xTaskRemoveFromEventList+0x84>)
 800b58c:	6018      	str	r0, [r3, #0]
}
 800b58e:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b590:	4629      	mov	r1, r5
 800b592:	4808      	ldr	r0, [pc, #32]	; (800b5b4 <xTaskRemoveFromEventList+0x88>)
 800b594:	f7fe fc60 	bl	8009e58 <vListInsertEnd>
 800b598:	e7f0      	b.n	800b57c <xTaskRemoveFromEventList+0x50>
		xReturn = pdFALSE;
 800b59a:	2000      	movs	r0, #0
	return xReturn;
 800b59c:	e7f7      	b.n	800b58e <xTaskRemoveFromEventList+0x62>
 800b59e:	bf00      	nop
 800b5a0:	20004990 	.word	0x20004990
 800b5a4:	20004998 	.word	0x20004998
 800b5a8:	20004524 	.word	0x20004524
 800b5ac:	20004518 	.word	0x20004518
 800b5b0:	20004a10 	.word	0x20004a10
 800b5b4:	200049cc 	.word	0x200049cc

0800b5b8 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b5b8:	4b03      	ldr	r3, [pc, #12]	; (800b5c8 <vTaskInternalSetTimeOutState+0x10>)
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b5be:	4b03      	ldr	r3, [pc, #12]	; (800b5cc <vTaskInternalSetTimeOutState+0x14>)
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	6043      	str	r3, [r0, #4]
}
 800b5c4:	4770      	bx	lr
 800b5c6:	bf00      	nop
 800b5c8:	200049c8 	.word	0x200049c8
 800b5cc:	20004a0c 	.word	0x20004a0c

0800b5d0 <xTaskCheckForTimeOut>:
{
 800b5d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 800b5d2:	b150      	cbz	r0, 800b5ea <xTaskCheckForTimeOut+0x1a>
 800b5d4:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 800b5d6:	b989      	cbnz	r1, 800b5fc <xTaskCheckForTimeOut+0x2c>
 800b5d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5dc:	f383 8811 	msr	BASEPRI, r3
 800b5e0:	f3bf 8f6f 	isb	sy
 800b5e4:	f3bf 8f4f 	dsb	sy
 800b5e8:	e7fe      	b.n	800b5e8 <xTaskCheckForTimeOut+0x18>
 800b5ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5ee:	f383 8811 	msr	BASEPRI, r3
 800b5f2:	f3bf 8f6f 	isb	sy
 800b5f6:	f3bf 8f4f 	dsb	sy
 800b5fa:	e7fe      	b.n	800b5fa <xTaskCheckForTimeOut+0x2a>
 800b5fc:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
 800b5fe:	f7fe fcd1 	bl	8009fa4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800b602:	4b11      	ldr	r3, [pc, #68]	; (800b648 <xTaskCheckForTimeOut+0x78>)
 800b604:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b606:	6868      	ldr	r0, [r5, #4]
 800b608:	1a0a      	subs	r2, r1, r0
			if( *pxTicksToWait == portMAX_DELAY )
 800b60a:	6823      	ldr	r3, [r4, #0]
 800b60c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b610:	d016      	beq.n	800b640 <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b612:	682f      	ldr	r7, [r5, #0]
 800b614:	4e0d      	ldr	r6, [pc, #52]	; (800b64c <xTaskCheckForTimeOut+0x7c>)
 800b616:	6836      	ldr	r6, [r6, #0]
 800b618:	42b7      	cmp	r7, r6
 800b61a:	d001      	beq.n	800b620 <xTaskCheckForTimeOut+0x50>
 800b61c:	4288      	cmp	r0, r1
 800b61e:	d911      	bls.n	800b644 <xTaskCheckForTimeOut+0x74>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b620:	4293      	cmp	r3, r2
 800b622:	d803      	bhi.n	800b62c <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 800b624:	2300      	movs	r3, #0
 800b626:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800b628:	2401      	movs	r4, #1
 800b62a:	e005      	b.n	800b638 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 800b62c:	1a9b      	subs	r3, r3, r2
 800b62e:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b630:	4628      	mov	r0, r5
 800b632:	f7ff ffc1 	bl	800b5b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b636:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800b638:	f7fe fcd6 	bl	8009fe8 <vPortExitCritical>
}
 800b63c:	4620      	mov	r0, r4
 800b63e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				xReturn = pdFALSE;
 800b640:	2400      	movs	r4, #0
 800b642:	e7f9      	b.n	800b638 <xTaskCheckForTimeOut+0x68>
			xReturn = pdTRUE;
 800b644:	2401      	movs	r4, #1
 800b646:	e7f7      	b.n	800b638 <xTaskCheckForTimeOut+0x68>
 800b648:	20004a0c 	.word	0x20004a0c
 800b64c:	200049c8 	.word	0x200049c8

0800b650 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800b650:	4b01      	ldr	r3, [pc, #4]	; (800b658 <vTaskMissedYield+0x8>)
 800b652:	2201      	movs	r2, #1
 800b654:	601a      	str	r2, [r3, #0]
}
 800b656:	4770      	bx	lr
 800b658:	20004a10 	.word	0x20004a10

0800b65c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800b65c:	4b05      	ldr	r3, [pc, #20]	; (800b674 <xTaskGetSchedulerState+0x18>)
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	b133      	cbz	r3, 800b670 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b662:	4b05      	ldr	r3, [pc, #20]	; (800b678 <xTaskGetSchedulerState+0x1c>)
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	b10b      	cbz	r3, 800b66c <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
 800b668:	2000      	movs	r0, #0
	}
 800b66a:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
 800b66c:	2002      	movs	r0, #2
 800b66e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b670:	2001      	movs	r0, #1
 800b672:	4770      	bx	lr
 800b674:	200049e0 	.word	0x200049e0
 800b678:	20004990 	.word	0x20004990

0800b67c <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 800b67c:	2800      	cmp	r0, #0
 800b67e:	d040      	beq.n	800b702 <xTaskPriorityInherit+0x86>
	{
 800b680:	b538      	push	{r3, r4, r5, lr}
 800b682:	4605      	mov	r5, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b684:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800b686:	4920      	ldr	r1, [pc, #128]	; (800b708 <xTaskPriorityInherit+0x8c>)
 800b688:	6809      	ldr	r1, [r1, #0]
 800b68a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800b68c:	428a      	cmp	r2, r1
 800b68e:	d22e      	bcs.n	800b6ee <xTaskPriorityInherit+0x72>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b690:	6981      	ldr	r1, [r0, #24]
 800b692:	2900      	cmp	r1, #0
 800b694:	db05      	blt.n	800b6a2 <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b696:	491c      	ldr	r1, [pc, #112]	; (800b708 <xTaskPriorityInherit+0x8c>)
 800b698:	6809      	ldr	r1, [r1, #0]
 800b69a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800b69c:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
 800b6a0:	6181      	str	r1, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b6a2:	6968      	ldr	r0, [r5, #20]
 800b6a4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800b6a8:	0091      	lsls	r1, r2, #2
 800b6aa:	4a18      	ldr	r2, [pc, #96]	; (800b70c <xTaskPriorityInherit+0x90>)
 800b6ac:	440a      	add	r2, r1
 800b6ae:	4290      	cmp	r0, r2
 800b6b0:	d005      	beq.n	800b6be <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b6b2:	4a15      	ldr	r2, [pc, #84]	; (800b708 <xTaskPriorityInherit+0x8c>)
 800b6b4:	6812      	ldr	r2, [r2, #0]
 800b6b6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b6b8:	62ea      	str	r2, [r5, #44]	; 0x2c
				xReturn = pdTRUE;
 800b6ba:	2001      	movs	r0, #1
	}
 800b6bc:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b6be:	1d2c      	adds	r4, r5, #4
 800b6c0:	4620      	mov	r0, r4
 800b6c2:	f7fe fbef 	bl	8009ea4 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b6c6:	4b10      	ldr	r3, [pc, #64]	; (800b708 <xTaskPriorityInherit+0x8c>)
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6cc:	62eb      	str	r3, [r5, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b6ce:	4a10      	ldr	r2, [pc, #64]	; (800b710 <xTaskPriorityInherit+0x94>)
 800b6d0:	6812      	ldr	r2, [r2, #0]
 800b6d2:	4293      	cmp	r3, r2
 800b6d4:	d901      	bls.n	800b6da <xTaskPriorityInherit+0x5e>
 800b6d6:	4a0e      	ldr	r2, [pc, #56]	; (800b710 <xTaskPriorityInherit+0x94>)
 800b6d8:	6013      	str	r3, [r2, #0]
 800b6da:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800b6de:	009a      	lsls	r2, r3, #2
 800b6e0:	4621      	mov	r1, r4
 800b6e2:	480a      	ldr	r0, [pc, #40]	; (800b70c <xTaskPriorityInherit+0x90>)
 800b6e4:	4410      	add	r0, r2
 800b6e6:	f7fe fbb7 	bl	8009e58 <vListInsertEnd>
				xReturn = pdTRUE;
 800b6ea:	2001      	movs	r0, #1
 800b6ec:	e7e6      	b.n	800b6bc <xTaskPriorityInherit+0x40>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b6ee:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800b6f0:	4b05      	ldr	r3, [pc, #20]	; (800b708 <xTaskPriorityInherit+0x8c>)
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6f6:	429a      	cmp	r2, r3
 800b6f8:	d201      	bcs.n	800b6fe <xTaskPriorityInherit+0x82>
					xReturn = pdTRUE;
 800b6fa:	2001      	movs	r0, #1
		return xReturn;
 800b6fc:	e7de      	b.n	800b6bc <xTaskPriorityInherit+0x40>
	BaseType_t xReturn = pdFALSE;
 800b6fe:	2000      	movs	r0, #0
 800b700:	e7dc      	b.n	800b6bc <xTaskPriorityInherit+0x40>
 800b702:	2000      	movs	r0, #0
	}
 800b704:	4770      	bx	lr
 800b706:	bf00      	nop
 800b708:	20004518 	.word	0x20004518
 800b70c:	20004524 	.word	0x20004524
 800b710:	20004998 	.word	0x20004998

0800b714 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 800b714:	2800      	cmp	r0, #0
 800b716:	d038      	beq.n	800b78a <xTaskPriorityDisinherit+0x76>
	{
 800b718:	b538      	push	{r3, r4, r5, lr}
 800b71a:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 800b71c:	4a1e      	ldr	r2, [pc, #120]	; (800b798 <xTaskPriorityDisinherit+0x84>)
 800b71e:	6812      	ldr	r2, [r2, #0]
 800b720:	4282      	cmp	r2, r0
 800b722:	d008      	beq.n	800b736 <xTaskPriorityDisinherit+0x22>
 800b724:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b728:	f383 8811 	msr	BASEPRI, r3
 800b72c:	f3bf 8f6f 	isb	sy
 800b730:	f3bf 8f4f 	dsb	sy
 800b734:	e7fe      	b.n	800b734 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 800b736:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800b738:	b942      	cbnz	r2, 800b74c <xTaskPriorityDisinherit+0x38>
 800b73a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b73e:	f383 8811 	msr	BASEPRI, r3
 800b742:	f3bf 8f6f 	isb	sy
 800b746:	f3bf 8f4f 	dsb	sy
 800b74a:	e7fe      	b.n	800b74a <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 800b74c:	3a01      	subs	r2, #1
 800b74e:	6502      	str	r2, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b750:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800b752:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800b754:	4288      	cmp	r0, r1
 800b756:	d01a      	beq.n	800b78e <xTaskPriorityDisinherit+0x7a>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b758:	b9da      	cbnz	r2, 800b792 <xTaskPriorityDisinherit+0x7e>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b75a:	1d25      	adds	r5, r4, #4
 800b75c:	4628      	mov	r0, r5
 800b75e:	f7fe fba1 	bl	8009ea4 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b762:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800b764:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b766:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b76a:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800b76c:	4a0b      	ldr	r2, [pc, #44]	; (800b79c <xTaskPriorityDisinherit+0x88>)
 800b76e:	6812      	ldr	r2, [r2, #0]
 800b770:	4293      	cmp	r3, r2
 800b772:	d901      	bls.n	800b778 <xTaskPriorityDisinherit+0x64>
 800b774:	4a09      	ldr	r2, [pc, #36]	; (800b79c <xTaskPriorityDisinherit+0x88>)
 800b776:	6013      	str	r3, [r2, #0]
 800b778:	4629      	mov	r1, r5
 800b77a:	4a09      	ldr	r2, [pc, #36]	; (800b7a0 <xTaskPriorityDisinherit+0x8c>)
 800b77c:	2014      	movs	r0, #20
 800b77e:	fb00 2003 	mla	r0, r0, r3, r2
 800b782:	f7fe fb69 	bl	8009e58 <vListInsertEnd>
					xReturn = pdTRUE;
 800b786:	2001      	movs	r0, #1
	}
 800b788:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
 800b78a:	2000      	movs	r0, #0
	}
 800b78c:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 800b78e:	2000      	movs	r0, #0
 800b790:	e7fa      	b.n	800b788 <xTaskPriorityDisinherit+0x74>
 800b792:	2000      	movs	r0, #0
		return xReturn;
 800b794:	e7f8      	b.n	800b788 <xTaskPriorityDisinherit+0x74>
 800b796:	bf00      	nop
 800b798:	20004518 	.word	0x20004518
 800b79c:	20004998 	.word	0x20004998
 800b7a0:	20004524 	.word	0x20004524

0800b7a4 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 800b7a4:	2800      	cmp	r0, #0
 800b7a6:	d045      	beq.n	800b834 <vTaskPriorityDisinheritAfterTimeout+0x90>
	{
 800b7a8:	b538      	push	{r3, r4, r5, lr}
 800b7aa:	4603      	mov	r3, r0
			configASSERT( pxTCB->uxMutexesHeld );
 800b7ac:	6d00      	ldr	r0, [r0, #80]	; 0x50
 800b7ae:	b940      	cbnz	r0, 800b7c2 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 800b7b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7b4:	f383 8811 	msr	BASEPRI, r3
 800b7b8:	f3bf 8f6f 	isb	sy
 800b7bc:	f3bf 8f4f 	dsb	sy
 800b7c0:	e7fe      	b.n	800b7c0 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b7c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b7c4:	428a      	cmp	r2, r1
 800b7c6:	d200      	bcs.n	800b7ca <vTaskPriorityDisinheritAfterTimeout+0x26>
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b7c8:	460a      	mov	r2, r1
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b7ca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800b7cc:	4291      	cmp	r1, r2
 800b7ce:	d001      	beq.n	800b7d4 <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b7d0:	2801      	cmp	r0, #1
 800b7d2:	d000      	beq.n	800b7d6 <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 800b7d4:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 800b7d6:	4818      	ldr	r0, [pc, #96]	; (800b838 <vTaskPriorityDisinheritAfterTimeout+0x94>)
 800b7d8:	6800      	ldr	r0, [r0, #0]
 800b7da:	4298      	cmp	r0, r3
 800b7dc:	d108      	bne.n	800b7f0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
 800b7de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7e2:	f383 8811 	msr	BASEPRI, r3
 800b7e6:	f3bf 8f6f 	isb	sy
 800b7ea:	f3bf 8f4f 	dsb	sy
 800b7ee:	e7fe      	b.n	800b7ee <vTaskPriorityDisinheritAfterTimeout+0x4a>
					pxTCB->uxPriority = uxPriorityToUse;
 800b7f0:	62da      	str	r2, [r3, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b7f2:	6998      	ldr	r0, [r3, #24]
 800b7f4:	2800      	cmp	r0, #0
 800b7f6:	db02      	blt.n	800b7fe <vTaskPriorityDisinheritAfterTimeout+0x5a>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b7f8:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800b7fc:	619a      	str	r2, [r3, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b7fe:	695a      	ldr	r2, [r3, #20]
 800b800:	480e      	ldr	r0, [pc, #56]	; (800b83c <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800b802:	2414      	movs	r4, #20
 800b804:	fb04 0101 	mla	r1, r4, r1, r0
 800b808:	428a      	cmp	r2, r1
 800b80a:	d1e3      	bne.n	800b7d4 <vTaskPriorityDisinheritAfterTimeout+0x30>
 800b80c:	461c      	mov	r4, r3
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b80e:	1d1d      	adds	r5, r3, #4
 800b810:	4628      	mov	r0, r5
 800b812:	f7fe fb47 	bl	8009ea4 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800b816:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b818:	4a09      	ldr	r2, [pc, #36]	; (800b840 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 800b81a:	6812      	ldr	r2, [r2, #0]
 800b81c:	4293      	cmp	r3, r2
 800b81e:	d901      	bls.n	800b824 <vTaskPriorityDisinheritAfterTimeout+0x80>
 800b820:	4a07      	ldr	r2, [pc, #28]	; (800b840 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
 800b822:	6013      	str	r3, [r2, #0]
 800b824:	4629      	mov	r1, r5
 800b826:	4a05      	ldr	r2, [pc, #20]	; (800b83c <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800b828:	2014      	movs	r0, #20
 800b82a:	fb00 2003 	mla	r0, r0, r3, r2
 800b82e:	f7fe fb13 	bl	8009e58 <vListInsertEnd>
	}
 800b832:	e7cf      	b.n	800b7d4 <vTaskPriorityDisinheritAfterTimeout+0x30>
 800b834:	4770      	bx	lr
 800b836:	bf00      	nop
 800b838:	20004518 	.word	0x20004518
 800b83c:	20004524 	.word	0x20004524
 800b840:	20004998 	.word	0x20004998

0800b844 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800b844:	4b05      	ldr	r3, [pc, #20]	; (800b85c <pvTaskIncrementMutexHeldCount+0x18>)
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	b123      	cbz	r3, 800b854 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 800b84a:	4b04      	ldr	r3, [pc, #16]	; (800b85c <pvTaskIncrementMutexHeldCount+0x18>)
 800b84c:	681a      	ldr	r2, [r3, #0]
 800b84e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800b850:	3301      	adds	r3, #1
 800b852:	6513      	str	r3, [r2, #80]	; 0x50
		return pxCurrentTCB;
 800b854:	4b01      	ldr	r3, [pc, #4]	; (800b85c <pvTaskIncrementMutexHeldCount+0x18>)
 800b856:	6818      	ldr	r0, [r3, #0]
	}
 800b858:	4770      	bx	lr
 800b85a:	bf00      	nop
 800b85c:	20004518 	.word	0x20004518

0800b860 <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b860:	4b06      	ldr	r3, [pc, #24]	; (800b87c <prvGetNextExpireTime+0x1c>)
 800b862:	681a      	ldr	r2, [r3, #0]
 800b864:	6813      	ldr	r3, [r2, #0]
 800b866:	b92b      	cbnz	r3, 800b874 <prvGetNextExpireTime+0x14>
 800b868:	2301      	movs	r3, #1
 800b86a:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b86c:	b923      	cbnz	r3, 800b878 <prvGetNextExpireTime+0x18>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b86e:	68d3      	ldr	r3, [r2, #12]
 800b870:	6818      	ldr	r0, [r3, #0]
 800b872:	4770      	bx	lr
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b874:	2300      	movs	r3, #0
 800b876:	e7f8      	b.n	800b86a <prvGetNextExpireTime+0xa>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b878:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
 800b87a:	4770      	bx	lr
 800b87c:	20004a14 	.word	0x20004a14

0800b880 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b880:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b882:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b884:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b886:	4291      	cmp	r1, r2
 800b888:	d80c      	bhi.n	800b8a4 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b88a:	1ad2      	subs	r2, r2, r3
 800b88c:	6983      	ldr	r3, [r0, #24]
 800b88e:	429a      	cmp	r2, r3
 800b890:	d301      	bcc.n	800b896 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b892:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
 800b894:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b896:	1d01      	adds	r1, r0, #4
 800b898:	4b0b      	ldr	r3, [pc, #44]	; (800b8c8 <prvInsertTimerInActiveList+0x48>)
 800b89a:	6818      	ldr	r0, [r3, #0]
 800b89c:	f7fe fae8 	bl	8009e70 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800b8a0:	2000      	movs	r0, #0
 800b8a2:	e7f7      	b.n	800b894 <prvInsertTimerInActiveList+0x14>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b8a4:	429a      	cmp	r2, r3
 800b8a6:	bf2c      	ite	cs
 800b8a8:	2200      	movcs	r2, #0
 800b8aa:	2201      	movcc	r2, #1
 800b8ac:	4299      	cmp	r1, r3
 800b8ae:	bf38      	it	cc
 800b8b0:	2200      	movcc	r2, #0
 800b8b2:	b10a      	cbz	r2, 800b8b8 <prvInsertTimerInActiveList+0x38>
			xProcessTimerNow = pdTRUE;
 800b8b4:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800b8b6:	e7ed      	b.n	800b894 <prvInsertTimerInActiveList+0x14>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b8b8:	1d01      	adds	r1, r0, #4
 800b8ba:	4b04      	ldr	r3, [pc, #16]	; (800b8cc <prvInsertTimerInActiveList+0x4c>)
 800b8bc:	6818      	ldr	r0, [r3, #0]
 800b8be:	f7fe fad7 	bl	8009e70 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800b8c2:	2000      	movs	r0, #0
 800b8c4:	e7e6      	b.n	800b894 <prvInsertTimerInActiveList+0x14>
 800b8c6:	bf00      	nop
 800b8c8:	20004a18 	.word	0x20004a18
 800b8cc:	20004a14 	.word	0x20004a14

0800b8d0 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b8d0:	b530      	push	{r4, r5, lr}
 800b8d2:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b8d4:	f7fe fb66 	bl	8009fa4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b8d8:	4b11      	ldr	r3, [pc, #68]	; (800b920 <prvCheckForValidListAndQueue+0x50>)
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	b11b      	cbz	r3, 800b8e6 <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b8de:	f7fe fb83 	bl	8009fe8 <vPortExitCritical>
}
 800b8e2:	b003      	add	sp, #12
 800b8e4:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
 800b8e6:	4d0f      	ldr	r5, [pc, #60]	; (800b924 <prvCheckForValidListAndQueue+0x54>)
 800b8e8:	4628      	mov	r0, r5
 800b8ea:	f7fe faa7 	bl	8009e3c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b8ee:	4c0e      	ldr	r4, [pc, #56]	; (800b928 <prvCheckForValidListAndQueue+0x58>)
 800b8f0:	4620      	mov	r0, r4
 800b8f2:	f7fe faa3 	bl	8009e3c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b8f6:	4b0d      	ldr	r3, [pc, #52]	; (800b92c <prvCheckForValidListAndQueue+0x5c>)
 800b8f8:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b8fa:	4b0d      	ldr	r3, [pc, #52]	; (800b930 <prvCheckForValidListAndQueue+0x60>)
 800b8fc:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b8fe:	2300      	movs	r3, #0
 800b900:	9300      	str	r3, [sp, #0]
 800b902:	4b0c      	ldr	r3, [pc, #48]	; (800b934 <prvCheckForValidListAndQueue+0x64>)
 800b904:	4a0c      	ldr	r2, [pc, #48]	; (800b938 <prvCheckForValidListAndQueue+0x68>)
 800b906:	2110      	movs	r1, #16
 800b908:	200a      	movs	r0, #10
 800b90a:	f7fe fda0 	bl	800a44e <xQueueGenericCreateStatic>
 800b90e:	4b04      	ldr	r3, [pc, #16]	; (800b920 <prvCheckForValidListAndQueue+0x50>)
 800b910:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
 800b912:	2800      	cmp	r0, #0
 800b914:	d0e3      	beq.n	800b8de <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b916:	4909      	ldr	r1, [pc, #36]	; (800b93c <prvCheckForValidListAndQueue+0x6c>)
 800b918:	f7ff f9a6 	bl	800ac68 <vQueueAddToRegistry>
 800b91c:	e7df      	b.n	800b8de <prvCheckForValidListAndQueue+0xe>
 800b91e:	bf00      	nop
 800b920:	20004b38 	.word	0x20004b38
 800b924:	20004abc 	.word	0x20004abc
 800b928:	20004ad0 	.word	0x20004ad0
 800b92c:	20004a14 	.word	0x20004a14
 800b930:	20004a18 	.word	0x20004a18
 800b934:	20004ae8 	.word	0x20004ae8
 800b938:	20004a1c 	.word	0x20004a1c
 800b93c:	0800cfd0 	.word	0x0800cfd0

0800b940 <xTimerCreateTimerTask>:
{
 800b940:	b510      	push	{r4, lr}
 800b942:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800b944:	f7ff ffc4 	bl	800b8d0 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800b948:	4b12      	ldr	r3, [pc, #72]	; (800b994 <xTimerCreateTimerTask+0x54>)
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	b1cb      	cbz	r3, 800b982 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b94e:	2400      	movs	r4, #0
 800b950:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b952:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b954:	aa07      	add	r2, sp, #28
 800b956:	a906      	add	r1, sp, #24
 800b958:	a805      	add	r0, sp, #20
 800b95a:	f7fe f93f 	bl	8009bdc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b95e:	9b05      	ldr	r3, [sp, #20]
 800b960:	9302      	str	r3, [sp, #8]
 800b962:	9b06      	ldr	r3, [sp, #24]
 800b964:	9301      	str	r3, [sp, #4]
 800b966:	2302      	movs	r3, #2
 800b968:	9300      	str	r3, [sp, #0]
 800b96a:	4623      	mov	r3, r4
 800b96c:	9a07      	ldr	r2, [sp, #28]
 800b96e:	490a      	ldr	r1, [pc, #40]	; (800b998 <xTimerCreateTimerTask+0x58>)
 800b970:	480a      	ldr	r0, [pc, #40]	; (800b99c <xTimerCreateTimerTask+0x5c>)
 800b972:	f7ff fb69 	bl	800b048 <xTaskCreateStatic>
 800b976:	4b0a      	ldr	r3, [pc, #40]	; (800b9a0 <xTimerCreateTimerTask+0x60>)
 800b978:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800b97a:	b110      	cbz	r0, 800b982 <xTimerCreateTimerTask+0x42>
}
 800b97c:	2001      	movs	r0, #1
 800b97e:	b008      	add	sp, #32
 800b980:	bd10      	pop	{r4, pc}
 800b982:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b986:	f383 8811 	msr	BASEPRI, r3
 800b98a:	f3bf 8f6f 	isb	sy
 800b98e:	f3bf 8f4f 	dsb	sy
 800b992:	e7fe      	b.n	800b992 <xTimerCreateTimerTask+0x52>
 800b994:	20004b38 	.word	0x20004b38
 800b998:	0800cfd8 	.word	0x0800cfd8
 800b99c:	0800bcb5 	.word	0x0800bcb5
 800b9a0:	20004b3c 	.word	0x20004b3c

0800b9a4 <xTimerGenericCommand>:
	configASSERT( xTimer );
 800b9a4:	b1c8      	cbz	r0, 800b9da <xTimerGenericCommand+0x36>
{
 800b9a6:	b530      	push	{r4, r5, lr}
 800b9a8:	b085      	sub	sp, #20
 800b9aa:	4615      	mov	r5, r2
 800b9ac:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
 800b9ae:	4a17      	ldr	r2, [pc, #92]	; (800ba0c <xTimerGenericCommand+0x68>)
 800b9b0:	6810      	ldr	r0, [r2, #0]
 800b9b2:	b340      	cbz	r0, 800ba06 <xTimerGenericCommand+0x62>
 800b9b4:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
 800b9b6:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b9b8:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b9ba:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b9bc:	2905      	cmp	r1, #5
 800b9be:	dc1d      	bgt.n	800b9fc <xTimerGenericCommand+0x58>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b9c0:	f7ff fe4c 	bl	800b65c <xTaskGetSchedulerState>
 800b9c4:	2802      	cmp	r0, #2
 800b9c6:	d011      	beq.n	800b9ec <xTimerGenericCommand+0x48>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	461a      	mov	r2, r3
 800b9cc:	4669      	mov	r1, sp
 800b9ce:	480f      	ldr	r0, [pc, #60]	; (800ba0c <xTimerGenericCommand+0x68>)
 800b9d0:	6800      	ldr	r0, [r0, #0]
 800b9d2:	f7fe fdfb 	bl	800a5cc <xQueueGenericSend>
}
 800b9d6:	b005      	add	sp, #20
 800b9d8:	bd30      	pop	{r4, r5, pc}
 800b9da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9de:	f383 8811 	msr	BASEPRI, r3
 800b9e2:	f3bf 8f6f 	isb	sy
 800b9e6:	f3bf 8f4f 	dsb	sy
 800b9ea:	e7fe      	b.n	800b9ea <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	9a08      	ldr	r2, [sp, #32]
 800b9f0:	4669      	mov	r1, sp
 800b9f2:	4806      	ldr	r0, [pc, #24]	; (800ba0c <xTimerGenericCommand+0x68>)
 800b9f4:	6800      	ldr	r0, [r0, #0]
 800b9f6:	f7fe fde9 	bl	800a5cc <xQueueGenericSend>
 800b9fa:	e7ec      	b.n	800b9d6 <xTimerGenericCommand+0x32>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	4669      	mov	r1, sp
 800ba00:	f7fe fea2 	bl	800a748 <xQueueGenericSendFromISR>
 800ba04:	e7e7      	b.n	800b9d6 <xTimerGenericCommand+0x32>
BaseType_t xReturn = pdFAIL;
 800ba06:	2000      	movs	r0, #0
	return xReturn;
 800ba08:	e7e5      	b.n	800b9d6 <xTimerGenericCommand+0x32>
 800ba0a:	bf00      	nop
 800ba0c:	20004b38 	.word	0x20004b38

0800ba10 <prvSwitchTimerLists>:
{
 800ba10:	b570      	push	{r4, r5, r6, lr}
 800ba12:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ba14:	4b1b      	ldr	r3, [pc, #108]	; (800ba84 <prvSwitchTimerLists+0x74>)
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	681a      	ldr	r2, [r3, #0]
 800ba1a:	b362      	cbz	r2, 800ba76 <prvSwitchTimerLists+0x66>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ba1c:	68db      	ldr	r3, [r3, #12]
 800ba1e:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba20:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ba22:	1d25      	adds	r5, r4, #4
 800ba24:	4628      	mov	r0, r5
 800ba26:	f7fe fa3d 	bl	8009ea4 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ba2a:	6a23      	ldr	r3, [r4, #32]
 800ba2c:	4620      	mov	r0, r4
 800ba2e:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ba30:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800ba34:	f013 0f04 	tst.w	r3, #4
 800ba38:	d0ec      	beq.n	800ba14 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ba3a:	69a3      	ldr	r3, [r4, #24]
 800ba3c:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 800ba3e:	429e      	cmp	r6, r3
 800ba40:	d207      	bcs.n	800ba52 <prvSwitchTimerLists+0x42>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ba42:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ba44:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ba46:	4629      	mov	r1, r5
 800ba48:	4b0e      	ldr	r3, [pc, #56]	; (800ba84 <prvSwitchTimerLists+0x74>)
 800ba4a:	6818      	ldr	r0, [r3, #0]
 800ba4c:	f7fe fa10 	bl	8009e70 <vListInsert>
 800ba50:	e7e0      	b.n	800ba14 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ba52:	2100      	movs	r1, #0
 800ba54:	9100      	str	r1, [sp, #0]
 800ba56:	460b      	mov	r3, r1
 800ba58:	4632      	mov	r2, r6
 800ba5a:	4620      	mov	r0, r4
 800ba5c:	f7ff ffa2 	bl	800b9a4 <xTimerGenericCommand>
				configASSERT( xResult );
 800ba60:	2800      	cmp	r0, #0
 800ba62:	d1d7      	bne.n	800ba14 <prvSwitchTimerLists+0x4>
 800ba64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba68:	f383 8811 	msr	BASEPRI, r3
 800ba6c:	f3bf 8f6f 	isb	sy
 800ba70:	f3bf 8f4f 	dsb	sy
 800ba74:	e7fe      	b.n	800ba74 <prvSwitchTimerLists+0x64>
	pxCurrentTimerList = pxOverflowTimerList;
 800ba76:	4a04      	ldr	r2, [pc, #16]	; (800ba88 <prvSwitchTimerLists+0x78>)
 800ba78:	6810      	ldr	r0, [r2, #0]
 800ba7a:	4902      	ldr	r1, [pc, #8]	; (800ba84 <prvSwitchTimerLists+0x74>)
 800ba7c:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
 800ba7e:	6013      	str	r3, [r2, #0]
}
 800ba80:	b002      	add	sp, #8
 800ba82:	bd70      	pop	{r4, r5, r6, pc}
 800ba84:	20004a14 	.word	0x20004a14
 800ba88:	20004a18 	.word	0x20004a18

0800ba8c <prvSampleTimeNow>:
{
 800ba8c:	b538      	push	{r3, r4, r5, lr}
 800ba8e:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
 800ba90:	f7ff fb9a 	bl	800b1c8 <xTaskGetTickCount>
 800ba94:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
 800ba96:	4b07      	ldr	r3, [pc, #28]	; (800bab4 <prvSampleTimeNow+0x28>)
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	4283      	cmp	r3, r0
 800ba9c:	d805      	bhi.n	800baaa <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
 800ba9e:	2300      	movs	r3, #0
 800baa0:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
 800baa2:	4b04      	ldr	r3, [pc, #16]	; (800bab4 <prvSampleTimeNow+0x28>)
 800baa4:	601c      	str	r4, [r3, #0]
}
 800baa6:	4620      	mov	r0, r4
 800baa8:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
 800baaa:	f7ff ffb1 	bl	800ba10 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800baae:	2301      	movs	r3, #1
 800bab0:	602b      	str	r3, [r5, #0]
 800bab2:	e7f6      	b.n	800baa2 <prvSampleTimeNow+0x16>
 800bab4:	20004ae4 	.word	0x20004ae4

0800bab8 <prvProcessExpiredTimer>:
{
 800bab8:	b570      	push	{r4, r5, r6, lr}
 800baba:	b082      	sub	sp, #8
 800babc:	4605      	mov	r5, r0
 800babe:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bac0:	4b17      	ldr	r3, [pc, #92]	; (800bb20 <prvProcessExpiredTimer+0x68>)
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	68db      	ldr	r3, [r3, #12]
 800bac6:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bac8:	1d20      	adds	r0, r4, #4
 800baca:	f7fe f9eb 	bl	8009ea4 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bace:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800bad2:	f013 0f04 	tst.w	r3, #4
 800bad6:	d108      	bne.n	800baea <prvProcessExpiredTimer+0x32>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bad8:	f023 0301 	bic.w	r3, r3, #1
 800badc:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bae0:	6a23      	ldr	r3, [r4, #32]
 800bae2:	4620      	mov	r0, r4
 800bae4:	4798      	blx	r3
}
 800bae6:	b002      	add	sp, #8
 800bae8:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800baea:	69a1      	ldr	r1, [r4, #24]
 800baec:	462b      	mov	r3, r5
 800baee:	4632      	mov	r2, r6
 800baf0:	4429      	add	r1, r5
 800baf2:	4620      	mov	r0, r4
 800baf4:	f7ff fec4 	bl	800b880 <prvInsertTimerInActiveList>
 800baf8:	2800      	cmp	r0, #0
 800bafa:	d0f1      	beq.n	800bae0 <prvProcessExpiredTimer+0x28>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bafc:	2100      	movs	r1, #0
 800bafe:	9100      	str	r1, [sp, #0]
 800bb00:	460b      	mov	r3, r1
 800bb02:	462a      	mov	r2, r5
 800bb04:	4620      	mov	r0, r4
 800bb06:	f7ff ff4d 	bl	800b9a4 <xTimerGenericCommand>
			configASSERT( xResult );
 800bb0a:	2800      	cmp	r0, #0
 800bb0c:	d1e8      	bne.n	800bae0 <prvProcessExpiredTimer+0x28>
 800bb0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb12:	f383 8811 	msr	BASEPRI, r3
 800bb16:	f3bf 8f6f 	isb	sy
 800bb1a:	f3bf 8f4f 	dsb	sy
 800bb1e:	e7fe      	b.n	800bb1e <prvProcessExpiredTimer+0x66>
 800bb20:	20004a14 	.word	0x20004a14

0800bb24 <prvProcessTimerOrBlockTask>:
{
 800bb24:	b570      	push	{r4, r5, r6, lr}
 800bb26:	b082      	sub	sp, #8
 800bb28:	4606      	mov	r6, r0
 800bb2a:	460c      	mov	r4, r1
	vTaskSuspendAll();
 800bb2c:	f7ff fb44 	bl	800b1b8 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bb30:	a801      	add	r0, sp, #4
 800bb32:	f7ff ffab 	bl	800ba8c <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800bb36:	9b01      	ldr	r3, [sp, #4]
 800bb38:	bb4b      	cbnz	r3, 800bb8e <prvProcessTimerOrBlockTask+0x6a>
 800bb3a:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bb3c:	42b0      	cmp	r0, r6
 800bb3e:	bf34      	ite	cc
 800bb40:	2300      	movcc	r3, #0
 800bb42:	2301      	movcs	r3, #1
 800bb44:	2c00      	cmp	r4, #0
 800bb46:	bf18      	it	ne
 800bb48:	2300      	movne	r3, #0
 800bb4a:	b9bb      	cbnz	r3, 800bb7c <prvProcessTimerOrBlockTask+0x58>
				if( xListWasEmpty != pdFALSE )
 800bb4c:	b124      	cbz	r4, 800bb58 <prvProcessTimerOrBlockTask+0x34>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bb4e:	4b12      	ldr	r3, [pc, #72]	; (800bb98 <prvProcessTimerOrBlockTask+0x74>)
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	b9cb      	cbnz	r3, 800bb8a <prvProcessTimerOrBlockTask+0x66>
 800bb56:	2401      	movs	r4, #1
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bb58:	4622      	mov	r2, r4
 800bb5a:	1b71      	subs	r1, r6, r5
 800bb5c:	4b0f      	ldr	r3, [pc, #60]	; (800bb9c <prvProcessTimerOrBlockTask+0x78>)
 800bb5e:	6818      	ldr	r0, [r3, #0]
 800bb60:	f7ff f8c2 	bl	800ace8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bb64:	f7ff fbc2 	bl	800b2ec <xTaskResumeAll>
 800bb68:	b998      	cbnz	r0, 800bb92 <prvProcessTimerOrBlockTask+0x6e>
					portYIELD_WITHIN_API();
 800bb6a:	4b0d      	ldr	r3, [pc, #52]	; (800bba0 <prvProcessTimerOrBlockTask+0x7c>)
 800bb6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb70:	601a      	str	r2, [r3, #0]
 800bb72:	f3bf 8f4f 	dsb	sy
 800bb76:	f3bf 8f6f 	isb	sy
 800bb7a:	e00a      	b.n	800bb92 <prvProcessTimerOrBlockTask+0x6e>
				( void ) xTaskResumeAll();
 800bb7c:	f7ff fbb6 	bl	800b2ec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bb80:	4629      	mov	r1, r5
 800bb82:	4630      	mov	r0, r6
 800bb84:	f7ff ff98 	bl	800bab8 <prvProcessExpiredTimer>
 800bb88:	e003      	b.n	800bb92 <prvProcessTimerOrBlockTask+0x6e>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bb8a:	2400      	movs	r4, #0
 800bb8c:	e7e4      	b.n	800bb58 <prvProcessTimerOrBlockTask+0x34>
			( void ) xTaskResumeAll();
 800bb8e:	f7ff fbad 	bl	800b2ec <xTaskResumeAll>
}
 800bb92:	b002      	add	sp, #8
 800bb94:	bd70      	pop	{r4, r5, r6, pc}
 800bb96:	bf00      	nop
 800bb98:	20004a18 	.word	0x20004a18
 800bb9c:	20004b38 	.word	0x20004b38
 800bba0:	e000ed04 	.word	0xe000ed04

0800bba4 <prvProcessReceivedCommands>:
{
 800bba4:	b530      	push	{r4, r5, lr}
 800bba6:	b089      	sub	sp, #36	; 0x24
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bba8:	e002      	b.n	800bbb0 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bbaa:	9b04      	ldr	r3, [sp, #16]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	da0f      	bge.n	800bbd0 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	a904      	add	r1, sp, #16
 800bbb4:	4b3e      	ldr	r3, [pc, #248]	; (800bcb0 <prvProcessReceivedCommands+0x10c>)
 800bbb6:	6818      	ldr	r0, [r3, #0]
 800bbb8:	f7fe fe86 	bl	800a8c8 <xQueueReceive>
 800bbbc:	2800      	cmp	r0, #0
 800bbbe:	d074      	beq.n	800bcaa <prvProcessReceivedCommands+0x106>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bbc0:	9b04      	ldr	r3, [sp, #16]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	daf1      	bge.n	800bbaa <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bbc6:	9907      	ldr	r1, [sp, #28]
 800bbc8:	9806      	ldr	r0, [sp, #24]
 800bbca:	9b05      	ldr	r3, [sp, #20]
 800bbcc:	4798      	blx	r3
 800bbce:	e7ec      	b.n	800bbaa <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bbd0:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bbd2:	6963      	ldr	r3, [r4, #20]
 800bbd4:	b113      	cbz	r3, 800bbdc <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bbd6:	1d20      	adds	r0, r4, #4
 800bbd8:	f7fe f964 	bl	8009ea4 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bbdc:	a803      	add	r0, sp, #12
 800bbde:	f7ff ff55 	bl	800ba8c <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800bbe2:	9b04      	ldr	r3, [sp, #16]
 800bbe4:	2b09      	cmp	r3, #9
 800bbe6:	d8e3      	bhi.n	800bbb0 <prvProcessReceivedCommands+0xc>
 800bbe8:	e8df f003 	tbb	[pc, r3]
 800bbec:	31050505 	.word	0x31050505
 800bbf0:	05055138 	.word	0x05055138
 800bbf4:	3831      	.short	0x3831
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bbf6:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800bbfa:	f043 0301 	orr.w	r3, r3, #1
 800bbfe:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bc02:	9905      	ldr	r1, [sp, #20]
 800bc04:	69a5      	ldr	r5, [r4, #24]
 800bc06:	460b      	mov	r3, r1
 800bc08:	4602      	mov	r2, r0
 800bc0a:	4429      	add	r1, r5
 800bc0c:	4620      	mov	r0, r4
 800bc0e:	f7ff fe37 	bl	800b880 <prvInsertTimerInActiveList>
 800bc12:	2800      	cmp	r0, #0
 800bc14:	d0cc      	beq.n	800bbb0 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bc16:	6a23      	ldr	r3, [r4, #32]
 800bc18:	4620      	mov	r0, r4
 800bc1a:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bc1c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800bc20:	f013 0f04 	tst.w	r3, #4
 800bc24:	d0c4      	beq.n	800bbb0 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bc26:	69a2      	ldr	r2, [r4, #24]
 800bc28:	2100      	movs	r1, #0
 800bc2a:	9100      	str	r1, [sp, #0]
 800bc2c:	460b      	mov	r3, r1
 800bc2e:	9805      	ldr	r0, [sp, #20]
 800bc30:	4402      	add	r2, r0
 800bc32:	4620      	mov	r0, r4
 800bc34:	f7ff feb6 	bl	800b9a4 <xTimerGenericCommand>
							configASSERT( xResult );
 800bc38:	2800      	cmp	r0, #0
 800bc3a:	d1b9      	bne.n	800bbb0 <prvProcessReceivedCommands+0xc>
 800bc3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc40:	f383 8811 	msr	BASEPRI, r3
 800bc44:	f3bf 8f6f 	isb	sy
 800bc48:	f3bf 8f4f 	dsb	sy
 800bc4c:	e7fe      	b.n	800bc4c <prvProcessReceivedCommands+0xa8>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bc4e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800bc52:	f023 0301 	bic.w	r3, r3, #1
 800bc56:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					break;
 800bc5a:	e7a9      	b.n	800bbb0 <prvProcessReceivedCommands+0xc>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bc5c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800bc60:	f043 0301 	orr.w	r3, r3, #1
 800bc64:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bc68:	9905      	ldr	r1, [sp, #20]
 800bc6a:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bc6c:	b131      	cbz	r1, 800bc7c <prvProcessReceivedCommands+0xd8>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bc6e:	4603      	mov	r3, r0
 800bc70:	4602      	mov	r2, r0
 800bc72:	4401      	add	r1, r0
 800bc74:	4620      	mov	r0, r4
 800bc76:	f7ff fe03 	bl	800b880 <prvInsertTimerInActiveList>
					break;
 800bc7a:	e799      	b.n	800bbb0 <prvProcessReceivedCommands+0xc>
 800bc7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc80:	f383 8811 	msr	BASEPRI, r3
 800bc84:	f3bf 8f6f 	isb	sy
 800bc88:	f3bf 8f4f 	dsb	sy
 800bc8c:	e7fe      	b.n	800bc8c <prvProcessReceivedCommands+0xe8>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bc8e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800bc92:	f013 0f02 	tst.w	r3, #2
 800bc96:	d004      	beq.n	800bca2 <prvProcessReceivedCommands+0xfe>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bc98:	f023 0301 	bic.w	r3, r3, #1
 800bc9c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800bca0:	e786      	b.n	800bbb0 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
 800bca2:	4620      	mov	r0, r4
 800bca4:	f7fe f892 	bl	8009dcc <vPortFree>
 800bca8:	e782      	b.n	800bbb0 <prvProcessReceivedCommands+0xc>
}
 800bcaa:	b009      	add	sp, #36	; 0x24
 800bcac:	bd30      	pop	{r4, r5, pc}
 800bcae:	bf00      	nop
 800bcb0:	20004b38 	.word	0x20004b38

0800bcb4 <prvTimerTask>:
{
 800bcb4:	b500      	push	{lr}
 800bcb6:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bcb8:	a801      	add	r0, sp, #4
 800bcba:	f7ff fdd1 	bl	800b860 <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bcbe:	9901      	ldr	r1, [sp, #4]
 800bcc0:	f7ff ff30 	bl	800bb24 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
 800bcc4:	f7ff ff6e 	bl	800bba4 <prvProcessReceivedCommands>
 800bcc8:	e7f6      	b.n	800bcb8 <prvTimerTask+0x4>
	...

0800bccc <__assert_func>:
 800bccc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bcce:	461c      	mov	r4, r3
 800bcd0:	4b09      	ldr	r3, [pc, #36]	; (800bcf8 <__assert_func+0x2c>)
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	4605      	mov	r5, r0
 800bcd6:	68d8      	ldr	r0, [r3, #12]
 800bcd8:	b152      	cbz	r2, 800bcf0 <__assert_func+0x24>
 800bcda:	4b08      	ldr	r3, [pc, #32]	; (800bcfc <__assert_func+0x30>)
 800bcdc:	9100      	str	r1, [sp, #0]
 800bcde:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800bce2:	4907      	ldr	r1, [pc, #28]	; (800bd00 <__assert_func+0x34>)
 800bce4:	462b      	mov	r3, r5
 800bce6:	4622      	mov	r2, r4
 800bce8:	f000 f814 	bl	800bd14 <fiprintf>
 800bcec:	f000 fd08 	bl	800c700 <abort>
 800bcf0:	4b04      	ldr	r3, [pc, #16]	; (800bd04 <__assert_func+0x38>)
 800bcf2:	461a      	mov	r2, r3
 800bcf4:	e7f2      	b.n	800bcdc <__assert_func+0x10>
 800bcf6:	bf00      	nop
 800bcf8:	200000ec 	.word	0x200000ec
 800bcfc:	0800cfe0 	.word	0x0800cfe0
 800bd00:	0800cfed 	.word	0x0800cfed
 800bd04:	0800d01b 	.word	0x0800d01b

0800bd08 <__errno>:
 800bd08:	4b01      	ldr	r3, [pc, #4]	; (800bd10 <__errno+0x8>)
 800bd0a:	6818      	ldr	r0, [r3, #0]
 800bd0c:	4770      	bx	lr
 800bd0e:	bf00      	nop
 800bd10:	200000ec 	.word	0x200000ec

0800bd14 <fiprintf>:
 800bd14:	b40e      	push	{r1, r2, r3}
 800bd16:	b503      	push	{r0, r1, lr}
 800bd18:	4601      	mov	r1, r0
 800bd1a:	ab03      	add	r3, sp, #12
 800bd1c:	4805      	ldr	r0, [pc, #20]	; (800bd34 <fiprintf+0x20>)
 800bd1e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd22:	6800      	ldr	r0, [r0, #0]
 800bd24:	9301      	str	r3, [sp, #4]
 800bd26:	f000 f919 	bl	800bf5c <_vfiprintf_r>
 800bd2a:	b002      	add	sp, #8
 800bd2c:	f85d eb04 	ldr.w	lr, [sp], #4
 800bd30:	b003      	add	sp, #12
 800bd32:	4770      	bx	lr
 800bd34:	200000ec 	.word	0x200000ec

0800bd38 <__libc_init_array>:
 800bd38:	b570      	push	{r4, r5, r6, lr}
 800bd3a:	4e0d      	ldr	r6, [pc, #52]	; (800bd70 <__libc_init_array+0x38>)
 800bd3c:	4c0d      	ldr	r4, [pc, #52]	; (800bd74 <__libc_init_array+0x3c>)
 800bd3e:	1ba4      	subs	r4, r4, r6
 800bd40:	10a4      	asrs	r4, r4, #2
 800bd42:	2500      	movs	r5, #0
 800bd44:	42a5      	cmp	r5, r4
 800bd46:	d109      	bne.n	800bd5c <__libc_init_array+0x24>
 800bd48:	4e0b      	ldr	r6, [pc, #44]	; (800bd78 <__libc_init_array+0x40>)
 800bd4a:	4c0c      	ldr	r4, [pc, #48]	; (800bd7c <__libc_init_array+0x44>)
 800bd4c:	f000 ffb0 	bl	800ccb0 <_init>
 800bd50:	1ba4      	subs	r4, r4, r6
 800bd52:	10a4      	asrs	r4, r4, #2
 800bd54:	2500      	movs	r5, #0
 800bd56:	42a5      	cmp	r5, r4
 800bd58:	d105      	bne.n	800bd66 <__libc_init_array+0x2e>
 800bd5a:	bd70      	pop	{r4, r5, r6, pc}
 800bd5c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bd60:	4798      	blx	r3
 800bd62:	3501      	adds	r5, #1
 800bd64:	e7ee      	b.n	800bd44 <__libc_init_array+0xc>
 800bd66:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bd6a:	4798      	blx	r3
 800bd6c:	3501      	adds	r5, #1
 800bd6e:	e7f2      	b.n	800bd56 <__libc_init_array+0x1e>
 800bd70:	0800d0bc 	.word	0x0800d0bc
 800bd74:	0800d0bc 	.word	0x0800d0bc
 800bd78:	0800d0bc 	.word	0x0800d0bc
 800bd7c:	0800d0c0 	.word	0x0800d0c0

0800bd80 <free>:
 800bd80:	4b02      	ldr	r3, [pc, #8]	; (800bd8c <free+0xc>)
 800bd82:	4601      	mov	r1, r0
 800bd84:	6818      	ldr	r0, [r3, #0]
 800bd86:	f000 b817 	b.w	800bdb8 <_free_r>
 800bd8a:	bf00      	nop
 800bd8c:	200000ec 	.word	0x200000ec

0800bd90 <memcpy>:
 800bd90:	b510      	push	{r4, lr}
 800bd92:	1e43      	subs	r3, r0, #1
 800bd94:	440a      	add	r2, r1
 800bd96:	4291      	cmp	r1, r2
 800bd98:	d100      	bne.n	800bd9c <memcpy+0xc>
 800bd9a:	bd10      	pop	{r4, pc}
 800bd9c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bda0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bda4:	e7f7      	b.n	800bd96 <memcpy+0x6>

0800bda6 <memset>:
 800bda6:	4402      	add	r2, r0
 800bda8:	4603      	mov	r3, r0
 800bdaa:	4293      	cmp	r3, r2
 800bdac:	d100      	bne.n	800bdb0 <memset+0xa>
 800bdae:	4770      	bx	lr
 800bdb0:	f803 1b01 	strb.w	r1, [r3], #1
 800bdb4:	e7f9      	b.n	800bdaa <memset+0x4>
	...

0800bdb8 <_free_r>:
 800bdb8:	b538      	push	{r3, r4, r5, lr}
 800bdba:	4605      	mov	r5, r0
 800bdbc:	2900      	cmp	r1, #0
 800bdbe:	d045      	beq.n	800be4c <_free_r+0x94>
 800bdc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bdc4:	1f0c      	subs	r4, r1, #4
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	bfb8      	it	lt
 800bdca:	18e4      	addlt	r4, r4, r3
 800bdcc:	f000 fe7e 	bl	800cacc <__malloc_lock>
 800bdd0:	4a1f      	ldr	r2, [pc, #124]	; (800be50 <_free_r+0x98>)
 800bdd2:	6813      	ldr	r3, [r2, #0]
 800bdd4:	4610      	mov	r0, r2
 800bdd6:	b933      	cbnz	r3, 800bde6 <_free_r+0x2e>
 800bdd8:	6063      	str	r3, [r4, #4]
 800bdda:	6014      	str	r4, [r2, #0]
 800bddc:	4628      	mov	r0, r5
 800bdde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bde2:	f000 be74 	b.w	800cace <__malloc_unlock>
 800bde6:	42a3      	cmp	r3, r4
 800bde8:	d90c      	bls.n	800be04 <_free_r+0x4c>
 800bdea:	6821      	ldr	r1, [r4, #0]
 800bdec:	1862      	adds	r2, r4, r1
 800bdee:	4293      	cmp	r3, r2
 800bdf0:	bf04      	itt	eq
 800bdf2:	681a      	ldreq	r2, [r3, #0]
 800bdf4:	685b      	ldreq	r3, [r3, #4]
 800bdf6:	6063      	str	r3, [r4, #4]
 800bdf8:	bf04      	itt	eq
 800bdfa:	1852      	addeq	r2, r2, r1
 800bdfc:	6022      	streq	r2, [r4, #0]
 800bdfe:	6004      	str	r4, [r0, #0]
 800be00:	e7ec      	b.n	800bddc <_free_r+0x24>
 800be02:	4613      	mov	r3, r2
 800be04:	685a      	ldr	r2, [r3, #4]
 800be06:	b10a      	cbz	r2, 800be0c <_free_r+0x54>
 800be08:	42a2      	cmp	r2, r4
 800be0a:	d9fa      	bls.n	800be02 <_free_r+0x4a>
 800be0c:	6819      	ldr	r1, [r3, #0]
 800be0e:	1858      	adds	r0, r3, r1
 800be10:	42a0      	cmp	r0, r4
 800be12:	d10b      	bne.n	800be2c <_free_r+0x74>
 800be14:	6820      	ldr	r0, [r4, #0]
 800be16:	4401      	add	r1, r0
 800be18:	1858      	adds	r0, r3, r1
 800be1a:	4282      	cmp	r2, r0
 800be1c:	6019      	str	r1, [r3, #0]
 800be1e:	d1dd      	bne.n	800bddc <_free_r+0x24>
 800be20:	6810      	ldr	r0, [r2, #0]
 800be22:	6852      	ldr	r2, [r2, #4]
 800be24:	605a      	str	r2, [r3, #4]
 800be26:	4401      	add	r1, r0
 800be28:	6019      	str	r1, [r3, #0]
 800be2a:	e7d7      	b.n	800bddc <_free_r+0x24>
 800be2c:	d902      	bls.n	800be34 <_free_r+0x7c>
 800be2e:	230c      	movs	r3, #12
 800be30:	602b      	str	r3, [r5, #0]
 800be32:	e7d3      	b.n	800bddc <_free_r+0x24>
 800be34:	6820      	ldr	r0, [r4, #0]
 800be36:	1821      	adds	r1, r4, r0
 800be38:	428a      	cmp	r2, r1
 800be3a:	bf04      	itt	eq
 800be3c:	6811      	ldreq	r1, [r2, #0]
 800be3e:	6852      	ldreq	r2, [r2, #4]
 800be40:	6062      	str	r2, [r4, #4]
 800be42:	bf04      	itt	eq
 800be44:	1809      	addeq	r1, r1, r0
 800be46:	6021      	streq	r1, [r4, #0]
 800be48:	605c      	str	r4, [r3, #4]
 800be4a:	e7c7      	b.n	800bddc <_free_r+0x24>
 800be4c:	bd38      	pop	{r3, r4, r5, pc}
 800be4e:	bf00      	nop
 800be50:	20004b40 	.word	0x20004b40

0800be54 <_malloc_r>:
 800be54:	b570      	push	{r4, r5, r6, lr}
 800be56:	1ccd      	adds	r5, r1, #3
 800be58:	f025 0503 	bic.w	r5, r5, #3
 800be5c:	3508      	adds	r5, #8
 800be5e:	2d0c      	cmp	r5, #12
 800be60:	bf38      	it	cc
 800be62:	250c      	movcc	r5, #12
 800be64:	2d00      	cmp	r5, #0
 800be66:	4606      	mov	r6, r0
 800be68:	db01      	blt.n	800be6e <_malloc_r+0x1a>
 800be6a:	42a9      	cmp	r1, r5
 800be6c:	d903      	bls.n	800be76 <_malloc_r+0x22>
 800be6e:	230c      	movs	r3, #12
 800be70:	6033      	str	r3, [r6, #0]
 800be72:	2000      	movs	r0, #0
 800be74:	bd70      	pop	{r4, r5, r6, pc}
 800be76:	f000 fe29 	bl	800cacc <__malloc_lock>
 800be7a:	4a21      	ldr	r2, [pc, #132]	; (800bf00 <_malloc_r+0xac>)
 800be7c:	6814      	ldr	r4, [r2, #0]
 800be7e:	4621      	mov	r1, r4
 800be80:	b991      	cbnz	r1, 800bea8 <_malloc_r+0x54>
 800be82:	4c20      	ldr	r4, [pc, #128]	; (800bf04 <_malloc_r+0xb0>)
 800be84:	6823      	ldr	r3, [r4, #0]
 800be86:	b91b      	cbnz	r3, 800be90 <_malloc_r+0x3c>
 800be88:	4630      	mov	r0, r6
 800be8a:	f000 fb69 	bl	800c560 <_sbrk_r>
 800be8e:	6020      	str	r0, [r4, #0]
 800be90:	4629      	mov	r1, r5
 800be92:	4630      	mov	r0, r6
 800be94:	f000 fb64 	bl	800c560 <_sbrk_r>
 800be98:	1c43      	adds	r3, r0, #1
 800be9a:	d124      	bne.n	800bee6 <_malloc_r+0x92>
 800be9c:	230c      	movs	r3, #12
 800be9e:	6033      	str	r3, [r6, #0]
 800bea0:	4630      	mov	r0, r6
 800bea2:	f000 fe14 	bl	800cace <__malloc_unlock>
 800bea6:	e7e4      	b.n	800be72 <_malloc_r+0x1e>
 800bea8:	680b      	ldr	r3, [r1, #0]
 800beaa:	1b5b      	subs	r3, r3, r5
 800beac:	d418      	bmi.n	800bee0 <_malloc_r+0x8c>
 800beae:	2b0b      	cmp	r3, #11
 800beb0:	d90f      	bls.n	800bed2 <_malloc_r+0x7e>
 800beb2:	600b      	str	r3, [r1, #0]
 800beb4:	50cd      	str	r5, [r1, r3]
 800beb6:	18cc      	adds	r4, r1, r3
 800beb8:	4630      	mov	r0, r6
 800beba:	f000 fe08 	bl	800cace <__malloc_unlock>
 800bebe:	f104 000b 	add.w	r0, r4, #11
 800bec2:	1d23      	adds	r3, r4, #4
 800bec4:	f020 0007 	bic.w	r0, r0, #7
 800bec8:	1ac3      	subs	r3, r0, r3
 800beca:	d0d3      	beq.n	800be74 <_malloc_r+0x20>
 800becc:	425a      	negs	r2, r3
 800bece:	50e2      	str	r2, [r4, r3]
 800bed0:	e7d0      	b.n	800be74 <_malloc_r+0x20>
 800bed2:	428c      	cmp	r4, r1
 800bed4:	684b      	ldr	r3, [r1, #4]
 800bed6:	bf16      	itet	ne
 800bed8:	6063      	strne	r3, [r4, #4]
 800beda:	6013      	streq	r3, [r2, #0]
 800bedc:	460c      	movne	r4, r1
 800bede:	e7eb      	b.n	800beb8 <_malloc_r+0x64>
 800bee0:	460c      	mov	r4, r1
 800bee2:	6849      	ldr	r1, [r1, #4]
 800bee4:	e7cc      	b.n	800be80 <_malloc_r+0x2c>
 800bee6:	1cc4      	adds	r4, r0, #3
 800bee8:	f024 0403 	bic.w	r4, r4, #3
 800beec:	42a0      	cmp	r0, r4
 800beee:	d005      	beq.n	800befc <_malloc_r+0xa8>
 800bef0:	1a21      	subs	r1, r4, r0
 800bef2:	4630      	mov	r0, r6
 800bef4:	f000 fb34 	bl	800c560 <_sbrk_r>
 800bef8:	3001      	adds	r0, #1
 800befa:	d0cf      	beq.n	800be9c <_malloc_r+0x48>
 800befc:	6025      	str	r5, [r4, #0]
 800befe:	e7db      	b.n	800beb8 <_malloc_r+0x64>
 800bf00:	20004b40 	.word	0x20004b40
 800bf04:	20004b44 	.word	0x20004b44

0800bf08 <__sfputc_r>:
 800bf08:	6893      	ldr	r3, [r2, #8]
 800bf0a:	3b01      	subs	r3, #1
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	b410      	push	{r4}
 800bf10:	6093      	str	r3, [r2, #8]
 800bf12:	da08      	bge.n	800bf26 <__sfputc_r+0x1e>
 800bf14:	6994      	ldr	r4, [r2, #24]
 800bf16:	42a3      	cmp	r3, r4
 800bf18:	db01      	blt.n	800bf1e <__sfputc_r+0x16>
 800bf1a:	290a      	cmp	r1, #10
 800bf1c:	d103      	bne.n	800bf26 <__sfputc_r+0x1e>
 800bf1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bf22:	f000 bb2d 	b.w	800c580 <__swbuf_r>
 800bf26:	6813      	ldr	r3, [r2, #0]
 800bf28:	1c58      	adds	r0, r3, #1
 800bf2a:	6010      	str	r0, [r2, #0]
 800bf2c:	7019      	strb	r1, [r3, #0]
 800bf2e:	4608      	mov	r0, r1
 800bf30:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bf34:	4770      	bx	lr

0800bf36 <__sfputs_r>:
 800bf36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf38:	4606      	mov	r6, r0
 800bf3a:	460f      	mov	r7, r1
 800bf3c:	4614      	mov	r4, r2
 800bf3e:	18d5      	adds	r5, r2, r3
 800bf40:	42ac      	cmp	r4, r5
 800bf42:	d101      	bne.n	800bf48 <__sfputs_r+0x12>
 800bf44:	2000      	movs	r0, #0
 800bf46:	e007      	b.n	800bf58 <__sfputs_r+0x22>
 800bf48:	463a      	mov	r2, r7
 800bf4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf4e:	4630      	mov	r0, r6
 800bf50:	f7ff ffda 	bl	800bf08 <__sfputc_r>
 800bf54:	1c43      	adds	r3, r0, #1
 800bf56:	d1f3      	bne.n	800bf40 <__sfputs_r+0xa>
 800bf58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bf5c <_vfiprintf_r>:
 800bf5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf60:	460c      	mov	r4, r1
 800bf62:	b09d      	sub	sp, #116	; 0x74
 800bf64:	4617      	mov	r7, r2
 800bf66:	461d      	mov	r5, r3
 800bf68:	4606      	mov	r6, r0
 800bf6a:	b118      	cbz	r0, 800bf74 <_vfiprintf_r+0x18>
 800bf6c:	6983      	ldr	r3, [r0, #24]
 800bf6e:	b90b      	cbnz	r3, 800bf74 <_vfiprintf_r+0x18>
 800bf70:	f000 fcbe 	bl	800c8f0 <__sinit>
 800bf74:	4b7c      	ldr	r3, [pc, #496]	; (800c168 <_vfiprintf_r+0x20c>)
 800bf76:	429c      	cmp	r4, r3
 800bf78:	d158      	bne.n	800c02c <_vfiprintf_r+0xd0>
 800bf7a:	6874      	ldr	r4, [r6, #4]
 800bf7c:	89a3      	ldrh	r3, [r4, #12]
 800bf7e:	0718      	lsls	r0, r3, #28
 800bf80:	d55e      	bpl.n	800c040 <_vfiprintf_r+0xe4>
 800bf82:	6923      	ldr	r3, [r4, #16]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d05b      	beq.n	800c040 <_vfiprintf_r+0xe4>
 800bf88:	2300      	movs	r3, #0
 800bf8a:	9309      	str	r3, [sp, #36]	; 0x24
 800bf8c:	2320      	movs	r3, #32
 800bf8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bf92:	2330      	movs	r3, #48	; 0x30
 800bf94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bf98:	9503      	str	r5, [sp, #12]
 800bf9a:	f04f 0b01 	mov.w	fp, #1
 800bf9e:	46b8      	mov	r8, r7
 800bfa0:	4645      	mov	r5, r8
 800bfa2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bfa6:	b10b      	cbz	r3, 800bfac <_vfiprintf_r+0x50>
 800bfa8:	2b25      	cmp	r3, #37	; 0x25
 800bfaa:	d154      	bne.n	800c056 <_vfiprintf_r+0xfa>
 800bfac:	ebb8 0a07 	subs.w	sl, r8, r7
 800bfb0:	d00b      	beq.n	800bfca <_vfiprintf_r+0x6e>
 800bfb2:	4653      	mov	r3, sl
 800bfb4:	463a      	mov	r2, r7
 800bfb6:	4621      	mov	r1, r4
 800bfb8:	4630      	mov	r0, r6
 800bfba:	f7ff ffbc 	bl	800bf36 <__sfputs_r>
 800bfbe:	3001      	adds	r0, #1
 800bfc0:	f000 80c2 	beq.w	800c148 <_vfiprintf_r+0x1ec>
 800bfc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfc6:	4453      	add	r3, sl
 800bfc8:	9309      	str	r3, [sp, #36]	; 0x24
 800bfca:	f898 3000 	ldrb.w	r3, [r8]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	f000 80ba 	beq.w	800c148 <_vfiprintf_r+0x1ec>
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bfda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bfde:	9304      	str	r3, [sp, #16]
 800bfe0:	9307      	str	r3, [sp, #28]
 800bfe2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bfe6:	931a      	str	r3, [sp, #104]	; 0x68
 800bfe8:	46a8      	mov	r8, r5
 800bfea:	2205      	movs	r2, #5
 800bfec:	f818 1b01 	ldrb.w	r1, [r8], #1
 800bff0:	485e      	ldr	r0, [pc, #376]	; (800c16c <_vfiprintf_r+0x210>)
 800bff2:	f7f4 f97d 	bl	80002f0 <memchr>
 800bff6:	9b04      	ldr	r3, [sp, #16]
 800bff8:	bb78      	cbnz	r0, 800c05a <_vfiprintf_r+0xfe>
 800bffa:	06d9      	lsls	r1, r3, #27
 800bffc:	bf44      	itt	mi
 800bffe:	2220      	movmi	r2, #32
 800c000:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c004:	071a      	lsls	r2, r3, #28
 800c006:	bf44      	itt	mi
 800c008:	222b      	movmi	r2, #43	; 0x2b
 800c00a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c00e:	782a      	ldrb	r2, [r5, #0]
 800c010:	2a2a      	cmp	r2, #42	; 0x2a
 800c012:	d02a      	beq.n	800c06a <_vfiprintf_r+0x10e>
 800c014:	9a07      	ldr	r2, [sp, #28]
 800c016:	46a8      	mov	r8, r5
 800c018:	2000      	movs	r0, #0
 800c01a:	250a      	movs	r5, #10
 800c01c:	4641      	mov	r1, r8
 800c01e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c022:	3b30      	subs	r3, #48	; 0x30
 800c024:	2b09      	cmp	r3, #9
 800c026:	d969      	bls.n	800c0fc <_vfiprintf_r+0x1a0>
 800c028:	b360      	cbz	r0, 800c084 <_vfiprintf_r+0x128>
 800c02a:	e024      	b.n	800c076 <_vfiprintf_r+0x11a>
 800c02c:	4b50      	ldr	r3, [pc, #320]	; (800c170 <_vfiprintf_r+0x214>)
 800c02e:	429c      	cmp	r4, r3
 800c030:	d101      	bne.n	800c036 <_vfiprintf_r+0xda>
 800c032:	68b4      	ldr	r4, [r6, #8]
 800c034:	e7a2      	b.n	800bf7c <_vfiprintf_r+0x20>
 800c036:	4b4f      	ldr	r3, [pc, #316]	; (800c174 <_vfiprintf_r+0x218>)
 800c038:	429c      	cmp	r4, r3
 800c03a:	bf08      	it	eq
 800c03c:	68f4      	ldreq	r4, [r6, #12]
 800c03e:	e79d      	b.n	800bf7c <_vfiprintf_r+0x20>
 800c040:	4621      	mov	r1, r4
 800c042:	4630      	mov	r0, r6
 800c044:	f000 faee 	bl	800c624 <__swsetup_r>
 800c048:	2800      	cmp	r0, #0
 800c04a:	d09d      	beq.n	800bf88 <_vfiprintf_r+0x2c>
 800c04c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c050:	b01d      	add	sp, #116	; 0x74
 800c052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c056:	46a8      	mov	r8, r5
 800c058:	e7a2      	b.n	800bfa0 <_vfiprintf_r+0x44>
 800c05a:	4a44      	ldr	r2, [pc, #272]	; (800c16c <_vfiprintf_r+0x210>)
 800c05c:	1a80      	subs	r0, r0, r2
 800c05e:	fa0b f000 	lsl.w	r0, fp, r0
 800c062:	4318      	orrs	r0, r3
 800c064:	9004      	str	r0, [sp, #16]
 800c066:	4645      	mov	r5, r8
 800c068:	e7be      	b.n	800bfe8 <_vfiprintf_r+0x8c>
 800c06a:	9a03      	ldr	r2, [sp, #12]
 800c06c:	1d11      	adds	r1, r2, #4
 800c06e:	6812      	ldr	r2, [r2, #0]
 800c070:	9103      	str	r1, [sp, #12]
 800c072:	2a00      	cmp	r2, #0
 800c074:	db01      	blt.n	800c07a <_vfiprintf_r+0x11e>
 800c076:	9207      	str	r2, [sp, #28]
 800c078:	e004      	b.n	800c084 <_vfiprintf_r+0x128>
 800c07a:	4252      	negs	r2, r2
 800c07c:	f043 0302 	orr.w	r3, r3, #2
 800c080:	9207      	str	r2, [sp, #28]
 800c082:	9304      	str	r3, [sp, #16]
 800c084:	f898 3000 	ldrb.w	r3, [r8]
 800c088:	2b2e      	cmp	r3, #46	; 0x2e
 800c08a:	d10e      	bne.n	800c0aa <_vfiprintf_r+0x14e>
 800c08c:	f898 3001 	ldrb.w	r3, [r8, #1]
 800c090:	2b2a      	cmp	r3, #42	; 0x2a
 800c092:	d138      	bne.n	800c106 <_vfiprintf_r+0x1aa>
 800c094:	9b03      	ldr	r3, [sp, #12]
 800c096:	1d1a      	adds	r2, r3, #4
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	9203      	str	r2, [sp, #12]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	bfb8      	it	lt
 800c0a0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c0a4:	f108 0802 	add.w	r8, r8, #2
 800c0a8:	9305      	str	r3, [sp, #20]
 800c0aa:	4d33      	ldr	r5, [pc, #204]	; (800c178 <_vfiprintf_r+0x21c>)
 800c0ac:	f898 1000 	ldrb.w	r1, [r8]
 800c0b0:	2203      	movs	r2, #3
 800c0b2:	4628      	mov	r0, r5
 800c0b4:	f7f4 f91c 	bl	80002f0 <memchr>
 800c0b8:	b140      	cbz	r0, 800c0cc <_vfiprintf_r+0x170>
 800c0ba:	2340      	movs	r3, #64	; 0x40
 800c0bc:	1b40      	subs	r0, r0, r5
 800c0be:	fa03 f000 	lsl.w	r0, r3, r0
 800c0c2:	9b04      	ldr	r3, [sp, #16]
 800c0c4:	4303      	orrs	r3, r0
 800c0c6:	f108 0801 	add.w	r8, r8, #1
 800c0ca:	9304      	str	r3, [sp, #16]
 800c0cc:	f898 1000 	ldrb.w	r1, [r8]
 800c0d0:	482a      	ldr	r0, [pc, #168]	; (800c17c <_vfiprintf_r+0x220>)
 800c0d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c0d6:	2206      	movs	r2, #6
 800c0d8:	f108 0701 	add.w	r7, r8, #1
 800c0dc:	f7f4 f908 	bl	80002f0 <memchr>
 800c0e0:	2800      	cmp	r0, #0
 800c0e2:	d037      	beq.n	800c154 <_vfiprintf_r+0x1f8>
 800c0e4:	4b26      	ldr	r3, [pc, #152]	; (800c180 <_vfiprintf_r+0x224>)
 800c0e6:	bb1b      	cbnz	r3, 800c130 <_vfiprintf_r+0x1d4>
 800c0e8:	9b03      	ldr	r3, [sp, #12]
 800c0ea:	3307      	adds	r3, #7
 800c0ec:	f023 0307 	bic.w	r3, r3, #7
 800c0f0:	3308      	adds	r3, #8
 800c0f2:	9303      	str	r3, [sp, #12]
 800c0f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0f6:	444b      	add	r3, r9
 800c0f8:	9309      	str	r3, [sp, #36]	; 0x24
 800c0fa:	e750      	b.n	800bf9e <_vfiprintf_r+0x42>
 800c0fc:	fb05 3202 	mla	r2, r5, r2, r3
 800c100:	2001      	movs	r0, #1
 800c102:	4688      	mov	r8, r1
 800c104:	e78a      	b.n	800c01c <_vfiprintf_r+0xc0>
 800c106:	2300      	movs	r3, #0
 800c108:	f108 0801 	add.w	r8, r8, #1
 800c10c:	9305      	str	r3, [sp, #20]
 800c10e:	4619      	mov	r1, r3
 800c110:	250a      	movs	r5, #10
 800c112:	4640      	mov	r0, r8
 800c114:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c118:	3a30      	subs	r2, #48	; 0x30
 800c11a:	2a09      	cmp	r2, #9
 800c11c:	d903      	bls.n	800c126 <_vfiprintf_r+0x1ca>
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d0c3      	beq.n	800c0aa <_vfiprintf_r+0x14e>
 800c122:	9105      	str	r1, [sp, #20]
 800c124:	e7c1      	b.n	800c0aa <_vfiprintf_r+0x14e>
 800c126:	fb05 2101 	mla	r1, r5, r1, r2
 800c12a:	2301      	movs	r3, #1
 800c12c:	4680      	mov	r8, r0
 800c12e:	e7f0      	b.n	800c112 <_vfiprintf_r+0x1b6>
 800c130:	ab03      	add	r3, sp, #12
 800c132:	9300      	str	r3, [sp, #0]
 800c134:	4622      	mov	r2, r4
 800c136:	4b13      	ldr	r3, [pc, #76]	; (800c184 <_vfiprintf_r+0x228>)
 800c138:	a904      	add	r1, sp, #16
 800c13a:	4630      	mov	r0, r6
 800c13c:	f3af 8000 	nop.w
 800c140:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800c144:	4681      	mov	r9, r0
 800c146:	d1d5      	bne.n	800c0f4 <_vfiprintf_r+0x198>
 800c148:	89a3      	ldrh	r3, [r4, #12]
 800c14a:	065b      	lsls	r3, r3, #25
 800c14c:	f53f af7e 	bmi.w	800c04c <_vfiprintf_r+0xf0>
 800c150:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c152:	e77d      	b.n	800c050 <_vfiprintf_r+0xf4>
 800c154:	ab03      	add	r3, sp, #12
 800c156:	9300      	str	r3, [sp, #0]
 800c158:	4622      	mov	r2, r4
 800c15a:	4b0a      	ldr	r3, [pc, #40]	; (800c184 <_vfiprintf_r+0x228>)
 800c15c:	a904      	add	r1, sp, #16
 800c15e:	4630      	mov	r0, r6
 800c160:	f000 f888 	bl	800c274 <_printf_i>
 800c164:	e7ec      	b.n	800c140 <_vfiprintf_r+0x1e4>
 800c166:	bf00      	nop
 800c168:	0800d074 	.word	0x0800d074
 800c16c:	0800d020 	.word	0x0800d020
 800c170:	0800d094 	.word	0x0800d094
 800c174:	0800d054 	.word	0x0800d054
 800c178:	0800d026 	.word	0x0800d026
 800c17c:	0800d02a 	.word	0x0800d02a
 800c180:	00000000 	.word	0x00000000
 800c184:	0800bf37 	.word	0x0800bf37

0800c188 <_printf_common>:
 800c188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c18c:	4691      	mov	r9, r2
 800c18e:	461f      	mov	r7, r3
 800c190:	688a      	ldr	r2, [r1, #8]
 800c192:	690b      	ldr	r3, [r1, #16]
 800c194:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c198:	4293      	cmp	r3, r2
 800c19a:	bfb8      	it	lt
 800c19c:	4613      	movlt	r3, r2
 800c19e:	f8c9 3000 	str.w	r3, [r9]
 800c1a2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c1a6:	4606      	mov	r6, r0
 800c1a8:	460c      	mov	r4, r1
 800c1aa:	b112      	cbz	r2, 800c1b2 <_printf_common+0x2a>
 800c1ac:	3301      	adds	r3, #1
 800c1ae:	f8c9 3000 	str.w	r3, [r9]
 800c1b2:	6823      	ldr	r3, [r4, #0]
 800c1b4:	0699      	lsls	r1, r3, #26
 800c1b6:	bf42      	ittt	mi
 800c1b8:	f8d9 3000 	ldrmi.w	r3, [r9]
 800c1bc:	3302      	addmi	r3, #2
 800c1be:	f8c9 3000 	strmi.w	r3, [r9]
 800c1c2:	6825      	ldr	r5, [r4, #0]
 800c1c4:	f015 0506 	ands.w	r5, r5, #6
 800c1c8:	d107      	bne.n	800c1da <_printf_common+0x52>
 800c1ca:	f104 0a19 	add.w	sl, r4, #25
 800c1ce:	68e3      	ldr	r3, [r4, #12]
 800c1d0:	f8d9 2000 	ldr.w	r2, [r9]
 800c1d4:	1a9b      	subs	r3, r3, r2
 800c1d6:	42ab      	cmp	r3, r5
 800c1d8:	dc28      	bgt.n	800c22c <_printf_common+0xa4>
 800c1da:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c1de:	6822      	ldr	r2, [r4, #0]
 800c1e0:	3300      	adds	r3, #0
 800c1e2:	bf18      	it	ne
 800c1e4:	2301      	movne	r3, #1
 800c1e6:	0692      	lsls	r2, r2, #26
 800c1e8:	d42d      	bmi.n	800c246 <_printf_common+0xbe>
 800c1ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c1ee:	4639      	mov	r1, r7
 800c1f0:	4630      	mov	r0, r6
 800c1f2:	47c0      	blx	r8
 800c1f4:	3001      	adds	r0, #1
 800c1f6:	d020      	beq.n	800c23a <_printf_common+0xb2>
 800c1f8:	6823      	ldr	r3, [r4, #0]
 800c1fa:	68e5      	ldr	r5, [r4, #12]
 800c1fc:	f8d9 2000 	ldr.w	r2, [r9]
 800c200:	f003 0306 	and.w	r3, r3, #6
 800c204:	2b04      	cmp	r3, #4
 800c206:	bf08      	it	eq
 800c208:	1aad      	subeq	r5, r5, r2
 800c20a:	68a3      	ldr	r3, [r4, #8]
 800c20c:	6922      	ldr	r2, [r4, #16]
 800c20e:	bf0c      	ite	eq
 800c210:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c214:	2500      	movne	r5, #0
 800c216:	4293      	cmp	r3, r2
 800c218:	bfc4      	itt	gt
 800c21a:	1a9b      	subgt	r3, r3, r2
 800c21c:	18ed      	addgt	r5, r5, r3
 800c21e:	f04f 0900 	mov.w	r9, #0
 800c222:	341a      	adds	r4, #26
 800c224:	454d      	cmp	r5, r9
 800c226:	d11a      	bne.n	800c25e <_printf_common+0xd6>
 800c228:	2000      	movs	r0, #0
 800c22a:	e008      	b.n	800c23e <_printf_common+0xb6>
 800c22c:	2301      	movs	r3, #1
 800c22e:	4652      	mov	r2, sl
 800c230:	4639      	mov	r1, r7
 800c232:	4630      	mov	r0, r6
 800c234:	47c0      	blx	r8
 800c236:	3001      	adds	r0, #1
 800c238:	d103      	bne.n	800c242 <_printf_common+0xba>
 800c23a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c23e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c242:	3501      	adds	r5, #1
 800c244:	e7c3      	b.n	800c1ce <_printf_common+0x46>
 800c246:	18e1      	adds	r1, r4, r3
 800c248:	1c5a      	adds	r2, r3, #1
 800c24a:	2030      	movs	r0, #48	; 0x30
 800c24c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c250:	4422      	add	r2, r4
 800c252:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c256:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c25a:	3302      	adds	r3, #2
 800c25c:	e7c5      	b.n	800c1ea <_printf_common+0x62>
 800c25e:	2301      	movs	r3, #1
 800c260:	4622      	mov	r2, r4
 800c262:	4639      	mov	r1, r7
 800c264:	4630      	mov	r0, r6
 800c266:	47c0      	blx	r8
 800c268:	3001      	adds	r0, #1
 800c26a:	d0e6      	beq.n	800c23a <_printf_common+0xb2>
 800c26c:	f109 0901 	add.w	r9, r9, #1
 800c270:	e7d8      	b.n	800c224 <_printf_common+0x9c>
	...

0800c274 <_printf_i>:
 800c274:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c278:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800c27c:	460c      	mov	r4, r1
 800c27e:	7e09      	ldrb	r1, [r1, #24]
 800c280:	b085      	sub	sp, #20
 800c282:	296e      	cmp	r1, #110	; 0x6e
 800c284:	4617      	mov	r7, r2
 800c286:	4606      	mov	r6, r0
 800c288:	4698      	mov	r8, r3
 800c28a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c28c:	f000 80b3 	beq.w	800c3f6 <_printf_i+0x182>
 800c290:	d822      	bhi.n	800c2d8 <_printf_i+0x64>
 800c292:	2963      	cmp	r1, #99	; 0x63
 800c294:	d036      	beq.n	800c304 <_printf_i+0x90>
 800c296:	d80a      	bhi.n	800c2ae <_printf_i+0x3a>
 800c298:	2900      	cmp	r1, #0
 800c29a:	f000 80b9 	beq.w	800c410 <_printf_i+0x19c>
 800c29e:	2958      	cmp	r1, #88	; 0x58
 800c2a0:	f000 8083 	beq.w	800c3aa <_printf_i+0x136>
 800c2a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c2a8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800c2ac:	e032      	b.n	800c314 <_printf_i+0xa0>
 800c2ae:	2964      	cmp	r1, #100	; 0x64
 800c2b0:	d001      	beq.n	800c2b6 <_printf_i+0x42>
 800c2b2:	2969      	cmp	r1, #105	; 0x69
 800c2b4:	d1f6      	bne.n	800c2a4 <_printf_i+0x30>
 800c2b6:	6820      	ldr	r0, [r4, #0]
 800c2b8:	6813      	ldr	r3, [r2, #0]
 800c2ba:	0605      	lsls	r5, r0, #24
 800c2bc:	f103 0104 	add.w	r1, r3, #4
 800c2c0:	d52a      	bpl.n	800c318 <_printf_i+0xa4>
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	6011      	str	r1, [r2, #0]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	da03      	bge.n	800c2d2 <_printf_i+0x5e>
 800c2ca:	222d      	movs	r2, #45	; 0x2d
 800c2cc:	425b      	negs	r3, r3
 800c2ce:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c2d2:	486f      	ldr	r0, [pc, #444]	; (800c490 <_printf_i+0x21c>)
 800c2d4:	220a      	movs	r2, #10
 800c2d6:	e039      	b.n	800c34c <_printf_i+0xd8>
 800c2d8:	2973      	cmp	r1, #115	; 0x73
 800c2da:	f000 809d 	beq.w	800c418 <_printf_i+0x1a4>
 800c2de:	d808      	bhi.n	800c2f2 <_printf_i+0x7e>
 800c2e0:	296f      	cmp	r1, #111	; 0x6f
 800c2e2:	d020      	beq.n	800c326 <_printf_i+0xb2>
 800c2e4:	2970      	cmp	r1, #112	; 0x70
 800c2e6:	d1dd      	bne.n	800c2a4 <_printf_i+0x30>
 800c2e8:	6823      	ldr	r3, [r4, #0]
 800c2ea:	f043 0320 	orr.w	r3, r3, #32
 800c2ee:	6023      	str	r3, [r4, #0]
 800c2f0:	e003      	b.n	800c2fa <_printf_i+0x86>
 800c2f2:	2975      	cmp	r1, #117	; 0x75
 800c2f4:	d017      	beq.n	800c326 <_printf_i+0xb2>
 800c2f6:	2978      	cmp	r1, #120	; 0x78
 800c2f8:	d1d4      	bne.n	800c2a4 <_printf_i+0x30>
 800c2fa:	2378      	movs	r3, #120	; 0x78
 800c2fc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c300:	4864      	ldr	r0, [pc, #400]	; (800c494 <_printf_i+0x220>)
 800c302:	e055      	b.n	800c3b0 <_printf_i+0x13c>
 800c304:	6813      	ldr	r3, [r2, #0]
 800c306:	1d19      	adds	r1, r3, #4
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	6011      	str	r1, [r2, #0]
 800c30c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c310:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c314:	2301      	movs	r3, #1
 800c316:	e08c      	b.n	800c432 <_printf_i+0x1be>
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	6011      	str	r1, [r2, #0]
 800c31c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c320:	bf18      	it	ne
 800c322:	b21b      	sxthne	r3, r3
 800c324:	e7cf      	b.n	800c2c6 <_printf_i+0x52>
 800c326:	6813      	ldr	r3, [r2, #0]
 800c328:	6825      	ldr	r5, [r4, #0]
 800c32a:	1d18      	adds	r0, r3, #4
 800c32c:	6010      	str	r0, [r2, #0]
 800c32e:	0628      	lsls	r0, r5, #24
 800c330:	d501      	bpl.n	800c336 <_printf_i+0xc2>
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	e002      	b.n	800c33c <_printf_i+0xc8>
 800c336:	0668      	lsls	r0, r5, #25
 800c338:	d5fb      	bpl.n	800c332 <_printf_i+0xbe>
 800c33a:	881b      	ldrh	r3, [r3, #0]
 800c33c:	4854      	ldr	r0, [pc, #336]	; (800c490 <_printf_i+0x21c>)
 800c33e:	296f      	cmp	r1, #111	; 0x6f
 800c340:	bf14      	ite	ne
 800c342:	220a      	movne	r2, #10
 800c344:	2208      	moveq	r2, #8
 800c346:	2100      	movs	r1, #0
 800c348:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c34c:	6865      	ldr	r5, [r4, #4]
 800c34e:	60a5      	str	r5, [r4, #8]
 800c350:	2d00      	cmp	r5, #0
 800c352:	f2c0 8095 	blt.w	800c480 <_printf_i+0x20c>
 800c356:	6821      	ldr	r1, [r4, #0]
 800c358:	f021 0104 	bic.w	r1, r1, #4
 800c35c:	6021      	str	r1, [r4, #0]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d13d      	bne.n	800c3de <_printf_i+0x16a>
 800c362:	2d00      	cmp	r5, #0
 800c364:	f040 808e 	bne.w	800c484 <_printf_i+0x210>
 800c368:	4665      	mov	r5, ip
 800c36a:	2a08      	cmp	r2, #8
 800c36c:	d10b      	bne.n	800c386 <_printf_i+0x112>
 800c36e:	6823      	ldr	r3, [r4, #0]
 800c370:	07db      	lsls	r3, r3, #31
 800c372:	d508      	bpl.n	800c386 <_printf_i+0x112>
 800c374:	6923      	ldr	r3, [r4, #16]
 800c376:	6862      	ldr	r2, [r4, #4]
 800c378:	429a      	cmp	r2, r3
 800c37a:	bfde      	ittt	le
 800c37c:	2330      	movle	r3, #48	; 0x30
 800c37e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c382:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800c386:	ebac 0305 	sub.w	r3, ip, r5
 800c38a:	6123      	str	r3, [r4, #16]
 800c38c:	f8cd 8000 	str.w	r8, [sp]
 800c390:	463b      	mov	r3, r7
 800c392:	aa03      	add	r2, sp, #12
 800c394:	4621      	mov	r1, r4
 800c396:	4630      	mov	r0, r6
 800c398:	f7ff fef6 	bl	800c188 <_printf_common>
 800c39c:	3001      	adds	r0, #1
 800c39e:	d14d      	bne.n	800c43c <_printf_i+0x1c8>
 800c3a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c3a4:	b005      	add	sp, #20
 800c3a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c3aa:	4839      	ldr	r0, [pc, #228]	; (800c490 <_printf_i+0x21c>)
 800c3ac:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800c3b0:	6813      	ldr	r3, [r2, #0]
 800c3b2:	6821      	ldr	r1, [r4, #0]
 800c3b4:	1d1d      	adds	r5, r3, #4
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	6015      	str	r5, [r2, #0]
 800c3ba:	060a      	lsls	r2, r1, #24
 800c3bc:	d50b      	bpl.n	800c3d6 <_printf_i+0x162>
 800c3be:	07ca      	lsls	r2, r1, #31
 800c3c0:	bf44      	itt	mi
 800c3c2:	f041 0120 	orrmi.w	r1, r1, #32
 800c3c6:	6021      	strmi	r1, [r4, #0]
 800c3c8:	b91b      	cbnz	r3, 800c3d2 <_printf_i+0x15e>
 800c3ca:	6822      	ldr	r2, [r4, #0]
 800c3cc:	f022 0220 	bic.w	r2, r2, #32
 800c3d0:	6022      	str	r2, [r4, #0]
 800c3d2:	2210      	movs	r2, #16
 800c3d4:	e7b7      	b.n	800c346 <_printf_i+0xd2>
 800c3d6:	064d      	lsls	r5, r1, #25
 800c3d8:	bf48      	it	mi
 800c3da:	b29b      	uxthmi	r3, r3
 800c3dc:	e7ef      	b.n	800c3be <_printf_i+0x14a>
 800c3de:	4665      	mov	r5, ip
 800c3e0:	fbb3 f1f2 	udiv	r1, r3, r2
 800c3e4:	fb02 3311 	mls	r3, r2, r1, r3
 800c3e8:	5cc3      	ldrb	r3, [r0, r3]
 800c3ea:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800c3ee:	460b      	mov	r3, r1
 800c3f0:	2900      	cmp	r1, #0
 800c3f2:	d1f5      	bne.n	800c3e0 <_printf_i+0x16c>
 800c3f4:	e7b9      	b.n	800c36a <_printf_i+0xf6>
 800c3f6:	6813      	ldr	r3, [r2, #0]
 800c3f8:	6825      	ldr	r5, [r4, #0]
 800c3fa:	6961      	ldr	r1, [r4, #20]
 800c3fc:	1d18      	adds	r0, r3, #4
 800c3fe:	6010      	str	r0, [r2, #0]
 800c400:	0628      	lsls	r0, r5, #24
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	d501      	bpl.n	800c40a <_printf_i+0x196>
 800c406:	6019      	str	r1, [r3, #0]
 800c408:	e002      	b.n	800c410 <_printf_i+0x19c>
 800c40a:	066a      	lsls	r2, r5, #25
 800c40c:	d5fb      	bpl.n	800c406 <_printf_i+0x192>
 800c40e:	8019      	strh	r1, [r3, #0]
 800c410:	2300      	movs	r3, #0
 800c412:	6123      	str	r3, [r4, #16]
 800c414:	4665      	mov	r5, ip
 800c416:	e7b9      	b.n	800c38c <_printf_i+0x118>
 800c418:	6813      	ldr	r3, [r2, #0]
 800c41a:	1d19      	adds	r1, r3, #4
 800c41c:	6011      	str	r1, [r2, #0]
 800c41e:	681d      	ldr	r5, [r3, #0]
 800c420:	6862      	ldr	r2, [r4, #4]
 800c422:	2100      	movs	r1, #0
 800c424:	4628      	mov	r0, r5
 800c426:	f7f3 ff63 	bl	80002f0 <memchr>
 800c42a:	b108      	cbz	r0, 800c430 <_printf_i+0x1bc>
 800c42c:	1b40      	subs	r0, r0, r5
 800c42e:	6060      	str	r0, [r4, #4]
 800c430:	6863      	ldr	r3, [r4, #4]
 800c432:	6123      	str	r3, [r4, #16]
 800c434:	2300      	movs	r3, #0
 800c436:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c43a:	e7a7      	b.n	800c38c <_printf_i+0x118>
 800c43c:	6923      	ldr	r3, [r4, #16]
 800c43e:	462a      	mov	r2, r5
 800c440:	4639      	mov	r1, r7
 800c442:	4630      	mov	r0, r6
 800c444:	47c0      	blx	r8
 800c446:	3001      	adds	r0, #1
 800c448:	d0aa      	beq.n	800c3a0 <_printf_i+0x12c>
 800c44a:	6823      	ldr	r3, [r4, #0]
 800c44c:	079b      	lsls	r3, r3, #30
 800c44e:	d413      	bmi.n	800c478 <_printf_i+0x204>
 800c450:	68e0      	ldr	r0, [r4, #12]
 800c452:	9b03      	ldr	r3, [sp, #12]
 800c454:	4298      	cmp	r0, r3
 800c456:	bfb8      	it	lt
 800c458:	4618      	movlt	r0, r3
 800c45a:	e7a3      	b.n	800c3a4 <_printf_i+0x130>
 800c45c:	2301      	movs	r3, #1
 800c45e:	464a      	mov	r2, r9
 800c460:	4639      	mov	r1, r7
 800c462:	4630      	mov	r0, r6
 800c464:	47c0      	blx	r8
 800c466:	3001      	adds	r0, #1
 800c468:	d09a      	beq.n	800c3a0 <_printf_i+0x12c>
 800c46a:	3501      	adds	r5, #1
 800c46c:	68e3      	ldr	r3, [r4, #12]
 800c46e:	9a03      	ldr	r2, [sp, #12]
 800c470:	1a9b      	subs	r3, r3, r2
 800c472:	42ab      	cmp	r3, r5
 800c474:	dcf2      	bgt.n	800c45c <_printf_i+0x1e8>
 800c476:	e7eb      	b.n	800c450 <_printf_i+0x1dc>
 800c478:	2500      	movs	r5, #0
 800c47a:	f104 0919 	add.w	r9, r4, #25
 800c47e:	e7f5      	b.n	800c46c <_printf_i+0x1f8>
 800c480:	2b00      	cmp	r3, #0
 800c482:	d1ac      	bne.n	800c3de <_printf_i+0x16a>
 800c484:	7803      	ldrb	r3, [r0, #0]
 800c486:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c48a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c48e:	e76c      	b.n	800c36a <_printf_i+0xf6>
 800c490:	0800d031 	.word	0x0800d031
 800c494:	0800d042 	.word	0x0800d042

0800c498 <_puts_r>:
 800c498:	b570      	push	{r4, r5, r6, lr}
 800c49a:	460e      	mov	r6, r1
 800c49c:	4605      	mov	r5, r0
 800c49e:	b118      	cbz	r0, 800c4a8 <_puts_r+0x10>
 800c4a0:	6983      	ldr	r3, [r0, #24]
 800c4a2:	b90b      	cbnz	r3, 800c4a8 <_puts_r+0x10>
 800c4a4:	f000 fa24 	bl	800c8f0 <__sinit>
 800c4a8:	69ab      	ldr	r3, [r5, #24]
 800c4aa:	68ac      	ldr	r4, [r5, #8]
 800c4ac:	b913      	cbnz	r3, 800c4b4 <_puts_r+0x1c>
 800c4ae:	4628      	mov	r0, r5
 800c4b0:	f000 fa1e 	bl	800c8f0 <__sinit>
 800c4b4:	4b23      	ldr	r3, [pc, #140]	; (800c544 <_puts_r+0xac>)
 800c4b6:	429c      	cmp	r4, r3
 800c4b8:	d117      	bne.n	800c4ea <_puts_r+0x52>
 800c4ba:	686c      	ldr	r4, [r5, #4]
 800c4bc:	89a3      	ldrh	r3, [r4, #12]
 800c4be:	071b      	lsls	r3, r3, #28
 800c4c0:	d51d      	bpl.n	800c4fe <_puts_r+0x66>
 800c4c2:	6923      	ldr	r3, [r4, #16]
 800c4c4:	b1db      	cbz	r3, 800c4fe <_puts_r+0x66>
 800c4c6:	3e01      	subs	r6, #1
 800c4c8:	68a3      	ldr	r3, [r4, #8]
 800c4ca:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c4ce:	3b01      	subs	r3, #1
 800c4d0:	60a3      	str	r3, [r4, #8]
 800c4d2:	b9e9      	cbnz	r1, 800c510 <_puts_r+0x78>
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	da2e      	bge.n	800c536 <_puts_r+0x9e>
 800c4d8:	4622      	mov	r2, r4
 800c4da:	210a      	movs	r1, #10
 800c4dc:	4628      	mov	r0, r5
 800c4de:	f000 f84f 	bl	800c580 <__swbuf_r>
 800c4e2:	3001      	adds	r0, #1
 800c4e4:	d011      	beq.n	800c50a <_puts_r+0x72>
 800c4e6:	200a      	movs	r0, #10
 800c4e8:	e011      	b.n	800c50e <_puts_r+0x76>
 800c4ea:	4b17      	ldr	r3, [pc, #92]	; (800c548 <_puts_r+0xb0>)
 800c4ec:	429c      	cmp	r4, r3
 800c4ee:	d101      	bne.n	800c4f4 <_puts_r+0x5c>
 800c4f0:	68ac      	ldr	r4, [r5, #8]
 800c4f2:	e7e3      	b.n	800c4bc <_puts_r+0x24>
 800c4f4:	4b15      	ldr	r3, [pc, #84]	; (800c54c <_puts_r+0xb4>)
 800c4f6:	429c      	cmp	r4, r3
 800c4f8:	bf08      	it	eq
 800c4fa:	68ec      	ldreq	r4, [r5, #12]
 800c4fc:	e7de      	b.n	800c4bc <_puts_r+0x24>
 800c4fe:	4621      	mov	r1, r4
 800c500:	4628      	mov	r0, r5
 800c502:	f000 f88f 	bl	800c624 <__swsetup_r>
 800c506:	2800      	cmp	r0, #0
 800c508:	d0dd      	beq.n	800c4c6 <_puts_r+0x2e>
 800c50a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c50e:	bd70      	pop	{r4, r5, r6, pc}
 800c510:	2b00      	cmp	r3, #0
 800c512:	da04      	bge.n	800c51e <_puts_r+0x86>
 800c514:	69a2      	ldr	r2, [r4, #24]
 800c516:	429a      	cmp	r2, r3
 800c518:	dc06      	bgt.n	800c528 <_puts_r+0x90>
 800c51a:	290a      	cmp	r1, #10
 800c51c:	d004      	beq.n	800c528 <_puts_r+0x90>
 800c51e:	6823      	ldr	r3, [r4, #0]
 800c520:	1c5a      	adds	r2, r3, #1
 800c522:	6022      	str	r2, [r4, #0]
 800c524:	7019      	strb	r1, [r3, #0]
 800c526:	e7cf      	b.n	800c4c8 <_puts_r+0x30>
 800c528:	4622      	mov	r2, r4
 800c52a:	4628      	mov	r0, r5
 800c52c:	f000 f828 	bl	800c580 <__swbuf_r>
 800c530:	3001      	adds	r0, #1
 800c532:	d1c9      	bne.n	800c4c8 <_puts_r+0x30>
 800c534:	e7e9      	b.n	800c50a <_puts_r+0x72>
 800c536:	6823      	ldr	r3, [r4, #0]
 800c538:	200a      	movs	r0, #10
 800c53a:	1c5a      	adds	r2, r3, #1
 800c53c:	6022      	str	r2, [r4, #0]
 800c53e:	7018      	strb	r0, [r3, #0]
 800c540:	e7e5      	b.n	800c50e <_puts_r+0x76>
 800c542:	bf00      	nop
 800c544:	0800d074 	.word	0x0800d074
 800c548:	0800d094 	.word	0x0800d094
 800c54c:	0800d054 	.word	0x0800d054

0800c550 <puts>:
 800c550:	4b02      	ldr	r3, [pc, #8]	; (800c55c <puts+0xc>)
 800c552:	4601      	mov	r1, r0
 800c554:	6818      	ldr	r0, [r3, #0]
 800c556:	f7ff bf9f 	b.w	800c498 <_puts_r>
 800c55a:	bf00      	nop
 800c55c:	200000ec 	.word	0x200000ec

0800c560 <_sbrk_r>:
 800c560:	b538      	push	{r3, r4, r5, lr}
 800c562:	4c06      	ldr	r4, [pc, #24]	; (800c57c <_sbrk_r+0x1c>)
 800c564:	2300      	movs	r3, #0
 800c566:	4605      	mov	r5, r0
 800c568:	4608      	mov	r0, r1
 800c56a:	6023      	str	r3, [r4, #0]
 800c56c:	f7f6 f852 	bl	8002614 <_sbrk>
 800c570:	1c43      	adds	r3, r0, #1
 800c572:	d102      	bne.n	800c57a <_sbrk_r+0x1a>
 800c574:	6823      	ldr	r3, [r4, #0]
 800c576:	b103      	cbz	r3, 800c57a <_sbrk_r+0x1a>
 800c578:	602b      	str	r3, [r5, #0]
 800c57a:	bd38      	pop	{r3, r4, r5, pc}
 800c57c:	20005fcc 	.word	0x20005fcc

0800c580 <__swbuf_r>:
 800c580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c582:	460e      	mov	r6, r1
 800c584:	4614      	mov	r4, r2
 800c586:	4605      	mov	r5, r0
 800c588:	b118      	cbz	r0, 800c592 <__swbuf_r+0x12>
 800c58a:	6983      	ldr	r3, [r0, #24]
 800c58c:	b90b      	cbnz	r3, 800c592 <__swbuf_r+0x12>
 800c58e:	f000 f9af 	bl	800c8f0 <__sinit>
 800c592:	4b21      	ldr	r3, [pc, #132]	; (800c618 <__swbuf_r+0x98>)
 800c594:	429c      	cmp	r4, r3
 800c596:	d12a      	bne.n	800c5ee <__swbuf_r+0x6e>
 800c598:	686c      	ldr	r4, [r5, #4]
 800c59a:	69a3      	ldr	r3, [r4, #24]
 800c59c:	60a3      	str	r3, [r4, #8]
 800c59e:	89a3      	ldrh	r3, [r4, #12]
 800c5a0:	071a      	lsls	r2, r3, #28
 800c5a2:	d52e      	bpl.n	800c602 <__swbuf_r+0x82>
 800c5a4:	6923      	ldr	r3, [r4, #16]
 800c5a6:	b363      	cbz	r3, 800c602 <__swbuf_r+0x82>
 800c5a8:	6923      	ldr	r3, [r4, #16]
 800c5aa:	6820      	ldr	r0, [r4, #0]
 800c5ac:	1ac0      	subs	r0, r0, r3
 800c5ae:	6963      	ldr	r3, [r4, #20]
 800c5b0:	b2f6      	uxtb	r6, r6
 800c5b2:	4283      	cmp	r3, r0
 800c5b4:	4637      	mov	r7, r6
 800c5b6:	dc04      	bgt.n	800c5c2 <__swbuf_r+0x42>
 800c5b8:	4621      	mov	r1, r4
 800c5ba:	4628      	mov	r0, r5
 800c5bc:	f000 f92e 	bl	800c81c <_fflush_r>
 800c5c0:	bb28      	cbnz	r0, 800c60e <__swbuf_r+0x8e>
 800c5c2:	68a3      	ldr	r3, [r4, #8]
 800c5c4:	3b01      	subs	r3, #1
 800c5c6:	60a3      	str	r3, [r4, #8]
 800c5c8:	6823      	ldr	r3, [r4, #0]
 800c5ca:	1c5a      	adds	r2, r3, #1
 800c5cc:	6022      	str	r2, [r4, #0]
 800c5ce:	701e      	strb	r6, [r3, #0]
 800c5d0:	6963      	ldr	r3, [r4, #20]
 800c5d2:	3001      	adds	r0, #1
 800c5d4:	4283      	cmp	r3, r0
 800c5d6:	d004      	beq.n	800c5e2 <__swbuf_r+0x62>
 800c5d8:	89a3      	ldrh	r3, [r4, #12]
 800c5da:	07db      	lsls	r3, r3, #31
 800c5dc:	d519      	bpl.n	800c612 <__swbuf_r+0x92>
 800c5de:	2e0a      	cmp	r6, #10
 800c5e0:	d117      	bne.n	800c612 <__swbuf_r+0x92>
 800c5e2:	4621      	mov	r1, r4
 800c5e4:	4628      	mov	r0, r5
 800c5e6:	f000 f919 	bl	800c81c <_fflush_r>
 800c5ea:	b190      	cbz	r0, 800c612 <__swbuf_r+0x92>
 800c5ec:	e00f      	b.n	800c60e <__swbuf_r+0x8e>
 800c5ee:	4b0b      	ldr	r3, [pc, #44]	; (800c61c <__swbuf_r+0x9c>)
 800c5f0:	429c      	cmp	r4, r3
 800c5f2:	d101      	bne.n	800c5f8 <__swbuf_r+0x78>
 800c5f4:	68ac      	ldr	r4, [r5, #8]
 800c5f6:	e7d0      	b.n	800c59a <__swbuf_r+0x1a>
 800c5f8:	4b09      	ldr	r3, [pc, #36]	; (800c620 <__swbuf_r+0xa0>)
 800c5fa:	429c      	cmp	r4, r3
 800c5fc:	bf08      	it	eq
 800c5fe:	68ec      	ldreq	r4, [r5, #12]
 800c600:	e7cb      	b.n	800c59a <__swbuf_r+0x1a>
 800c602:	4621      	mov	r1, r4
 800c604:	4628      	mov	r0, r5
 800c606:	f000 f80d 	bl	800c624 <__swsetup_r>
 800c60a:	2800      	cmp	r0, #0
 800c60c:	d0cc      	beq.n	800c5a8 <__swbuf_r+0x28>
 800c60e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c612:	4638      	mov	r0, r7
 800c614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c616:	bf00      	nop
 800c618:	0800d074 	.word	0x0800d074
 800c61c:	0800d094 	.word	0x0800d094
 800c620:	0800d054 	.word	0x0800d054

0800c624 <__swsetup_r>:
 800c624:	4b32      	ldr	r3, [pc, #200]	; (800c6f0 <__swsetup_r+0xcc>)
 800c626:	b570      	push	{r4, r5, r6, lr}
 800c628:	681d      	ldr	r5, [r3, #0]
 800c62a:	4606      	mov	r6, r0
 800c62c:	460c      	mov	r4, r1
 800c62e:	b125      	cbz	r5, 800c63a <__swsetup_r+0x16>
 800c630:	69ab      	ldr	r3, [r5, #24]
 800c632:	b913      	cbnz	r3, 800c63a <__swsetup_r+0x16>
 800c634:	4628      	mov	r0, r5
 800c636:	f000 f95b 	bl	800c8f0 <__sinit>
 800c63a:	4b2e      	ldr	r3, [pc, #184]	; (800c6f4 <__swsetup_r+0xd0>)
 800c63c:	429c      	cmp	r4, r3
 800c63e:	d10f      	bne.n	800c660 <__swsetup_r+0x3c>
 800c640:	686c      	ldr	r4, [r5, #4]
 800c642:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c646:	b29a      	uxth	r2, r3
 800c648:	0715      	lsls	r5, r2, #28
 800c64a:	d42c      	bmi.n	800c6a6 <__swsetup_r+0x82>
 800c64c:	06d0      	lsls	r0, r2, #27
 800c64e:	d411      	bmi.n	800c674 <__swsetup_r+0x50>
 800c650:	2209      	movs	r2, #9
 800c652:	6032      	str	r2, [r6, #0]
 800c654:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c658:	81a3      	strh	r3, [r4, #12]
 800c65a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c65e:	e03e      	b.n	800c6de <__swsetup_r+0xba>
 800c660:	4b25      	ldr	r3, [pc, #148]	; (800c6f8 <__swsetup_r+0xd4>)
 800c662:	429c      	cmp	r4, r3
 800c664:	d101      	bne.n	800c66a <__swsetup_r+0x46>
 800c666:	68ac      	ldr	r4, [r5, #8]
 800c668:	e7eb      	b.n	800c642 <__swsetup_r+0x1e>
 800c66a:	4b24      	ldr	r3, [pc, #144]	; (800c6fc <__swsetup_r+0xd8>)
 800c66c:	429c      	cmp	r4, r3
 800c66e:	bf08      	it	eq
 800c670:	68ec      	ldreq	r4, [r5, #12]
 800c672:	e7e6      	b.n	800c642 <__swsetup_r+0x1e>
 800c674:	0751      	lsls	r1, r2, #29
 800c676:	d512      	bpl.n	800c69e <__swsetup_r+0x7a>
 800c678:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c67a:	b141      	cbz	r1, 800c68e <__swsetup_r+0x6a>
 800c67c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c680:	4299      	cmp	r1, r3
 800c682:	d002      	beq.n	800c68a <__swsetup_r+0x66>
 800c684:	4630      	mov	r0, r6
 800c686:	f7ff fb97 	bl	800bdb8 <_free_r>
 800c68a:	2300      	movs	r3, #0
 800c68c:	6363      	str	r3, [r4, #52]	; 0x34
 800c68e:	89a3      	ldrh	r3, [r4, #12]
 800c690:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c694:	81a3      	strh	r3, [r4, #12]
 800c696:	2300      	movs	r3, #0
 800c698:	6063      	str	r3, [r4, #4]
 800c69a:	6923      	ldr	r3, [r4, #16]
 800c69c:	6023      	str	r3, [r4, #0]
 800c69e:	89a3      	ldrh	r3, [r4, #12]
 800c6a0:	f043 0308 	orr.w	r3, r3, #8
 800c6a4:	81a3      	strh	r3, [r4, #12]
 800c6a6:	6923      	ldr	r3, [r4, #16]
 800c6a8:	b94b      	cbnz	r3, 800c6be <__swsetup_r+0x9a>
 800c6aa:	89a3      	ldrh	r3, [r4, #12]
 800c6ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c6b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c6b4:	d003      	beq.n	800c6be <__swsetup_r+0x9a>
 800c6b6:	4621      	mov	r1, r4
 800c6b8:	4630      	mov	r0, r6
 800c6ba:	f000 f9c7 	bl	800ca4c <__smakebuf_r>
 800c6be:	89a2      	ldrh	r2, [r4, #12]
 800c6c0:	f012 0301 	ands.w	r3, r2, #1
 800c6c4:	d00c      	beq.n	800c6e0 <__swsetup_r+0xbc>
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	60a3      	str	r3, [r4, #8]
 800c6ca:	6963      	ldr	r3, [r4, #20]
 800c6cc:	425b      	negs	r3, r3
 800c6ce:	61a3      	str	r3, [r4, #24]
 800c6d0:	6923      	ldr	r3, [r4, #16]
 800c6d2:	b953      	cbnz	r3, 800c6ea <__swsetup_r+0xc6>
 800c6d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c6d8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800c6dc:	d1ba      	bne.n	800c654 <__swsetup_r+0x30>
 800c6de:	bd70      	pop	{r4, r5, r6, pc}
 800c6e0:	0792      	lsls	r2, r2, #30
 800c6e2:	bf58      	it	pl
 800c6e4:	6963      	ldrpl	r3, [r4, #20]
 800c6e6:	60a3      	str	r3, [r4, #8]
 800c6e8:	e7f2      	b.n	800c6d0 <__swsetup_r+0xac>
 800c6ea:	2000      	movs	r0, #0
 800c6ec:	e7f7      	b.n	800c6de <__swsetup_r+0xba>
 800c6ee:	bf00      	nop
 800c6f0:	200000ec 	.word	0x200000ec
 800c6f4:	0800d074 	.word	0x0800d074
 800c6f8:	0800d094 	.word	0x0800d094
 800c6fc:	0800d054 	.word	0x0800d054

0800c700 <abort>:
 800c700:	b508      	push	{r3, lr}
 800c702:	2006      	movs	r0, #6
 800c704:	f000 fa0c 	bl	800cb20 <raise>
 800c708:	2001      	movs	r0, #1
 800c70a:	f7f5 ff63 	bl	80025d4 <_exit>
	...

0800c710 <__sflush_r>:
 800c710:	898a      	ldrh	r2, [r1, #12]
 800c712:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c716:	4605      	mov	r5, r0
 800c718:	0710      	lsls	r0, r2, #28
 800c71a:	460c      	mov	r4, r1
 800c71c:	d458      	bmi.n	800c7d0 <__sflush_r+0xc0>
 800c71e:	684b      	ldr	r3, [r1, #4]
 800c720:	2b00      	cmp	r3, #0
 800c722:	dc05      	bgt.n	800c730 <__sflush_r+0x20>
 800c724:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c726:	2b00      	cmp	r3, #0
 800c728:	dc02      	bgt.n	800c730 <__sflush_r+0x20>
 800c72a:	2000      	movs	r0, #0
 800c72c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c730:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c732:	2e00      	cmp	r6, #0
 800c734:	d0f9      	beq.n	800c72a <__sflush_r+0x1a>
 800c736:	2300      	movs	r3, #0
 800c738:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c73c:	682f      	ldr	r7, [r5, #0]
 800c73e:	6a21      	ldr	r1, [r4, #32]
 800c740:	602b      	str	r3, [r5, #0]
 800c742:	d032      	beq.n	800c7aa <__sflush_r+0x9a>
 800c744:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c746:	89a3      	ldrh	r3, [r4, #12]
 800c748:	075a      	lsls	r2, r3, #29
 800c74a:	d505      	bpl.n	800c758 <__sflush_r+0x48>
 800c74c:	6863      	ldr	r3, [r4, #4]
 800c74e:	1ac0      	subs	r0, r0, r3
 800c750:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c752:	b10b      	cbz	r3, 800c758 <__sflush_r+0x48>
 800c754:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c756:	1ac0      	subs	r0, r0, r3
 800c758:	2300      	movs	r3, #0
 800c75a:	4602      	mov	r2, r0
 800c75c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c75e:	6a21      	ldr	r1, [r4, #32]
 800c760:	4628      	mov	r0, r5
 800c762:	47b0      	blx	r6
 800c764:	1c43      	adds	r3, r0, #1
 800c766:	89a3      	ldrh	r3, [r4, #12]
 800c768:	d106      	bne.n	800c778 <__sflush_r+0x68>
 800c76a:	6829      	ldr	r1, [r5, #0]
 800c76c:	291d      	cmp	r1, #29
 800c76e:	d848      	bhi.n	800c802 <__sflush_r+0xf2>
 800c770:	4a29      	ldr	r2, [pc, #164]	; (800c818 <__sflush_r+0x108>)
 800c772:	40ca      	lsrs	r2, r1
 800c774:	07d6      	lsls	r6, r2, #31
 800c776:	d544      	bpl.n	800c802 <__sflush_r+0xf2>
 800c778:	2200      	movs	r2, #0
 800c77a:	6062      	str	r2, [r4, #4]
 800c77c:	04d9      	lsls	r1, r3, #19
 800c77e:	6922      	ldr	r2, [r4, #16]
 800c780:	6022      	str	r2, [r4, #0]
 800c782:	d504      	bpl.n	800c78e <__sflush_r+0x7e>
 800c784:	1c42      	adds	r2, r0, #1
 800c786:	d101      	bne.n	800c78c <__sflush_r+0x7c>
 800c788:	682b      	ldr	r3, [r5, #0]
 800c78a:	b903      	cbnz	r3, 800c78e <__sflush_r+0x7e>
 800c78c:	6560      	str	r0, [r4, #84]	; 0x54
 800c78e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c790:	602f      	str	r7, [r5, #0]
 800c792:	2900      	cmp	r1, #0
 800c794:	d0c9      	beq.n	800c72a <__sflush_r+0x1a>
 800c796:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c79a:	4299      	cmp	r1, r3
 800c79c:	d002      	beq.n	800c7a4 <__sflush_r+0x94>
 800c79e:	4628      	mov	r0, r5
 800c7a0:	f7ff fb0a 	bl	800bdb8 <_free_r>
 800c7a4:	2000      	movs	r0, #0
 800c7a6:	6360      	str	r0, [r4, #52]	; 0x34
 800c7a8:	e7c0      	b.n	800c72c <__sflush_r+0x1c>
 800c7aa:	2301      	movs	r3, #1
 800c7ac:	4628      	mov	r0, r5
 800c7ae:	47b0      	blx	r6
 800c7b0:	1c41      	adds	r1, r0, #1
 800c7b2:	d1c8      	bne.n	800c746 <__sflush_r+0x36>
 800c7b4:	682b      	ldr	r3, [r5, #0]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d0c5      	beq.n	800c746 <__sflush_r+0x36>
 800c7ba:	2b1d      	cmp	r3, #29
 800c7bc:	d001      	beq.n	800c7c2 <__sflush_r+0xb2>
 800c7be:	2b16      	cmp	r3, #22
 800c7c0:	d101      	bne.n	800c7c6 <__sflush_r+0xb6>
 800c7c2:	602f      	str	r7, [r5, #0]
 800c7c4:	e7b1      	b.n	800c72a <__sflush_r+0x1a>
 800c7c6:	89a3      	ldrh	r3, [r4, #12]
 800c7c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c7cc:	81a3      	strh	r3, [r4, #12]
 800c7ce:	e7ad      	b.n	800c72c <__sflush_r+0x1c>
 800c7d0:	690f      	ldr	r7, [r1, #16]
 800c7d2:	2f00      	cmp	r7, #0
 800c7d4:	d0a9      	beq.n	800c72a <__sflush_r+0x1a>
 800c7d6:	0793      	lsls	r3, r2, #30
 800c7d8:	680e      	ldr	r6, [r1, #0]
 800c7da:	bf08      	it	eq
 800c7dc:	694b      	ldreq	r3, [r1, #20]
 800c7de:	600f      	str	r7, [r1, #0]
 800c7e0:	bf18      	it	ne
 800c7e2:	2300      	movne	r3, #0
 800c7e4:	eba6 0807 	sub.w	r8, r6, r7
 800c7e8:	608b      	str	r3, [r1, #8]
 800c7ea:	f1b8 0f00 	cmp.w	r8, #0
 800c7ee:	dd9c      	ble.n	800c72a <__sflush_r+0x1a>
 800c7f0:	4643      	mov	r3, r8
 800c7f2:	463a      	mov	r2, r7
 800c7f4:	6a21      	ldr	r1, [r4, #32]
 800c7f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c7f8:	4628      	mov	r0, r5
 800c7fa:	47b0      	blx	r6
 800c7fc:	2800      	cmp	r0, #0
 800c7fe:	dc06      	bgt.n	800c80e <__sflush_r+0xfe>
 800c800:	89a3      	ldrh	r3, [r4, #12]
 800c802:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c806:	81a3      	strh	r3, [r4, #12]
 800c808:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c80c:	e78e      	b.n	800c72c <__sflush_r+0x1c>
 800c80e:	4407      	add	r7, r0
 800c810:	eba8 0800 	sub.w	r8, r8, r0
 800c814:	e7e9      	b.n	800c7ea <__sflush_r+0xda>
 800c816:	bf00      	nop
 800c818:	20400001 	.word	0x20400001

0800c81c <_fflush_r>:
 800c81c:	b538      	push	{r3, r4, r5, lr}
 800c81e:	690b      	ldr	r3, [r1, #16]
 800c820:	4605      	mov	r5, r0
 800c822:	460c      	mov	r4, r1
 800c824:	b1db      	cbz	r3, 800c85e <_fflush_r+0x42>
 800c826:	b118      	cbz	r0, 800c830 <_fflush_r+0x14>
 800c828:	6983      	ldr	r3, [r0, #24]
 800c82a:	b90b      	cbnz	r3, 800c830 <_fflush_r+0x14>
 800c82c:	f000 f860 	bl	800c8f0 <__sinit>
 800c830:	4b0c      	ldr	r3, [pc, #48]	; (800c864 <_fflush_r+0x48>)
 800c832:	429c      	cmp	r4, r3
 800c834:	d109      	bne.n	800c84a <_fflush_r+0x2e>
 800c836:	686c      	ldr	r4, [r5, #4]
 800c838:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c83c:	b17b      	cbz	r3, 800c85e <_fflush_r+0x42>
 800c83e:	4621      	mov	r1, r4
 800c840:	4628      	mov	r0, r5
 800c842:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c846:	f7ff bf63 	b.w	800c710 <__sflush_r>
 800c84a:	4b07      	ldr	r3, [pc, #28]	; (800c868 <_fflush_r+0x4c>)
 800c84c:	429c      	cmp	r4, r3
 800c84e:	d101      	bne.n	800c854 <_fflush_r+0x38>
 800c850:	68ac      	ldr	r4, [r5, #8]
 800c852:	e7f1      	b.n	800c838 <_fflush_r+0x1c>
 800c854:	4b05      	ldr	r3, [pc, #20]	; (800c86c <_fflush_r+0x50>)
 800c856:	429c      	cmp	r4, r3
 800c858:	bf08      	it	eq
 800c85a:	68ec      	ldreq	r4, [r5, #12]
 800c85c:	e7ec      	b.n	800c838 <_fflush_r+0x1c>
 800c85e:	2000      	movs	r0, #0
 800c860:	bd38      	pop	{r3, r4, r5, pc}
 800c862:	bf00      	nop
 800c864:	0800d074 	.word	0x0800d074
 800c868:	0800d094 	.word	0x0800d094
 800c86c:	0800d054 	.word	0x0800d054

0800c870 <std>:
 800c870:	2300      	movs	r3, #0
 800c872:	b510      	push	{r4, lr}
 800c874:	4604      	mov	r4, r0
 800c876:	e9c0 3300 	strd	r3, r3, [r0]
 800c87a:	6083      	str	r3, [r0, #8]
 800c87c:	8181      	strh	r1, [r0, #12]
 800c87e:	6643      	str	r3, [r0, #100]	; 0x64
 800c880:	81c2      	strh	r2, [r0, #14]
 800c882:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c886:	6183      	str	r3, [r0, #24]
 800c888:	4619      	mov	r1, r3
 800c88a:	2208      	movs	r2, #8
 800c88c:	305c      	adds	r0, #92	; 0x5c
 800c88e:	f7ff fa8a 	bl	800bda6 <memset>
 800c892:	4b05      	ldr	r3, [pc, #20]	; (800c8a8 <std+0x38>)
 800c894:	6263      	str	r3, [r4, #36]	; 0x24
 800c896:	4b05      	ldr	r3, [pc, #20]	; (800c8ac <std+0x3c>)
 800c898:	62a3      	str	r3, [r4, #40]	; 0x28
 800c89a:	4b05      	ldr	r3, [pc, #20]	; (800c8b0 <std+0x40>)
 800c89c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c89e:	4b05      	ldr	r3, [pc, #20]	; (800c8b4 <std+0x44>)
 800c8a0:	6224      	str	r4, [r4, #32]
 800c8a2:	6323      	str	r3, [r4, #48]	; 0x30
 800c8a4:	bd10      	pop	{r4, pc}
 800c8a6:	bf00      	nop
 800c8a8:	0800cb59 	.word	0x0800cb59
 800c8ac:	0800cb7b 	.word	0x0800cb7b
 800c8b0:	0800cbb3 	.word	0x0800cbb3
 800c8b4:	0800cbd7 	.word	0x0800cbd7

0800c8b8 <_cleanup_r>:
 800c8b8:	4901      	ldr	r1, [pc, #4]	; (800c8c0 <_cleanup_r+0x8>)
 800c8ba:	f000 b885 	b.w	800c9c8 <_fwalk_reent>
 800c8be:	bf00      	nop
 800c8c0:	0800c81d 	.word	0x0800c81d

0800c8c4 <__sfmoreglue>:
 800c8c4:	b570      	push	{r4, r5, r6, lr}
 800c8c6:	1e4a      	subs	r2, r1, #1
 800c8c8:	2568      	movs	r5, #104	; 0x68
 800c8ca:	4355      	muls	r5, r2
 800c8cc:	460e      	mov	r6, r1
 800c8ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c8d2:	f7ff fabf 	bl	800be54 <_malloc_r>
 800c8d6:	4604      	mov	r4, r0
 800c8d8:	b140      	cbz	r0, 800c8ec <__sfmoreglue+0x28>
 800c8da:	2100      	movs	r1, #0
 800c8dc:	e9c0 1600 	strd	r1, r6, [r0]
 800c8e0:	300c      	adds	r0, #12
 800c8e2:	60a0      	str	r0, [r4, #8]
 800c8e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c8e8:	f7ff fa5d 	bl	800bda6 <memset>
 800c8ec:	4620      	mov	r0, r4
 800c8ee:	bd70      	pop	{r4, r5, r6, pc}

0800c8f0 <__sinit>:
 800c8f0:	6983      	ldr	r3, [r0, #24]
 800c8f2:	b510      	push	{r4, lr}
 800c8f4:	4604      	mov	r4, r0
 800c8f6:	bb33      	cbnz	r3, 800c946 <__sinit+0x56>
 800c8f8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800c8fc:	6503      	str	r3, [r0, #80]	; 0x50
 800c8fe:	4b12      	ldr	r3, [pc, #72]	; (800c948 <__sinit+0x58>)
 800c900:	4a12      	ldr	r2, [pc, #72]	; (800c94c <__sinit+0x5c>)
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	6282      	str	r2, [r0, #40]	; 0x28
 800c906:	4298      	cmp	r0, r3
 800c908:	bf04      	itt	eq
 800c90a:	2301      	moveq	r3, #1
 800c90c:	6183      	streq	r3, [r0, #24]
 800c90e:	f000 f81f 	bl	800c950 <__sfp>
 800c912:	6060      	str	r0, [r4, #4]
 800c914:	4620      	mov	r0, r4
 800c916:	f000 f81b 	bl	800c950 <__sfp>
 800c91a:	60a0      	str	r0, [r4, #8]
 800c91c:	4620      	mov	r0, r4
 800c91e:	f000 f817 	bl	800c950 <__sfp>
 800c922:	2200      	movs	r2, #0
 800c924:	60e0      	str	r0, [r4, #12]
 800c926:	2104      	movs	r1, #4
 800c928:	6860      	ldr	r0, [r4, #4]
 800c92a:	f7ff ffa1 	bl	800c870 <std>
 800c92e:	2201      	movs	r2, #1
 800c930:	2109      	movs	r1, #9
 800c932:	68a0      	ldr	r0, [r4, #8]
 800c934:	f7ff ff9c 	bl	800c870 <std>
 800c938:	2202      	movs	r2, #2
 800c93a:	2112      	movs	r1, #18
 800c93c:	68e0      	ldr	r0, [r4, #12]
 800c93e:	f7ff ff97 	bl	800c870 <std>
 800c942:	2301      	movs	r3, #1
 800c944:	61a3      	str	r3, [r4, #24]
 800c946:	bd10      	pop	{r4, pc}
 800c948:	0800d01c 	.word	0x0800d01c
 800c94c:	0800c8b9 	.word	0x0800c8b9

0800c950 <__sfp>:
 800c950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c952:	4b1b      	ldr	r3, [pc, #108]	; (800c9c0 <__sfp+0x70>)
 800c954:	681e      	ldr	r6, [r3, #0]
 800c956:	69b3      	ldr	r3, [r6, #24]
 800c958:	4607      	mov	r7, r0
 800c95a:	b913      	cbnz	r3, 800c962 <__sfp+0x12>
 800c95c:	4630      	mov	r0, r6
 800c95e:	f7ff ffc7 	bl	800c8f0 <__sinit>
 800c962:	3648      	adds	r6, #72	; 0x48
 800c964:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c968:	3b01      	subs	r3, #1
 800c96a:	d503      	bpl.n	800c974 <__sfp+0x24>
 800c96c:	6833      	ldr	r3, [r6, #0]
 800c96e:	b133      	cbz	r3, 800c97e <__sfp+0x2e>
 800c970:	6836      	ldr	r6, [r6, #0]
 800c972:	e7f7      	b.n	800c964 <__sfp+0x14>
 800c974:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c978:	b16d      	cbz	r5, 800c996 <__sfp+0x46>
 800c97a:	3468      	adds	r4, #104	; 0x68
 800c97c:	e7f4      	b.n	800c968 <__sfp+0x18>
 800c97e:	2104      	movs	r1, #4
 800c980:	4638      	mov	r0, r7
 800c982:	f7ff ff9f 	bl	800c8c4 <__sfmoreglue>
 800c986:	6030      	str	r0, [r6, #0]
 800c988:	2800      	cmp	r0, #0
 800c98a:	d1f1      	bne.n	800c970 <__sfp+0x20>
 800c98c:	230c      	movs	r3, #12
 800c98e:	603b      	str	r3, [r7, #0]
 800c990:	4604      	mov	r4, r0
 800c992:	4620      	mov	r0, r4
 800c994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c996:	4b0b      	ldr	r3, [pc, #44]	; (800c9c4 <__sfp+0x74>)
 800c998:	6665      	str	r5, [r4, #100]	; 0x64
 800c99a:	e9c4 5500 	strd	r5, r5, [r4]
 800c99e:	60a5      	str	r5, [r4, #8]
 800c9a0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800c9a4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800c9a8:	2208      	movs	r2, #8
 800c9aa:	4629      	mov	r1, r5
 800c9ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c9b0:	f7ff f9f9 	bl	800bda6 <memset>
 800c9b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c9b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c9bc:	e7e9      	b.n	800c992 <__sfp+0x42>
 800c9be:	bf00      	nop
 800c9c0:	0800d01c 	.word	0x0800d01c
 800c9c4:	ffff0001 	.word	0xffff0001

0800c9c8 <_fwalk_reent>:
 800c9c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c9cc:	4680      	mov	r8, r0
 800c9ce:	4689      	mov	r9, r1
 800c9d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c9d4:	2600      	movs	r6, #0
 800c9d6:	b914      	cbnz	r4, 800c9de <_fwalk_reent+0x16>
 800c9d8:	4630      	mov	r0, r6
 800c9da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9de:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800c9e2:	3f01      	subs	r7, #1
 800c9e4:	d501      	bpl.n	800c9ea <_fwalk_reent+0x22>
 800c9e6:	6824      	ldr	r4, [r4, #0]
 800c9e8:	e7f5      	b.n	800c9d6 <_fwalk_reent+0xe>
 800c9ea:	89ab      	ldrh	r3, [r5, #12]
 800c9ec:	2b01      	cmp	r3, #1
 800c9ee:	d907      	bls.n	800ca00 <_fwalk_reent+0x38>
 800c9f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c9f4:	3301      	adds	r3, #1
 800c9f6:	d003      	beq.n	800ca00 <_fwalk_reent+0x38>
 800c9f8:	4629      	mov	r1, r5
 800c9fa:	4640      	mov	r0, r8
 800c9fc:	47c8      	blx	r9
 800c9fe:	4306      	orrs	r6, r0
 800ca00:	3568      	adds	r5, #104	; 0x68
 800ca02:	e7ee      	b.n	800c9e2 <_fwalk_reent+0x1a>

0800ca04 <__swhatbuf_r>:
 800ca04:	b570      	push	{r4, r5, r6, lr}
 800ca06:	460e      	mov	r6, r1
 800ca08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca0c:	2900      	cmp	r1, #0
 800ca0e:	b096      	sub	sp, #88	; 0x58
 800ca10:	4614      	mov	r4, r2
 800ca12:	461d      	mov	r5, r3
 800ca14:	da07      	bge.n	800ca26 <__swhatbuf_r+0x22>
 800ca16:	2300      	movs	r3, #0
 800ca18:	602b      	str	r3, [r5, #0]
 800ca1a:	89b3      	ldrh	r3, [r6, #12]
 800ca1c:	061a      	lsls	r2, r3, #24
 800ca1e:	d410      	bmi.n	800ca42 <__swhatbuf_r+0x3e>
 800ca20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca24:	e00e      	b.n	800ca44 <__swhatbuf_r+0x40>
 800ca26:	466a      	mov	r2, sp
 800ca28:	f000 f8fc 	bl	800cc24 <_fstat_r>
 800ca2c:	2800      	cmp	r0, #0
 800ca2e:	dbf2      	blt.n	800ca16 <__swhatbuf_r+0x12>
 800ca30:	9a01      	ldr	r2, [sp, #4]
 800ca32:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ca36:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ca3a:	425a      	negs	r2, r3
 800ca3c:	415a      	adcs	r2, r3
 800ca3e:	602a      	str	r2, [r5, #0]
 800ca40:	e7ee      	b.n	800ca20 <__swhatbuf_r+0x1c>
 800ca42:	2340      	movs	r3, #64	; 0x40
 800ca44:	2000      	movs	r0, #0
 800ca46:	6023      	str	r3, [r4, #0]
 800ca48:	b016      	add	sp, #88	; 0x58
 800ca4a:	bd70      	pop	{r4, r5, r6, pc}

0800ca4c <__smakebuf_r>:
 800ca4c:	898b      	ldrh	r3, [r1, #12]
 800ca4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ca50:	079d      	lsls	r5, r3, #30
 800ca52:	4606      	mov	r6, r0
 800ca54:	460c      	mov	r4, r1
 800ca56:	d507      	bpl.n	800ca68 <__smakebuf_r+0x1c>
 800ca58:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ca5c:	6023      	str	r3, [r4, #0]
 800ca5e:	6123      	str	r3, [r4, #16]
 800ca60:	2301      	movs	r3, #1
 800ca62:	6163      	str	r3, [r4, #20]
 800ca64:	b002      	add	sp, #8
 800ca66:	bd70      	pop	{r4, r5, r6, pc}
 800ca68:	ab01      	add	r3, sp, #4
 800ca6a:	466a      	mov	r2, sp
 800ca6c:	f7ff ffca 	bl	800ca04 <__swhatbuf_r>
 800ca70:	9900      	ldr	r1, [sp, #0]
 800ca72:	4605      	mov	r5, r0
 800ca74:	4630      	mov	r0, r6
 800ca76:	f7ff f9ed 	bl	800be54 <_malloc_r>
 800ca7a:	b948      	cbnz	r0, 800ca90 <__smakebuf_r+0x44>
 800ca7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca80:	059a      	lsls	r2, r3, #22
 800ca82:	d4ef      	bmi.n	800ca64 <__smakebuf_r+0x18>
 800ca84:	f023 0303 	bic.w	r3, r3, #3
 800ca88:	f043 0302 	orr.w	r3, r3, #2
 800ca8c:	81a3      	strh	r3, [r4, #12]
 800ca8e:	e7e3      	b.n	800ca58 <__smakebuf_r+0xc>
 800ca90:	4b0d      	ldr	r3, [pc, #52]	; (800cac8 <__smakebuf_r+0x7c>)
 800ca92:	62b3      	str	r3, [r6, #40]	; 0x28
 800ca94:	89a3      	ldrh	r3, [r4, #12]
 800ca96:	6020      	str	r0, [r4, #0]
 800ca98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca9c:	81a3      	strh	r3, [r4, #12]
 800ca9e:	9b00      	ldr	r3, [sp, #0]
 800caa0:	6163      	str	r3, [r4, #20]
 800caa2:	9b01      	ldr	r3, [sp, #4]
 800caa4:	6120      	str	r0, [r4, #16]
 800caa6:	b15b      	cbz	r3, 800cac0 <__smakebuf_r+0x74>
 800caa8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800caac:	4630      	mov	r0, r6
 800caae:	f000 f8cb 	bl	800cc48 <_isatty_r>
 800cab2:	b128      	cbz	r0, 800cac0 <__smakebuf_r+0x74>
 800cab4:	89a3      	ldrh	r3, [r4, #12]
 800cab6:	f023 0303 	bic.w	r3, r3, #3
 800caba:	f043 0301 	orr.w	r3, r3, #1
 800cabe:	81a3      	strh	r3, [r4, #12]
 800cac0:	89a3      	ldrh	r3, [r4, #12]
 800cac2:	431d      	orrs	r5, r3
 800cac4:	81a5      	strh	r5, [r4, #12]
 800cac6:	e7cd      	b.n	800ca64 <__smakebuf_r+0x18>
 800cac8:	0800c8b9 	.word	0x0800c8b9

0800cacc <__malloc_lock>:
 800cacc:	4770      	bx	lr

0800cace <__malloc_unlock>:
 800cace:	4770      	bx	lr

0800cad0 <_raise_r>:
 800cad0:	291f      	cmp	r1, #31
 800cad2:	b538      	push	{r3, r4, r5, lr}
 800cad4:	4604      	mov	r4, r0
 800cad6:	460d      	mov	r5, r1
 800cad8:	d904      	bls.n	800cae4 <_raise_r+0x14>
 800cada:	2316      	movs	r3, #22
 800cadc:	6003      	str	r3, [r0, #0]
 800cade:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cae2:	bd38      	pop	{r3, r4, r5, pc}
 800cae4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cae6:	b112      	cbz	r2, 800caee <_raise_r+0x1e>
 800cae8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800caec:	b94b      	cbnz	r3, 800cb02 <_raise_r+0x32>
 800caee:	4620      	mov	r0, r4
 800caf0:	f000 f830 	bl	800cb54 <_getpid_r>
 800caf4:	462a      	mov	r2, r5
 800caf6:	4601      	mov	r1, r0
 800caf8:	4620      	mov	r0, r4
 800cafa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cafe:	f000 b817 	b.w	800cb30 <_kill_r>
 800cb02:	2b01      	cmp	r3, #1
 800cb04:	d00a      	beq.n	800cb1c <_raise_r+0x4c>
 800cb06:	1c59      	adds	r1, r3, #1
 800cb08:	d103      	bne.n	800cb12 <_raise_r+0x42>
 800cb0a:	2316      	movs	r3, #22
 800cb0c:	6003      	str	r3, [r0, #0]
 800cb0e:	2001      	movs	r0, #1
 800cb10:	e7e7      	b.n	800cae2 <_raise_r+0x12>
 800cb12:	2400      	movs	r4, #0
 800cb14:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cb18:	4628      	mov	r0, r5
 800cb1a:	4798      	blx	r3
 800cb1c:	2000      	movs	r0, #0
 800cb1e:	e7e0      	b.n	800cae2 <_raise_r+0x12>

0800cb20 <raise>:
 800cb20:	4b02      	ldr	r3, [pc, #8]	; (800cb2c <raise+0xc>)
 800cb22:	4601      	mov	r1, r0
 800cb24:	6818      	ldr	r0, [r3, #0]
 800cb26:	f7ff bfd3 	b.w	800cad0 <_raise_r>
 800cb2a:	bf00      	nop
 800cb2c:	200000ec 	.word	0x200000ec

0800cb30 <_kill_r>:
 800cb30:	b538      	push	{r3, r4, r5, lr}
 800cb32:	4c07      	ldr	r4, [pc, #28]	; (800cb50 <_kill_r+0x20>)
 800cb34:	2300      	movs	r3, #0
 800cb36:	4605      	mov	r5, r0
 800cb38:	4608      	mov	r0, r1
 800cb3a:	4611      	mov	r1, r2
 800cb3c:	6023      	str	r3, [r4, #0]
 800cb3e:	f7f5 fd41 	bl	80025c4 <_kill>
 800cb42:	1c43      	adds	r3, r0, #1
 800cb44:	d102      	bne.n	800cb4c <_kill_r+0x1c>
 800cb46:	6823      	ldr	r3, [r4, #0]
 800cb48:	b103      	cbz	r3, 800cb4c <_kill_r+0x1c>
 800cb4a:	602b      	str	r3, [r5, #0]
 800cb4c:	bd38      	pop	{r3, r4, r5, pc}
 800cb4e:	bf00      	nop
 800cb50:	20005fcc 	.word	0x20005fcc

0800cb54 <_getpid_r>:
 800cb54:	f7f5 bd34 	b.w	80025c0 <_getpid>

0800cb58 <__sread>:
 800cb58:	b510      	push	{r4, lr}
 800cb5a:	460c      	mov	r4, r1
 800cb5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb60:	f000 f894 	bl	800cc8c <_read_r>
 800cb64:	2800      	cmp	r0, #0
 800cb66:	bfab      	itete	ge
 800cb68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cb6a:	89a3      	ldrhlt	r3, [r4, #12]
 800cb6c:	181b      	addge	r3, r3, r0
 800cb6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cb72:	bfac      	ite	ge
 800cb74:	6563      	strge	r3, [r4, #84]	; 0x54
 800cb76:	81a3      	strhlt	r3, [r4, #12]
 800cb78:	bd10      	pop	{r4, pc}

0800cb7a <__swrite>:
 800cb7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb7e:	461f      	mov	r7, r3
 800cb80:	898b      	ldrh	r3, [r1, #12]
 800cb82:	05db      	lsls	r3, r3, #23
 800cb84:	4605      	mov	r5, r0
 800cb86:	460c      	mov	r4, r1
 800cb88:	4616      	mov	r6, r2
 800cb8a:	d505      	bpl.n	800cb98 <__swrite+0x1e>
 800cb8c:	2302      	movs	r3, #2
 800cb8e:	2200      	movs	r2, #0
 800cb90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb94:	f000 f868 	bl	800cc68 <_lseek_r>
 800cb98:	89a3      	ldrh	r3, [r4, #12]
 800cb9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cb9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cba2:	81a3      	strh	r3, [r4, #12]
 800cba4:	4632      	mov	r2, r6
 800cba6:	463b      	mov	r3, r7
 800cba8:	4628      	mov	r0, r5
 800cbaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cbae:	f000 b817 	b.w	800cbe0 <_write_r>

0800cbb2 <__sseek>:
 800cbb2:	b510      	push	{r4, lr}
 800cbb4:	460c      	mov	r4, r1
 800cbb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbba:	f000 f855 	bl	800cc68 <_lseek_r>
 800cbbe:	1c43      	adds	r3, r0, #1
 800cbc0:	89a3      	ldrh	r3, [r4, #12]
 800cbc2:	bf15      	itete	ne
 800cbc4:	6560      	strne	r0, [r4, #84]	; 0x54
 800cbc6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cbca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cbce:	81a3      	strheq	r3, [r4, #12]
 800cbd0:	bf18      	it	ne
 800cbd2:	81a3      	strhne	r3, [r4, #12]
 800cbd4:	bd10      	pop	{r4, pc}

0800cbd6 <__sclose>:
 800cbd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbda:	f000 b813 	b.w	800cc04 <_close_r>
	...

0800cbe0 <_write_r>:
 800cbe0:	b538      	push	{r3, r4, r5, lr}
 800cbe2:	4c07      	ldr	r4, [pc, #28]	; (800cc00 <_write_r+0x20>)
 800cbe4:	4605      	mov	r5, r0
 800cbe6:	4608      	mov	r0, r1
 800cbe8:	4611      	mov	r1, r2
 800cbea:	2200      	movs	r2, #0
 800cbec:	6022      	str	r2, [r4, #0]
 800cbee:	461a      	mov	r2, r3
 800cbf0:	f7f3 fd86 	bl	8000700 <_write>
 800cbf4:	1c43      	adds	r3, r0, #1
 800cbf6:	d102      	bne.n	800cbfe <_write_r+0x1e>
 800cbf8:	6823      	ldr	r3, [r4, #0]
 800cbfa:	b103      	cbz	r3, 800cbfe <_write_r+0x1e>
 800cbfc:	602b      	str	r3, [r5, #0]
 800cbfe:	bd38      	pop	{r3, r4, r5, pc}
 800cc00:	20005fcc 	.word	0x20005fcc

0800cc04 <_close_r>:
 800cc04:	b538      	push	{r3, r4, r5, lr}
 800cc06:	4c06      	ldr	r4, [pc, #24]	; (800cc20 <_close_r+0x1c>)
 800cc08:	2300      	movs	r3, #0
 800cc0a:	4605      	mov	r5, r0
 800cc0c:	4608      	mov	r0, r1
 800cc0e:	6023      	str	r3, [r4, #0]
 800cc10:	f7f5 fcf4 	bl	80025fc <_close>
 800cc14:	1c43      	adds	r3, r0, #1
 800cc16:	d102      	bne.n	800cc1e <_close_r+0x1a>
 800cc18:	6823      	ldr	r3, [r4, #0]
 800cc1a:	b103      	cbz	r3, 800cc1e <_close_r+0x1a>
 800cc1c:	602b      	str	r3, [r5, #0]
 800cc1e:	bd38      	pop	{r3, r4, r5, pc}
 800cc20:	20005fcc 	.word	0x20005fcc

0800cc24 <_fstat_r>:
 800cc24:	b538      	push	{r3, r4, r5, lr}
 800cc26:	4c07      	ldr	r4, [pc, #28]	; (800cc44 <_fstat_r+0x20>)
 800cc28:	2300      	movs	r3, #0
 800cc2a:	4605      	mov	r5, r0
 800cc2c:	4608      	mov	r0, r1
 800cc2e:	4611      	mov	r1, r2
 800cc30:	6023      	str	r3, [r4, #0]
 800cc32:	f7f5 fce6 	bl	8002602 <_fstat>
 800cc36:	1c43      	adds	r3, r0, #1
 800cc38:	d102      	bne.n	800cc40 <_fstat_r+0x1c>
 800cc3a:	6823      	ldr	r3, [r4, #0]
 800cc3c:	b103      	cbz	r3, 800cc40 <_fstat_r+0x1c>
 800cc3e:	602b      	str	r3, [r5, #0]
 800cc40:	bd38      	pop	{r3, r4, r5, pc}
 800cc42:	bf00      	nop
 800cc44:	20005fcc 	.word	0x20005fcc

0800cc48 <_isatty_r>:
 800cc48:	b538      	push	{r3, r4, r5, lr}
 800cc4a:	4c06      	ldr	r4, [pc, #24]	; (800cc64 <_isatty_r+0x1c>)
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	4605      	mov	r5, r0
 800cc50:	4608      	mov	r0, r1
 800cc52:	6023      	str	r3, [r4, #0]
 800cc54:	f7f5 fcda 	bl	800260c <_isatty>
 800cc58:	1c43      	adds	r3, r0, #1
 800cc5a:	d102      	bne.n	800cc62 <_isatty_r+0x1a>
 800cc5c:	6823      	ldr	r3, [r4, #0]
 800cc5e:	b103      	cbz	r3, 800cc62 <_isatty_r+0x1a>
 800cc60:	602b      	str	r3, [r5, #0]
 800cc62:	bd38      	pop	{r3, r4, r5, pc}
 800cc64:	20005fcc 	.word	0x20005fcc

0800cc68 <_lseek_r>:
 800cc68:	b538      	push	{r3, r4, r5, lr}
 800cc6a:	4c07      	ldr	r4, [pc, #28]	; (800cc88 <_lseek_r+0x20>)
 800cc6c:	4605      	mov	r5, r0
 800cc6e:	4608      	mov	r0, r1
 800cc70:	4611      	mov	r1, r2
 800cc72:	2200      	movs	r2, #0
 800cc74:	6022      	str	r2, [r4, #0]
 800cc76:	461a      	mov	r2, r3
 800cc78:	f7f5 fcca 	bl	8002610 <_lseek>
 800cc7c:	1c43      	adds	r3, r0, #1
 800cc7e:	d102      	bne.n	800cc86 <_lseek_r+0x1e>
 800cc80:	6823      	ldr	r3, [r4, #0]
 800cc82:	b103      	cbz	r3, 800cc86 <_lseek_r+0x1e>
 800cc84:	602b      	str	r3, [r5, #0]
 800cc86:	bd38      	pop	{r3, r4, r5, pc}
 800cc88:	20005fcc 	.word	0x20005fcc

0800cc8c <_read_r>:
 800cc8c:	b538      	push	{r3, r4, r5, lr}
 800cc8e:	4c07      	ldr	r4, [pc, #28]	; (800ccac <_read_r+0x20>)
 800cc90:	4605      	mov	r5, r0
 800cc92:	4608      	mov	r0, r1
 800cc94:	4611      	mov	r1, r2
 800cc96:	2200      	movs	r2, #0
 800cc98:	6022      	str	r2, [r4, #0]
 800cc9a:	461a      	mov	r2, r3
 800cc9c:	f7f5 fca0 	bl	80025e0 <_read>
 800cca0:	1c43      	adds	r3, r0, #1
 800cca2:	d102      	bne.n	800ccaa <_read_r+0x1e>
 800cca4:	6823      	ldr	r3, [r4, #0]
 800cca6:	b103      	cbz	r3, 800ccaa <_read_r+0x1e>
 800cca8:	602b      	str	r3, [r5, #0]
 800ccaa:	bd38      	pop	{r3, r4, r5, pc}
 800ccac:	20005fcc 	.word	0x20005fcc

0800ccb0 <_init>:
 800ccb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccb2:	bf00      	nop
 800ccb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ccb6:	bc08      	pop	{r3}
 800ccb8:	469e      	mov	lr, r3
 800ccba:	4770      	bx	lr

0800ccbc <_fini>:
 800ccbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccbe:	bf00      	nop
 800ccc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ccc2:	bc08      	pop	{r3}
 800ccc4:	469e      	mov	lr, r3
 800ccc6:	4770      	bx	lr
